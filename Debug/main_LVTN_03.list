
main_LVTN_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a95c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  0800aa70  0800aa70  0001aa70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b664  0800b664  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b664  0800b664  0001b664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b66c  0800b66c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b670  0800b670  0001b670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  200001e8  0800b85c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000854  0800b85c  00020854  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016371  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee1  00000000  00000000  00036582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00039468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0003a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a892  00000000  00000000  0003b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016738  00000000  00000000  000561ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091750  00000000  00000000  0006c8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe042  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006548  00000000  00000000  000fe098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa54 	.word	0x0800aa54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800aa54 	.word	0x0800aa54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b9a6 	b.w	8000ecc <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f83e 	bl	8000c08 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2lz>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	4605      	mov	r5, r0
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f7ff ff09 	bl	80009bc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x20>
 8000bac:	4628      	mov	r0, r5
 8000bae:	4621      	mov	r1, r4
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fc7f 	bl	80004d8 <__aeabi_dmul>
 8000bda:	f7ff ff55 	bl	8000a88 <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc00 	bl	80003e4 <__aeabi_ui2d>
 8000be4:	2200      	movs	r2, #0
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <__aeabi_d2ulz+0x38>)
 8000be8:	f7ff fc76 	bl	80004d8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fab8 	bl	8000168 <__aeabi_dsub>
 8000bf8:	f7ff ff46 	bl	8000a88 <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	468e      	mov	lr, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f040 8083 	bne.w	8000d20 <__udivmoddi4+0x118>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4617      	mov	r7, r2
 8000c1e:	d947      	bls.n	8000cb0 <__udivmoddi4+0xa8>
 8000c20:	fab2 f382 	clz	r3, r2
 8000c24:	b14b      	cbz	r3, 8000c3a <__udivmoddi4+0x32>
 8000c26:	f1c3 0120 	rsb	r1, r3, #32
 8000c2a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	409f      	lsls	r7, r3
 8000c34:	ea41 0e0e 	orr.w	lr, r1, lr
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3e:	fbbe fcf8 	udiv	ip, lr, r8
 8000c42:	fa1f f987 	uxth.w	r9, r7
 8000c46:	fb08 e21c 	mls	r2, r8, ip, lr
 8000c4a:	fb0c f009 	mul.w	r0, ip, r9
 8000c4e:	0c21      	lsrs	r1, r4, #16
 8000c50:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x66>
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000c5e:	f080 8118 	bcs.w	8000e92 <__udivmoddi4+0x28a>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f240 8115 	bls.w	8000e92 <__udivmoddi4+0x28a>
 8000c68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c6c:	443a      	add	r2, r7
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	fbb2 f0f8 	udiv	r0, r2, r8
 8000c74:	fb08 2210 	mls	r2, r8, r0, r2
 8000c78:	fb00 f109 	mul.w	r1, r0, r9
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c82:	42a1      	cmp	r1, r4
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8c:	f080 8103 	bcs.w	8000e96 <__udivmoddi4+0x28e>
 8000c90:	42a1      	cmp	r1, r4
 8000c92:	f240 8100 	bls.w	8000e96 <__udivmoddi4+0x28e>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	1a64      	subs	r4, r4, r1
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	e9c6 4200 	strd	r4, r2, [r6]
 8000cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xac>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f382 	clz	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d14f      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cbc:	1a8d      	subs	r5, r1, r2
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cc4:	fa1f f882 	uxth.w	r8, r2
 8000cc8:	fbb5 fcfe 	udiv	ip, r5, lr
 8000ccc:	fb0e 551c 	mls	r5, lr, ip, r5
 8000cd0:	fb08 f00c 	mul.w	r0, r8, ip
 8000cd4:	0c22      	lsrs	r2, r4, #16
 8000cd6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000cda:	42a8      	cmp	r0, r5
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0xe6>
 8000cde:	197d      	adds	r5, r7, r5
 8000ce0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0xe4>
 8000ce6:	42a8      	cmp	r0, r5
 8000ce8:	f200 80e9 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000cec:	4694      	mov	ip, r2
 8000cee:	1a2d      	subs	r5, r5, r0
 8000cf0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000cf4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000cf8:	fb08 f800 	mul.w	r8, r8, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d02:	45a0      	cmp	r8, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x10e>
 8000d06:	193c      	adds	r4, r7, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x10c>
 8000d0e:	45a0      	cmp	r8, r4
 8000d10:	f200 80d9 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 0408 	sub.w	r4, r4, r8
 8000d1a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1e:	e7c0      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	f000 80b1 	beq.w	8000e8c <__udivmoddi4+0x284>
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e9c6 0500 	strd	r0, r5, [r6]
 8000d30:	4608      	mov	r0, r1
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d14b      	bne.n	8000dd6 <__udivmoddi4+0x1ce>
 8000d3e:	42ab      	cmp	r3, r5
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b9 	bhi.w	8000eba <__udivmoddi4+0x2b2>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb65 0303 	sbc.w	r3, r5, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	469e      	mov	lr, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0aa      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000d56:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d5a:	e7a7      	b.n	8000cac <__udivmoddi4+0xa4>
 8000d5c:	409f      	lsls	r7, r3
 8000d5e:	f1c3 0220 	rsb	r2, r3, #32
 8000d62:	40d1      	lsrs	r1, r2
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d74:	fa24 f202 	lsr.w	r2, r4, r2
 8000d78:	409d      	lsls	r5, r3
 8000d7a:	fb00 fc08 	mul.w	ip, r0, r8
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	0c15      	lsrs	r5, r2, #16
 8000d82:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d86:	45ac      	cmp	ip, r5
 8000d88:	fa04 f403 	lsl.w	r4, r4, r3
 8000d8c:	d909      	bls.n	8000da2 <__udivmoddi4+0x19a>
 8000d8e:	197d      	adds	r5, r7, r5
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	f080 808f 	bcs.w	8000eb6 <__udivmoddi4+0x2ae>
 8000d98:	45ac      	cmp	ip, r5
 8000d9a:	f240 808c 	bls.w	8000eb6 <__udivmoddi4+0x2ae>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	443d      	add	r5, r7
 8000da2:	eba5 050c 	sub.w	r5, r5, ip
 8000da6:	fbb5 f1fe 	udiv	r1, r5, lr
 8000daa:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000dae:	fb01 f908 	mul.w	r9, r1, r8
 8000db2:	b295      	uxth	r5, r2
 8000db4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000db8:	45a9      	cmp	r9, r5
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	197d      	adds	r5, r7, r5
 8000dbe:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dc2:	d274      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000dc4:	45a9      	cmp	r9, r5
 8000dc6:	d972      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000dc8:	3902      	subs	r1, #2
 8000dca:	443d      	add	r5, r7
 8000dcc:	eba5 0509 	sub.w	r5, r5, r9
 8000dd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd4:	e778      	b.n	8000cc8 <__udivmoddi4+0xc0>
 8000dd6:	f1c1 0720 	rsb	r7, r1, #32
 8000dda:	408b      	lsls	r3, r1
 8000ddc:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de0:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de4:	fa25 f407 	lsr.w	r4, r5, r7
 8000de8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dec:	fbb4 f9fe 	udiv	r9, r4, lr
 8000df0:	fa1f f88c 	uxth.w	r8, ip
 8000df4:	fb0e 4419 	mls	r4, lr, r9, r4
 8000df8:	fa20 f307 	lsr.w	r3, r0, r7
 8000dfc:	fb09 fa08 	mul.w	sl, r9, r8
 8000e00:	408d      	lsls	r5, r1
 8000e02:	431d      	orrs	r5, r3
 8000e04:	0c2b      	lsrs	r3, r5, #16
 8000e06:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e10:	fa00 f301 	lsl.w	r3, r0, r1
 8000e14:	d909      	bls.n	8000e2a <__udivmoddi4+0x222>
 8000e16:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1e:	d248      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e20:	45a2      	cmp	sl, r4
 8000e22:	d946      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e24:	f1a9 0902 	sub.w	r9, r9, #2
 8000e28:	4464      	add	r4, ip
 8000e2a:	eba4 040a 	sub.w	r4, r4, sl
 8000e2e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e32:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e36:	fb00 fa08 	mul.w	sl, r0, r8
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e40:	45a2      	cmp	sl, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x24e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e4c:	d22d      	bcs.n	8000eaa <__udivmoddi4+0x2a2>
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	d92b      	bls.n	8000eaa <__udivmoddi4+0x2a2>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	eba4 040a 	sub.w	r4, r4, sl
 8000e62:	454c      	cmp	r4, r9
 8000e64:	46c6      	mov	lr, r8
 8000e66:	464d      	mov	r5, r9
 8000e68:	d319      	bcc.n	8000e9e <__udivmoddi4+0x296>
 8000e6a:	d016      	beq.n	8000e9a <__udivmoddi4+0x292>
 8000e6c:	b15e      	cbz	r6, 8000e86 <__udivmoddi4+0x27e>
 8000e6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e72:	eb64 0405 	sbc.w	r4, r4, r5
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c6 7400 	strd	r7, r4, [r6]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e70c      	b.n	8000cac <__udivmoddi4+0xa4>
 8000e92:	468c      	mov	ip, r1
 8000e94:	e6eb      	b.n	8000c6e <__udivmoddi4+0x66>
 8000e96:	4610      	mov	r0, r2
 8000e98:	e6ff      	b.n	8000c9a <__udivmoddi4+0x92>
 8000e9a:	4543      	cmp	r3, r8
 8000e9c:	d2e6      	bcs.n	8000e6c <__udivmoddi4+0x264>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb69 050c 	sbc.w	r5, r9, ip
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7e0      	b.n	8000e6c <__udivmoddi4+0x264>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e7d3      	b.n	8000e56 <__udivmoddi4+0x24e>
 8000eae:	4611      	mov	r1, r2
 8000eb0:	e78c      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e7b9      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e773      	b.n	8000da2 <__udivmoddi4+0x19a>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e749      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebe:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec2:	443d      	add	r5, r7
 8000ec4:	e713      	b.n	8000cee <__udivmoddi4+0xe6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	e724      	b.n	8000d16 <__udivmoddi4+0x10e>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <heightShow>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void heightShow(uint8_t height)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  char chDistance[2];
  sprintf(chDistance, "%d", height);
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4927      	ldr	r1, [pc, #156]	; (8000f80 <heightShow+0xb0>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 f824 	bl	8006f30 <siprintf>
  if(height < 10){
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b09      	cmp	r3, #9
 8000eec:	d82b      	bhi.n	8000f46 <heightShow+0x76>

    ST7565_DrawChar(7*7, 1, chDistance[0], &Font_7x9, 1, 1);
 8000eee:	7b3a      	ldrb	r2, [r7, #12]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <heightShow+0xb4>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	2031      	movs	r0, #49	; 0x31
 8000efe:	f004 fba7 	bl	8005650 <ST7565_DrawChar>
    ST7565_Print(7*7+7, 1, " ", &Font_7x9, 1, 1);
 8000f02:	2301      	movs	r3, #1
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	2301      	movs	r3, #1
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <heightShow+0xb4>)
 8000f0c:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <heightShow+0xb8>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2038      	movs	r0, #56	; 0x38
 8000f12:	f004 fca1 	bl	8005858 <ST7565_Print>
    ST7565_Print(7*7+7*2, 1, " ", &Font_7x9, 1, 1);
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <heightShow+0xb4>)
 8000f20:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <heightShow+0xb8>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	203f      	movs	r0, #63	; 0x3f
 8000f26:	f004 fc97 	bl	8005858 <ST7565_Print>
    HAL_UART_Transmit(&huart2, (uint8_t *)&chDistance[0], 3, 100);
 8000f2a:	f107 010c 	add.w	r1, r7, #12
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	2203      	movs	r2, #3
 8000f32:	4816      	ldr	r0, [pc, #88]	; (8000f8c <heightShow+0xbc>)
 8000f34:	f004 f833 	bl	8004f9e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n", 1, 10);
 8000f38:	230a      	movs	r3, #10
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4914      	ldr	r1, [pc, #80]	; (8000f90 <heightShow+0xc0>)
 8000f3e:	4813      	ldr	r0, [pc, #76]	; (8000f8c <heightShow+0xbc>)
 8000f40:	f004 f82d 	bl	8004f9e <HAL_UART_Transmit>
  else{
    ST7565_Print(7*7, 1, chDistance, &Font_7x9, 1, 1);
    HAL_UART_Transmit(&huart2, (uint8_t *)&chDistance, 3, 100);
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n", 1, 10);
  }
}
 8000f44:	e017      	b.n	8000f76 <heightShow+0xa6>
    ST7565_Print(7*7, 1, chDistance, &Font_7x9, 1, 1);
 8000f46:	f107 020c 	add.w	r2, r7, #12
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <heightShow+0xb4>)
 8000f54:	2101      	movs	r1, #1
 8000f56:	2031      	movs	r0, #49	; 0x31
 8000f58:	f004 fc7e 	bl	8005858 <ST7565_Print>
    HAL_UART_Transmit(&huart2, (uint8_t *)&chDistance, 3, 100);
 8000f5c:	f107 010c 	add.w	r1, r7, #12
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	2203      	movs	r2, #3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <heightShow+0xbc>)
 8000f66:	f004 f81a 	bl	8004f9e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n", 1, 10);
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <heightShow+0xc0>)
 8000f70:	4806      	ldr	r0, [pc, #24]	; (8000f8c <heightShow+0xbc>)
 8000f72:	f004 f814 	bl	8004f9e <HAL_UART_Transmit>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	0800aa70 	.word	0x0800aa70
 8000f84:	2000000c 	.word	0x2000000c
 8000f88:	0800aa74 	.word	0x0800aa74
 8000f8c:	20000400 	.word	0x20000400
 8000f90:	0800aa78 	.word	0x0800aa78

08000f94 <delay>:

void delay (uint16_t time)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <delay+0x2c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000fa6:	bf00      	nop
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <delay+0x2c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3f9      	bcc.n	8000fa8 <delay+0x14>
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	20000360 	.word	0x20000360
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7f1b      	ldrb	r3, [r3, #28]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	f040 8083 	bne.w	80010e0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000fda:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d11a      	bne.n	8001018 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f003 fc8b 	bl	8004900 <HAL_TIM_ReadCapturedValue>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a41      	ldr	r2, [pc, #260]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fee:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a1a      	ldr	r2, [r3, #32]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020a 	bic.w	r2, r2, #10
 8001004:	621a      	str	r2, [r3, #32]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0202 	orr.w	r2, r2, #2
 8001014:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001016:	e063      	b.n	80010e0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d15f      	bne.n	80010e0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001020:	2100      	movs	r1, #0
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f003 fc6c 	bl	8004900 <HAL_TIM_ReadCapturedValue>
 8001028:	4603      	mov	r3, r0
 800102a:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800102c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d907      	bls.n	8001052 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x134>)
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e00f      	b.n	8001072 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d909      	bls.n	8001072 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800106c:	33ff      	adds	r3, #255	; 0xff
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001070:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f9b4 	bl	80003e4 <__aeabi_ui2d>
 800107c:	a31a      	add	r3, pc, #104	; (adr r3, 80010e8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f7ff fa29 	bl	80004d8 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001096:	f7ff fb49 	bl	800072c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fcf1 	bl	8000a88 <__aeabi_d2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010ac:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6a1a      	ldr	r2, [r3, #32]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 020a 	bic.w	r2, r2, #10
 80010c2:	621a      	str	r2, [r3, #32]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6a12      	ldr	r2, [r2, #32]
 80010ce:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0202 	bic.w	r2, r2, #2
 80010de:	60da      	str	r2, [r3, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	b020c49c 	.word	0xb020c49c
 80010ec:	3fa16872 	.word	0x3fa16872
 80010f0:	20000210 	.word	0x20000210
 80010f4:	20000204 	.word	0x20000204
 80010f8:	20000208 	.word	0x20000208
 80010fc:	2000020c 	.word	0x2000020c
 8001100:	20000211 	.word	0x20000211
 8001104:	20000360 	.word	0x20000360

08001108 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001112:	480b      	ldr	r0, [pc, #44]	; (8001140 <HCSR04_Read+0x38>)
 8001114:	f001 f92b 	bl	800236e <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001118:	200a      	movs	r0, #10
 800111a:	f7ff ff3b 	bl	8000f94 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001124:	4806      	ldr	r0, [pc, #24]	; (8001140 <HCSR04_Read+0x38>)
 8001126:	f001 f922 	bl	800236e <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HCSR04_Read+0x3c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HCSR04_Read+0x3c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0202 	orr.w	r2, r2, #2
 8001138:	60da      	str	r2, [r3, #12]
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40010800 	.word	0x40010800
 8001144:	20000360 	.word	0x20000360

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b09a      	sub	sp, #104	; 0x68
 800114c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t CardID[5];
	char bufCardID[50];
	//Temp
	  float Temp1 = 0;
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	657b      	str	r3, [r7, #84]	; 0x54
	  char bufTemp1[5];
	  // weight
	  float weight = 0;
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	653b      	str	r3, [r7, #80]	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f000 fdd9 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f8f3 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 fa9f 	bl	80016a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001166:	f000 f963 	bl	8001430 <MX_SPI1_Init>
  MX_SPI2_Init();
 800116a:	f000 f997 	bl	800149c <MX_SPI2_Init>
  MX_TIM1_Init();
 800116e:	f000 f9cb 	bl	8001508 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001172:	f000 f92f 	bl	80013d4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001176:	f000 fa6b 	bl	8001650 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800117a:	f000 fa1b 	bl	80015b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  TimerDelay_Init();
 800117e:	f004 ffb5 	bl	80060ec <TimerDelay_Init>
	MFRC522_Init();
 8001182:	f004 fe4c 	bl	8005e1e <MFRC522_Init>
	ST7565_Init();
 8001186:	f004 f983 	bl	8005490 <ST7565_Init>
	HAL_Delay(100);
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f000 fe22 	bl	8001dd4 <HAL_Delay>
	HX711_init();
 8001190:	f004 fea2 	bl	8005ed8 <HX711_init>

	HAL_Delay(100);
 8001194:	2064      	movs	r0, #100	; 0x64
 8001196:	f000 fe1d 	bl	8001dd4 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800119a:	2100      	movs	r1, #0
 800119c:	485e      	ldr	r0, [pc, #376]	; (8001318 <main+0x1d0>)
 800119e:	f003 f849 	bl	8004234 <HAL_TIM_IC_Start_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2110      	movs	r1, #16
 80011a6:	485d      	ldr	r0, [pc, #372]	; (800131c <main+0x1d4>)
 80011a8:	f001 f8e1 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2108      	movs	r1, #8
 80011b0:	485a      	ldr	r0, [pc, #360]	; (800131c <main+0x1d4>)
 80011b2:	f001 f8dc 	bl	800236e <HAL_GPIO_WritePin>

	ST7565_Print(1, 1, "Height=", &Font_7x9, 1, 1);
 80011b6:	2301      	movs	r3, #1
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	4b58      	ldr	r3, [pc, #352]	; (8001320 <main+0x1d8>)
 80011c0:	4a58      	ldr	r2, [pc, #352]	; (8001324 <main+0x1dc>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	2001      	movs	r0, #1
 80011c6:	f004 fb47 	bl	8005858 <ST7565_Print>
	  ST7565_Print(1, 1+9+2, "Weight=", &Font_7x9, 1, 1);
 80011ca:	2301      	movs	r3, #1
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	2301      	movs	r3, #1
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4b53      	ldr	r3, [pc, #332]	; (8001320 <main+0x1d8>)
 80011d4:	4a54      	ldr	r2, [pc, #336]	; (8001328 <main+0x1e0>)
 80011d6:	210c      	movs	r1, #12
 80011d8:	2001      	movs	r0, #1
 80011da:	f004 fb3d 	bl	8005858 <ST7565_Print>
	  ST7565_Print(1, 1+(9+2)*2, "Temp=", &Font_7x9, 1, 1);
 80011de:	2301      	movs	r3, #1
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4b4e      	ldr	r3, [pc, #312]	; (8001320 <main+0x1d8>)
 80011e8:	4a50      	ldr	r2, [pc, #320]	; (800132c <main+0x1e4>)
 80011ea:	2117      	movs	r1, #23
 80011ec:	2001      	movs	r0, #1
 80011ee:	f004 fb33 	bl	8005858 <ST7565_Print>
	  ST7565_Print(1, 1+(9+2)*3, "CardID=", &Font_7x9, 1, 1);
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2301      	movs	r3, #1
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4b49      	ldr	r3, [pc, #292]	; (8001320 <main+0x1d8>)
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <main+0x1e8>)
 80011fe:	2122      	movs	r1, #34	; 0x22
 8001200:	2001      	movs	r0, #1
 8001202:	f004 fb29 	bl	8005858 <ST7565_Print>
	  HAL_Delay(1000);
 8001206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120a:	f000 fde3 	bl	8001dd4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//Height
		HCSR04_Read();
 800120e:	f7ff ff7b 	bl	8001108 <HCSR04_Read>
		heightShow(Distance);
 8001212:	4b48      	ldr	r3, [pc, #288]	; (8001334 <main+0x1ec>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fe5a 	bl	8000ed0 <heightShow>
		//RF
		if (MFRC522_Check(CardID) == MI_OK) {
 800121c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001220:	4618      	mov	r0, r3
 8001222:	f004 fc31 	bl	8005a88 <MFRC522_Check>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d126      	bne.n	800127a <main+0x132>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2110      	movs	r1, #16
 8001230:	483a      	ldr	r0, [pc, #232]	; (800131c <main+0x1d4>)
 8001232:	f001 f89c 	bl	800236e <HAL_GPIO_WritePin>
			sprintf(bufCardID, "%02X %02X %02X %02X %02X", CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
 8001236:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800123a:	461c      	mov	r4, r3
 800123c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001240:	461d      	mov	r5, r3
 8001242:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001246:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800124a:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800124e:	f107 0014 	add.w	r0, r7, #20
 8001252:	9102      	str	r1, [sp, #8]
 8001254:	9201      	str	r2, [sp, #4]
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	462b      	mov	r3, r5
 800125a:	4622      	mov	r2, r4
 800125c:	4936      	ldr	r1, [pc, #216]	; (8001338 <main+0x1f0>)
 800125e:	f005 fe67 	bl	8006f30 <siprintf>
			ST7565_Print(7*7, 1+(9+2)*3, bufCardID, &Font_7x9, 1, 1);
 8001262:	f107 0214 	add.w	r2, r7, #20
 8001266:	2301      	movs	r3, #1
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2301      	movs	r3, #1
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <main+0x1d8>)
 8001270:	2122      	movs	r1, #34	; 0x22
 8001272:	2031      	movs	r0, #49	; 0x31
 8001274:	f004 faf0 	bl	8005858 <ST7565_Print>
 8001278:	e004      	b.n	8001284 <main+0x13c>

		}
		else
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800127a:	2201      	movs	r2, #1
 800127c:	2108      	movs	r1, #8
 800127e:	4827      	ldr	r0, [pc, #156]	; (800131c <main+0x1d4>)
 8001280:	f001 f875 	bl	800236e <HAL_GPIO_WritePin>



		//Temp
		Temp1 = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ1);
 8001284:	2107      	movs	r1, #7
 8001286:	2000      	movs	r0, #0
 8001288:	f004 f822 	bl	80052d0 <MLX90614_ReadTemp>
 800128c:	6578      	str	r0, [r7, #84]	; 0x54
		sprintf(bufTemp1, "%.1f", Temp1);
 800128e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001290:	f7ff f8ca 	bl	8000428 <__aeabi_f2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	f107 000c 	add.w	r0, r7, #12
 800129c:	4927      	ldr	r1, [pc, #156]	; (800133c <main+0x1f4>)
 800129e:	f005 fe47 	bl	8006f30 <siprintf>
		ST7565_Print(5*7, 1+(9+2)*2, bufTemp1, &Font_7x9, 1, 1);
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	2301      	movs	r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <main+0x1d8>)
 80012b0:	2117      	movs	r1, #23
 80012b2:	2023      	movs	r0, #35	; 0x23
 80012b4:	f004 fad0 	bl	8005858 <ST7565_Print>
		HAL_UART_Transmit(&huart2, (uint8_t *)&bufTemp1, 5, 100);
 80012b8:	f107 010c 	add.w	r1, r7, #12
 80012bc:	2364      	movs	r3, #100	; 0x64
 80012be:	2205      	movs	r2, #5
 80012c0:	481f      	ldr	r0, [pc, #124]	; (8001340 <main+0x1f8>)
 80012c2:	f003 fe6c 	bl	8004f9e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)"     ", 5, 100);
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	2205      	movs	r2, #5
 80012ca:	491e      	ldr	r1, [pc, #120]	; (8001344 <main+0x1fc>)
 80012cc:	481c      	ldr	r0, [pc, #112]	; (8001340 <main+0x1f8>)
 80012ce:	f003 fe66 	bl	8004f9e <HAL_UART_Transmit>

		//Weight
		weight = HX711_getWeight();
 80012d2:	f004 fed1 	bl	8006078 <HX711_getWeight>
 80012d6:	6538      	str	r0, [r7, #80]	; 0x50
		sprintf(bufWeight, "%.1f", weight);
 80012d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80012da:	f7ff f8a5 	bl	8000428 <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	1d38      	adds	r0, r7, #4
 80012e4:	4915      	ldr	r1, [pc, #84]	; (800133c <main+0x1f4>)
 80012e6:	f005 fe23 	bl	8006f30 <siprintf>
		ST7565_Print(7*7, 1+(9+2), bufWeight, &Font_7x9, 1, 1);
 80012ea:	1d3a      	adds	r2, r7, #4
 80012ec:	2301      	movs	r3, #1
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <main+0x1d8>)
 80012f6:	210c      	movs	r1, #12
 80012f8:	2031      	movs	r0, #49	; 0x31
 80012fa:	f004 faad 	bl	8005858 <ST7565_Print>
		HAL_UART_Transmit(&huart2, (uint8_t *)&bufWeight, 5, 100);
 80012fe:	1d39      	adds	r1, r7, #4
 8001300:	2364      	movs	r3, #100	; 0x64
 8001302:	2205      	movs	r2, #5
 8001304:	480e      	ldr	r0, [pc, #56]	; (8001340 <main+0x1f8>)
 8001306:	f003 fe4a 	bl	8004f9e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)"     ", 5, 100);
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	2205      	movs	r2, #5
 800130e:	490d      	ldr	r1, [pc, #52]	; (8001344 <main+0x1fc>)
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <main+0x1f8>)
 8001312:	f003 fe44 	bl	8004f9e <HAL_UART_Transmit>
		HCSR04_Read();
 8001316:	e77a      	b.n	800120e <main+0xc6>
 8001318:	20000360 	.word	0x20000360
 800131c:	40010c00 	.word	0x40010c00
 8001320:	2000000c 	.word	0x2000000c
 8001324:	0800aa7c 	.word	0x0800aa7c
 8001328:	0800aa84 	.word	0x0800aa84
 800132c:	0800aa8c 	.word	0x0800aa8c
 8001330:	0800aa94 	.word	0x0800aa94
 8001334:	20000211 	.word	0x20000211
 8001338:	0800aa9c 	.word	0x0800aa9c
 800133c:	0800aab8 	.word	0x0800aab8
 8001340:	20000400 	.word	0x20000400
 8001344:	0800aac0 	.word	0x0800aac0

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b090      	sub	sp, #64	; 0x40
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	2228      	movs	r2, #40	; 0x28
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f004 ff6c 	bl	8006234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136a:	2301      	movs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001372:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001384:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001386:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138c:	f107 0318 	add.w	r3, r7, #24
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fe35 	bl	8003000 <HAL_RCC_OscConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800139c:	f000 f9ee 	bl	800177c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a0:	230f      	movs	r3, #15
 80013a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a4:	2302      	movs	r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2102      	movs	r1, #2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 f8a0 	bl	8003500 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013c6:	f000 f9d9 	bl	800177c <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3740      	adds	r7, #64	; 0x40
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_I2C1_Init+0x50>)
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <MX_I2C1_Init+0x54>)
 80013dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_I2C1_Init+0x50>)
 80013e0:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_I2C1_Init+0x58>)
 80013e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_I2C1_Init+0x50>)
 80013f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_I2C1_Init+0x50>)
 8001412:	f000 ffc5 	bl	80023a0 <HAL_I2C_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800141c:	f000 f9ae 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000030c 	.word	0x2000030c
 8001428:	40005400 	.word	0x40005400
 800142c:	000186a0 	.word	0x000186a0

08001430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_SPI1_Init+0x64>)
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <MX_SPI1_Init+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_SPI1_Init+0x64>)
 800143c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_SPI1_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_SPI1_Init+0x64>)
 800145c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001460:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_SPI1_Init+0x64>)
 8001464:	2208      	movs	r2, #8
 8001466:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_SPI1_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_SPI1_Init+0x64>)
 800147c:	220a      	movs	r2, #10
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_SPI1_Init+0x64>)
 8001482:	f002 f9d7 	bl	8003834 <HAL_SPI_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800148c:	f000 f976 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200003a8 	.word	0x200003a8
 8001498:	40013000 	.word	0x40013000

0800149c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_SPI2_Init+0x64>)
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <MX_SPI2_Init+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_SPI2_Init+0x64>)
 80014a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_SPI2_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_SPI2_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_SPI2_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_SPI2_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_SPI2_Init+0x64>)
 80014c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_SPI2_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_SPI2_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_SPI2_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MX_SPI2_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_SPI2_Init+0x64>)
 80014e8:	220a      	movs	r2, #10
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_SPI2_Init+0x64>)
 80014ee:	f002 f9a1 	bl	8003834 <HAL_SPI_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014f8:	f000 f940 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000026c 	.word	0x2000026c
 8001504:	40003800 	.word	0x40003800

08001508 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <MX_TIM1_Init+0xa4>)
 8001526:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <MX_TIM1_Init+0xa8>)
 8001528:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <MX_TIM1_Init+0xa4>)
 800152c:	2247      	movs	r2, #71	; 0x47
 800152e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <MX_TIM1_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_TIM1_Init+0xa4>)
 8001538:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800153c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_TIM1_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_TIM1_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_TIM1_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001550:	4816      	ldr	r0, [pc, #88]	; (80015ac <MX_TIM1_Init+0xa4>)
 8001552:	f002 fe1f 	bl	8004194 <HAL_TIM_IC_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800155c:	f000 f90e 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4619      	mov	r1, r3
 800156e:	480f      	ldr	r0, [pc, #60]	; (80015ac <MX_TIM1_Init+0xa4>)
 8001570:	f003 fc58 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800157a:	f000 f8ff 	bl	800177c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001582:	2301      	movs	r3, #1
 8001584:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_TIM1_Init+0xa4>)
 8001596:	f003 f85b 	bl	8004650 <HAL_TIM_IC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80015a0:	f000 f8ec 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000360 	.word	0x20000360
 80015b0:	40012c00 	.word	0x40012c00

080015b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_TIM4_Init+0x94>)
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <MX_TIM4_Init+0x98>)
 80015d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_TIM4_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_TIM4_Init+0x94>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_TIM4_Init+0x94>)
 80015e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_TIM4_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_TIM4_Init+0x94>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015f6:	4814      	ldr	r0, [pc, #80]	; (8001648 <MX_TIM4_Init+0x94>)
 80015f8:	f002 fd32 	bl	8004060 <HAL_TIM_Base_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001602:	f000 f8bb 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4619      	mov	r1, r3
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_TIM4_Init+0x94>)
 8001614:	f003 f8b0 	bl	8004778 <HAL_TIM_ConfigClockSource>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800161e:	f000 f8ad 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <MX_TIM4_Init+0x94>)
 8001630:	f003 fbf8 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800163a:	f000 f89f 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200002c4 	.word	0x200002c4
 800164c:	40000800 	.word	0x40000800

08001650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <MX_USART2_UART_Init+0x50>)
 8001658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_USART2_UART_Init+0x4c>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART2_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001688:	f003 fc3c 	bl	8004f04 <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001692:	f000 f873 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000400 	.word	0x20000400
 80016a0:	40004400 	.word	0x40004400

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a2c      	ldr	r2, [pc, #176]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016be:	f043 0320 	orr.w	r3, r3, #32
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a26      	ldr	r2, [pc, #152]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a20      	ldr	r2, [pc, #128]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10
 8001700:	2200      	movs	r2, #0
 8001702:	f641 6111 	movw	r1, #7697	; 0x1e11
 8001706:	481b      	ldr	r0, [pc, #108]	; (8001774 <MX_GPIO_Init+0xd0>)
 8001708:	f000 fe31 	bl	800236e <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2118      	movs	r1, #24
 8001710:	4819      	ldr	r0, [pc, #100]	; (8001778 <MX_GPIO_Init+0xd4>)
 8001712:	f000 fe2c 	bl	800236e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10
 8001716:	f641 6311 	movw	r3, #7697	; 0x1e11
 800171a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2302      	movs	r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4619      	mov	r1, r3
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <MX_GPIO_Init+0xd0>)
 8001730:	f000 fc82 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001734:	2302      	movs	r3, #2
 8001736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	480b      	ldr	r0, [pc, #44]	; (8001774 <MX_GPIO_Init+0xd0>)
 8001748:	f000 fc76 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800174c:	2318      	movs	r3, #24
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2302      	movs	r3, #2
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_GPIO_Init+0xd4>)
 8001764:	f000 fc68 	bl	8002038 <HAL_GPIO_Init>

}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000
 8001774:	40010800 	.word	0x40010800
 8001778:	40010c00 	.word	0x40010c00

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>
	...

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_MspInit+0x5c>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_MspInit+0x5c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6193      	str	r3, [r2, #24]
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_MspInit+0x5c>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_MspInit+0x5c>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_MspInit+0x5c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_MspInit+0x5c>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_MspInit+0x60>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_MspInit+0x60>)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010000 	.word	0x40010000

080017ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <HAL_I2C_MspInit+0x70>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d123      	bne.n	8001854 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_I2C_MspInit+0x74>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a13      	ldr	r2, [pc, #76]	; (8001860 <HAL_I2C_MspInit+0x74>)
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_I2C_MspInit+0x74>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001824:	23c0      	movs	r3, #192	; 0xc0
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001828:	2312      	movs	r3, #18
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	480b      	ldr	r0, [pc, #44]	; (8001864 <HAL_I2C_MspInit+0x78>)
 8001838:	f000 fbfe 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_I2C_MspInit+0x74>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_I2C_MspInit+0x74>)
 8001842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001846:	61d3      	str	r3, [r2, #28]
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_I2C_MspInit+0x74>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40005400 	.word	0x40005400
 8001860:	40021000 	.word	0x40021000
 8001864:	40010c00 	.word	0x40010c00

08001868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a37      	ldr	r2, [pc, #220]	; (8001960 <HAL_SPI_MspInit+0xf8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d130      	bne.n	80018ea <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a35      	ldr	r2, [pc, #212]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 800188e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b33      	ldr	r3, [pc, #204]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018b8:	23a0      	movs	r3, #160	; 0xa0
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	4619      	mov	r1, r3
 80018ca:	4827      	ldr	r0, [pc, #156]	; (8001968 <HAL_SPI_MspInit+0x100>)
 80018cc:	f000 fbb4 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018d0:	2340      	movs	r3, #64	; 0x40
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	4619      	mov	r1, r3
 80018e2:	4821      	ldr	r0, [pc, #132]	; (8001968 <HAL_SPI_MspInit+0x100>)
 80018e4:	f000 fba8 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018e8:	e036      	b.n	8001958 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1f      	ldr	r2, [pc, #124]	; (800196c <HAL_SPI_MspInit+0x104>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d131      	bne.n	8001958 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 80018fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fe:	61d3      	str	r3, [r2, #28]
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_SPI_MspInit+0xfc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001924:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 0318 	add.w	r3, r7, #24
 8001936:	4619      	mov	r1, r3
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <HAL_SPI_MspInit+0x108>)
 800193a:	f000 fb7d 	bl	8002038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800193e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	4619      	mov	r1, r3
 8001952:	4807      	ldr	r0, [pc, #28]	; (8001970 <HAL_SPI_MspInit+0x108>)
 8001954:	f000 fb70 	bl	8002038 <HAL_GPIO_Init>
}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40013000 	.word	0x40013000
 8001964:	40021000 	.word	0x40021000
 8001968:	40010800 	.word	0x40010800
 800196c:	40003800 	.word	0x40003800
 8001970:	40010c00 	.word	0x40010c00

08001974 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <HAL_TIM_IC_MspInit+0x84>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d12c      	bne.n	80019ee <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_TIM_IC_MspInit+0x88>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a18      	ldr	r2, [pc, #96]	; (80019fc <HAL_TIM_IC_MspInit+0x88>)
 800199a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_TIM_IC_MspInit+0x88>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_TIM_IC_MspInit+0x88>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <HAL_TIM_IC_MspInit+0x88>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_TIM_IC_MspInit+0x88>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4619      	mov	r1, r3
 80019d8:	4809      	ldr	r0, [pc, #36]	; (8001a00 <HAL_TIM_IC_MspInit+0x8c>)
 80019da:	f000 fb2d 	bl	8002038 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	201b      	movs	r0, #27
 80019e4:	f000 faf1 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019e8:	201b      	movs	r0, #27
 80019ea:	f000 fb0a 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010800 	.word	0x40010800

08001a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <HAL_TIM_Base_MspInit+0x34>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10b      	bne.n	8001a2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_TIM_Base_MspInit+0x38>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_TIM_Base_MspInit+0x38>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_TIM_Base_MspInit+0x38>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40000800 	.word	0x40000800
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a1b      	ldr	r2, [pc, #108]	; (8001ac8 <HAL_UART_MspInit+0x88>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d12f      	bne.n	8001ac0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_UART_MspInit+0x8c>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_UART_MspInit+0x8c>)
 8001a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6a:	61d3      	str	r3, [r2, #28]
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_UART_MspInit+0x8c>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_UART_MspInit+0x8c>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a13      	ldr	r2, [pc, #76]	; (8001acc <HAL_UART_MspInit+0x8c>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_UART_MspInit+0x8c>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a90:	2304      	movs	r3, #4
 8001a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <HAL_UART_MspInit+0x90>)
 8001aa4:	f000 fac8 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <HAL_UART_MspInit+0x90>)
 8001abc:	f000 fabc 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40004400 	.word	0x40004400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010800 	.word	0x40010800

08001ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <NMI_Handler+0x4>

08001ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <BusFault_Handler+0x4>

08001aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <UsageFault_Handler+0x4>

08001af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1a:	f000 f93f 	bl	8001d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <TIM1_CC_IRQHandler+0x10>)
 8001b2a:	f002 fc89 	bl	8004440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000360 	.word	0x20000360

08001b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
	return 1;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <_kill>:

int _kill(int pid, int sig)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b50:	f004 fb46 	bl	80061e0 <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2216      	movs	r2, #22
 8001b58:	601a      	str	r2, [r3, #0]
	return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_exit>:

void _exit (int status)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffe7 	bl	8001b46 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b78:	e7fe      	b.n	8001b78 <_exit+0x12>

08001b7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e00a      	b.n	8001ba2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b8c:	f3af 8000 	nop.w
 8001b90:	4601      	mov	r1, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	60ba      	str	r2, [r7, #8]
 8001b98:	b2ca      	uxtb	r2, r1
 8001b9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbf0      	blt.n	8001b8c <_read+0x12>
	}

return len;
 8001baa:	687b      	ldr	r3, [r7, #4]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e009      	b.n	8001bda <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	60ba      	str	r2, [r7, #8]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dbf1      	blt.n	8001bc6 <_write+0x12>
	}
	return len;
 8001be2:	687b      	ldr	r3, [r7, #4]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_close>:

int _close(int file)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c12:	605a      	str	r2, [r3, #4]
	return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <_isatty>:

int _isatty(int file)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f004 fab0 	bl	80061e0 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20005000 	.word	0x20005000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	20000214 	.word	0x20000214
 8001cb4:	20000858 	.word	0x20000858

08001cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001cc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cc6:	e003      	b.n	8001cd0 <LoopCopyDataInit>

08001cc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ccc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cce:	3104      	adds	r1, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cd0:	480a      	ldr	r0, [pc, #40]	; (8001cfc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cd8:	d3f6      	bcc.n	8001cc8 <CopyDataInit>
  ldr r2, =_sbss
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001cdc:	e002      	b.n	8001ce4 <LoopFillZerobss>

08001cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ce0:	f842 3b04 	str.w	r3, [r2], #4

08001ce4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ce6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ce8:	d3f9      	bcc.n	8001cde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cea:	f7ff ffe5 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f004 fa7d 	bl	80061ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf2:	f7ff fa29 	bl	8001148 <main>
  bx lr
 8001cf6:	4770      	bx	lr
  ldr r3, =_sidata
 8001cf8:	0800b674 	.word	0x0800b674
  ldr r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d00:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8001d04:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8001d08:	20000854 	.word	0x20000854

08001d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC1_2_IRQHandler>
	...

08001d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x28>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x28>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 f947 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 f808 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff fd2c 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022000 	.word	0x40022000

08001d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_InitTick+0x54>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x58>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f95f 	bl	800201e <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00e      	b.n	8001d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d80a      	bhi.n	8001d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f000 f927 	bl	8001fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_InitTick+0x5c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000008 	.word	0x20000008
 8001d98:	20000004 	.word	0x20000004

08001d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_IncTick+0x1c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_IncTick+0x20>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <HAL_IncTick+0x20>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	20000440 	.word	0x20000440

08001dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_GetTick+0x10>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000440 	.word	0x20000440

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff fff0 	bl	8001dc0 <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_Delay+0x44>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffe0 	bl	8001dc0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <__NVIC_EnableIRQ+0x34>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f7ff ff90 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff2d 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff42 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff90 	bl	8001f0c <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5f 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff35 	bl	8001e80 <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffa2 	bl	8001f70 <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b08b      	sub	sp, #44	; 0x2c
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204a:	e169      	b.n	8002320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800204c:	2201      	movs	r2, #1
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8158 	bne.w	800231a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a9a      	ldr	r2, [pc, #616]	; (80022d8 <HAL_GPIO_Init+0x2a0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d05e      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002074:	4a98      	ldr	r2, [pc, #608]	; (80022d8 <HAL_GPIO_Init+0x2a0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d875      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 800207a:	4a98      	ldr	r2, [pc, #608]	; (80022dc <HAL_GPIO_Init+0x2a4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d058      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002080:	4a96      	ldr	r2, [pc, #600]	; (80022dc <HAL_GPIO_Init+0x2a4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d86f      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 8002086:	4a96      	ldr	r2, [pc, #600]	; (80022e0 <HAL_GPIO_Init+0x2a8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d052      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 800208c:	4a94      	ldr	r2, [pc, #592]	; (80022e0 <HAL_GPIO_Init+0x2a8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d869      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 8002092:	4a94      	ldr	r2, [pc, #592]	; (80022e4 <HAL_GPIO_Init+0x2ac>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d04c      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002098:	4a92      	ldr	r2, [pc, #584]	; (80022e4 <HAL_GPIO_Init+0x2ac>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d863      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 800209e:	4a92      	ldr	r2, [pc, #584]	; (80022e8 <HAL_GPIO_Init+0x2b0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d046      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 80020a4:	4a90      	ldr	r2, [pc, #576]	; (80022e8 <HAL_GPIO_Init+0x2b0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d85d      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 80020aa:	2b12      	cmp	r3, #18
 80020ac:	d82a      	bhi.n	8002104 <HAL_GPIO_Init+0xcc>
 80020ae:	2b12      	cmp	r3, #18
 80020b0:	d859      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <HAL_GPIO_Init+0x80>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	08002133 	.word	0x08002133
 80020bc:	0800210d 	.word	0x0800210d
 80020c0:	0800211f 	.word	0x0800211f
 80020c4:	08002161 	.word	0x08002161
 80020c8:	08002167 	.word	0x08002167
 80020cc:	08002167 	.word	0x08002167
 80020d0:	08002167 	.word	0x08002167
 80020d4:	08002167 	.word	0x08002167
 80020d8:	08002167 	.word	0x08002167
 80020dc:	08002167 	.word	0x08002167
 80020e0:	08002167 	.word	0x08002167
 80020e4:	08002167 	.word	0x08002167
 80020e8:	08002167 	.word	0x08002167
 80020ec:	08002167 	.word	0x08002167
 80020f0:	08002167 	.word	0x08002167
 80020f4:	08002167 	.word	0x08002167
 80020f8:	08002167 	.word	0x08002167
 80020fc:	08002115 	.word	0x08002115
 8002100:	08002129 	.word	0x08002129
 8002104:	4a79      	ldr	r2, [pc, #484]	; (80022ec <HAL_GPIO_Init+0x2b4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800210a:	e02c      	b.n	8002166 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	623b      	str	r3, [r7, #32]
          break;
 8002112:	e029      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	3304      	adds	r3, #4
 800211a:	623b      	str	r3, [r7, #32]
          break;
 800211c:	e024      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	3308      	adds	r3, #8
 8002124:	623b      	str	r3, [r7, #32]
          break;
 8002126:	e01f      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	330c      	adds	r3, #12
 800212e:	623b      	str	r3, [r7, #32]
          break;
 8002130:	e01a      	b.n	8002168 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800213a:	2304      	movs	r3, #4
 800213c:	623b      	str	r3, [r7, #32]
          break;
 800213e:	e013      	b.n	8002168 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d105      	bne.n	8002154 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002148:	2308      	movs	r3, #8
 800214a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	611a      	str	r2, [r3, #16]
          break;
 8002152:	e009      	b.n	8002168 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	615a      	str	r2, [r3, #20]
          break;
 800215e:	e003      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
          break;
 8002164:	e000      	b.n	8002168 <HAL_GPIO_Init+0x130>
          break;
 8002166:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2bff      	cmp	r3, #255	; 0xff
 800216c:	d801      	bhi.n	8002172 <HAL_GPIO_Init+0x13a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	e001      	b.n	8002176 <HAL_GPIO_Init+0x13e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3304      	adds	r3, #4
 8002176:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2bff      	cmp	r3, #255	; 0xff
 800217c:	d802      	bhi.n	8002184 <HAL_GPIO_Init+0x14c>
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	e002      	b.n	800218a <HAL_GPIO_Init+0x152>
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	3b08      	subs	r3, #8
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	210f      	movs	r1, #15
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	401a      	ands	r2, r3
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	431a      	orrs	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80b1 	beq.w	800231a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b8:	4b4d      	ldr	r3, [pc, #308]	; (80022f0 <HAL_GPIO_Init+0x2b8>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a4c      	ldr	r2, [pc, #304]	; (80022f0 <HAL_GPIO_Init+0x2b8>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b4a      	ldr	r3, [pc, #296]	; (80022f0 <HAL_GPIO_Init+0x2b8>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021d0:	4a48      	ldr	r2, [pc, #288]	; (80022f4 <HAL_GPIO_Init+0x2bc>)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a40      	ldr	r2, [pc, #256]	; (80022f8 <HAL_GPIO_Init+0x2c0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d013      	beq.n	8002224 <HAL_GPIO_Init+0x1ec>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3f      	ldr	r2, [pc, #252]	; (80022fc <HAL_GPIO_Init+0x2c4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00d      	beq.n	8002220 <HAL_GPIO_Init+0x1e8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3e      	ldr	r2, [pc, #248]	; (8002300 <HAL_GPIO_Init+0x2c8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d007      	beq.n	800221c <HAL_GPIO_Init+0x1e4>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3d      	ldr	r2, [pc, #244]	; (8002304 <HAL_GPIO_Init+0x2cc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_GPIO_Init+0x1e0>
 8002214:	2303      	movs	r3, #3
 8002216:	e006      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 8002218:	2304      	movs	r3, #4
 800221a:	e004      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 800221c:	2302      	movs	r3, #2
 800221e:	e002      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 8002224:	2300      	movs	r3, #0
 8002226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002228:	f002 0203 	and.w	r2, r2, #3
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	4093      	lsls	r3, r2
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002236:	492f      	ldr	r1, [pc, #188]	; (80022f4 <HAL_GPIO_Init+0x2bc>)
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002250:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	492c      	ldr	r1, [pc, #176]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800225e:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	43db      	mvns	r3, r3
 8002266:	4928      	ldr	r1, [pc, #160]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002268:	4013      	ands	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002278:	4b23      	ldr	r3, [pc, #140]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4922      	ldr	r1, [pc, #136]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	43db      	mvns	r3, r3
 800228e:	491e      	ldr	r1, [pc, #120]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002290:	4013      	ands	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	4918      	ldr	r1, [pc, #96]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	608b      	str	r3, [r1, #8]
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4914      	ldr	r1, [pc, #80]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d021      	beq.n	800230c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	490e      	ldr	r1, [pc, #56]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]
 80022d4:	e021      	b.n	800231a <HAL_GPIO_Init+0x2e2>
 80022d6:	bf00      	nop
 80022d8:	10320000 	.word	0x10320000
 80022dc:	10310000 	.word	0x10310000
 80022e0:	10220000 	.word	0x10220000
 80022e4:	10210000 	.word	0x10210000
 80022e8:	10120000 	.word	0x10120000
 80022ec:	10110000 	.word	0x10110000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40010800 	.word	0x40010800
 80022fc:	40010c00 	.word	0x40010c00
 8002300:	40011000 	.word	0x40011000
 8002304:	40011400 	.word	0x40011400
 8002308:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_GPIO_Init+0x304>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	43db      	mvns	r3, r3
 8002314:	4909      	ldr	r1, [pc, #36]	; (800233c <HAL_GPIO_Init+0x304>)
 8002316:	4013      	ands	r3, r2
 8002318:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	3301      	adds	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	f47f ae8e 	bne.w	800204c <HAL_GPIO_Init+0x14>
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	372c      	adds	r7, #44	; 0x2c
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	40010400 	.word	0x40010400

08002340 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	887b      	ldrh	r3, [r7, #2]
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e001      	b.n	8002362 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	807b      	strh	r3, [r7, #2]
 800237a:	4613      	mov	r3, r2
 800237c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237e:	787b      	ldrb	r3, [r7, #1]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002384:	887a      	ldrh	r2, [r7, #2]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800238a:	e003      	b.n	8002394 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	041a      	lsls	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	611a      	str	r2, [r3, #16]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e12b      	b.n	800260a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fa10 	bl	80017ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2224      	movs	r2, #36	; 0x24
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002402:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002404:	f001 f9d0 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8002408:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4a81      	ldr	r2, [pc, #516]	; (8002614 <HAL_I2C_Init+0x274>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d807      	bhi.n	8002424 <HAL_I2C_Init+0x84>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4a80      	ldr	r2, [pc, #512]	; (8002618 <HAL_I2C_Init+0x278>)
 8002418:	4293      	cmp	r3, r2
 800241a:	bf94      	ite	ls
 800241c:	2301      	movls	r3, #1
 800241e:	2300      	movhi	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e006      	b.n	8002432 <HAL_I2C_Init+0x92>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4a7d      	ldr	r2, [pc, #500]	; (800261c <HAL_I2C_Init+0x27c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	bf94      	ite	ls
 800242c:	2301      	movls	r3, #1
 800242e:	2300      	movhi	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0e7      	b.n	800260a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4a78      	ldr	r2, [pc, #480]	; (8002620 <HAL_I2C_Init+0x280>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0c9b      	lsrs	r3, r3, #18
 8002444:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4a6a      	ldr	r2, [pc, #424]	; (8002614 <HAL_I2C_Init+0x274>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d802      	bhi.n	8002474 <HAL_I2C_Init+0xd4>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3301      	adds	r3, #1
 8002472:	e009      	b.n	8002488 <HAL_I2C_Init+0xe8>
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	4a69      	ldr	r2, [pc, #420]	; (8002624 <HAL_I2C_Init+0x284>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	3301      	adds	r3, #1
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	430b      	orrs	r3, r1
 800248e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800249a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	495c      	ldr	r1, [pc, #368]	; (8002614 <HAL_I2C_Init+0x274>)
 80024a4:	428b      	cmp	r3, r1
 80024a6:	d819      	bhi.n	80024dc <HAL_I2C_Init+0x13c>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1e59      	subs	r1, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b6:	1c59      	adds	r1, r3, #1
 80024b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024bc:	400b      	ands	r3, r1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_I2C_Init+0x138>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1e59      	subs	r1, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d6:	e051      	b.n	800257c <HAL_I2C_Init+0x1dc>
 80024d8:	2304      	movs	r3, #4
 80024da:	e04f      	b.n	800257c <HAL_I2C_Init+0x1dc>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <HAL_I2C_Init+0x168>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e58      	subs	r0, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	440b      	add	r3, r1
 80024f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e012      	b.n	800252e <HAL_I2C_Init+0x18e>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1e58      	subs	r0, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	0099      	lsls	r1, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	fbb0 f3f3 	udiv	r3, r0, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Init+0x196>
 8002532:	2301      	movs	r3, #1
 8002534:	e022      	b.n	800257c <HAL_I2C_Init+0x1dc>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10e      	bne.n	800255c <HAL_I2C_Init+0x1bc>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1e58      	subs	r0, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	440b      	add	r3, r1
 800254c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002550:	3301      	adds	r3, #1
 8002552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800255a:	e00f      	b.n	800257c <HAL_I2C_Init+0x1dc>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1e58      	subs	r0, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	0099      	lsls	r1, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	6809      	ldr	r1, [r1, #0]
 8002580:	4313      	orrs	r3, r2
 8002582:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69da      	ldr	r2, [r3, #28]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6911      	ldr	r1, [r2, #16]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68d2      	ldr	r2, [r2, #12]
 80025b6:	4311      	orrs	r1, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	430b      	orrs	r3, r1
 80025be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	000186a0 	.word	0x000186a0
 8002618:	001e847f 	.word	0x001e847f
 800261c:	003d08ff 	.word	0x003d08ff
 8002620:	431bde83 	.word	0x431bde83
 8002624:	10624dd3 	.word	0x10624dd3

08002628 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	4608      	mov	r0, r1
 8002632:	4611      	mov	r1, r2
 8002634:	461a      	mov	r2, r3
 8002636:	4603      	mov	r3, r0
 8002638:	817b      	strh	r3, [r7, #10]
 800263a:	460b      	mov	r3, r1
 800263c:	813b      	strh	r3, [r7, #8]
 800263e:	4613      	mov	r3, r2
 8002640:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002646:	f7ff fbbb 	bl	8001dc0 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	f040 8244 	bne.w	8002ae2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	4982      	ldr	r1, [pc, #520]	; (800286c <HAL_I2C_Mem_Read+0x244>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fb2f 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	e237      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Mem_Read+0x5a>
 800267e:	2302      	movs	r3, #2
 8002680:	e230      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2222      	movs	r2, #34	; 0x22
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a62      	ldr	r2, [pc, #392]	; (8002870 <HAL_I2C_Mem_Read+0x248>)
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4603      	mov	r3, r0
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f9fc 	bl	8002af8 <I2C_RequestMemoryRead>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1ec      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d113      	bne.n	800273a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e1c0      	b.n	8002abc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	2b01      	cmp	r3, #1
 8002740:	d11e      	bne.n	8002780 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002750:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002752:	b672      	cpsid	i
}
 8002754:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800277c:	b662      	cpsie	i
}
 800277e:	e035      	b.n	80027ec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b02      	cmp	r3, #2
 8002786:	d11e      	bne.n	80027c6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002796:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
}
 800279a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027c2:	b662      	cpsie	i
}
 80027c4:	e012      	b.n	80027ec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027d4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80027ec:	e166      	b.n	8002abc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	f200 811f 	bhi.w	8002a36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d123      	bne.n	8002848 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002802:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fb76 	bl	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e167      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002846:	e139      	b.n	8002abc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	2b02      	cmp	r3, #2
 800284e:	d152      	bne.n	80028f6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	2200      	movs	r2, #0
 8002858:	4906      	ldr	r1, [pc, #24]	; (8002874 <HAL_I2C_Mem_Read+0x24c>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fa34 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e13c      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
 800286a:	bf00      	nop
 800286c:	00100002 	.word	0x00100002
 8002870:	ffff0000 	.word	0xffff0000
 8002874:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028be:	b662      	cpsie	i
}
 80028c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028f4:	e0e2      	b.n	8002abc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	2200      	movs	r2, #0
 80028fe:	497b      	ldr	r1, [pc, #492]	; (8002aec <HAL_I2C_Mem_Read+0x4c4>)
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f9e1 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0e9      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002920:	b672      	cpsid	i
}
 8002922:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002956:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <HAL_I2C_Mem_Read+0x4c8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	08db      	lsrs	r3, r3, #3
 800295c:	4a65      	ldr	r2, [pc, #404]	; (8002af4 <HAL_I2C_Mem_Read+0x4cc>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0a1a      	lsrs	r2, r3, #8
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00da      	lsls	r2, r3, #3
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	3b01      	subs	r3, #1
 8002974:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d118      	bne.n	80029ae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800299e:	b662      	cpsie	i
}
 80029a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e09a      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d1d9      	bne.n	8002970 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029fe:	b662      	cpsie	i
}
 8002a00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a34:	e042      	b.n	8002abc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fa5b 	bl	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e04c      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d118      	bne.n	8002abc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f47f ae94 	bne.w	80027ee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3728      	adds	r7, #40	; 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	00010004 	.word	0x00010004
 8002af0:	20000000 	.word	0x20000000
 8002af4:	14f8b589 	.word	0x14f8b589

08002af8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f8c2 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b58:	d103      	bne.n	8002b62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0aa      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	4952      	ldr	r1, [pc, #328]	; (8002cc4 <I2C_RequestMemoryRead+0x1cc>)
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f8fa 	bl	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e097      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f964 	bl	8002e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e076      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]
 8002bde:	e021      	b.n	8002c24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002be0:	893b      	ldrh	r3, [r7, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f93e 	bl	8002e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d107      	bne.n	8002c16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e050      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c1a:	893b      	ldrh	r3, [r7, #8]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c26:	6a39      	ldr	r1, [r7, #32]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f923 	bl	8002e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d107      	bne.n	8002c4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e035      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f82b 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00d      	beq.n	8002c94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c86:	d103      	bne.n	8002c90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e013      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	6a3a      	ldr	r2, [r7, #32]
 8002ca8:	4906      	ldr	r1, [pc, #24]	; (8002cc4 <I2C_RequestMemoryRead+0x1cc>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f863 	bl	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	00010002 	.word	0x00010002

08002cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	e025      	b.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d021      	beq.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce2:	f7ff f86d 	bl	8001dc0 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d302      	bcc.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d116      	bne.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e023      	b.n	8002d6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	0c1b      	lsrs	r3, r3, #16
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10d      	bne.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf0c      	ite	eq
 8002d42:	2301      	moveq	r3, #1
 8002d44:	2300      	movne	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	e00c      	b.n	8002d66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4013      	ands	r3, r2
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d0b6      	beq.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d84:	e051      	b.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d94:	d123      	bne.n	8002dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f043 0204 	orr.w	r2, r3, #4
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e046      	b.n	8002e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d021      	beq.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe ffeb 	bl	8001dc0 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e020      	b.n	8002e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10c      	bne.n	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf14      	ite	ne
 8002e46:	2301      	movne	r3, #1
 8002e48:	2300      	moveq	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	e00b      	b.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	43da      	mvns	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d18d      	bne.n	8002d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e80:	e02d      	b.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f88d 	bl	8002fa2 <I2C_IsAcknowledgeFailed>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e02d      	b.n	8002eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d021      	beq.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9a:	f7fe ff91 	bl	8001dc0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d116      	bne.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e007      	b.n	8002eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d1ca      	bne.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f02:	e042      	b.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d119      	bne.n	8002f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f06f 0210 	mvn.w	r2, #16
 8002f1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e029      	b.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f46:	f7fe ff3b 	bl	8001dc0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d116      	bne.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e007      	b.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d1b5      	bne.n	8002f04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb8:	d11b      	bne.n	8002ff2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f043 0204 	orr.w	r2, r3, #4
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e26c      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8087 	beq.w	800312e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003020:	4b92      	ldr	r3, [pc, #584]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b04      	cmp	r3, #4
 800302a:	d00c      	beq.n	8003046 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800302c:	4b8f      	ldr	r3, [pc, #572]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d112      	bne.n	800305e <HAL_RCC_OscConfig+0x5e>
 8003038:	4b8c      	ldr	r3, [pc, #560]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003044:	d10b      	bne.n	800305e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003046:	4b89      	ldr	r3, [pc, #548]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d06c      	beq.n	800312c <HAL_RCC_OscConfig+0x12c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d168      	bne.n	800312c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e246      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x76>
 8003068:	4b80      	ldr	r3, [pc, #512]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7f      	ldr	r2, [pc, #508]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e02e      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x98>
 800307e:	4b7b      	ldr	r3, [pc, #492]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7a      	ldr	r2, [pc, #488]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b78      	ldr	r3, [pc, #480]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a77      	ldr	r2, [pc, #476]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0xbc>
 80030a2:	4b72      	ldr	r3, [pc, #456]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a71      	ldr	r2, [pc, #452]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b6f      	ldr	r3, [pc, #444]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6e      	ldr	r2, [pc, #440]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 80030bc:	4b6b      	ldr	r3, [pc, #428]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a6a      	ldr	r2, [pc, #424]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a67      	ldr	r2, [pc, #412]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe fe70 	bl	8001dc0 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7fe fe6c 	bl	8001dc0 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	; 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e1fa      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b5d      	ldr	r3, [pc, #372]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0xe4>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe fe5c 	bl	8001dc0 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe fe58 	bl	8001dc0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1e6      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x10c>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313a:	4b4c      	ldr	r3, [pc, #304]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003146:	4b49      	ldr	r3, [pc, #292]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b08      	cmp	r3, #8
 8003150:	d11c      	bne.n	800318c <HAL_RCC_OscConfig+0x18c>
 8003152:	4b46      	ldr	r3, [pc, #280]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d116      	bne.n	800318c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	4b43      	ldr	r3, [pc, #268]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x176>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1ba      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4939      	ldr	r1, [pc, #228]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	e03a      	b.n	8003202 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003194:	4b36      	ldr	r3, [pc, #216]	; (8003270 <HAL_RCC_OscConfig+0x270>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fe fe11 	bl	8001dc0 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a2:	f7fe fe0d 	bl	8001dc0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e19b      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	4b2d      	ldr	r3, [pc, #180]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b2a      	ldr	r3, [pc, #168]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4927      	ldr	r1, [pc, #156]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]
 80031d4:	e015      	b.n	8003202 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d6:	4b26      	ldr	r3, [pc, #152]	; (8003270 <HAL_RCC_OscConfig+0x270>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fdf0 	bl	8001dc0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e4:	f7fe fdec 	bl	8001dc0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e17a      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d03a      	beq.n	8003284 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d019      	beq.n	800324a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003216:	4b17      	ldr	r3, [pc, #92]	; (8003274 <HAL_RCC_OscConfig+0x274>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7fe fdd0 	bl	8001dc0 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003224:	f7fe fdcc 	bl	8001dc0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e15a      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_RCC_OscConfig+0x26c>)
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003242:	2001      	movs	r0, #1
 8003244:	f000 fad8 	bl	80037f8 <RCC_Delay>
 8003248:	e01c      	b.n	8003284 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCC_OscConfig+0x274>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7fe fdb6 	bl	8001dc0 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003256:	e00f      	b.n	8003278 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003258:	f7fe fdb2 	bl	8001dc0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d908      	bls.n	8003278 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e140      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	42420000 	.word	0x42420000
 8003274:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	4b9e      	ldr	r3, [pc, #632]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e9      	bne.n	8003258 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a6 	beq.w	80033de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003296:	4b97      	ldr	r3, [pc, #604]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	4b94      	ldr	r3, [pc, #592]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4a93      	ldr	r2, [pc, #588]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	61d3      	str	r3, [r2, #28]
 80032ae:	4b91      	ldr	r3, [pc, #580]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b8e      	ldr	r3, [pc, #568]	; (80034f8 <HAL_RCC_OscConfig+0x4f8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4b8b      	ldr	r3, [pc, #556]	; (80034f8 <HAL_RCC_OscConfig+0x4f8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a8a      	ldr	r2, [pc, #552]	; (80034f8 <HAL_RCC_OscConfig+0x4f8>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d6:	f7fe fd73 	bl	8001dc0 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032de:	f7fe fd6f 	bl	8001dc0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	; 0x64
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0fd      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b81      	ldr	r3, [pc, #516]	; (80034f8 <HAL_RCC_OscConfig+0x4f8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x312>
 8003304:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4a7a      	ldr	r2, [pc, #488]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6213      	str	r3, [r2, #32]
 8003310:	e02d      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x334>
 800331a:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a75      	ldr	r2, [pc, #468]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	4b73      	ldr	r3, [pc, #460]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a72      	ldr	r2, [pc, #456]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6213      	str	r3, [r2, #32]
 8003332:	e01c      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b05      	cmp	r3, #5
 800333a:	d10c      	bne.n	8003356 <HAL_RCC_OscConfig+0x356>
 800333c:	4b6d      	ldr	r3, [pc, #436]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4a6c      	ldr	r2, [pc, #432]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003342:	f043 0304 	orr.w	r3, r3, #4
 8003346:	6213      	str	r3, [r2, #32]
 8003348:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4a69      	ldr	r2, [pc, #420]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	e00b      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003356:	4b67      	ldr	r3, [pc, #412]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a66      	ldr	r2, [pc, #408]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6213      	str	r3, [r2, #32]
 8003362:	4b64      	ldr	r3, [pc, #400]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a63      	ldr	r2, [pc, #396]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d015      	beq.n	80033a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7fe fd23 	bl	8001dc0 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe fd1f 	bl	8001dc0 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f241 3288 	movw	r2, #5000	; 0x1388
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0ab      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003394:	4b57      	ldr	r3, [pc, #348]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ee      	beq.n	800337e <HAL_RCC_OscConfig+0x37e>
 80033a0:	e014      	b.n	80033cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fe fd0d 	bl	8001dc0 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fe fd09 	bl	8001dc0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e095      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ee      	bne.n	80033aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d2:	4b48      	ldr	r3, [pc, #288]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4a47      	ldr	r2, [pc, #284]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8081 	beq.w	80034ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d061      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d146      	bne.n	800348a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_RCC_OscConfig+0x4fc>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fe fcdd 	bl	8001dc0 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe fcd9 	bl	8001dc0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e067      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341c:	4b35      	ldr	r3, [pc, #212]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d108      	bne.n	8003444 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003432:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	492d      	ldr	r1, [pc, #180]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003444:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a19      	ldr	r1, [r3, #32]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	430b      	orrs	r3, r1
 8003456:	4927      	ldr	r1, [pc, #156]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_OscConfig+0x4fc>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fe fcad 	bl	8001dc0 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7fe fca9 	bl	8001dc0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e037      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x46a>
 8003488:	e02f      	b.n	80034ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <HAL_RCC_OscConfig+0x4fc>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe fc96 	bl	8001dc0 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe fc92 	bl	8001dc0 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e020      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x498>
 80034b6:	e018      	b.n	80034ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e013      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_OscConfig+0x4f4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40007000 	.word	0x40007000
 80034fc:	42420060 	.word	0x42420060

08003500 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d0      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d910      	bls.n	8003544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	4965      	ldr	r1, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003566:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800357e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d040      	beq.n	8003620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d115      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e073      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06b      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4936      	ldr	r1, [pc, #216]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f0:	f7fe fbe6 	bl	8001dc0 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fe fbe2 	bl	8001dc0 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e053      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d1eb      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003620:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d210      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	4922      	ldr	r1, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1cc>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1d0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fb44 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40021000 	.word	0x40021000
 80036c8:	0800aad8 	.word	0x0800aad8
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	b490      	push	{r4, r7}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036da:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036dc:	1d3c      	adds	r4, r7, #4
 80036de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036e4:	f240 2301 	movw	r3, #513	; 0x201
 80036e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b04      	cmp	r3, #4
 800370c:	d002      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 800370e:	2b08      	cmp	r3, #8
 8003710:	d003      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x46>
 8003712:	e02d      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003714:	4b1d      	ldr	r3, [pc, #116]	; (800378c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003716:	623b      	str	r3, [r7, #32]
      break;
 8003718:	e02d      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	0c9b      	lsrs	r3, r3, #18
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003726:	4413      	add	r3, r2
 8003728:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800372c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003738:	4b13      	ldr	r3, [pc, #76]	; (8003788 <HAL_RCC_GetSysClockFreq+0xb4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	0c5b      	lsrs	r3, r3, #17
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003746:	4413      	add	r3, r2
 8003748:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800374c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003752:	fb02 f203 	mul.w	r2, r2, r3
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	e004      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003764:	fb02 f303 	mul.w	r3, r2, r3
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	623b      	str	r3, [r7, #32]
      break;
 800376e:	e002      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003772:	623b      	str	r3, [r7, #32]
      break;
 8003774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003776:	6a3b      	ldr	r3, [r7, #32]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3728      	adds	r7, #40	; 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bc90      	pop	{r4, r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	0800aac8 	.word	0x0800aac8
 8003788:	40021000 	.word	0x40021000
 800378c:	007a1200 	.word	0x007a1200
 8003790:	003d0900 	.word	0x003d0900

08003794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003798:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	20000000 	.word	0x20000000

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037ac:	f7ff fff2 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4903      	ldr	r1, [pc, #12]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000
 80037cc:	0800aae8 	.word	0x0800aae8

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d4:	f7ff ffde 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	0adb      	lsrs	r3, r3, #11
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	0800aae8 	.word	0x0800aae8

080037f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <RCC_Delay+0x34>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <RCC_Delay+0x38>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	0a5b      	lsrs	r3, r3, #9
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003814:	bf00      	nop
  }
  while (Delay --);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1e5a      	subs	r2, r3, #1
 800381a:	60fa      	str	r2, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f9      	bne.n	8003814 <RCC_Delay+0x1c>
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	20000000 	.word	0x20000000
 8003830:	10624dd3 	.word	0x10624dd3

08003834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e076      	b.n	8003934 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d108      	bne.n	8003860 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003856:	d009      	beq.n	800386c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
 800385e:	e005      	b.n	800386c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd ffee 	bl	8001868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f0:	ea42 0103 	orr.w	r1, r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	0c1a      	lsrs	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f002 0204 	and.w	r2, r2, #4
 8003912:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003922:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_SPI_Transmit+0x22>
 800395a:	2302      	movs	r3, #2
 800395c:	e126      	b.n	8003bac <HAL_SPI_Transmit+0x270>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003966:	f7fe fa2b 	bl	8001dc0 <HAL_GetTick>
 800396a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d002      	beq.n	8003982 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800397c:	2302      	movs	r3, #2
 800397e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003980:	e10b      	b.n	8003b9a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_SPI_Transmit+0x52>
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003992:	e102      	b.n	8003b9a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2203      	movs	r2, #3
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039da:	d10f      	bne.n	80039fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d007      	beq.n	8003a1a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a22:	d14b      	bne.n	8003abc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_SPI_Transmit+0xf6>
 8003a2c:	8afb      	ldrh	r3, [r7, #22]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d13e      	bne.n	8003ab0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	1c9a      	adds	r2, r3, #2
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a56:	e02b      	b.n	8003ab0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d112      	bne.n	8003a8c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a8a:	e011      	b.n	8003ab0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a8c:	f7fe f998 	bl	8001dc0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d803      	bhi.n	8003aa4 <HAL_SPI_Transmit+0x168>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d102      	bne.n	8003aaa <HAL_SPI_Transmit+0x16e>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aae:	e074      	b.n	8003b9a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ce      	bne.n	8003a58 <HAL_SPI_Transmit+0x11c>
 8003aba:	e04c      	b.n	8003b56 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_SPI_Transmit+0x18e>
 8003ac4:	8afb      	ldrh	r3, [r7, #22]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d140      	bne.n	8003b4c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	7812      	ldrb	r2, [r2, #0]
 8003ad6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003af0:	e02c      	b.n	8003b4c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d113      	bne.n	8003b28 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	7812      	ldrb	r2, [r2, #0]
 8003b0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b26:	e011      	b.n	8003b4c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b28:	f7fe f94a 	bl	8001dc0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d803      	bhi.n	8003b40 <HAL_SPI_Transmit+0x204>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d102      	bne.n	8003b46 <HAL_SPI_Transmit+0x20a>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b4a:	e026      	b.n	8003b9a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1cd      	bne.n	8003af2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fa62 	bl	8004024 <SPI_EndRxTxTransaction>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e000      	b.n	8003b9a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003baa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	; 0x30
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x26>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e18a      	b.n	8003ef0 <HAL_SPI_TransmitReceive+0x33c>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be2:	f7fe f8ed 	bl	8001dc0 <HAL_GetTick>
 8003be6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bf8:	887b      	ldrh	r3, [r7, #2]
 8003bfa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d00f      	beq.n	8003c24 <HAL_SPI_TransmitReceive+0x70>
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c0a:	d107      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d103      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x68>
 8003c14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d003      	beq.n	8003c24 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c22:	e15b      	b.n	8003edc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_SPI_TransmitReceive+0x82>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_SPI_TransmitReceive+0x82>
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c3c:	e14e      	b.n	8003edc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d003      	beq.n	8003c52 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2205      	movs	r2, #5
 8003c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	887a      	ldrh	r2, [r7, #2]
 8003c62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	887a      	ldrh	r2, [r7, #2]
 8003c68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	887a      	ldrh	r2, [r7, #2]
 8003c7a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d007      	beq.n	8003ca6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cae:	d178      	bne.n	8003da2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_SPI_TransmitReceive+0x10a>
 8003cb8:	8b7b      	ldrh	r3, [r7, #26]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d166      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	881a      	ldrh	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	1c9a      	adds	r2, r3, #2
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ce2:	e053      	b.n	8003d8c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d11b      	bne.n	8003d2a <HAL_SPI_TransmitReceive+0x176>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d016      	beq.n	8003d2a <HAL_SPI_TransmitReceive+0x176>
 8003cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d113      	bne.n	8003d2a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	881a      	ldrh	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	1c9a      	adds	r2, r3, #2
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d119      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x1b8>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d014      	beq.n	8003d6c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	b292      	uxth	r2, r2
 8003d4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	1c9a      	adds	r2, r3, #2
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d6c:	f7fe f828 	bl	8001dc0 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d807      	bhi.n	8003d8c <HAL_SPI_TransmitReceive+0x1d8>
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d003      	beq.n	8003d8c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d8a:	e0a7      	b.n	8003edc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1a6      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x130>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1a1      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x130>
 8003da0:	e07c      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x1fc>
 8003daa:	8b7b      	ldrh	r3, [r7, #26]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d16b      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dd6:	e057      	b.n	8003e88 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d11c      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x26c>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d017      	beq.n	8003e20 <HAL_SPI_TransmitReceive+0x26c>
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d114      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	7812      	ldrb	r2, [r2, #0]
 8003e02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d119      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x2ae>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d014      	beq.n	8003e62 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e62:	f7fd ffad 	bl	8001dc0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d803      	bhi.n	8003e7a <HAL_SPI_TransmitReceive+0x2c6>
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d102      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x2cc>
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e86:	e029      	b.n	8003edc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1a2      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x224>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d19d      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f8bf 	bl	8004024 <SPI_EndRxTxTransaction>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003eb8:	e010      	b.n	8003edc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	e000      	b.n	8003edc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003eda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3730      	adds	r7, #48	; 0x30
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f06:	b2db      	uxtb	r3, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr
	...

08003f14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f24:	f7fd ff4c 	bl	8001dc0 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4413      	add	r3, r2
 8003f32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f34:	f7fd ff44 	bl	8001dc0 <HAL_GetTick>
 8003f38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f3a:	4b39      	ldr	r3, [pc, #228]	; (8004020 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	015b      	lsls	r3, r3, #5
 8003f40:	0d1b      	lsrs	r3, r3, #20
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4a:	e054      	b.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d050      	beq.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f54:	f7fd ff34 	bl	8001dc0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d902      	bls.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d13d      	bne.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f82:	d111      	bne.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8c:	d004      	beq.n	8003f98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f96:	d107      	bne.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb0:	d10f      	bne.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e017      	b.n	8004016 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d19b      	bne.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000000 	.word	0x20000000

08004024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2200      	movs	r2, #0
 8004038:	2180      	movs	r1, #128	; 0x80
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7ff ff6a 	bl	8003f14 <SPI_WaitFlagStateUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e000      	b.n	8004058 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e041      	b.n	80040f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fcbc 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 fc96 	bl	80049d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d001      	beq.n	8004118 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e032      	b.n	800417e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_TIM_Base_Start+0x88>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_TIM_Base_Start+0x48>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004132:	d009      	beq.n	8004148 <HAL_TIM_Base_Start+0x48>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a14      	ldr	r2, [pc, #80]	; (800418c <HAL_TIM_Base_Start+0x8c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_TIM_Base_Start+0x48>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a13      	ldr	r2, [pc, #76]	; (8004190 <HAL_TIM_Base_Start+0x90>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d111      	bne.n	800416c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d010      	beq.n	800417c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	e007      	b.n	800417c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800

08004194 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e041      	b.n	800422a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd fbda 	bl	8001974 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f000 fbfc 	bl	80049d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_TIM_IC_Start_IT+0x1a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e013      	b.n	8004276 <HAL_TIM_IC_Start_IT+0x42>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d104      	bne.n	800425e <HAL_TIM_IC_Start_IT+0x2a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800425a:	b2db      	uxtb	r3, r3
 800425c:	e00b      	b.n	8004276 <HAL_TIM_IC_Start_IT+0x42>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d104      	bne.n	800426e <HAL_TIM_IC_Start_IT+0x3a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e003      	b.n	8004276 <HAL_TIM_IC_Start_IT+0x42>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004274:	b2db      	uxtb	r3, r3
 8004276:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <HAL_TIM_IC_Start_IT+0x54>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e013      	b.n	80042b0 <HAL_TIM_IC_Start_IT+0x7c>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d104      	bne.n	8004298 <HAL_TIM_IC_Start_IT+0x64>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e00b      	b.n	80042b0 <HAL_TIM_IC_Start_IT+0x7c>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b08      	cmp	r3, #8
 800429c:	d104      	bne.n	80042a8 <HAL_TIM_IC_Start_IT+0x74>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e003      	b.n	80042b0 <HAL_TIM_IC_Start_IT+0x7c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d102      	bne.n	80042be <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80042b8:	7bbb      	ldrb	r3, [r7, #14]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d001      	beq.n	80042c2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e0b3      	b.n	800442a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <HAL_TIM_IC_Start_IT+0x9e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d0:	e013      	b.n	80042fa <HAL_TIM_IC_Start_IT+0xc6>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_IC_Start_IT+0xae>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e0:	e00b      	b.n	80042fa <HAL_TIM_IC_Start_IT+0xc6>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d104      	bne.n	80042f2 <HAL_TIM_IC_Start_IT+0xbe>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f0:	e003      	b.n	80042fa <HAL_TIM_IC_Start_IT+0xc6>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d104      	bne.n	800430a <HAL_TIM_IC_Start_IT+0xd6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004308:	e013      	b.n	8004332 <HAL_TIM_IC_Start_IT+0xfe>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b04      	cmp	r3, #4
 800430e:	d104      	bne.n	800431a <HAL_TIM_IC_Start_IT+0xe6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004318:	e00b      	b.n	8004332 <HAL_TIM_IC_Start_IT+0xfe>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d104      	bne.n	800432a <HAL_TIM_IC_Start_IT+0xf6>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	e003      	b.n	8004332 <HAL_TIM_IC_Start_IT+0xfe>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d841      	bhi.n	80043bc <HAL_TIM_IC_Start_IT+0x188>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <HAL_TIM_IC_Start_IT+0x10c>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004375 	.word	0x08004375
 8004344:	080043bd 	.word	0x080043bd
 8004348:	080043bd 	.word	0x080043bd
 800434c:	080043bd 	.word	0x080043bd
 8004350:	08004387 	.word	0x08004387
 8004354:	080043bd 	.word	0x080043bd
 8004358:	080043bd 	.word	0x080043bd
 800435c:	080043bd 	.word	0x080043bd
 8004360:	08004399 	.word	0x08004399
 8004364:	080043bd 	.word	0x080043bd
 8004368:	080043bd 	.word	0x080043bd
 800436c:	080043bd 	.word	0x080043bd
 8004370:	080043ab 	.word	0x080043ab
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0202 	orr.w	r2, r2, #2
 8004382:	60da      	str	r2, [r3, #12]
      break;
 8004384:	e01b      	b.n	80043be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0204 	orr.w	r2, r2, #4
 8004394:	60da      	str	r2, [r3, #12]
      break;
 8004396:	e012      	b.n	80043be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0208 	orr.w	r2, r2, #8
 80043a6:	60da      	str	r2, [r3, #12]
      break;
 80043a8:	e009      	b.n	80043be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0210 	orr.w	r2, r2, #16
 80043b8:	60da      	str	r2, [r3, #12]
      break;
 80043ba:	e000      	b.n	80043be <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80043bc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2201      	movs	r2, #1
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fd07 	bl	8004dda <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_TIM_IC_Start_IT+0x200>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00e      	beq.n	80043f4 <HAL_TIM_IC_Start_IT+0x1c0>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043de:	d009      	beq.n	80043f4 <HAL_TIM_IC_Start_IT+0x1c0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <HAL_TIM_IC_Start_IT+0x204>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_TIM_IC_Start_IT+0x1c0>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a13      	ldr	r2, [pc, #76]	; (800443c <HAL_TIM_IC_Start_IT+0x208>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d111      	bne.n	8004418 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b06      	cmp	r3, #6
 8004404:	d010      	beq.n	8004428 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004416:	e007      	b.n	8004428 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800

08004440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0202 	mvn.w	r2, #2
 800446c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fda0 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa85 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fa8b 	bl	80049ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0204 	mvn.w	r2, #4
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fd76 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa5b 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fa61 	bl	80049ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b08      	cmp	r3, #8
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0208 	mvn.w	r2, #8
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2204      	movs	r2, #4
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc fd4c 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa31 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa37 	bl	80049ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b10      	cmp	r3, #16
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0210 	mvn.w	r2, #16
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2208      	movs	r2, #8
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc fd22 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa07 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fa0d 	bl	80049ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0201 	mvn.w	r2, #1
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9e2 	bl	8004988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b80      	cmp	r3, #128	; 0x80
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fc81 	bl	8004ef2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f9d1 	bl	80049be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d10e      	bne.n	8004648 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b20      	cmp	r3, #32
 8004636:	d107      	bne.n	8004648 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0220 	mvn.w	r2, #32
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fc4c 	bl	8004ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004666:	2302      	movs	r3, #2
 8004668:	e082      	b.n	8004770 <HAL_TIM_IC_ConfigChannel+0x120>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11b      	bne.n	80046b0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f000 fa04 	bl	8004a94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 020c 	bic.w	r2, r2, #12
 800469a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6999      	ldr	r1, [r3, #24]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	619a      	str	r2, [r3, #24]
 80046ae:	e05a      	b.n	8004766 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d11c      	bne.n	80046f0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	6819      	ldr	r1, [r3, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f000 fa6d 	bl	8004ba4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6999      	ldr	r1, [r3, #24]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	021a      	lsls	r2, r3, #8
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	619a      	str	r2, [r3, #24]
 80046ee:	e03a      	b.n	8004766 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d11b      	bne.n	800472e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	6819      	ldr	r1, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f000 fab8 	bl	8004c7a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 020c 	bic.w	r2, r2, #12
 8004718:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69d9      	ldr	r1, [r3, #28]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	61da      	str	r2, [r3, #28]
 800472c:	e01b      	b.n	8004766 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f000 fad7 	bl	8004cf0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004750:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69d9      	ldr	r1, [r3, #28]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	021a      	lsls	r2, r3, #8
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_TIM_ConfigClockSource+0x18>
 800478c:	2302      	movs	r3, #2
 800478e:	e0b3      	b.n	80048f8 <HAL_TIM_ConfigClockSource+0x180>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c8:	d03e      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0xd0>
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ce:	f200 8087 	bhi.w	80048e0 <HAL_TIM_ConfigClockSource+0x168>
 80047d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d6:	f000 8085 	beq.w	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d87f      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x168>
 80047e0:	2b70      	cmp	r3, #112	; 0x70
 80047e2:	d01a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0xa2>
 80047e4:	2b70      	cmp	r3, #112	; 0x70
 80047e6:	d87b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x168>
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d050      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x116>
 80047ec:	2b60      	cmp	r3, #96	; 0x60
 80047ee:	d877      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x168>
 80047f0:	2b50      	cmp	r3, #80	; 0x50
 80047f2:	d03c      	beq.n	800486e <HAL_TIM_ConfigClockSource+0xf6>
 80047f4:	2b50      	cmp	r3, #80	; 0x50
 80047f6:	d873      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x168>
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d058      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0x136>
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d86f      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x168>
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d064      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x156>
 8004804:	2b30      	cmp	r3, #48	; 0x30
 8004806:	d86b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x168>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d060      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x156>
 800480c:	2b20      	cmp	r3, #32
 800480e:	d867      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x168>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d05c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x156>
 8004814:	2b10      	cmp	r3, #16
 8004816:	d05a      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004818:	e062      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6899      	ldr	r1, [r3, #8]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f000 fab7 	bl	8004d9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800483c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	609a      	str	r2, [r3, #8]
      break;
 8004846:	e04e      	b.n	80048e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6899      	ldr	r1, [r3, #8]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f000 faa0 	bl	8004d9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800486a:	609a      	str	r2, [r3, #8]
      break;
 800486c:	e03b      	b.n	80048e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	461a      	mov	r2, r3
 800487c:	f000 f964 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2150      	movs	r1, #80	; 0x50
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fa6e 	bl	8004d68 <TIM_ITRx_SetConfig>
      break;
 800488c:	e02b      	b.n	80048e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	461a      	mov	r2, r3
 800489c:	f000 f9be 	bl	8004c1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2160      	movs	r1, #96	; 0x60
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fa5e 	bl	8004d68 <TIM_ITRx_SetConfig>
      break;
 80048ac:	e01b      	b.n	80048e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f000 f944 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fa4e 	bl	8004d68 <TIM_ITRx_SetConfig>
      break;
 80048cc:	e00b      	b.n	80048e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f000 fa45 	bl	8004d68 <TIM_ITRx_SetConfig>
        break;
 80048de:	e002      	b.n	80048e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048e0:	bf00      	nop
 80048e2:	e000      	b.n	80048e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b0c      	cmp	r3, #12
 8004912:	d831      	bhi.n	8004978 <HAL_TIM_ReadCapturedValue+0x78>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004951 	.word	0x08004951
 8004920:	08004979 	.word	0x08004979
 8004924:	08004979 	.word	0x08004979
 8004928:	08004979 	.word	0x08004979
 800492c:	0800495b 	.word	0x0800495b
 8004930:	08004979 	.word	0x08004979
 8004934:	08004979 	.word	0x08004979
 8004938:	08004979 	.word	0x08004979
 800493c:	08004965 	.word	0x08004965
 8004940:	08004979 	.word	0x08004979
 8004944:	08004979 	.word	0x08004979
 8004948:	08004979 	.word	0x08004979
 800494c:	0800496f 	.word	0x0800496f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	60fb      	str	r3, [r7, #12]

      break;
 8004958:	e00f      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	60fb      	str	r3, [r7, #12]

      break;
 8004962:	e00a      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	60fb      	str	r3, [r7, #12]

      break;
 800496c:	e005      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	60fb      	str	r3, [r7, #12]

      break;
 8004976:	e000      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004978:	bf00      	nop
  }

  return tmpreg;
 800497a:	68fb      	ldr	r3, [r7, #12]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop

08004988 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr

080049be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a29      	ldr	r2, [pc, #164]	; (8004a88 <TIM_Base_SetConfig+0xb8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00b      	beq.n	8004a00 <TIM_Base_SetConfig+0x30>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ee:	d007      	beq.n	8004a00 <TIM_Base_SetConfig+0x30>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a26      	ldr	r2, [pc, #152]	; (8004a8c <TIM_Base_SetConfig+0xbc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_Base_SetConfig+0x30>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a25      	ldr	r2, [pc, #148]	; (8004a90 <TIM_Base_SetConfig+0xc0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d108      	bne.n	8004a12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <TIM_Base_SetConfig+0xb8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00b      	beq.n	8004a32 <TIM_Base_SetConfig+0x62>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a20:	d007      	beq.n	8004a32 <TIM_Base_SetConfig+0x62>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <TIM_Base_SetConfig+0xbc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_Base_SetConfig+0x62>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a18      	ldr	r2, [pc, #96]	; (8004a90 <TIM_Base_SetConfig+0xc0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d108      	bne.n	8004a44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <TIM_Base_SetConfig+0xb8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d103      	bne.n	8004a78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	615a      	str	r2, [r3, #20]
}
 8004a7e:	bf00      	nop
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800

08004a94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <TIM_TI1_SetConfig+0xa8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_TI1_SetConfig+0x46>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d007      	beq.n	8004ada <TIM_TI1_SetConfig+0x46>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <TIM_TI1_SetConfig+0xac>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_TI1_SetConfig+0x46>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <TIM_TI1_SetConfig+0xb0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d101      	bne.n	8004ade <TIM_TI1_SetConfig+0x4a>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <TIM_TI1_SetConfig+0x4c>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	e003      	b.n	8004afe <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f023 030a 	bic.w	r3, r3, #10
 8004b18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f003 030a 	and.w	r3, r3, #10
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800

08004b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 030a 	bic.w	r3, r3, #10
 8004b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0210 	bic.w	r2, r3, #16
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004be2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	031b      	lsls	r3, r3, #12
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f023 0210 	bic.w	r2, r3, #16
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	031b      	lsls	r3, r3, #12
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	621a      	str	r2, [r3, #32]
}
 8004c70:	bf00      	nop
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr

08004c7a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b087      	sub	sp, #28
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	031b      	lsls	r3, r3, #12
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	031b      	lsls	r3, r3, #12
 8004d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f043 0307 	orr.w	r3, r3, #7
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	609a      	str	r2, [r3, #8]
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	021a      	lsls	r2, r3, #8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	609a      	str	r2, [r3, #8]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr

08004dda <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b087      	sub	sp, #28
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	2201      	movs	r2, #1
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1a      	ldr	r2, [r3, #32]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	401a      	ands	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1a      	ldr	r2, [r3, #32]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	431a      	orrs	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr
	...

08004e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e046      	b.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e88:	d009      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a10      	ldr	r2, [pc, #64]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800

08004ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr

08004f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e03f      	b.n	8004f96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc fd88 	bl	8001a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2224      	movs	r2, #36	; 0x24
 8004f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f905 	bl	8005158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b08a      	sub	sp, #40	; 0x28
 8004fa2:	af02      	add	r7, sp, #8
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d17c      	bne.n	80050b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_UART_Transmit+0x2c>
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e075      	b.n	80050ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Transmit+0x3e>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e06e      	b.n	80050ba <HAL_UART_Transmit+0x11c>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2221      	movs	r2, #33	; 0x21
 8004fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004ff2:	f7fc fee5 	bl	8001dc0 <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500c:	d108      	bne.n	8005020 <HAL_UART_Transmit+0x82>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e003      	b.n	8005028 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005030:	e02a      	b.n	8005088 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f840 	bl	80050c2 <UART_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e036      	b.n	80050ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	3302      	adds	r3, #2
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e007      	b.n	800507a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3301      	adds	r3, #1
 8005078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1cf      	bne.n	8005032 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	2140      	movs	r1, #64	; 0x40
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f810 	bl	80050c2 <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e006      	b.n	80050ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e000      	b.n	80050ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050b8:	2302      	movs	r3, #2
  }
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3720      	adds	r7, #32
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	603b      	str	r3, [r7, #0]
 80050ce:	4613      	mov	r3, r2
 80050d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d2:	e02c      	b.n	800512e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d028      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80050e2:	f7fc fe6d 	bl	8001dc0 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d21d      	bcs.n	800512e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005100:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0201 	bic.w	r2, r2, #1
 8005110:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00f      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	429a      	cmp	r2, r3
 800514a:	d0c3      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005192:	f023 030c 	bic.w	r3, r3, #12
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	430b      	orrs	r3, r1
 800519e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2c      	ldr	r2, [pc, #176]	; (800526c <UART_SetConfig+0x114>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d103      	bne.n	80051c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7fe fb06 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	e002      	b.n	80051ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7fe faee 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 80051cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <UART_SetConfig+0x118>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	0119      	lsls	r1, r3, #4
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009a      	lsls	r2, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fbb2 f2f3 	udiv	r2, r2, r3
 8005204:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <UART_SetConfig+0x118>)
 8005206:	fba3 0302 	umull	r0, r3, r3, r2
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2064      	movs	r0, #100	; 0x64
 800520e:	fb00 f303 	mul.w	r3, r0, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	3332      	adds	r3, #50	; 0x32
 8005218:	4a15      	ldr	r2, [pc, #84]	; (8005270 <UART_SetConfig+0x118>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005224:	4419      	add	r1, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009a      	lsls	r2, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	fbb2 f2f3 	udiv	r2, r2, r3
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <UART_SetConfig+0x118>)
 800523e:	fba3 0302 	umull	r0, r3, r3, r2
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2064      	movs	r0, #100	; 0x64
 8005246:	fb00 f303 	mul.w	r3, r0, r3
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	3332      	adds	r3, #50	; 0x32
 8005250:	4a07      	ldr	r2, [pc, #28]	; (8005270 <UART_SetConfig+0x118>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	f003 020f 	and.w	r2, r3, #15
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	440a      	add	r2, r1
 8005262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40013800 	.word	0x40013800
 8005270:	51eb851f 	.word	0x51eb851f

08005274 <MLX90614_ReadReg>:
 * @param devAddr: slave address
 * @param regAddr: command
 *
 */
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af04      	add	r7, sp, #16
 800527a:	4603      	mov	r3, r0
 800527c:	460a      	mov	r2, r1
 800527e:	71fb      	strb	r3, [r7, #7]
 8005280:	4613      	mov	r3, r2
 8005282:	71bb      	strb	r3, [r7, #6]
	uint16_t data;
	uint8_t in_buff[3];

	// read data from address @regAddr --> save in @in_buff
	HAL_I2C_Mem_Read(&hi2c1, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	b29b      	uxth	r3, r3
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	b299      	uxth	r1, r3
 800528c:	79bb      	ldrb	r3, [r7, #6]
 800528e:	b29a      	uxth	r2, r3
 8005290:	2364      	movs	r3, #100	; 0x64
 8005292:	9302      	str	r3, [sp, #8]
 8005294:	2303      	movs	r3, #3
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2301      	movs	r3, #1
 80052a0:	4809      	ldr	r0, [pc, #36]	; (80052c8 <MLX90614_ReadReg+0x54>)
 80052a2:	f7fd f9c1 	bl	8002628 <HAL_I2C_Mem_Read>
	// read LSB truoc --> LSB = in_buff[0] ; MSB = in_buff[1]

	data = (in_buff[1] <<8 | in_buff[0]);
 80052a6:	7a7b      	ldrb	r3, [r7, #9]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	b21a      	sxth	r2, r3
 80052ac:	7a3b      	ldrb	r3, [r7, #8]
 80052ae:	b21b      	sxth	r3, r3
 80052b0:	4313      	orrs	r3, r2
 80052b2:	b21b      	sxth	r3, r3
 80052b4:	81fb      	strh	r3, [r7, #14]

	HAL_Delay(10);
 80052b6:	200a      	movs	r0, #10
 80052b8:	f7fc fd8c 	bl	8001dd4 <HAL_Delay>
	return data;
 80052bc:	89fb      	ldrh	r3, [r7, #14]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	2000030c 	.word	0x2000030c
 80052cc:	00000000 	.word	0x00000000

080052d0 <MLX90614_ReadTemp>:
 * @param devAddr: slave address
 * @param regAddr: command
 * @return temp(C)
 */
float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	460a      	mov	r2, r1
 80052da:	71fb      	strb	r3, [r7, #7]
 80052dc:	4613      	mov	r3, r2
 80052de:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr);
 80052e0:	79ba      	ldrb	r2, [r7, #6]
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	4611      	mov	r1, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff ffc4 	bl	8005274 <MLX90614_ReadReg>
 80052ec:	4603      	mov	r3, r0
 80052ee:	81fb      	strh	r3, [r7, #14]
	temp = data*0.02 - 273.15;
 80052f0:	89fb      	ldrh	r3, [r7, #14]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fb f886 	bl	8000404 <__aeabi_i2d>
 80052f8:	a30d      	add	r3, pc, #52	; (adr r3, 8005330 <MLX90614_ReadTemp+0x60>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb f8eb 	bl	80004d8 <__aeabi_dmul>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	a30b      	add	r3, pc, #44	; (adr r3, 8005338 <MLX90614_ReadTemp+0x68>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f7fa ff2a 	bl	8000168 <__aeabi_dsub>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4610      	mov	r0, r2
 800531a:	4619      	mov	r1, r3
 800531c:	f7fb fbd4 	bl	8000ac8 <__aeabi_d2f>
 8005320:	4603      	mov	r3, r0
 8005322:	60bb      	str	r3, [r7, #8]

	return temp;
 8005324:	68bb      	ldr	r3, [r7, #8]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	47ae147b 	.word	0x47ae147b
 8005334:	3f947ae1 	.word	0x3f947ae1
 8005338:	66666666 	.word	0x66666666
 800533c:	40711266 	.word	0x40711266

08005340 <ST7565_Select>:


uint8_t ST7565_buffer[SCREEN_WIDTH * SCREEN_HEIGHT / 8];


void ST7565_Select(void) {
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7565_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8005344:	2200      	movs	r2, #0
 8005346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800534a:	4802      	ldr	r0, [pc, #8]	; (8005354 <ST7565_Select+0x14>)
 800534c:	f7fd f80f 	bl	800236e <HAL_GPIO_WritePin>
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8005350:	bf00      	nop
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40010800 	.word	0x40010800

08005358 <ST7565_Unselect>:
void ST7565_Unselect(void) {
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7565_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800535c:	2201      	movs	r2, #1
 800535e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005362:	4802      	ldr	r0, [pc, #8]	; (800536c <ST7565_Unselect+0x14>)
 8005364:	f7fd f803 	bl	800236e <HAL_GPIO_WritePin>
					 CS_GPIO_Port->BSRR = CS_Pin;
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8005368:	bf00      	nop
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40010800 	.word	0x40010800

08005370 <ST7565_Reset>:

void ST7565_Reset( void ){  
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 8005374:	2200      	movs	r2, #0
 8005376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800537a:	4808      	ldr	r0, [pc, #32]	; (800539c <ST7565_Reset+0x2c>)
 800537c:	f7fc fff7 	bl	800236e <HAL_GPIO_WritePin>
 HAL_Delay( 10 ); 
 8005380:	200a      	movs	r0, #10
 8005382:	f7fc fd27 	bl	8001dd4 <HAL_Delay>
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 8005386:	2201      	movs	r2, #1
 8005388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800538c:	4803      	ldr	r0, [pc, #12]	; (800539c <ST7565_Reset+0x2c>)
 800538e:	f7fc ffee 	bl	800236e <HAL_GPIO_WritePin>
 HAL_Delay( 10 );  
 8005392:	200a      	movs	r0, #10
 8005394:	f7fc fd1e 	bl	8001dd4 <HAL_Delay>
}
 8005398:	bf00      	nop
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40010800 	.word	0x40010800

080053a0 <ST7565_w_dat>:

void ST7565_w_dat( uint8_t Dat ){  
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
	
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Dat, 1, HAL_MAX_DELAY);
 80053aa:	1df9      	adds	r1, r7, #7
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295
 80053b0:	2201      	movs	r2, #1
 80053b2:	4807      	ldr	r0, [pc, #28]	; (80053d0 <ST7565_w_dat+0x30>)
 80053b4:	f7fe fac2 	bl	800393c <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 80053b8:	bf00      	nop
 80053ba:	4805      	ldr	r0, [pc, #20]	; (80053d0 <ST7565_w_dat+0x30>)
 80053bc:	f7fe fd9c 	bl	8003ef8 <HAL_SPI_GetState>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d1f9      	bne.n	80053ba <ST7565_w_dat+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------
	
}  
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	2000026c 	.word	0x2000026c

080053d4 <ST7565_w_cmd>:

void ST7565_w_cmd( uint8_t Command ){  
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
		
		// pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80053de:	2200      	movs	r2, #0
 80053e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053e4:	480d      	ldr	r0, [pc, #52]	; (800541c <ST7565_w_cmd+0x48>)
 80053e6:	f7fc ffc2 	bl	800236e <HAL_GPIO_WritePin>
		 
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Command, 1, HAL_MAX_DELAY);
 80053ea:	1df9      	adds	r1, r7, #7
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295
 80053f0:	2201      	movs	r2, #1
 80053f2:	480b      	ldr	r0, [pc, #44]	; (8005420 <ST7565_w_cmd+0x4c>)
 80053f4:	f7fe faa2 	bl	800393c <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 80053f8:	bf00      	nop
 80053fa:	4809      	ldr	r0, [pc, #36]	; (8005420 <ST7565_w_cmd+0x4c>)
 80053fc:	f7fe fd7c 	bl	8003ef8 <HAL_SPI_GetState>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d1f9      	bne.n	80053fa <ST7565_w_cmd+0x26>
		 
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005406:	2201      	movs	r2, #1
 8005408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800540c:	4803      	ldr	r0, [pc, #12]	; (800541c <ST7565_w_cmd+0x48>)
 800540e:	f7fc ffae 	bl	800236e <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
		
	#endif
	//-----------------------------------------------------------------------------------
	
} 
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40010800 	.word	0x40010800
 8005420:	2000026c 	.word	0x2000026c

08005424 <ST7565_Display_fill>:

void ST7565_Display_fill( uint8_t fill ){  
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
	
	uint8_t page,column;  
	
	memset( ST7565_buffer, (uint8_t)fill, ( SCREEN_WIDTH * SCREEN_HEIGHT / 8 ) );	// отчистка памяти заполняем массив значением 0x00
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005434:	4619      	mov	r1, r3
 8005436:	4815      	ldr	r0, [pc, #84]	; (800548c <ST7565_Display_fill+0x68>)
 8005438:	f000 fefc 	bl	8006234 <memset>
	
	ST7565_Select();
 800543c:	f7ff ff80 	bl	8005340 <ST7565_Select>
	
	for( page=0xB7; page>=0xB0; page-- ){
 8005440:	23b7      	movs	r3, #183	; 0xb7
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	e019      	b.n	800547a <ST7565_Display_fill+0x56>
		
		ST7565_w_cmd(page);  //set page address   
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff ffc3 	bl	80053d4 <ST7565_w_cmd>
		ST7565_w_cmd(0x10);  //set Column address MSB   
 800544e:	2010      	movs	r0, #16
 8005450:	f7ff ffc0 	bl	80053d4 <ST7565_w_cmd>
		ST7565_w_cmd(0x00);  //set column address LSB   
 8005454:	2000      	movs	r0, #0
 8005456:	f7ff ffbd 	bl	80053d4 <ST7565_w_cmd>
		for( column=0; column<131; column++ ){  
 800545a:	2300      	movs	r3, #0
 800545c:	73bb      	strb	r3, [r7, #14]
 800545e:	e006      	b.n	800546e <ST7565_Display_fill+0x4a>
			ST7565_w_dat(fill);  
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff ff9c 	bl	80053a0 <ST7565_w_dat>
		for( column=0; column<131; column++ ){  
 8005468:	7bbb      	ldrb	r3, [r7, #14]
 800546a:	3301      	adds	r3, #1
 800546c:	73bb      	strb	r3, [r7, #14]
 800546e:	7bbb      	ldrb	r3, [r7, #14]
 8005470:	2b82      	cmp	r3, #130	; 0x82
 8005472:	d9f5      	bls.n	8005460 <ST7565_Display_fill+0x3c>
	for( page=0xB7; page>=0xB0; page-- ){
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	3b01      	subs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2baf      	cmp	r3, #175	; 0xaf
 800547e:	d8e2      	bhi.n	8005446 <ST7565_Display_fill+0x22>
        }  
    }
		
	ST7565_Unselect();
 8005480:	f7ff ff6a 	bl	8005358 <ST7565_Unselect>
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000444 	.word	0x20000444

08005490 <ST7565_Init>:

void ST7565_Init( void ){  
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	
	ST7565_Select();
 8005494:	f7ff ff54 	bl	8005340 <ST7565_Select>
	
	ST7565_Reset();
 8005498:	f7ff ff6a 	bl	8005370 <ST7565_Reset>

	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея	
	ST7565_w_cmd( CMD_SET_BIAS_9 );    // CMD_SET_BIAS_7   1/7    CMD_SET_BIAS_9  1/9
 800549c:	20a2      	movs	r0, #162	; 0xa2
 800549e:	f7ff ff99 	bl	80053d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80054a2:	2001      	movs	r0, #1
 80054a4:	f7fc fc96 	bl	8001dd4 <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	#if defined (SCREEN_ORIENTATION_180)
		ST7565_w_cmd( CMD_SET_ADC_REVERSE );    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		ST7565_w_cmd( CMD_SET_COM_NORMAL );    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#else
		ST7565_w_cmd( CMD_SET_ADC_NORMAL );    		//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
 80054a8:	20a0      	movs	r0, #160	; 0xa0
 80054aa:	f7ff ff93 	bl	80053d4 <ST7565_w_cmd>
		ST7565_w_cmd( CMD_SET_COM_REVERSE );    	//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
 80054ae:	20c8      	movs	r0, #200	; 0xc8
 80054b0:	f7ff ff90 	bl	80053d4 <ST7565_w_cmd>
	#endif		
	//---------------------------------------------------------------------------------------------	
	
	HAL_Delay(1);
 80054b4:	2001      	movs	r0, #1
 80054b6:	f7fc fc8d 	bl	8001dd4 <HAL_Delay>
	
	// делитель внутреннего резистора установлен на 7 (от 0..7)	
	ST7565_w_cmd( CMD_SET_RESISTOR_RATIO | 0x7 );    //Regulator Resistor Selection   
 80054ba:	2027      	movs	r0, #39	; 0x27
 80054bc:	f7ff ff8a 	bl	80053d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80054c0:	2001      	movs	r0, #1
 80054c2:	f7fc fc87 	bl	8001dd4 <HAL_Delay>
	
	// управление питанием, все внутренние блоки включены	(от 0..7)
	ST7565_w_cmd( CMD_SET_POWER_CONTROL | 0x7 );
 80054c6:	202f      	movs	r0, #47	; 0x2f
 80054c8:	f7ff ff84 	bl	80053d4 <ST7565_w_cmd>
		
	HAL_Delay(1);
 80054cc:	2001      	movs	r0, #1
 80054ce:	f7fc fc81 	bl	8001dd4 <HAL_Delay>

	// войти в режим динамического контраста	
	ST7565_w_cmd( CMD_SET_VOLUME_FIRST );    //Electronic Volume   
 80054d2:	2081      	movs	r0, #129	; 0x81
 80054d4:	f7ff ff7e 	bl	80053d4 <ST7565_w_cmd>
	ST7565_w_cmd( 19 );	// устанавливает контраст от 0..63.
 80054d8:	2013      	movs	r0, #19
 80054da:	f7ff ff7b 	bl	80053d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80054de:	2001      	movs	r0, #1
 80054e0:	f7fc fc78 	bl	8001dd4 <HAL_Delay>
	
	ST7565_w_cmd( CMD_SET_DISP_START_LINE );
 80054e4:	2040      	movs	r0, #64	; 0x40
 80054e6:	f7ff ff75 	bl	80053d4 <ST7565_w_cmd>
 
	HAL_Delay(1);
 80054ea:	2001      	movs	r0, #1
 80054ec:	f7fc fc72 	bl	8001dd4 <HAL_Delay>

	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	ST7565_w_cmd( CMD_DISPLAY_ON );    		//Display on   
 80054f0:	20af      	movs	r0, #175	; 0xaf
 80054f2:	f7ff ff6f 	bl	80053d4 <ST7565_w_cmd>
 
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd( CMD_SET_DISP_NORMAL );
 80054f6:	20a6      	movs	r0, #166	; 0xa6
 80054f8:	f7ff ff6c 	bl	80053d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80054fc:	2001      	movs	r0, #1
 80054fe:	f7fc fc69 	bl	8001dd4 <HAL_Delay>
	
	ST7565_Display_fill( 0x00 );
 8005502:	2000      	movs	r0, #0
 8005504:	f7ff ff8e 	bl	8005424 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8005508:	f7ff ff26 	bl	8005358 <ST7565_Unselect>
   
}
 800550c:	bf00      	nop
 800550e:	bd80      	pop	{r7, pc}

08005510 <ST7565_Draw_pixel>:
  
  
  ST7565_Unselect();
}

void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color){
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	80fb      	strh	r3, [r7, #6]
 800551a:	460b      	mov	r3, r1
 800551c:	80bb      	strh	r3, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	70fb      	strb	r3, [r7, #3]
	
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 8005522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	f300 808b 	bgt.w	8005642 <ST7565_Draw_pixel+0x132>
 800552c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f2c0 8086 	blt.w	8005642 <ST7565_Draw_pixel+0x132>
 8005536:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	f300 8081 	bgt.w	8005642 <ST7565_Draw_pixel+0x132>
 8005540:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	db7c      	blt.n	8005642 <ST7565_Draw_pixel+0x132>

    // Real screen coordinates are 0-63, not 1-64.
    x -= 1;
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	3b01      	subs	r3, #1
 800554c:	b29b      	uxth	r3, r3
 800554e:	80fb      	strh	r3, [r7, #6]
    y -= 1;
 8005550:	88bb      	ldrh	r3, [r7, #4]
 8005552:	3b01      	subs	r3, #1
 8005554:	b29b      	uxth	r3, r3
 8005556:	80bb      	strh	r3, [r7, #4]

    uint16_t array_pos = x + ((y / 8) * SCREEN_WIDTH );
 8005558:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	da00      	bge.n	8005562 <ST7565_Draw_pixel+0x52>
 8005560:	3307      	adds	r3, #7
 8005562:	10db      	asrs	r3, r3, #3
 8005564:	b21b      	sxth	r3, r3
 8005566:	b29b      	uxth	r3, r3
 8005568:	01db      	lsls	r3, r3, #7
 800556a:	b29a      	uxth	r2, r3
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	4413      	add	r3, r2
 8005570:	81fb      	strh	r3, [r7, #14]


    if ( color ) {
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d018      	beq.n	80055aa <ST7565_Draw_pixel+0x9a>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8005578:	89fb      	ldrh	r3, [r7, #14]
 800557a:	4a34      	ldr	r2, [pc, #208]	; (800564c <ST7565_Draw_pixel+0x13c>)
 800557c:	5cd3      	ldrb	r3, [r2, r3]
 800557e:	b25a      	sxtb	r2, r3
 8005580:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005584:	4259      	negs	r1, r3
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	f001 0107 	and.w	r1, r1, #7
 800558e:	bf58      	it	pl
 8005590:	424b      	negpl	r3, r1
 8005592:	b21b      	sxth	r3, r3
 8005594:	4619      	mov	r1, r3
 8005596:	2301      	movs	r3, #1
 8005598:	408b      	lsls	r3, r1
 800559a:	b25b      	sxtb	r3, r3
 800559c:	4313      	orrs	r3, r2
 800559e:	b25a      	sxtb	r2, r3
 80055a0:	89fb      	ldrh	r3, [r7, #14]
 80055a2:	b2d1      	uxtb	r1, r2
 80055a4:	4a29      	ldr	r2, [pc, #164]	; (800564c <ST7565_Draw_pixel+0x13c>)
 80055a6:	54d1      	strb	r1, [r2, r3]
 80055a8:	e019      	b.n	80055de <ST7565_Draw_pixel+0xce>
    } 
	else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80055aa:	89fb      	ldrh	r3, [r7, #14]
 80055ac:	4a27      	ldr	r2, [pc, #156]	; (800564c <ST7565_Draw_pixel+0x13c>)
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	b25a      	sxtb	r2, r3
 80055b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055b6:	4259      	negs	r1, r3
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	f001 0107 	and.w	r1, r1, #7
 80055c0:	bf58      	it	pl
 80055c2:	424b      	negpl	r3, r1
 80055c4:	b21b      	sxth	r3, r3
 80055c6:	4619      	mov	r1, r3
 80055c8:	2301      	movs	r3, #1
 80055ca:	408b      	lsls	r3, r1
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	43db      	mvns	r3, r3
 80055d0:	b25b      	sxtb	r3, r3
 80055d2:	4013      	ands	r3, r2
 80055d4:	b25a      	sxtb	r2, r3
 80055d6:	89fb      	ldrh	r3, [r7, #14]
 80055d8:	b2d1      	uxtb	r1, r2
 80055da:	4a1c      	ldr	r2, [pc, #112]	; (800564c <ST7565_Draw_pixel+0x13c>)
 80055dc:	54d1      	strb	r1, [r2, r3]
    }
	
	ST7565_Select();
 80055de:	f7ff feaf 	bl	8005340 <ST7565_Select>
	
	ST7565_SetX(x);	
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	111b      	asrs	r3, r3, #4
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	b25b      	sxtb	r3, r3
 80055ee:	f043 0310 	orr.w	r3, r3, #16
 80055f2:	b25b      	sxtb	r3, r3
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff feec 	bl	80053d4 <ST7565_w_cmd>
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	b2db      	uxtb	r3, r3
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff fee4 	bl	80053d4 <ST7565_w_cmd>
	
	// page 0xB0 0xB1 0xB2 0xB3 0xB4 0xB5 0xB6 0xB7
	ST7565_SetY( (int16_t)y/8 );	// ST7565_SetY(y) 		ST7565_w_cmd( ( (y) & 0x07 ) | 0xB0 )
 800560c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	da00      	bge.n	8005616 <ST7565_Draw_pixel+0x106>
 8005614:	3307      	adds	r3, #7
 8005616:	10db      	asrs	r3, r3, #3
 8005618:	b21b      	sxth	r3, r3
 800561a:	b25b      	sxtb	r3, r3
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	b25b      	sxtb	r3, r3
 8005622:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005626:	b25b      	sxtb	r3, r3
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff fed2 	bl	80053d4 <ST7565_w_cmd>
		
	ST7565_w_dat( ST7565_buffer[array_pos] ); 
 8005630:	89fb      	ldrh	r3, [r7, #14]
 8005632:	4a06      	ldr	r2, [pc, #24]	; (800564c <ST7565_Draw_pixel+0x13c>)
 8005634:	5cd3      	ldrb	r3, [r2, r3]
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff feb2 	bl	80053a0 <ST7565_w_dat>
	
	ST7565_Unselect();
 800563c:	f7ff fe8c 	bl	8005358 <ST7565_Unselect>
 8005640:	e000      	b.n	8005644 <ST7565_Draw_pixel+0x134>
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 8005642:	bf00      	nop
}
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000444 	.word	0x20000444

08005650 <ST7565_DrawChar>:
            if(byte & 0x80){ ST7565_Draw_pixel(x+i, y, color); }
        }
    }	
}

void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	4603      	mov	r3, r0
 800565a:	81fb      	strh	r3, [r7, #14]
 800565c:	460b      	mov	r3, r1
 800565e:	81bb      	strh	r3, [r7, #12]
 8005660:	4613      	mov	r3, r2
 8005662:	72fb      	strb	r3, [r7, #11]
	
	uint16_t i, j;
	
	uint16_t b;
	
	int16_t X = x, Y = y;
 8005664:	89fb      	ldrh	r3, [r7, #14]
 8005666:	833b      	strh	r3, [r7, #24]
 8005668:	89bb      	ldrh	r3, [r7, #12]
 800566a:	82fb      	strh	r3, [r7, #22]
	
	int16_t xx, yy;
	
	if( multiplier < 1 ){
 800566c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <ST7565_DrawChar+0x2a>
		multiplier = 1;
 8005674:	2301      	movs	r3, #1
 8005676:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	/* Check available space in LCD */
	if ( SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)){
 800567a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	7812      	ldrb	r2, [r2, #0]
 8005682:	4413      	add	r3, r2
 8005684:	2b80      	cmp	r3, #128	; 0x80
 8005686:	dd07      	ble.n	8005698 <ST7565_DrawChar+0x48>
 8005688:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	7852      	ldrb	r2, [r2, #1]
 8005690:	4413      	add	r3, r2
 8005692:	2b40      	cmp	r3, #64	; 0x40
 8005694:	f300 80dc 	bgt.w	8005850 <ST7565_DrawChar+0x200>
	
		/* Go through font */
		for (i = 0; i < Font->FontHeight; i++) {
 8005698:	2300      	movs	r3, #0
 800569a:	83fb      	strh	r3, [r7, #30]
 800569c:	e0d1      	b.n	8005842 <ST7565_DrawChar+0x1f2>
			
			if( ch < 127 ){			
 800569e:	7afb      	ldrb	r3, [r7, #11]
 80056a0:	2b7e      	cmp	r3, #126	; 0x7e
 80056a2:	d80e      	bhi.n	80056c2 <ST7565_DrawChar+0x72>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	7afb      	ldrb	r3, [r7, #11]
 80056aa:	3b20      	subs	r3, #32
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	7849      	ldrb	r1, [r1, #1]
 80056b0:	fb01 f103 	mul.w	r1, r1, r3
 80056b4:	8bfb      	ldrh	r3, [r7, #30]
 80056b6:	440b      	add	r3, r1
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	837b      	strh	r3, [r7, #26]
 80056c0:	e038      	b.n	8005734 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch > 191 ){
 80056c2:	7afb      	ldrb	r3, [r7, #11]
 80056c4:	2bbf      	cmp	r3, #191	; 0xbf
 80056c6:	d90e      	bls.n	80056e6 <ST7565_DrawChar+0x96>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	3b60      	subs	r3, #96	; 0x60
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	7849      	ldrb	r1, [r1, #1]
 80056d4:	fb01 f103 	mul.w	r1, r1, r3
 80056d8:	8bfb      	ldrh	r3, [r7, #30]
 80056da:	440b      	add	r3, r1
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4413      	add	r3, r2
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	837b      	strh	r3, [r7, #26]
 80056e4:	e026      	b.n	8005734 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 80056e6:	7afb      	ldrb	r3, [r7, #11]
 80056e8:	2ba8      	cmp	r3, #168	; 0xa8
 80056ea:	d110      	bne.n	800570e <ST7565_DrawChar+0xbe>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[( 160 ) * Font->FontHeight + i];
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	4619      	mov	r1, r3
 80056f6:	460b      	mov	r3, r1
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	015b      	lsls	r3, r3, #5
 80056fe:	4619      	mov	r1, r3
 8005700:	8bfb      	ldrh	r3, [r7, #30]
 8005702:	440b      	add	r3, r1
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	837b      	strh	r3, [r7, #26]
 800570c:	e012      	b.n	8005734 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	2bb8      	cmp	r3, #184	; 0xb8
 8005712:	d10f      	bne.n	8005734 <ST7565_DrawChar+0xe4>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[( 161 ) * Font->FontHeight + i];
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	461a      	mov	r2, r3
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	015b      	lsls	r3, r3, #5
 8005726:	441a      	add	r2, r3
 8005728:	8bfb      	ldrh	r3, [r7, #30]
 800572a:	4413      	add	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	440b      	add	r3, r1
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	837b      	strh	r3, [r7, #26]
			}
			//-------------------------------------------------------------------------------
			
			
			for (j = 0; j < Font->FontWidth; j++) {
 8005734:	2300      	movs	r3, #0
 8005736:	83bb      	strh	r3, [r7, #28]
 8005738:	e071      	b.n	800581e <ST7565_DrawChar+0x1ce>
				
				if ((b << j) & 0x8000) {
 800573a:	8b7a      	ldrh	r2, [r7, #26]
 800573c:	8bbb      	ldrh	r3, [r7, #28]
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02d      	beq.n	80057a6 <ST7565_DrawChar+0x156>
					
					for (yy = 0; yy < multiplier; yy++){
 800574a:	2300      	movs	r3, #0
 800574c:	827b      	strh	r3, [r7, #18]
 800574e:	e023      	b.n	8005798 <ST7565_DrawChar+0x148>
						for (xx = 0; xx < multiplier; xx++){
 8005750:	2300      	movs	r3, #0
 8005752:	82bb      	strh	r3, [r7, #20]
 8005754:	e014      	b.n	8005780 <ST7565_DrawChar+0x130>
								ST7565_Draw_pixel(X+xx, Y+yy, color);
 8005756:	8b3a      	ldrh	r2, [r7, #24]
 8005758:	8abb      	ldrh	r3, [r7, #20]
 800575a:	4413      	add	r3, r2
 800575c:	b29b      	uxth	r3, r3
 800575e:	b218      	sxth	r0, r3
 8005760:	8afa      	ldrh	r2, [r7, #22]
 8005762:	8a7b      	ldrh	r3, [r7, #18]
 8005764:	4413      	add	r3, r2
 8005766:	b29b      	uxth	r3, r3
 8005768:	b21b      	sxth	r3, r3
 800576a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800576e:	4619      	mov	r1, r3
 8005770:	f7ff fece 	bl	8005510 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8005774:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005778:	b29b      	uxth	r3, r3
 800577a:	3301      	adds	r3, #1
 800577c:	b29b      	uxth	r3, r3
 800577e:	82bb      	strh	r3, [r7, #20]
 8005780:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005784:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005788:	429a      	cmp	r2, r3
 800578a:	dbe4      	blt.n	8005756 <ST7565_DrawChar+0x106>
					for (yy = 0; yy < multiplier; yy++){
 800578c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005790:	b29b      	uxth	r3, r3
 8005792:	3301      	adds	r3, #1
 8005794:	b29b      	uxth	r3, r3
 8005796:	827b      	strh	r3, [r7, #18]
 8005798:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800579c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057a0:	429a      	cmp	r2, r3
 80057a2:	dbd5      	blt.n	8005750 <ST7565_DrawChar+0x100>
 80057a4:	e031      	b.n	800580a <ST7565_DrawChar+0x1ba>
				}
				// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть --------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				else{
					
					for (yy = 0; yy < multiplier; yy++){
 80057a6:	2300      	movs	r3, #0
 80057a8:	827b      	strh	r3, [r7, #18]
 80057aa:	e028      	b.n	80057fe <ST7565_DrawChar+0x1ae>
						for (xx = 0; xx < multiplier; xx++){
 80057ac:	2300      	movs	r3, #0
 80057ae:	82bb      	strh	r3, [r7, #20]
 80057b0:	e019      	b.n	80057e6 <ST7565_DrawChar+0x196>
								ST7565_Draw_pixel(X+xx, Y+yy, !color);
 80057b2:	8b3a      	ldrh	r2, [r7, #24]
 80057b4:	8abb      	ldrh	r3, [r7, #20]
 80057b6:	4413      	add	r3, r2
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	b218      	sxth	r0, r3
 80057bc:	8afa      	ldrh	r2, [r7, #22]
 80057be:	8a7b      	ldrh	r3, [r7, #18]
 80057c0:	4413      	add	r3, r2
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	b219      	sxth	r1, r3
 80057c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bf0c      	ite	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	2300      	movne	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	f7ff fe9b 	bl	8005510 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80057da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3301      	adds	r3, #1
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	82bb      	strh	r3, [r7, #20]
 80057e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80057ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057ee:	429a      	cmp	r2, r3
 80057f0:	dbdf      	blt.n	80057b2 <ST7565_DrawChar+0x162>
					for (yy = 0; yy < multiplier; yy++){
 80057f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3301      	adds	r3, #1
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	827b      	strh	r3, [r7, #18]
 80057fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005806:	429a      	cmp	r2, r3
 8005808:	dbd0      	blt.n	80057ac <ST7565_DrawChar+0x15c>
					}
				}
				//-----------------------------------------------------------------------------------------------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				
				X = X + multiplier;
 800580a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800580e:	b29a      	uxth	r2, r3
 8005810:	8b3b      	ldrh	r3, [r7, #24]
 8005812:	4413      	add	r3, r2
 8005814:	b29b      	uxth	r3, r3
 8005816:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8005818:	8bbb      	ldrh	r3, [r7, #28]
 800581a:	3301      	adds	r3, #1
 800581c:	83bb      	strh	r3, [r7, #28]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	8bba      	ldrh	r2, [r7, #28]
 8005826:	429a      	cmp	r2, r3
 8005828:	d387      	bcc.n	800573a <ST7565_DrawChar+0xea>
			}
			
			X = x;
 800582a:	89fb      	ldrh	r3, [r7, #14]
 800582c:	833b      	strh	r3, [r7, #24]
			Y = Y + multiplier;
 800582e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005832:	b29a      	uxth	r2, r3
 8005834:	8afb      	ldrh	r3, [r7, #22]
 8005836:	4413      	add	r3, r2
 8005838:	b29b      	uxth	r3, r3
 800583a:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 800583c:	8bfb      	ldrh	r3, [r7, #30]
 800583e:	3301      	adds	r3, #1
 8005840:	83fb      	strh	r3, [r7, #30]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	785b      	ldrb	r3, [r3, #1]
 8005846:	b29b      	uxth	r3, r3
 8005848:	8bfa      	ldrh	r2, [r7, #30]
 800584a:	429a      	cmp	r2, r3
 800584c:	f4ff af27 	bcc.w	800569e <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8005850:	bf00      	nop
 8005852:	3720      	adds	r7, #32
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <ST7565_Print>:

void ST7565_Print(int16_t x, int16_t y, char* str, FontDef_t* Font, uint8_t multiplier, uint8_t color) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	60ba      	str	r2, [r7, #8]
 8005860:	607b      	str	r3, [r7, #4]
 8005862:	4603      	mov	r3, r0
 8005864:	81fb      	strh	r3, [r7, #14]
 8005866:	460b      	mov	r3, r1
 8005868:	81bb      	strh	r3, [r7, #12]
	
	if( multiplier < 1 ){
 800586a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <ST7565_Print+0x20>
		multiplier = 1;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 3020 	strb.w	r3, [r7, #32]
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8005878:	68b8      	ldr	r0, [r7, #8]
 800587a:	f7fa fc69 	bl	8000150 <strlen>
 800587e:	4603      	mov	r3, r0
 8005880:	82bb      	strh	r3, [r7, #20]
	
	while (len--) {
 8005882:	e06d      	b.n	8005960 <ST7565_Print+0x108>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2bbf      	cmp	r3, #191	; 0xbf
 800588a:	d94a      	bls.n	8005922 <ST7565_Print+0xca>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2bd0      	cmp	r3, #208	; 0xd0
 8005892:	d002      	beq.n	800589a <ST7565_Print+0x42>
 8005894:	2bd1      	cmp	r3, #209	; 0xd1
 8005896:	d017      	beq.n	80058c8 <ST7565_Print+0x70>
 8005898:	e031      	b.n	80058fe <ST7565_Print+0xa6>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3301      	adds	r3, #1
 800589e:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b81      	cmp	r3, #129	; 0x81
 80058a6:	d102      	bne.n	80058ae <ST7565_Print+0x56>
 80058a8:	23a8      	movs	r3, #168	; 0xa8
 80058aa:	75fb      	strb	r3, [r7, #23]
 80058ac:	e027      	b.n	80058fe <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b8f      	cmp	r3, #143	; 0x8f
 80058b4:	d920      	bls.n	80058f8 <ST7565_Print+0xa0>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2bbf      	cmp	r3, #191	; 0xbf
 80058bc:	d81c      	bhi.n	80058f8 <ST7565_Print+0xa0>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	3330      	adds	r3, #48	; 0x30
 80058c4:	75fb      	strb	r3, [r7, #23]
					break;
 80058c6:	e017      	b.n	80058f8 <ST7565_Print+0xa0>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	3301      	adds	r3, #1
 80058cc:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b91      	cmp	r3, #145	; 0x91
 80058d4:	d102      	bne.n	80058dc <ST7565_Print+0x84>
 80058d6:	23b8      	movs	r3, #184	; 0xb8
 80058d8:	75fb      	strb	r3, [r7, #23]
 80058da:	e010      	b.n	80058fe <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	b25b      	sxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da0a      	bge.n	80058fc <ST7565_Print+0xa4>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b8f      	cmp	r3, #143	; 0x8f
 80058ec:	d806      	bhi.n	80058fc <ST7565_Print+0xa4>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	3370      	adds	r3, #112	; 0x70
 80058f4:	75fb      	strb	r3, [r7, #23]
					break;
 80058f6:	e001      	b.n	80058fc <ST7565_Print+0xa4>
					break;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <ST7565_Print+0xa6>
					break;
 80058fc:	bf00      	nop
				}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 80058fe:	8abb      	ldrh	r3, [r7, #20]
 8005900:	3b01      	subs	r3, #1
 8005902:	82bb      	strh	r3, [r7, #20]
			
			ST7565_DrawChar( x, y, buff_char, Font, multiplier, color);
 8005904:	7dfa      	ldrb	r2, [r7, #23]
 8005906:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800590a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800590e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f7ff fe98 	bl	8005650 <ST7565_DrawChar>
 8005920:	e00e      	b.n	8005940 <ST7565_Print+0xe8>
		}
		//---------------------------------------------------------------------
		else{			
			ST7565_DrawChar( x, y, *str, Font, multiplier, color);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800592a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800592e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f7ff fe88 	bl	8005650 <ST7565_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f897 2020 	ldrb.w	r2, [r7, #32]
 800594a:	b292      	uxth	r2, r2
 800594c:	fb02 f303 	mul.w	r3, r2, r3
 8005950:	b29a      	uxth	r2, r3
 8005952:	89fb      	ldrh	r3, [r7, #14]
 8005954:	4413      	add	r3, r2
 8005956:	b29b      	uxth	r3, r3
 8005958:	81fb      	strh	r3, [r7, #14]
		/* Increase string pointer */
		str++;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	3301      	adds	r3, #1
 800595e:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8005960:	8abb      	ldrh	r3, [r7, #20]
 8005962:	1e5a      	subs	r2, r3, #1
 8005964:	82ba      	strh	r2, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d18c      	bne.n	8005884 <ST7565_Print+0x2c>
	}
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <SPI1SendByte>:
#include "stm32f1xx_hal.h"
#include "rc522.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPI1SendByte(uint8_t data) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af02      	add	r7, sp, #8
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8005982:	f107 0208 	add.w	r2, r7, #8
 8005986:	f107 010c 	add.w	r1, r7, #12
 800598a:	230a      	movs	r3, #10
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	2301      	movs	r3, #1
 8005990:	4803      	ldr	r0, [pc, #12]	; (80059a0 <SPI1SendByte+0x2c>)
 8005992:	f7fe f90f 	bl	8003bb4 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8005996:	7a3b      	ldrb	r3, [r7, #8]

}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	200003a8 	.word	0x200003a8

080059a4 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	460a      	mov	r2, r1
 80059ae:	71fb      	strb	r3, [r7, #7]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 80059b4:	2200      	movs	r2, #0
 80059b6:	2110      	movs	r1, #16
 80059b8:	4809      	ldr	r0, [pc, #36]	; (80059e0 <SPI1_WriteReg+0x3c>)
 80059ba:	f7fc fcd8 	bl	800236e <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff ffd7 	bl	8005974 <SPI1SendByte>
	SPI1SendByte(value);
 80059c6:	79bb      	ldrb	r3, [r7, #6]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff ffd3 	bl	8005974 <SPI1SendByte>
	cs_set();
 80059ce:	2201      	movs	r2, #1
 80059d0:	2110      	movs	r1, #16
 80059d2:	4803      	ldr	r0, [pc, #12]	; (80059e0 <SPI1_WriteReg+0x3c>)
 80059d4:	f7fc fccb 	bl	800236e <HAL_GPIO_WritePin>
}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40010800 	.word	0x40010800

080059e4 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 80059ee:	2200      	movs	r2, #0
 80059f0:	2110      	movs	r1, #16
 80059f2:	480b      	ldr	r0, [pc, #44]	; (8005a20 <SPI1_ReadReg+0x3c>)
 80059f4:	f7fc fcbb 	bl	800236e <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff ffba 	bl	8005974 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8005a00:	2000      	movs	r0, #0
 8005a02:	f7ff ffb7 	bl	8005974 <SPI1SendByte>
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	2110      	movs	r1, #16
 8005a0e:	4804      	ldr	r0, [pc, #16]	; (8005a20 <SPI1_ReadReg+0x3c>)
 8005a10:	f7fc fcad 	bl	800236e <HAL_GPIO_WritePin>
	return val;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40010800 	.word	0x40010800

08005a24 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	460a      	mov	r2, r1
 8005a2e:	71fb      	strb	r3, [r7, #7]
 8005a30:	4613      	mov	r3, r2
 8005a32:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005a3e:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8005a40:	79ba      	ldrb	r2, [r7, #6]
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	4611      	mov	r1, r2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff ffac 	bl	80059a4 <SPI1_WriteReg>
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	b25b      	sxtb	r3, r3
 8005a64:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a6e:	b25b      	sxtb	r3, r3
 8005a70:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff ffb5 	bl	80059e4 <SPI1_ReadReg>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	73fb      	strb	r3, [r7, #15]
	return val;	
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	2026      	movs	r0, #38	; 0x26
 8005a94:	f000 f849 	bl	8005b2a <MFRC522_Request>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <MFRC522_Check+0x24>
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f935 	bl	8005d12 <MFRC522_Anticoll>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation
 8005aac:	f000 f9f8 	bl	8005ea0 <MFRC522_Halt>
	return status;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	460a      	mov	r2, r1
 8005ac4:	71fb      	strb	r3, [r7, #7]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff ffc1 	bl	8005a54 <MFRC522_ReadRegister>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	79bb      	ldrb	r3, [r7, #6]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ff9f 	bl	8005a24 <MFRC522_WriteRegister>
}
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	4603      	mov	r3, r0
 8005af6:	460a      	mov	r2, r1
 8005af8:	71fb      	strb	r3, [r7, #7]
 8005afa:	4613      	mov	r3, r2
 8005afc:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff ffa7 	bl	8005a54 <MFRC522_ReadRegister>
 8005b06:	4603      	mov	r3, r0
 8005b08:	b25a      	sxtb	r2, r3
 8005b0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	4013      	ands	r3, r2
 8005b14:	b25b      	sxtb	r3, r3
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff ff81 	bl	8005a24 <MFRC522_WriteRegister>
}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b086      	sub	sp, #24
 8005b2e:	af02      	add	r7, sp, #8
 8005b30:	4603      	mov	r3, r0
 8005b32:	6039      	str	r1, [r7, #0]
 8005b34:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8005b36:	2107      	movs	r1, #7
 8005b38:	200d      	movs	r0, #13
 8005b3a:	f7ff ff73 	bl	8005a24 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	79fa      	ldrb	r2, [r7, #7]
 8005b42:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8005b44:	f107 030c 	add.w	r3, r7, #12
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	200c      	movs	r0, #12
 8005b52:	f000 f80f 	bl	8005b74 <MFRC522_ToCard>
 8005b56:	4603      	mov	r3, r0
 8005b58:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <MFRC522_Request+0x3c>
 8005b60:	89bb      	ldrh	r3, [r7, #12]
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d001      	beq.n	8005b6a <MFRC522_Request+0x40>
 8005b66:	2302      	movs	r3, #2
 8005b68:	73fb      	strb	r3, [r7, #15]
	return status;
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607b      	str	r3, [r7, #4]
 8005b7e:	4603      	mov	r3, r0
 8005b80:	73fb      	strb	r3, [r7, #15]
 8005b82:	4613      	mov	r3, r2
 8005b84:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8005b86:	2302      	movs	r3, #2
 8005b88:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b0c      	cmp	r3, #12
 8005b96:	d006      	beq.n	8005ba6 <MFRC522_ToCard+0x32>
 8005b98:	2b0e      	cmp	r3, #14
 8005b9a:	d109      	bne.n	8005bb0 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8005b9c:	2312      	movs	r3, #18
 8005b9e:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	757b      	strb	r3, [r7, #21]
			break;
 8005ba4:	e005      	b.n	8005bb2 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8005ba6:	2377      	movs	r3, #119	; 0x77
 8005ba8:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8005baa:	2330      	movs	r3, #48	; 0x30
 8005bac:	757b      	strb	r3, [r7, #21]
			break;
 8005bae:	e000      	b.n	8005bb2 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8005bb0:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8005bb2:	7dbb      	ldrb	r3, [r7, #22]
 8005bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	4619      	mov	r1, r3
 8005bbc:	2002      	movs	r0, #2
 8005bbe:	f7ff ff31 	bl	8005a24 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8005bc2:	2180      	movs	r1, #128	; 0x80
 8005bc4:	2004      	movs	r0, #4
 8005bc6:	f7ff ff92 	bl	8005aee <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	200a      	movs	r0, #10
 8005bce:	f7ff ff74 	bl	8005aba <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	f7ff ff25 	bl	8005a24 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8005bda:	2300      	movs	r3, #0
 8005bdc:	827b      	strh	r3, [r7, #18]
 8005bde:	e00a      	b.n	8005bf6 <MFRC522_ToCard+0x82>
 8005be0:	8a7b      	ldrh	r3, [r7, #18]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	4413      	add	r3, r2
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	2009      	movs	r0, #9
 8005bec:	f7ff ff1a 	bl	8005a24 <MFRC522_WriteRegister>
 8005bf0:	8a7b      	ldrh	r3, [r7, #18]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	827b      	strh	r3, [r7, #18]
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8a7a      	ldrh	r2, [r7, #18]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d3ef      	bcc.n	8005be0 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	4619      	mov	r1, r3
 8005c04:	2001      	movs	r0, #1
 8005c06:	f7ff ff0d 	bl	8005a24 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	2b0c      	cmp	r3, #12
 8005c0e:	d103      	bne.n	8005c18 <MFRC522_ToCard+0xa4>
 8005c10:	2180      	movs	r1, #128	; 0x80
 8005c12:	200d      	movs	r0, #13
 8005c14:	f7ff ff51 	bl	8005aba <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8005c18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005c1c:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8005c1e:	2004      	movs	r0, #4
 8005c20:	f7ff ff18 	bl	8005a54 <MFRC522_ReadRegister>
 8005c24:	4603      	mov	r3, r0
 8005c26:	753b      	strb	r3, [r7, #20]
		i--;
 8005c28:	8a7b      	ldrh	r3, [r7, #18]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8005c2e:	8a7b      	ldrh	r3, [r7, #18]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00a      	beq.n	8005c4a <MFRC522_ToCard+0xd6>
 8005c34:	7d3b      	ldrb	r3, [r7, #20]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d105      	bne.n	8005c4a <MFRC522_ToCard+0xd6>
 8005c3e:	7d3a      	ldrb	r2, [r7, #20]
 8005c40:	7d7b      	ldrb	r3, [r7, #21]
 8005c42:	4013      	ands	r3, r2
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0e9      	beq.n	8005c1e <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8005c4a:	2180      	movs	r1, #128	; 0x80
 8005c4c:	200d      	movs	r0, #13
 8005c4e:	f7ff ff4e 	bl	8005aee <MFRC522_ClearBitMask>

	if (i != 0)  {
 8005c52:	8a7b      	ldrh	r3, [r7, #18]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d057      	beq.n	8005d08 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8005c58:	2006      	movs	r0, #6
 8005c5a:	f7ff fefb 	bl	8005a54 <MFRC522_ReadRegister>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f003 031b 	and.w	r3, r3, #27
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d14d      	bne.n	8005d04 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8005c6c:	7d3a      	ldrb	r2, [r7, #20]
 8005c6e:	7dbb      	ldrb	r3, [r7, #22]
 8005c70:	4013      	ands	r3, r2
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <MFRC522_ToCard+0x10c>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b0c      	cmp	r3, #12
 8005c84:	d140      	bne.n	8005d08 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8005c86:	200a      	movs	r0, #10
 8005c88:	f7ff fee4 	bl	8005a54 <MFRC522_ReadRegister>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8005c90:	200c      	movs	r0, #12
 8005c92:	f7ff fedf 	bl	8005a54 <MFRC522_ReadRegister>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8005c9e:	7c7b      	ldrb	r3, [r7, #17]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <MFRC522_ToCard+0x148>
 8005ca4:	7d3b      	ldrb	r3, [r7, #20]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	7c7b      	ldrb	r3, [r7, #17]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	e005      	b.n	8005cc8 <MFRC522_ToCard+0x154>
 8005cbc:	7d3b      	ldrb	r3, [r7, #20]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8005cc8:	7d3b      	ldrb	r3, [r7, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <MFRC522_ToCard+0x15e>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8005cd2:	7d3b      	ldrb	r3, [r7, #20]
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d901      	bls.n	8005cdc <MFRC522_ToCard+0x168>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8005cdc:	2300      	movs	r3, #0
 8005cde:	827b      	strh	r3, [r7, #18]
 8005ce0:	e00a      	b.n	8005cf8 <MFRC522_ToCard+0x184>
 8005ce2:	8a7b      	ldrh	r3, [r7, #18]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	18d4      	adds	r4, r2, r3
 8005ce8:	2009      	movs	r0, #9
 8005cea:	f7ff feb3 	bl	8005a54 <MFRC522_ReadRegister>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	7023      	strb	r3, [r4, #0]
 8005cf2:	8a7b      	ldrh	r3, [r7, #18]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	827b      	strh	r3, [r7, #18]
 8005cf8:	7d3b      	ldrb	r3, [r7, #20]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8a7a      	ldrh	r2, [r7, #18]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d3ef      	bcc.n	8005ce2 <MFRC522_ToCard+0x16e>
 8005d02:	e001      	b.n	8005d08 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8005d04:	2302      	movs	r3, #2
 8005d06:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd90      	pop	{r4, r7, pc}

08005d12 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b086      	sub	sp, #24
 8005d16:	af02      	add	r7, sp, #8
 8005d18:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8005d1e:	2100      	movs	r1, #0
 8005d20:	200d      	movs	r0, #13
 8005d22:	f7ff fe7f 	bl	8005a24 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2293      	movs	r2, #147	; 0x93
 8005d2a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	2220      	movs	r2, #32
 8005d32:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8005d34:	f107 030a 	add.w	r3, r7, #10
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	200c      	movs	r0, #12
 8005d42:	f7ff ff17 	bl	8005b74 <MFRC522_ToCard>
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d118      	bne.n	8005d82 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8005d50:	2300      	movs	r3, #0
 8005d52:	73bb      	strb	r3, [r7, #14]
 8005d54:	e009      	b.n	8005d6a <MFRC522_Anticoll+0x58>
 8005d56:	7bbb      	ldrb	r3, [r7, #14]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	781a      	ldrb	r2, [r3, #0]
 8005d5e:	7b7b      	ldrb	r3, [r7, #13]
 8005d60:	4053      	eors	r3, r2
 8005d62:	737b      	strb	r3, [r7, #13]
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	3301      	adds	r3, #1
 8005d68:	73bb      	strb	r3, [r7, #14]
 8005d6a:	7bbb      	ldrb	r3, [r7, #14]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d9f2      	bls.n	8005d56 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	7b7a      	ldrb	r2, [r7, #13]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d001      	beq.n	8005d82 <MFRC522_Anticoll+0x70>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
} 
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	460b      	mov	r3, r1
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8005d9a:	2104      	movs	r1, #4
 8005d9c:	2005      	movs	r0, #5
 8005d9e:	f7ff fea6 	bl	8005aee <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8005da2:	2180      	movs	r1, #128	; 0x80
 8005da4:	200a      	movs	r0, #10
 8005da6:	f7ff fe88 	bl	8005aba <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8005daa:	2300      	movs	r3, #0
 8005dac:	75fb      	strb	r3, [r7, #23]
 8005dae:	e00a      	b.n	8005dc6 <MFRC522_CalculateCRC+0x3a>
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	4619      	mov	r1, r3
 8005dba:	2009      	movs	r0, #9
 8005dbc:	f7ff fe32 	bl	8005a24 <MFRC522_WriteRegister>
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
 8005dc6:	7dfa      	ldrb	r2, [r7, #23]
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d3f0      	bcc.n	8005db0 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8005dce:	2103      	movs	r1, #3
 8005dd0:	2001      	movs	r0, #1
 8005dd2:	f7ff fe27 	bl	8005a24 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8005dd6:	23ff      	movs	r3, #255	; 0xff
 8005dd8:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8005dda:	2005      	movs	r0, #5
 8005ddc:	f7ff fe3a 	bl	8005a54 <MFRC522_ReadRegister>
 8005de0:	4603      	mov	r3, r0
 8005de2:	75bb      	strb	r3, [r7, #22]
		i--;
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d004      	beq.n	8005dfa <MFRC522_CalculateCRC+0x6e>
 8005df0:	7dbb      	ldrb	r3, [r7, #22]
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0ef      	beq.n	8005dda <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8005dfa:	2022      	movs	r0, #34	; 0x22
 8005dfc:	f7ff fe2a 	bl	8005a54 <MFRC522_ReadRegister>
 8005e00:	4603      	mov	r3, r0
 8005e02:	461a      	mov	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	1c5c      	adds	r4, r3, #1
 8005e0c:	2021      	movs	r0, #33	; 0x21
 8005e0e:	f7ff fe21 	bl	8005a54 <MFRC522_ReadRegister>
 8005e12:	4603      	mov	r3, r0
 8005e14:	7023      	strb	r3, [r4, #0]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}

08005e1e <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8005e22:	f000 f820 	bl	8005e66 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8005e26:	218d      	movs	r1, #141	; 0x8d
 8005e28:	202a      	movs	r0, #42	; 0x2a
 8005e2a:	f7ff fdfb 	bl	8005a24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8005e2e:	213e      	movs	r1, #62	; 0x3e
 8005e30:	202b      	movs	r0, #43	; 0x2b
 8005e32:	f7ff fdf7 	bl	8005a24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8005e36:	211e      	movs	r1, #30
 8005e38:	202d      	movs	r0, #45	; 0x2d
 8005e3a:	f7ff fdf3 	bl	8005a24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8005e3e:	2100      	movs	r1, #0
 8005e40:	202c      	movs	r0, #44	; 0x2c
 8005e42:	f7ff fdef 	bl	8005a24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8005e46:	2170      	movs	r1, #112	; 0x70
 8005e48:	2026      	movs	r0, #38	; 0x26
 8005e4a:	f7ff fdeb 	bl	8005a24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8005e4e:	2140      	movs	r1, #64	; 0x40
 8005e50:	2015      	movs	r0, #21
 8005e52:	f7ff fde7 	bl	8005a24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8005e56:	213d      	movs	r1, #61	; 0x3d
 8005e58:	2011      	movs	r0, #17
 8005e5a:	f7ff fde3 	bl	8005a24 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8005e5e:	f000 f80a 	bl	8005e76 <MFRC522_AntennaOn>
}
 8005e62:	bf00      	nop
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8005e66:	b580      	push	{r7, lr}
 8005e68:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8005e6a:	210f      	movs	r1, #15
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	f7ff fdd9 	bl	8005a24 <MFRC522_WriteRegister>
}
 8005e72:	bf00      	nop
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8005e7c:	2014      	movs	r0, #20
 8005e7e:	f7ff fde9 	bl	8005a54 <MFRC522_ReadRegister>
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <MFRC522_AntennaOn+0x22>
 8005e90:	2103      	movs	r1, #3
 8005e92:	2014      	movs	r0, #20
 8005e94:	f7ff fe11 	bl	8005aba <MFRC522_SetBitMask>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8005ea6:	2350      	movs	r3, #80	; 0x50
 8005ea8:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8005eae:	463b      	mov	r3, r7
 8005eb0:	1c9a      	adds	r2, r3, #2
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	2102      	movs	r1, #2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff ff68 	bl	8005d8c <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8005ebc:	463a      	mov	r2, r7
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	1dbb      	adds	r3, r7, #6
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	200c      	movs	r0, #12
 8005eca:	f7ff fe53 	bl	8005b74 <MFRC522_ToCard>
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <HX711_init>:
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
}
//#############################################################################################
void  HX711_init(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	607b      	str	r3, [r7, #4]
  gpio.Pull = GPIO_NOPULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	60fb      	str	r3, [r7, #12]
  gpio.Pin = _HX711_SCK_PIN;
 8005eea:	2301      	movs	r3, #1
 8005eec:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(_HX711_SCK_GPIO, &gpio);
 8005eee:	463b      	mov	r3, r7
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4817      	ldr	r0, [pc, #92]	; (8005f50 <HX711_init+0x78>)
 8005ef4:	f7fc f8a0 	bl	8002038 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	607b      	str	r3, [r7, #4]
  gpio.Pull = GPIO_NOPULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f00:	2303      	movs	r3, #3
 8005f02:	60fb      	str	r3, [r7, #12]
  gpio.Pin = _HX711_DI_PIN;
 8005f04:	2302      	movs	r3, #2
 8005f06:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(_HX711_DI_GPIO, &gpio);
 8005f08:	463b      	mov	r3, r7
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4810      	ldr	r0, [pc, #64]	; (8005f50 <HX711_init+0x78>)
 8005f0e:	f7fc f893 	bl	8002038 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_SET);
 8005f12:	2201      	movs	r2, #1
 8005f14:	2101      	movs	r1, #1
 8005f16:	480e      	ldr	r0, [pc, #56]	; (8005f50 <HX711_init+0x78>)
 8005f18:	f7fc fa29 	bl	800236e <HAL_GPIO_WritePin>
  HX711_delay(10);
 8005f1c:	200a      	movs	r0, #10
 8005f1e:	f7fb ff59 	bl	8001dd4 <HAL_Delay>
  HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_RESET);
 8005f22:	2200      	movs	r2, #0
 8005f24:	2101      	movs	r1, #1
 8005f26:	480a      	ldr	r0, [pc, #40]	; (8005f50 <HX711_init+0x78>)
 8005f28:	f7fc fa21 	bl	800236e <HAL_GPIO_WritePin>
  HX711_delay(10);
 8005f2c:	200a      	movs	r0, #10
 8005f2e:	f7fb ff51 	bl	8001dd4 <HAL_Delay>
  HX711_valueAve(8, Channel_A);
 8005f32:	2118      	movs	r1, #24
 8005f34:	2008      	movs	r0, #8
 8005f36:	f000 f86d 	bl	8006014 <HX711_valueAve>
  HX711_delay(10);
 8005f3a:	200a      	movs	r0, #10
 8005f3c:	f7fb ff4a 	bl	8001dd4 <HAL_Delay>
  HX711_valueAve(8, Channel_B);
 8005f40:	2119      	movs	r1, #25
 8005f42:	2008      	movs	r0, #8
 8005f44:	f000 f866 	bl	8006014 <HX711_valueAve>
}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40010800 	.word	0x40010800

08005f54 <HX711_value>:
//#############################################################################################
uint32_t HX711_value(int Channel)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8005f60:	f7fb ff2e 	bl	8001dc0 <HAL_GetTick>
 8005f64:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(_HX711_DI_GPIO, _HX711_DI_PIN) == GPIO_PIN_SET)
 8005f66:	e008      	b.n	8005f7a <HX711_value+0x26>
  {
    if(HAL_GetTick() - startTime > 150)
 8005f68:	f7fb ff2a 	bl	8001dc0 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b96      	cmp	r3, #150	; 0x96
 8005f74:	d901      	bls.n	8005f7a <HX711_value+0x26>
      return 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e046      	b.n	8006008 <HX711_value+0xb4>
  while(HAL_GPIO_ReadPin(_HX711_DI_GPIO, _HX711_DI_PIN) == GPIO_PIN_SET)
 8005f7a:	2102      	movs	r1, #2
 8005f7c:	4824      	ldr	r0, [pc, #144]	; (8006010 <HX711_value+0xbc>)
 8005f7e:	f7fc f9df 	bl	8002340 <HAL_GPIO_ReadPin>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d0ef      	beq.n	8005f68 <HX711_value+0x14>
  }
  for(int8_t i=0; i < Channel ; i++)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	74fb      	strb	r3, [r7, #19]
 8005f8c:	e022      	b.n	8005fd4 <HX711_value+0x80>
  {
    HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_SET);
 8005f8e:	2201      	movs	r2, #1
 8005f90:	2101      	movs	r1, #1
 8005f92:	481f      	ldr	r0, [pc, #124]	; (8006010 <HX711_value+0xbc>)
 8005f94:	f7fc f9eb 	bl	800236e <HAL_GPIO_WritePin>
    delay_us(1);
 8005f98:	2001      	movs	r0, #1
 8005f9a:	f000 f907 	bl	80061ac <delay_us>
//    HX711_delay_us(1);
    data = data << 1;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_RESET);
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4819      	ldr	r0, [pc, #100]	; (8006010 <HX711_value+0xbc>)
 8005faa:	f7fc f9e0 	bl	800236e <HAL_GPIO_WritePin>
    delay_us(1);
 8005fae:	2001      	movs	r0, #1
 8005fb0:	f000 f8fc 	bl	80061ac <delay_us>
//    HX711_delay_us(1);
    if(HAL_GPIO_ReadPin(_HX711_DI_GPIO, _HX711_DI_PIN) == GPIO_PIN_SET)
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	4816      	ldr	r0, [pc, #88]	; (8006010 <HX711_value+0xbc>)
 8005fb8:	f7fc f9c2 	bl	8002340 <HAL_GPIO_ReadPin>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d102      	bne.n	8005fc8 <HX711_value+0x74>
      data ++;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i < Channel ; i++)
 8005fc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	3301      	adds	r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	74fb      	strb	r3, [r7, #19]
 8005fd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	dcd7      	bgt.n	8005f8e <HX711_value+0x3a>
  }
  data = data ^ 0x800000;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8005fe4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_SET);
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4809      	ldr	r0, [pc, #36]	; (8006010 <HX711_value+0xbc>)
 8005fec:	f7fc f9bf 	bl	800236e <HAL_GPIO_WritePin>
  delay_us(1);
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	f000 f8db 	bl	80061ac <delay_us>
//  HX711_delay_us(1);
  HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_RESET);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	4805      	ldr	r0, [pc, #20]	; (8006010 <HX711_value+0xbc>)
 8005ffc:	f7fc f9b7 	bl	800236e <HAL_GPIO_WritePin>
  delay_us(1);
 8006000:	2001      	movs	r0, #1
 8006002:	f000 f8d3 	bl	80061ac <delay_us>
//  HX711_delay_us(1);
  return data;
 8006006:	697b      	ldr	r3, [r7, #20]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40010800 	.word	0x40010800

08006014 <HX711_valueAve>:
//#############################################################################################
uint32_t HX711_valueAve(uint16_t sample, int Channel)
{
 8006014:	b5b0      	push	{r4, r5, r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	6039      	str	r1, [r7, #0]
 800601e:	80fb      	strh	r3, [r7, #6]
  uint64_t  ave = 0;
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9c7 2304 	strd	r2, r3, [r7, #16]

  for(uint16_t i=0 ; i < sample ; i++)
 800602c:	2300      	movs	r3, #0
 800602e:	81fb      	strh	r3, [r7, #14]
 8006030:	e010      	b.n	8006054 <HX711_valueAve+0x40>
    ave += HX711_value(Channel);
 8006032:	6838      	ldr	r0, [r7, #0]
 8006034:	f7ff ff8e 	bl	8005f54 <HX711_value>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006044:	1884      	adds	r4, r0, r2
 8006046:	eb41 0503 	adc.w	r5, r1, r3
 800604a:	e9c7 4504 	strd	r4, r5, [r7, #16]
  for(uint16_t i=0 ; i < sample ; i++)
 800604e:	89fb      	ldrh	r3, [r7, #14]
 8006050:	3301      	adds	r3, #1
 8006052:	81fb      	strh	r3, [r7, #14]
 8006054:	89fa      	ldrh	r2, [r7, #14]
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	429a      	cmp	r2, r3
 800605a:	d3ea      	bcc.n	8006032 <HX711_valueAve+0x1e>
  return (int32_t)(ave / sample);
 800605c:	88fa      	ldrh	r2, [r7, #6]
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006066:	f7fa fd7f 	bl	8000b68 <__aeabi_uldivmod>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4613      	mov	r3, r2
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bdb0      	pop	{r4, r5, r7, pc}

08006078 <HX711_getWeight>:
//#############################################################################################
 float HX711_getWeight(void)
 { 
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
   float Weight = 0;
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	607b      	str	r3, [r7, #4]
   uint32_t weight_raw = HX711_valueAve(16, Channel_B);
 8006084:	2119      	movs	r1, #25
 8006086:	2010      	movs	r0, #16
 8006088:	f7ff ffc4 	bl	8006014 <HX711_valueAve>
 800608c:	6038      	str	r0, [r7, #0]
   Weight = 2* ((pow(2,23) - weight_raw))/((pow(2, 23)/200));
 800608e:	6838      	ldr	r0, [r7, #0]
 8006090:	f7fa f9a8 	bl	80003e4 <__aeabi_ui2d>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	f04f 0000 	mov.w	r0, #0
 800609c:	4912      	ldr	r1, [pc, #72]	; (80060e8 <HX711_getWeight+0x70>)
 800609e:	f7fa f863 	bl	8000168 <__aeabi_dsub>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4610      	mov	r0, r2
 80060a8:	4619      	mov	r1, r3
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	f7fa f85d 	bl	800016c <__adddf3>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4610      	mov	r0, r2
 80060b8:	4619      	mov	r1, r3
 80060ba:	a309      	add	r3, pc, #36	; (adr r3, 80060e0 <HX711_getWeight+0x68>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f7fa fb34 	bl	800072c <__aeabi_ddiv>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4610      	mov	r0, r2
 80060ca:	4619      	mov	r1, r3
 80060cc:	f7fa fcfc 	bl	8000ac8 <__aeabi_d2f>
 80060d0:	4603      	mov	r3, r0
 80060d2:	607b      	str	r3, [r7, #4]
   return Weight;
 80060d4:	687b      	ldr	r3, [r7, #4]
 }
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	47ae147b 	.word	0x47ae147b
 80060e4:	40e47ae1 	.word	0x40e47ae1
 80060e8:	41600000 	.word	0x41600000

080060ec <TimerDelay_Init>:
#define TIMER  TIM4
volatile static TIM_HandleTypeDef HTIMx;
volatile static uint32_t gu32_ticks = 0;

void TimerDelay_Init(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80060f2:	f7fd fb4f 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80060f6:	4603      	mov	r3, r0
 80060f8:	4a28      	ldr	r2, [pc, #160]	; (800619c <TimerDelay_Init+0xb0>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	0c9b      	lsrs	r3, r3, #18
 8006100:	4a27      	ldr	r2, [pc, #156]	; (80061a0 <TimerDelay_Init+0xb4>)
 8006102:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8006104:	4b27      	ldr	r3, [pc, #156]	; (80061a4 <TimerDelay_Init+0xb8>)
 8006106:	4a28      	ldr	r2, [pc, #160]	; (80061a8 <TimerDelay_Init+0xbc>)
 8006108:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800610a:	f107 0308 	add.w	r3, r7, #8
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	605a      	str	r2, [r3, #4]
 8006114:	609a      	str	r2, [r3, #8]
 8006116:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006118:	463b      	mov	r3, r7
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 8006120:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <TimerDelay_Init+0xb4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3b01      	subs	r3, #1
 8006126:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <TimerDelay_Init+0xb8>)
 8006128:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 800612a:	4b1e      	ldr	r3, [pc, #120]	; (80061a4 <TimerDelay_Init+0xb8>)
 800612c:	2200      	movs	r2, #0
 800612e:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 8006130:	4b1c      	ldr	r3, [pc, #112]	; (80061a4 <TimerDelay_Init+0xb8>)
 8006132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006136:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006138:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <TimerDelay_Init+0xb8>)
 800613a:	2200      	movs	r2, #0
 800613c:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800613e:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <TimerDelay_Init+0xb8>)
 8006140:	2280      	movs	r2, #128	; 0x80
 8006142:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 8006144:	4817      	ldr	r0, [pc, #92]	; (80061a4 <TimerDelay_Init+0xb8>)
 8006146:	f7fd ff8b 	bl	8004060 <HAL_TIM_Base_Init>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <TimerDelay_Init+0x68>
    {
      Error_Handler();
 8006150:	f7fb fb14 	bl	800177c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006158:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	4619      	mov	r1, r3
 8006160:	4810      	ldr	r0, [pc, #64]	; (80061a4 <TimerDelay_Init+0xb8>)
 8006162:	f7fe fb09 	bl	8004778 <HAL_TIM_ConfigClockSource>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <TimerDelay_Init+0x84>
    {
      Error_Handler();
 800616c:	f7fb fb06 	bl	800177c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006170:	2300      	movs	r3, #0
 8006172:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006174:	2300      	movs	r3, #0
 8006176:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 8006178:	463b      	mov	r3, r7
 800617a:	4619      	mov	r1, r3
 800617c:	4809      	ldr	r0, [pc, #36]	; (80061a4 <TimerDelay_Init+0xb8>)
 800617e:	f7fe fe51 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 8006188:	f7fb faf8 	bl	800177c <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 800618c:	4805      	ldr	r0, [pc, #20]	; (80061a4 <TimerDelay_Init+0xb8>)
 800618e:	f7fd ffb7 	bl	8004100 <HAL_TIM_Base_Start>

}
 8006192:	bf00      	nop
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	431bde83 	.word	0x431bde83
 80061a0:	20000260 	.word	0x20000260
 80061a4:	20000218 	.word	0x20000218
 80061a8:	40000800 	.word	0x40000800

080061ac <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <delay_us+0x30>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2200      	movs	r2, #0
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24
	while (HTIMx.Instance->CNT < au16_us);
 80061be:	bf00      	nop
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <delay_us+0x30>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	b292      	uxth	r2, r2
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d3f8      	bcc.n	80061c0 <delay_us+0x14>
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000218 	.word	0x20000218

080061e0 <__errno>:
 80061e0:	4b01      	ldr	r3, [pc, #4]	; (80061e8 <__errno+0x8>)
 80061e2:	6818      	ldr	r0, [r3, #0]
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	20000014 	.word	0x20000014

080061ec <__libc_init_array>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	2600      	movs	r6, #0
 80061f0:	4d0c      	ldr	r5, [pc, #48]	; (8006224 <__libc_init_array+0x38>)
 80061f2:	4c0d      	ldr	r4, [pc, #52]	; (8006228 <__libc_init_array+0x3c>)
 80061f4:	1b64      	subs	r4, r4, r5
 80061f6:	10a4      	asrs	r4, r4, #2
 80061f8:	42a6      	cmp	r6, r4
 80061fa:	d109      	bne.n	8006210 <__libc_init_array+0x24>
 80061fc:	f004 fc2a 	bl	800aa54 <_init>
 8006200:	2600      	movs	r6, #0
 8006202:	4d0a      	ldr	r5, [pc, #40]	; (800622c <__libc_init_array+0x40>)
 8006204:	4c0a      	ldr	r4, [pc, #40]	; (8006230 <__libc_init_array+0x44>)
 8006206:	1b64      	subs	r4, r4, r5
 8006208:	10a4      	asrs	r4, r4, #2
 800620a:	42a6      	cmp	r6, r4
 800620c:	d105      	bne.n	800621a <__libc_init_array+0x2e>
 800620e:	bd70      	pop	{r4, r5, r6, pc}
 8006210:	f855 3b04 	ldr.w	r3, [r5], #4
 8006214:	4798      	blx	r3
 8006216:	3601      	adds	r6, #1
 8006218:	e7ee      	b.n	80061f8 <__libc_init_array+0xc>
 800621a:	f855 3b04 	ldr.w	r3, [r5], #4
 800621e:	4798      	blx	r3
 8006220:	3601      	adds	r6, #1
 8006222:	e7f2      	b.n	800620a <__libc_init_array+0x1e>
 8006224:	0800b66c 	.word	0x0800b66c
 8006228:	0800b66c 	.word	0x0800b66c
 800622c:	0800b66c 	.word	0x0800b66c
 8006230:	0800b670 	.word	0x0800b670

08006234 <memset>:
 8006234:	4603      	mov	r3, r0
 8006236:	4402      	add	r2, r0
 8006238:	4293      	cmp	r3, r2
 800623a:	d100      	bne.n	800623e <memset+0xa>
 800623c:	4770      	bx	lr
 800623e:	f803 1b01 	strb.w	r1, [r3], #1
 8006242:	e7f9      	b.n	8006238 <memset+0x4>

08006244 <__cvt>:
 8006244:	2b00      	cmp	r3, #0
 8006246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800624a:	461f      	mov	r7, r3
 800624c:	bfbb      	ittet	lt
 800624e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006252:	461f      	movlt	r7, r3
 8006254:	2300      	movge	r3, #0
 8006256:	232d      	movlt	r3, #45	; 0x2d
 8006258:	b088      	sub	sp, #32
 800625a:	4614      	mov	r4, r2
 800625c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800625e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006260:	7013      	strb	r3, [r2, #0]
 8006262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006264:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006268:	f023 0820 	bic.w	r8, r3, #32
 800626c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006270:	d005      	beq.n	800627e <__cvt+0x3a>
 8006272:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006276:	d100      	bne.n	800627a <__cvt+0x36>
 8006278:	3501      	adds	r5, #1
 800627a:	2302      	movs	r3, #2
 800627c:	e000      	b.n	8006280 <__cvt+0x3c>
 800627e:	2303      	movs	r3, #3
 8006280:	aa07      	add	r2, sp, #28
 8006282:	9204      	str	r2, [sp, #16]
 8006284:	aa06      	add	r2, sp, #24
 8006286:	e9cd a202 	strd	sl, r2, [sp, #8]
 800628a:	e9cd 3500 	strd	r3, r5, [sp]
 800628e:	4622      	mov	r2, r4
 8006290:	463b      	mov	r3, r7
 8006292:	f001 fda1 	bl	8007dd8 <_dtoa_r>
 8006296:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800629a:	4606      	mov	r6, r0
 800629c:	d102      	bne.n	80062a4 <__cvt+0x60>
 800629e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062a0:	07db      	lsls	r3, r3, #31
 80062a2:	d522      	bpl.n	80062ea <__cvt+0xa6>
 80062a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062a8:	eb06 0905 	add.w	r9, r6, r5
 80062ac:	d110      	bne.n	80062d0 <__cvt+0x8c>
 80062ae:	7833      	ldrb	r3, [r6, #0]
 80062b0:	2b30      	cmp	r3, #48	; 0x30
 80062b2:	d10a      	bne.n	80062ca <__cvt+0x86>
 80062b4:	2200      	movs	r2, #0
 80062b6:	2300      	movs	r3, #0
 80062b8:	4620      	mov	r0, r4
 80062ba:	4639      	mov	r1, r7
 80062bc:	f7fa fb74 	bl	80009a8 <__aeabi_dcmpeq>
 80062c0:	b918      	cbnz	r0, 80062ca <__cvt+0x86>
 80062c2:	f1c5 0501 	rsb	r5, r5, #1
 80062c6:	f8ca 5000 	str.w	r5, [sl]
 80062ca:	f8da 3000 	ldr.w	r3, [sl]
 80062ce:	4499      	add	r9, r3
 80062d0:	2200      	movs	r2, #0
 80062d2:	2300      	movs	r3, #0
 80062d4:	4620      	mov	r0, r4
 80062d6:	4639      	mov	r1, r7
 80062d8:	f7fa fb66 	bl	80009a8 <__aeabi_dcmpeq>
 80062dc:	b108      	cbz	r0, 80062e2 <__cvt+0x9e>
 80062de:	f8cd 901c 	str.w	r9, [sp, #28]
 80062e2:	2230      	movs	r2, #48	; 0x30
 80062e4:	9b07      	ldr	r3, [sp, #28]
 80062e6:	454b      	cmp	r3, r9
 80062e8:	d307      	bcc.n	80062fa <__cvt+0xb6>
 80062ea:	4630      	mov	r0, r6
 80062ec:	9b07      	ldr	r3, [sp, #28]
 80062ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062f0:	1b9b      	subs	r3, r3, r6
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	b008      	add	sp, #32
 80062f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fa:	1c59      	adds	r1, r3, #1
 80062fc:	9107      	str	r1, [sp, #28]
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	e7f0      	b.n	80062e4 <__cvt+0xa0>

08006302 <__exponent>:
 8006302:	4603      	mov	r3, r0
 8006304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006306:	2900      	cmp	r1, #0
 8006308:	f803 2b02 	strb.w	r2, [r3], #2
 800630c:	bfb6      	itet	lt
 800630e:	222d      	movlt	r2, #45	; 0x2d
 8006310:	222b      	movge	r2, #43	; 0x2b
 8006312:	4249      	neglt	r1, r1
 8006314:	2909      	cmp	r1, #9
 8006316:	7042      	strb	r2, [r0, #1]
 8006318:	dd2b      	ble.n	8006372 <__exponent+0x70>
 800631a:	f10d 0407 	add.w	r4, sp, #7
 800631e:	46a4      	mov	ip, r4
 8006320:	270a      	movs	r7, #10
 8006322:	fb91 f6f7 	sdiv	r6, r1, r7
 8006326:	460a      	mov	r2, r1
 8006328:	46a6      	mov	lr, r4
 800632a:	fb07 1516 	mls	r5, r7, r6, r1
 800632e:	2a63      	cmp	r2, #99	; 0x63
 8006330:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006334:	4631      	mov	r1, r6
 8006336:	f104 34ff 	add.w	r4, r4, #4294967295
 800633a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800633e:	dcf0      	bgt.n	8006322 <__exponent+0x20>
 8006340:	3130      	adds	r1, #48	; 0x30
 8006342:	f1ae 0502 	sub.w	r5, lr, #2
 8006346:	f804 1c01 	strb.w	r1, [r4, #-1]
 800634a:	4629      	mov	r1, r5
 800634c:	1c44      	adds	r4, r0, #1
 800634e:	4561      	cmp	r1, ip
 8006350:	d30a      	bcc.n	8006368 <__exponent+0x66>
 8006352:	f10d 0209 	add.w	r2, sp, #9
 8006356:	eba2 020e 	sub.w	r2, r2, lr
 800635a:	4565      	cmp	r5, ip
 800635c:	bf88      	it	hi
 800635e:	2200      	movhi	r2, #0
 8006360:	4413      	add	r3, r2
 8006362:	1a18      	subs	r0, r3, r0
 8006364:	b003      	add	sp, #12
 8006366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006368:	f811 2b01 	ldrb.w	r2, [r1], #1
 800636c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006370:	e7ed      	b.n	800634e <__exponent+0x4c>
 8006372:	2330      	movs	r3, #48	; 0x30
 8006374:	3130      	adds	r1, #48	; 0x30
 8006376:	7083      	strb	r3, [r0, #2]
 8006378:	70c1      	strb	r1, [r0, #3]
 800637a:	1d03      	adds	r3, r0, #4
 800637c:	e7f1      	b.n	8006362 <__exponent+0x60>
	...

08006380 <_printf_float>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	b091      	sub	sp, #68	; 0x44
 8006386:	460c      	mov	r4, r1
 8006388:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800638c:	4616      	mov	r6, r2
 800638e:	461f      	mov	r7, r3
 8006390:	4605      	mov	r5, r0
 8006392:	f002 fe75 	bl	8009080 <_localeconv_r>
 8006396:	6803      	ldr	r3, [r0, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	9309      	str	r3, [sp, #36]	; 0x24
 800639c:	f7f9 fed8 	bl	8000150 <strlen>
 80063a0:	2300      	movs	r3, #0
 80063a2:	930e      	str	r3, [sp, #56]	; 0x38
 80063a4:	f8d8 3000 	ldr.w	r3, [r8]
 80063a8:	900a      	str	r0, [sp, #40]	; 0x28
 80063aa:	3307      	adds	r3, #7
 80063ac:	f023 0307 	bic.w	r3, r3, #7
 80063b0:	f103 0208 	add.w	r2, r3, #8
 80063b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063b8:	f8d4 b000 	ldr.w	fp, [r4]
 80063bc:	f8c8 2000 	str.w	r2, [r8]
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80063cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80063d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063d2:	f04f 32ff 	mov.w	r2, #4294967295
 80063d6:	4640      	mov	r0, r8
 80063d8:	4b9c      	ldr	r3, [pc, #624]	; (800664c <_printf_float+0x2cc>)
 80063da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063dc:	f7fa fb16 	bl	8000a0c <__aeabi_dcmpun>
 80063e0:	bb70      	cbnz	r0, 8006440 <_printf_float+0xc0>
 80063e2:	f04f 32ff 	mov.w	r2, #4294967295
 80063e6:	4640      	mov	r0, r8
 80063e8:	4b98      	ldr	r3, [pc, #608]	; (800664c <_printf_float+0x2cc>)
 80063ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063ec:	f7fa faf0 	bl	80009d0 <__aeabi_dcmple>
 80063f0:	bb30      	cbnz	r0, 8006440 <_printf_float+0xc0>
 80063f2:	2200      	movs	r2, #0
 80063f4:	2300      	movs	r3, #0
 80063f6:	4640      	mov	r0, r8
 80063f8:	4651      	mov	r1, sl
 80063fa:	f7fa fadf 	bl	80009bc <__aeabi_dcmplt>
 80063fe:	b110      	cbz	r0, 8006406 <_printf_float+0x86>
 8006400:	232d      	movs	r3, #45	; 0x2d
 8006402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006406:	4b92      	ldr	r3, [pc, #584]	; (8006650 <_printf_float+0x2d0>)
 8006408:	4892      	ldr	r0, [pc, #584]	; (8006654 <_printf_float+0x2d4>)
 800640a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800640e:	bf94      	ite	ls
 8006410:	4698      	movls	r8, r3
 8006412:	4680      	movhi	r8, r0
 8006414:	2303      	movs	r3, #3
 8006416:	f04f 0a00 	mov.w	sl, #0
 800641a:	6123      	str	r3, [r4, #16]
 800641c:	f02b 0304 	bic.w	r3, fp, #4
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	4633      	mov	r3, r6
 8006424:	4621      	mov	r1, r4
 8006426:	4628      	mov	r0, r5
 8006428:	9700      	str	r7, [sp, #0]
 800642a:	aa0f      	add	r2, sp, #60	; 0x3c
 800642c:	f000 f9d4 	bl	80067d8 <_printf_common>
 8006430:	3001      	adds	r0, #1
 8006432:	f040 8090 	bne.w	8006556 <_printf_float+0x1d6>
 8006436:	f04f 30ff 	mov.w	r0, #4294967295
 800643a:	b011      	add	sp, #68	; 0x44
 800643c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006440:	4642      	mov	r2, r8
 8006442:	4653      	mov	r3, sl
 8006444:	4640      	mov	r0, r8
 8006446:	4651      	mov	r1, sl
 8006448:	f7fa fae0 	bl	8000a0c <__aeabi_dcmpun>
 800644c:	b148      	cbz	r0, 8006462 <_printf_float+0xe2>
 800644e:	f1ba 0f00 	cmp.w	sl, #0
 8006452:	bfb8      	it	lt
 8006454:	232d      	movlt	r3, #45	; 0x2d
 8006456:	4880      	ldr	r0, [pc, #512]	; (8006658 <_printf_float+0x2d8>)
 8006458:	bfb8      	it	lt
 800645a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800645e:	4b7f      	ldr	r3, [pc, #508]	; (800665c <_printf_float+0x2dc>)
 8006460:	e7d3      	b.n	800640a <_printf_float+0x8a>
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	d142      	bne.n	80064f2 <_printf_float+0x172>
 800646c:	2306      	movs	r3, #6
 800646e:	6063      	str	r3, [r4, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	9206      	str	r2, [sp, #24]
 8006474:	aa0e      	add	r2, sp, #56	; 0x38
 8006476:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800647a:	aa0d      	add	r2, sp, #52	; 0x34
 800647c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006480:	9203      	str	r2, [sp, #12]
 8006482:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006486:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	6863      	ldr	r3, [r4, #4]
 800648e:	4642      	mov	r2, r8
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	4628      	mov	r0, r5
 8006494:	4653      	mov	r3, sl
 8006496:	910b      	str	r1, [sp, #44]	; 0x2c
 8006498:	f7ff fed4 	bl	8006244 <__cvt>
 800649c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800649e:	4680      	mov	r8, r0
 80064a0:	2947      	cmp	r1, #71	; 0x47
 80064a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064a4:	d108      	bne.n	80064b8 <_printf_float+0x138>
 80064a6:	1cc8      	adds	r0, r1, #3
 80064a8:	db02      	blt.n	80064b0 <_printf_float+0x130>
 80064aa:	6863      	ldr	r3, [r4, #4]
 80064ac:	4299      	cmp	r1, r3
 80064ae:	dd40      	ble.n	8006532 <_printf_float+0x1b2>
 80064b0:	f1a9 0902 	sub.w	r9, r9, #2
 80064b4:	fa5f f989 	uxtb.w	r9, r9
 80064b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064bc:	d81f      	bhi.n	80064fe <_printf_float+0x17e>
 80064be:	464a      	mov	r2, r9
 80064c0:	3901      	subs	r1, #1
 80064c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064c6:	910d      	str	r1, [sp, #52]	; 0x34
 80064c8:	f7ff ff1b 	bl	8006302 <__exponent>
 80064cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ce:	4682      	mov	sl, r0
 80064d0:	1813      	adds	r3, r2, r0
 80064d2:	2a01      	cmp	r2, #1
 80064d4:	6123      	str	r3, [r4, #16]
 80064d6:	dc02      	bgt.n	80064de <_printf_float+0x15e>
 80064d8:	6822      	ldr	r2, [r4, #0]
 80064da:	07d2      	lsls	r2, r2, #31
 80064dc:	d501      	bpl.n	80064e2 <_printf_float+0x162>
 80064de:	3301      	adds	r3, #1
 80064e0:	6123      	str	r3, [r4, #16]
 80064e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d09b      	beq.n	8006422 <_printf_float+0xa2>
 80064ea:	232d      	movs	r3, #45	; 0x2d
 80064ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f0:	e797      	b.n	8006422 <_printf_float+0xa2>
 80064f2:	2947      	cmp	r1, #71	; 0x47
 80064f4:	d1bc      	bne.n	8006470 <_printf_float+0xf0>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1ba      	bne.n	8006470 <_printf_float+0xf0>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e7b7      	b.n	800646e <_printf_float+0xee>
 80064fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006502:	d118      	bne.n	8006536 <_printf_float+0x1b6>
 8006504:	2900      	cmp	r1, #0
 8006506:	6863      	ldr	r3, [r4, #4]
 8006508:	dd0b      	ble.n	8006522 <_printf_float+0x1a2>
 800650a:	6121      	str	r1, [r4, #16]
 800650c:	b913      	cbnz	r3, 8006514 <_printf_float+0x194>
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	07d0      	lsls	r0, r2, #31
 8006512:	d502      	bpl.n	800651a <_printf_float+0x19a>
 8006514:	3301      	adds	r3, #1
 8006516:	440b      	add	r3, r1
 8006518:	6123      	str	r3, [r4, #16]
 800651a:	f04f 0a00 	mov.w	sl, #0
 800651e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006520:	e7df      	b.n	80064e2 <_printf_float+0x162>
 8006522:	b913      	cbnz	r3, 800652a <_printf_float+0x1aa>
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	07d2      	lsls	r2, r2, #31
 8006528:	d501      	bpl.n	800652e <_printf_float+0x1ae>
 800652a:	3302      	adds	r3, #2
 800652c:	e7f4      	b.n	8006518 <_printf_float+0x198>
 800652e:	2301      	movs	r3, #1
 8006530:	e7f2      	b.n	8006518 <_printf_float+0x198>
 8006532:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006538:	4299      	cmp	r1, r3
 800653a:	db05      	blt.n	8006548 <_printf_float+0x1c8>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	6121      	str	r1, [r4, #16]
 8006540:	07d8      	lsls	r0, r3, #31
 8006542:	d5ea      	bpl.n	800651a <_printf_float+0x19a>
 8006544:	1c4b      	adds	r3, r1, #1
 8006546:	e7e7      	b.n	8006518 <_printf_float+0x198>
 8006548:	2900      	cmp	r1, #0
 800654a:	bfcc      	ite	gt
 800654c:	2201      	movgt	r2, #1
 800654e:	f1c1 0202 	rsble	r2, r1, #2
 8006552:	4413      	add	r3, r2
 8006554:	e7e0      	b.n	8006518 <_printf_float+0x198>
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	055a      	lsls	r2, r3, #21
 800655a:	d407      	bmi.n	800656c <_printf_float+0x1ec>
 800655c:	6923      	ldr	r3, [r4, #16]
 800655e:	4642      	mov	r2, r8
 8006560:	4631      	mov	r1, r6
 8006562:	4628      	mov	r0, r5
 8006564:	47b8      	blx	r7
 8006566:	3001      	adds	r0, #1
 8006568:	d12b      	bne.n	80065c2 <_printf_float+0x242>
 800656a:	e764      	b.n	8006436 <_printf_float+0xb6>
 800656c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006570:	f240 80dd 	bls.w	800672e <_printf_float+0x3ae>
 8006574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006578:	2200      	movs	r2, #0
 800657a:	2300      	movs	r3, #0
 800657c:	f7fa fa14 	bl	80009a8 <__aeabi_dcmpeq>
 8006580:	2800      	cmp	r0, #0
 8006582:	d033      	beq.n	80065ec <_printf_float+0x26c>
 8006584:	2301      	movs	r3, #1
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	4a35      	ldr	r2, [pc, #212]	; (8006660 <_printf_float+0x2e0>)
 800658c:	47b8      	blx	r7
 800658e:	3001      	adds	r0, #1
 8006590:	f43f af51 	beq.w	8006436 <_printf_float+0xb6>
 8006594:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006598:	429a      	cmp	r2, r3
 800659a:	db02      	blt.n	80065a2 <_printf_float+0x222>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	07d8      	lsls	r0, r3, #31
 80065a0:	d50f      	bpl.n	80065c2 <_printf_float+0x242>
 80065a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b8      	blx	r7
 80065ac:	3001      	adds	r0, #1
 80065ae:	f43f af42 	beq.w	8006436 <_printf_float+0xb6>
 80065b2:	f04f 0800 	mov.w	r8, #0
 80065b6:	f104 091a 	add.w	r9, r4, #26
 80065ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065bc:	3b01      	subs	r3, #1
 80065be:	4543      	cmp	r3, r8
 80065c0:	dc09      	bgt.n	80065d6 <_printf_float+0x256>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	079b      	lsls	r3, r3, #30
 80065c6:	f100 8102 	bmi.w	80067ce <_printf_float+0x44e>
 80065ca:	68e0      	ldr	r0, [r4, #12]
 80065cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065ce:	4298      	cmp	r0, r3
 80065d0:	bfb8      	it	lt
 80065d2:	4618      	movlt	r0, r3
 80065d4:	e731      	b.n	800643a <_printf_float+0xba>
 80065d6:	2301      	movs	r3, #1
 80065d8:	464a      	mov	r2, r9
 80065da:	4631      	mov	r1, r6
 80065dc:	4628      	mov	r0, r5
 80065de:	47b8      	blx	r7
 80065e0:	3001      	adds	r0, #1
 80065e2:	f43f af28 	beq.w	8006436 <_printf_float+0xb6>
 80065e6:	f108 0801 	add.w	r8, r8, #1
 80065ea:	e7e6      	b.n	80065ba <_printf_float+0x23a>
 80065ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	dc38      	bgt.n	8006664 <_printf_float+0x2e4>
 80065f2:	2301      	movs	r3, #1
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	4a19      	ldr	r2, [pc, #100]	; (8006660 <_printf_float+0x2e0>)
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	f43f af1a 	beq.w	8006436 <_printf_float+0xb6>
 8006602:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006606:	4313      	orrs	r3, r2
 8006608:	d102      	bne.n	8006610 <_printf_float+0x290>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	07d9      	lsls	r1, r3, #31
 800660e:	d5d8      	bpl.n	80065c2 <_printf_float+0x242>
 8006610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f af0b 	beq.w	8006436 <_printf_float+0xb6>
 8006620:	f04f 0900 	mov.w	r9, #0
 8006624:	f104 0a1a 	add.w	sl, r4, #26
 8006628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800662a:	425b      	negs	r3, r3
 800662c:	454b      	cmp	r3, r9
 800662e:	dc01      	bgt.n	8006634 <_printf_float+0x2b4>
 8006630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006632:	e794      	b.n	800655e <_printf_float+0x1de>
 8006634:	2301      	movs	r3, #1
 8006636:	4652      	mov	r2, sl
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	f43f aef9 	beq.w	8006436 <_printf_float+0xb6>
 8006644:	f109 0901 	add.w	r9, r9, #1
 8006648:	e7ee      	b.n	8006628 <_printf_float+0x2a8>
 800664a:	bf00      	nop
 800664c:	7fefffff 	.word	0x7fefffff
 8006650:	0800b1b4 	.word	0x0800b1b4
 8006654:	0800b1b8 	.word	0x0800b1b8
 8006658:	0800b1c0 	.word	0x0800b1c0
 800665c:	0800b1bc 	.word	0x0800b1bc
 8006660:	0800b1c4 	.word	0x0800b1c4
 8006664:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006668:	429a      	cmp	r2, r3
 800666a:	bfa8      	it	ge
 800666c:	461a      	movge	r2, r3
 800666e:	2a00      	cmp	r2, #0
 8006670:	4691      	mov	r9, r2
 8006672:	dc37      	bgt.n	80066e4 <_printf_float+0x364>
 8006674:	f04f 0b00 	mov.w	fp, #0
 8006678:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800667c:	f104 021a 	add.w	r2, r4, #26
 8006680:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006684:	ebaa 0309 	sub.w	r3, sl, r9
 8006688:	455b      	cmp	r3, fp
 800668a:	dc33      	bgt.n	80066f4 <_printf_float+0x374>
 800668c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006690:	429a      	cmp	r2, r3
 8006692:	db3b      	blt.n	800670c <_printf_float+0x38c>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	07da      	lsls	r2, r3, #31
 8006698:	d438      	bmi.n	800670c <_printf_float+0x38c>
 800669a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800669c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800669e:	eba2 030a 	sub.w	r3, r2, sl
 80066a2:	eba2 0901 	sub.w	r9, r2, r1
 80066a6:	4599      	cmp	r9, r3
 80066a8:	bfa8      	it	ge
 80066aa:	4699      	movge	r9, r3
 80066ac:	f1b9 0f00 	cmp.w	r9, #0
 80066b0:	dc34      	bgt.n	800671c <_printf_float+0x39c>
 80066b2:	f04f 0800 	mov.w	r8, #0
 80066b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ba:	f104 0a1a 	add.w	sl, r4, #26
 80066be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	eba3 0309 	sub.w	r3, r3, r9
 80066c8:	4543      	cmp	r3, r8
 80066ca:	f77f af7a 	ble.w	80065c2 <_printf_float+0x242>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4652      	mov	r2, sl
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f aeac 	beq.w	8006436 <_printf_float+0xb6>
 80066de:	f108 0801 	add.w	r8, r8, #1
 80066e2:	e7ec      	b.n	80066be <_printf_float+0x33e>
 80066e4:	4613      	mov	r3, r2
 80066e6:	4631      	mov	r1, r6
 80066e8:	4642      	mov	r2, r8
 80066ea:	4628      	mov	r0, r5
 80066ec:	47b8      	blx	r7
 80066ee:	3001      	adds	r0, #1
 80066f0:	d1c0      	bne.n	8006674 <_printf_float+0x2f4>
 80066f2:	e6a0      	b.n	8006436 <_printf_float+0xb6>
 80066f4:	2301      	movs	r3, #1
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80066fc:	47b8      	blx	r7
 80066fe:	3001      	adds	r0, #1
 8006700:	f43f ae99 	beq.w	8006436 <_printf_float+0xb6>
 8006704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006706:	f10b 0b01 	add.w	fp, fp, #1
 800670a:	e7b9      	b.n	8006680 <_printf_float+0x300>
 800670c:	4631      	mov	r1, r6
 800670e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006712:	4628      	mov	r0, r5
 8006714:	47b8      	blx	r7
 8006716:	3001      	adds	r0, #1
 8006718:	d1bf      	bne.n	800669a <_printf_float+0x31a>
 800671a:	e68c      	b.n	8006436 <_printf_float+0xb6>
 800671c:	464b      	mov	r3, r9
 800671e:	4631      	mov	r1, r6
 8006720:	4628      	mov	r0, r5
 8006722:	eb08 020a 	add.w	r2, r8, sl
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	d1c2      	bne.n	80066b2 <_printf_float+0x332>
 800672c:	e683      	b.n	8006436 <_printf_float+0xb6>
 800672e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006730:	2a01      	cmp	r2, #1
 8006732:	dc01      	bgt.n	8006738 <_printf_float+0x3b8>
 8006734:	07db      	lsls	r3, r3, #31
 8006736:	d537      	bpl.n	80067a8 <_printf_float+0x428>
 8006738:	2301      	movs	r3, #1
 800673a:	4642      	mov	r2, r8
 800673c:	4631      	mov	r1, r6
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f ae77 	beq.w	8006436 <_printf_float+0xb6>
 8006748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f ae6f 	beq.w	8006436 <_printf_float+0xb6>
 8006758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800675c:	2200      	movs	r2, #0
 800675e:	2300      	movs	r3, #0
 8006760:	f7fa f922 	bl	80009a8 <__aeabi_dcmpeq>
 8006764:	b9d8      	cbnz	r0, 800679e <_printf_float+0x41e>
 8006766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006768:	f108 0201 	add.w	r2, r8, #1
 800676c:	3b01      	subs	r3, #1
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	d10e      	bne.n	8006796 <_printf_float+0x416>
 8006778:	e65d      	b.n	8006436 <_printf_float+0xb6>
 800677a:	2301      	movs	r3, #1
 800677c:	464a      	mov	r2, r9
 800677e:	4631      	mov	r1, r6
 8006780:	4628      	mov	r0, r5
 8006782:	47b8      	blx	r7
 8006784:	3001      	adds	r0, #1
 8006786:	f43f ae56 	beq.w	8006436 <_printf_float+0xb6>
 800678a:	f108 0801 	add.w	r8, r8, #1
 800678e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006790:	3b01      	subs	r3, #1
 8006792:	4543      	cmp	r3, r8
 8006794:	dcf1      	bgt.n	800677a <_printf_float+0x3fa>
 8006796:	4653      	mov	r3, sl
 8006798:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800679c:	e6e0      	b.n	8006560 <_printf_float+0x1e0>
 800679e:	f04f 0800 	mov.w	r8, #0
 80067a2:	f104 091a 	add.w	r9, r4, #26
 80067a6:	e7f2      	b.n	800678e <_printf_float+0x40e>
 80067a8:	2301      	movs	r3, #1
 80067aa:	4642      	mov	r2, r8
 80067ac:	e7df      	b.n	800676e <_printf_float+0x3ee>
 80067ae:	2301      	movs	r3, #1
 80067b0:	464a      	mov	r2, r9
 80067b2:	4631      	mov	r1, r6
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b8      	blx	r7
 80067b8:	3001      	adds	r0, #1
 80067ba:	f43f ae3c 	beq.w	8006436 <_printf_float+0xb6>
 80067be:	f108 0801 	add.w	r8, r8, #1
 80067c2:	68e3      	ldr	r3, [r4, #12]
 80067c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067c6:	1a5b      	subs	r3, r3, r1
 80067c8:	4543      	cmp	r3, r8
 80067ca:	dcf0      	bgt.n	80067ae <_printf_float+0x42e>
 80067cc:	e6fd      	b.n	80065ca <_printf_float+0x24a>
 80067ce:	f04f 0800 	mov.w	r8, #0
 80067d2:	f104 0919 	add.w	r9, r4, #25
 80067d6:	e7f4      	b.n	80067c2 <_printf_float+0x442>

080067d8 <_printf_common>:
 80067d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067dc:	4616      	mov	r6, r2
 80067de:	4699      	mov	r9, r3
 80067e0:	688a      	ldr	r2, [r1, #8]
 80067e2:	690b      	ldr	r3, [r1, #16]
 80067e4:	4607      	mov	r7, r0
 80067e6:	4293      	cmp	r3, r2
 80067e8:	bfb8      	it	lt
 80067ea:	4613      	movlt	r3, r2
 80067ec:	6033      	str	r3, [r6, #0]
 80067ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067f2:	460c      	mov	r4, r1
 80067f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067f8:	b10a      	cbz	r2, 80067fe <_printf_common+0x26>
 80067fa:	3301      	adds	r3, #1
 80067fc:	6033      	str	r3, [r6, #0]
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	0699      	lsls	r1, r3, #26
 8006802:	bf42      	ittt	mi
 8006804:	6833      	ldrmi	r3, [r6, #0]
 8006806:	3302      	addmi	r3, #2
 8006808:	6033      	strmi	r3, [r6, #0]
 800680a:	6825      	ldr	r5, [r4, #0]
 800680c:	f015 0506 	ands.w	r5, r5, #6
 8006810:	d106      	bne.n	8006820 <_printf_common+0x48>
 8006812:	f104 0a19 	add.w	sl, r4, #25
 8006816:	68e3      	ldr	r3, [r4, #12]
 8006818:	6832      	ldr	r2, [r6, #0]
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	42ab      	cmp	r3, r5
 800681e:	dc28      	bgt.n	8006872 <_printf_common+0x9a>
 8006820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006824:	1e13      	subs	r3, r2, #0
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	bf18      	it	ne
 800682a:	2301      	movne	r3, #1
 800682c:	0692      	lsls	r2, r2, #26
 800682e:	d42d      	bmi.n	800688c <_printf_common+0xb4>
 8006830:	4649      	mov	r1, r9
 8006832:	4638      	mov	r0, r7
 8006834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006838:	47c0      	blx	r8
 800683a:	3001      	adds	r0, #1
 800683c:	d020      	beq.n	8006880 <_printf_common+0xa8>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	68e5      	ldr	r5, [r4, #12]
 8006842:	f003 0306 	and.w	r3, r3, #6
 8006846:	2b04      	cmp	r3, #4
 8006848:	bf18      	it	ne
 800684a:	2500      	movne	r5, #0
 800684c:	6832      	ldr	r2, [r6, #0]
 800684e:	f04f 0600 	mov.w	r6, #0
 8006852:	68a3      	ldr	r3, [r4, #8]
 8006854:	bf08      	it	eq
 8006856:	1aad      	subeq	r5, r5, r2
 8006858:	6922      	ldr	r2, [r4, #16]
 800685a:	bf08      	it	eq
 800685c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006860:	4293      	cmp	r3, r2
 8006862:	bfc4      	itt	gt
 8006864:	1a9b      	subgt	r3, r3, r2
 8006866:	18ed      	addgt	r5, r5, r3
 8006868:	341a      	adds	r4, #26
 800686a:	42b5      	cmp	r5, r6
 800686c:	d11a      	bne.n	80068a4 <_printf_common+0xcc>
 800686e:	2000      	movs	r0, #0
 8006870:	e008      	b.n	8006884 <_printf_common+0xac>
 8006872:	2301      	movs	r3, #1
 8006874:	4652      	mov	r2, sl
 8006876:	4649      	mov	r1, r9
 8006878:	4638      	mov	r0, r7
 800687a:	47c0      	blx	r8
 800687c:	3001      	adds	r0, #1
 800687e:	d103      	bne.n	8006888 <_printf_common+0xb0>
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006888:	3501      	adds	r5, #1
 800688a:	e7c4      	b.n	8006816 <_printf_common+0x3e>
 800688c:	2030      	movs	r0, #48	; 0x30
 800688e:	18e1      	adds	r1, r4, r3
 8006890:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800689a:	4422      	add	r2, r4
 800689c:	3302      	adds	r3, #2
 800689e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068a2:	e7c5      	b.n	8006830 <_printf_common+0x58>
 80068a4:	2301      	movs	r3, #1
 80068a6:	4622      	mov	r2, r4
 80068a8:	4649      	mov	r1, r9
 80068aa:	4638      	mov	r0, r7
 80068ac:	47c0      	blx	r8
 80068ae:	3001      	adds	r0, #1
 80068b0:	d0e6      	beq.n	8006880 <_printf_common+0xa8>
 80068b2:	3601      	adds	r6, #1
 80068b4:	e7d9      	b.n	800686a <_printf_common+0x92>
	...

080068b8 <_printf_i>:
 80068b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068bc:	460c      	mov	r4, r1
 80068be:	7e27      	ldrb	r7, [r4, #24]
 80068c0:	4691      	mov	r9, r2
 80068c2:	2f78      	cmp	r7, #120	; 0x78
 80068c4:	4680      	mov	r8, r0
 80068c6:	469a      	mov	sl, r3
 80068c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068ce:	d807      	bhi.n	80068e0 <_printf_i+0x28>
 80068d0:	2f62      	cmp	r7, #98	; 0x62
 80068d2:	d80a      	bhi.n	80068ea <_printf_i+0x32>
 80068d4:	2f00      	cmp	r7, #0
 80068d6:	f000 80d9 	beq.w	8006a8c <_printf_i+0x1d4>
 80068da:	2f58      	cmp	r7, #88	; 0x58
 80068dc:	f000 80a4 	beq.w	8006a28 <_printf_i+0x170>
 80068e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068e8:	e03a      	b.n	8006960 <_printf_i+0xa8>
 80068ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ee:	2b15      	cmp	r3, #21
 80068f0:	d8f6      	bhi.n	80068e0 <_printf_i+0x28>
 80068f2:	a001      	add	r0, pc, #4	; (adr r0, 80068f8 <_printf_i+0x40>)
 80068f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068f8:	08006951 	.word	0x08006951
 80068fc:	08006965 	.word	0x08006965
 8006900:	080068e1 	.word	0x080068e1
 8006904:	080068e1 	.word	0x080068e1
 8006908:	080068e1 	.word	0x080068e1
 800690c:	080068e1 	.word	0x080068e1
 8006910:	08006965 	.word	0x08006965
 8006914:	080068e1 	.word	0x080068e1
 8006918:	080068e1 	.word	0x080068e1
 800691c:	080068e1 	.word	0x080068e1
 8006920:	080068e1 	.word	0x080068e1
 8006924:	08006a73 	.word	0x08006a73
 8006928:	08006995 	.word	0x08006995
 800692c:	08006a55 	.word	0x08006a55
 8006930:	080068e1 	.word	0x080068e1
 8006934:	080068e1 	.word	0x080068e1
 8006938:	08006a95 	.word	0x08006a95
 800693c:	080068e1 	.word	0x080068e1
 8006940:	08006995 	.word	0x08006995
 8006944:	080068e1 	.word	0x080068e1
 8006948:	080068e1 	.word	0x080068e1
 800694c:	08006a5d 	.word	0x08006a5d
 8006950:	680b      	ldr	r3, [r1, #0]
 8006952:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006956:	1d1a      	adds	r2, r3, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	600a      	str	r2, [r1, #0]
 800695c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006960:	2301      	movs	r3, #1
 8006962:	e0a4      	b.n	8006aae <_printf_i+0x1f6>
 8006964:	6825      	ldr	r5, [r4, #0]
 8006966:	6808      	ldr	r0, [r1, #0]
 8006968:	062e      	lsls	r6, r5, #24
 800696a:	f100 0304 	add.w	r3, r0, #4
 800696e:	d50a      	bpl.n	8006986 <_printf_i+0xce>
 8006970:	6805      	ldr	r5, [r0, #0]
 8006972:	600b      	str	r3, [r1, #0]
 8006974:	2d00      	cmp	r5, #0
 8006976:	da03      	bge.n	8006980 <_printf_i+0xc8>
 8006978:	232d      	movs	r3, #45	; 0x2d
 800697a:	426d      	negs	r5, r5
 800697c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006980:	230a      	movs	r3, #10
 8006982:	485e      	ldr	r0, [pc, #376]	; (8006afc <_printf_i+0x244>)
 8006984:	e019      	b.n	80069ba <_printf_i+0x102>
 8006986:	f015 0f40 	tst.w	r5, #64	; 0x40
 800698a:	6805      	ldr	r5, [r0, #0]
 800698c:	600b      	str	r3, [r1, #0]
 800698e:	bf18      	it	ne
 8006990:	b22d      	sxthne	r5, r5
 8006992:	e7ef      	b.n	8006974 <_printf_i+0xbc>
 8006994:	680b      	ldr	r3, [r1, #0]
 8006996:	6825      	ldr	r5, [r4, #0]
 8006998:	1d18      	adds	r0, r3, #4
 800699a:	6008      	str	r0, [r1, #0]
 800699c:	0628      	lsls	r0, r5, #24
 800699e:	d501      	bpl.n	80069a4 <_printf_i+0xec>
 80069a0:	681d      	ldr	r5, [r3, #0]
 80069a2:	e002      	b.n	80069aa <_printf_i+0xf2>
 80069a4:	0669      	lsls	r1, r5, #25
 80069a6:	d5fb      	bpl.n	80069a0 <_printf_i+0xe8>
 80069a8:	881d      	ldrh	r5, [r3, #0]
 80069aa:	2f6f      	cmp	r7, #111	; 0x6f
 80069ac:	bf0c      	ite	eq
 80069ae:	2308      	moveq	r3, #8
 80069b0:	230a      	movne	r3, #10
 80069b2:	4852      	ldr	r0, [pc, #328]	; (8006afc <_printf_i+0x244>)
 80069b4:	2100      	movs	r1, #0
 80069b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069ba:	6866      	ldr	r6, [r4, #4]
 80069bc:	2e00      	cmp	r6, #0
 80069be:	bfa8      	it	ge
 80069c0:	6821      	ldrge	r1, [r4, #0]
 80069c2:	60a6      	str	r6, [r4, #8]
 80069c4:	bfa4      	itt	ge
 80069c6:	f021 0104 	bicge.w	r1, r1, #4
 80069ca:	6021      	strge	r1, [r4, #0]
 80069cc:	b90d      	cbnz	r5, 80069d2 <_printf_i+0x11a>
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	d04d      	beq.n	8006a6e <_printf_i+0x1b6>
 80069d2:	4616      	mov	r6, r2
 80069d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80069d8:	fb03 5711 	mls	r7, r3, r1, r5
 80069dc:	5dc7      	ldrb	r7, [r0, r7]
 80069de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069e2:	462f      	mov	r7, r5
 80069e4:	42bb      	cmp	r3, r7
 80069e6:	460d      	mov	r5, r1
 80069e8:	d9f4      	bls.n	80069d4 <_printf_i+0x11c>
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d10b      	bne.n	8006a06 <_printf_i+0x14e>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	07df      	lsls	r7, r3, #31
 80069f2:	d508      	bpl.n	8006a06 <_printf_i+0x14e>
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	6861      	ldr	r1, [r4, #4]
 80069f8:	4299      	cmp	r1, r3
 80069fa:	bfde      	ittt	le
 80069fc:	2330      	movle	r3, #48	; 0x30
 80069fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a06:	1b92      	subs	r2, r2, r6
 8006a08:	6122      	str	r2, [r4, #16]
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	4640      	mov	r0, r8
 8006a10:	f8cd a000 	str.w	sl, [sp]
 8006a14:	aa03      	add	r2, sp, #12
 8006a16:	f7ff fedf 	bl	80067d8 <_printf_common>
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d14c      	bne.n	8006ab8 <_printf_i+0x200>
 8006a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a22:	b004      	add	sp, #16
 8006a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a28:	4834      	ldr	r0, [pc, #208]	; (8006afc <_printf_i+0x244>)
 8006a2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a2e:	680e      	ldr	r6, [r1, #0]
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a36:	061f      	lsls	r7, r3, #24
 8006a38:	600e      	str	r6, [r1, #0]
 8006a3a:	d514      	bpl.n	8006a66 <_printf_i+0x1ae>
 8006a3c:	07d9      	lsls	r1, r3, #31
 8006a3e:	bf44      	itt	mi
 8006a40:	f043 0320 	orrmi.w	r3, r3, #32
 8006a44:	6023      	strmi	r3, [r4, #0]
 8006a46:	b91d      	cbnz	r5, 8006a50 <_printf_i+0x198>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	f023 0320 	bic.w	r3, r3, #32
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	2310      	movs	r3, #16
 8006a52:	e7af      	b.n	80069b4 <_printf_i+0xfc>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	f043 0320 	orr.w	r3, r3, #32
 8006a5a:	6023      	str	r3, [r4, #0]
 8006a5c:	2378      	movs	r3, #120	; 0x78
 8006a5e:	4828      	ldr	r0, [pc, #160]	; (8006b00 <_printf_i+0x248>)
 8006a60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a64:	e7e3      	b.n	8006a2e <_printf_i+0x176>
 8006a66:	065e      	lsls	r6, r3, #25
 8006a68:	bf48      	it	mi
 8006a6a:	b2ad      	uxthmi	r5, r5
 8006a6c:	e7e6      	b.n	8006a3c <_printf_i+0x184>
 8006a6e:	4616      	mov	r6, r2
 8006a70:	e7bb      	b.n	80069ea <_printf_i+0x132>
 8006a72:	680b      	ldr	r3, [r1, #0]
 8006a74:	6826      	ldr	r6, [r4, #0]
 8006a76:	1d1d      	adds	r5, r3, #4
 8006a78:	6960      	ldr	r0, [r4, #20]
 8006a7a:	600d      	str	r5, [r1, #0]
 8006a7c:	0635      	lsls	r5, r6, #24
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	d501      	bpl.n	8006a86 <_printf_i+0x1ce>
 8006a82:	6018      	str	r0, [r3, #0]
 8006a84:	e002      	b.n	8006a8c <_printf_i+0x1d4>
 8006a86:	0671      	lsls	r1, r6, #25
 8006a88:	d5fb      	bpl.n	8006a82 <_printf_i+0x1ca>
 8006a8a:	8018      	strh	r0, [r3, #0]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4616      	mov	r6, r2
 8006a90:	6123      	str	r3, [r4, #16]
 8006a92:	e7ba      	b.n	8006a0a <_printf_i+0x152>
 8006a94:	680b      	ldr	r3, [r1, #0]
 8006a96:	1d1a      	adds	r2, r3, #4
 8006a98:	600a      	str	r2, [r1, #0]
 8006a9a:	681e      	ldr	r6, [r3, #0]
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	6862      	ldr	r2, [r4, #4]
 8006aa2:	f002 fb0b 	bl	80090bc <memchr>
 8006aa6:	b108      	cbz	r0, 8006aac <_printf_i+0x1f4>
 8006aa8:	1b80      	subs	r0, r0, r6
 8006aaa:	6060      	str	r0, [r4, #4]
 8006aac:	6863      	ldr	r3, [r4, #4]
 8006aae:	6123      	str	r3, [r4, #16]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab6:	e7a8      	b.n	8006a0a <_printf_i+0x152>
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4649      	mov	r1, r9
 8006abc:	4640      	mov	r0, r8
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	47d0      	blx	sl
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d0ab      	beq.n	8006a1e <_printf_i+0x166>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	079b      	lsls	r3, r3, #30
 8006aca:	d413      	bmi.n	8006af4 <_printf_i+0x23c>
 8006acc:	68e0      	ldr	r0, [r4, #12]
 8006ace:	9b03      	ldr	r3, [sp, #12]
 8006ad0:	4298      	cmp	r0, r3
 8006ad2:	bfb8      	it	lt
 8006ad4:	4618      	movlt	r0, r3
 8006ad6:	e7a4      	b.n	8006a22 <_printf_i+0x16a>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	4632      	mov	r2, r6
 8006adc:	4649      	mov	r1, r9
 8006ade:	4640      	mov	r0, r8
 8006ae0:	47d0      	blx	sl
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	d09b      	beq.n	8006a1e <_printf_i+0x166>
 8006ae6:	3501      	adds	r5, #1
 8006ae8:	68e3      	ldr	r3, [r4, #12]
 8006aea:	9903      	ldr	r1, [sp, #12]
 8006aec:	1a5b      	subs	r3, r3, r1
 8006aee:	42ab      	cmp	r3, r5
 8006af0:	dcf2      	bgt.n	8006ad8 <_printf_i+0x220>
 8006af2:	e7eb      	b.n	8006acc <_printf_i+0x214>
 8006af4:	2500      	movs	r5, #0
 8006af6:	f104 0619 	add.w	r6, r4, #25
 8006afa:	e7f5      	b.n	8006ae8 <_printf_i+0x230>
 8006afc:	0800b1c6 	.word	0x0800b1c6
 8006b00:	0800b1d7 	.word	0x0800b1d7

08006b04 <_scanf_float>:
 8006b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	b087      	sub	sp, #28
 8006b0a:	9303      	str	r3, [sp, #12]
 8006b0c:	688b      	ldr	r3, [r1, #8]
 8006b0e:	4617      	mov	r7, r2
 8006b10:	1e5a      	subs	r2, r3, #1
 8006b12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b16:	bf85      	ittet	hi
 8006b18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006b1c:	195b      	addhi	r3, r3, r5
 8006b1e:	2300      	movls	r3, #0
 8006b20:	9302      	strhi	r3, [sp, #8]
 8006b22:	bf88      	it	hi
 8006b24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b28:	468b      	mov	fp, r1
 8006b2a:	f04f 0500 	mov.w	r5, #0
 8006b2e:	bf8c      	ite	hi
 8006b30:	608b      	strhi	r3, [r1, #8]
 8006b32:	9302      	strls	r3, [sp, #8]
 8006b34:	680b      	ldr	r3, [r1, #0]
 8006b36:	4680      	mov	r8, r0
 8006b38:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006b3c:	f84b 3b1c 	str.w	r3, [fp], #28
 8006b40:	460c      	mov	r4, r1
 8006b42:	465e      	mov	r6, fp
 8006b44:	46aa      	mov	sl, r5
 8006b46:	46a9      	mov	r9, r5
 8006b48:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006b4c:	9501      	str	r5, [sp, #4]
 8006b4e:	68a2      	ldr	r2, [r4, #8]
 8006b50:	b152      	cbz	r2, 8006b68 <_scanf_float+0x64>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b4e      	cmp	r3, #78	; 0x4e
 8006b58:	d864      	bhi.n	8006c24 <_scanf_float+0x120>
 8006b5a:	2b40      	cmp	r3, #64	; 0x40
 8006b5c:	d83c      	bhi.n	8006bd8 <_scanf_float+0xd4>
 8006b5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006b62:	b2c8      	uxtb	r0, r1
 8006b64:	280e      	cmp	r0, #14
 8006b66:	d93a      	bls.n	8006bde <_scanf_float+0xda>
 8006b68:	f1b9 0f00 	cmp.w	r9, #0
 8006b6c:	d003      	beq.n	8006b76 <_scanf_float+0x72>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b7a:	f1ba 0f01 	cmp.w	sl, #1
 8006b7e:	f200 8113 	bhi.w	8006da8 <_scanf_float+0x2a4>
 8006b82:	455e      	cmp	r6, fp
 8006b84:	f200 8105 	bhi.w	8006d92 <_scanf_float+0x28e>
 8006b88:	2501      	movs	r5, #1
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	b007      	add	sp, #28
 8006b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b96:	2a0d      	cmp	r2, #13
 8006b98:	d8e6      	bhi.n	8006b68 <_scanf_float+0x64>
 8006b9a:	a101      	add	r1, pc, #4	; (adr r1, 8006ba0 <_scanf_float+0x9c>)
 8006b9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ba0:	08006cdf 	.word	0x08006cdf
 8006ba4:	08006b69 	.word	0x08006b69
 8006ba8:	08006b69 	.word	0x08006b69
 8006bac:	08006b69 	.word	0x08006b69
 8006bb0:	08006d3f 	.word	0x08006d3f
 8006bb4:	08006d17 	.word	0x08006d17
 8006bb8:	08006b69 	.word	0x08006b69
 8006bbc:	08006b69 	.word	0x08006b69
 8006bc0:	08006ced 	.word	0x08006ced
 8006bc4:	08006b69 	.word	0x08006b69
 8006bc8:	08006b69 	.word	0x08006b69
 8006bcc:	08006b69 	.word	0x08006b69
 8006bd0:	08006b69 	.word	0x08006b69
 8006bd4:	08006ca5 	.word	0x08006ca5
 8006bd8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006bdc:	e7db      	b.n	8006b96 <_scanf_float+0x92>
 8006bde:	290e      	cmp	r1, #14
 8006be0:	d8c2      	bhi.n	8006b68 <_scanf_float+0x64>
 8006be2:	a001      	add	r0, pc, #4	; (adr r0, 8006be8 <_scanf_float+0xe4>)
 8006be4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006be8:	08006c97 	.word	0x08006c97
 8006bec:	08006b69 	.word	0x08006b69
 8006bf0:	08006c97 	.word	0x08006c97
 8006bf4:	08006d2b 	.word	0x08006d2b
 8006bf8:	08006b69 	.word	0x08006b69
 8006bfc:	08006c45 	.word	0x08006c45
 8006c00:	08006c81 	.word	0x08006c81
 8006c04:	08006c81 	.word	0x08006c81
 8006c08:	08006c81 	.word	0x08006c81
 8006c0c:	08006c81 	.word	0x08006c81
 8006c10:	08006c81 	.word	0x08006c81
 8006c14:	08006c81 	.word	0x08006c81
 8006c18:	08006c81 	.word	0x08006c81
 8006c1c:	08006c81 	.word	0x08006c81
 8006c20:	08006c81 	.word	0x08006c81
 8006c24:	2b6e      	cmp	r3, #110	; 0x6e
 8006c26:	d809      	bhi.n	8006c3c <_scanf_float+0x138>
 8006c28:	2b60      	cmp	r3, #96	; 0x60
 8006c2a:	d8b2      	bhi.n	8006b92 <_scanf_float+0x8e>
 8006c2c:	2b54      	cmp	r3, #84	; 0x54
 8006c2e:	d077      	beq.n	8006d20 <_scanf_float+0x21c>
 8006c30:	2b59      	cmp	r3, #89	; 0x59
 8006c32:	d199      	bne.n	8006b68 <_scanf_float+0x64>
 8006c34:	2d07      	cmp	r5, #7
 8006c36:	d197      	bne.n	8006b68 <_scanf_float+0x64>
 8006c38:	2508      	movs	r5, #8
 8006c3a:	e029      	b.n	8006c90 <_scanf_float+0x18c>
 8006c3c:	2b74      	cmp	r3, #116	; 0x74
 8006c3e:	d06f      	beq.n	8006d20 <_scanf_float+0x21c>
 8006c40:	2b79      	cmp	r3, #121	; 0x79
 8006c42:	e7f6      	b.n	8006c32 <_scanf_float+0x12e>
 8006c44:	6821      	ldr	r1, [r4, #0]
 8006c46:	05c8      	lsls	r0, r1, #23
 8006c48:	d51a      	bpl.n	8006c80 <_scanf_float+0x17c>
 8006c4a:	9b02      	ldr	r3, [sp, #8]
 8006c4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006c50:	6021      	str	r1, [r4, #0]
 8006c52:	f109 0901 	add.w	r9, r9, #1
 8006c56:	b11b      	cbz	r3, 8006c60 <_scanf_float+0x15c>
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	3201      	adds	r2, #1
 8006c5c:	9302      	str	r3, [sp, #8]
 8006c5e:	60a2      	str	r2, [r4, #8]
 8006c60:	68a3      	ldr	r3, [r4, #8]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	60a3      	str	r3, [r4, #8]
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	6123      	str	r3, [r4, #16]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	f340 8084 	ble.w	8006d80 <_scanf_float+0x27c>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	e766      	b.n	8006b4e <_scanf_float+0x4a>
 8006c80:	eb1a 0f05 	cmn.w	sl, r5
 8006c84:	f47f af70 	bne.w	8006b68 <_scanf_float+0x64>
 8006c88:	6822      	ldr	r2, [r4, #0]
 8006c8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	f806 3b01 	strb.w	r3, [r6], #1
 8006c94:	e7e4      	b.n	8006c60 <_scanf_float+0x15c>
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	0610      	lsls	r0, r2, #24
 8006c9a:	f57f af65 	bpl.w	8006b68 <_scanf_float+0x64>
 8006c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ca2:	e7f4      	b.n	8006c8e <_scanf_float+0x18a>
 8006ca4:	f1ba 0f00 	cmp.w	sl, #0
 8006ca8:	d10e      	bne.n	8006cc8 <_scanf_float+0x1c4>
 8006caa:	f1b9 0f00 	cmp.w	r9, #0
 8006cae:	d10e      	bne.n	8006cce <_scanf_float+0x1ca>
 8006cb0:	6822      	ldr	r2, [r4, #0]
 8006cb2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006cb6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006cba:	d108      	bne.n	8006cce <_scanf_float+0x1ca>
 8006cbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cc0:	f04f 0a01 	mov.w	sl, #1
 8006cc4:	6022      	str	r2, [r4, #0]
 8006cc6:	e7e3      	b.n	8006c90 <_scanf_float+0x18c>
 8006cc8:	f1ba 0f02 	cmp.w	sl, #2
 8006ccc:	d055      	beq.n	8006d7a <_scanf_float+0x276>
 8006cce:	2d01      	cmp	r5, #1
 8006cd0:	d002      	beq.n	8006cd8 <_scanf_float+0x1d4>
 8006cd2:	2d04      	cmp	r5, #4
 8006cd4:	f47f af48 	bne.w	8006b68 <_scanf_float+0x64>
 8006cd8:	3501      	adds	r5, #1
 8006cda:	b2ed      	uxtb	r5, r5
 8006cdc:	e7d8      	b.n	8006c90 <_scanf_float+0x18c>
 8006cde:	f1ba 0f01 	cmp.w	sl, #1
 8006ce2:	f47f af41 	bne.w	8006b68 <_scanf_float+0x64>
 8006ce6:	f04f 0a02 	mov.w	sl, #2
 8006cea:	e7d1      	b.n	8006c90 <_scanf_float+0x18c>
 8006cec:	b97d      	cbnz	r5, 8006d0e <_scanf_float+0x20a>
 8006cee:	f1b9 0f00 	cmp.w	r9, #0
 8006cf2:	f47f af3c 	bne.w	8006b6e <_scanf_float+0x6a>
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006cfc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d00:	f47f af39 	bne.w	8006b76 <_scanf_float+0x72>
 8006d04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d08:	2501      	movs	r5, #1
 8006d0a:	6022      	str	r2, [r4, #0]
 8006d0c:	e7c0      	b.n	8006c90 <_scanf_float+0x18c>
 8006d0e:	2d03      	cmp	r5, #3
 8006d10:	d0e2      	beq.n	8006cd8 <_scanf_float+0x1d4>
 8006d12:	2d05      	cmp	r5, #5
 8006d14:	e7de      	b.n	8006cd4 <_scanf_float+0x1d0>
 8006d16:	2d02      	cmp	r5, #2
 8006d18:	f47f af26 	bne.w	8006b68 <_scanf_float+0x64>
 8006d1c:	2503      	movs	r5, #3
 8006d1e:	e7b7      	b.n	8006c90 <_scanf_float+0x18c>
 8006d20:	2d06      	cmp	r5, #6
 8006d22:	f47f af21 	bne.w	8006b68 <_scanf_float+0x64>
 8006d26:	2507      	movs	r5, #7
 8006d28:	e7b2      	b.n	8006c90 <_scanf_float+0x18c>
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	0591      	lsls	r1, r2, #22
 8006d2e:	f57f af1b 	bpl.w	8006b68 <_scanf_float+0x64>
 8006d32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006d36:	6022      	str	r2, [r4, #0]
 8006d38:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d3c:	e7a8      	b.n	8006c90 <_scanf_float+0x18c>
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006d44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006d48:	d006      	beq.n	8006d58 <_scanf_float+0x254>
 8006d4a:	0550      	lsls	r0, r2, #21
 8006d4c:	f57f af0c 	bpl.w	8006b68 <_scanf_float+0x64>
 8006d50:	f1b9 0f00 	cmp.w	r9, #0
 8006d54:	f43f af0f 	beq.w	8006b76 <_scanf_float+0x72>
 8006d58:	0591      	lsls	r1, r2, #22
 8006d5a:	bf58      	it	pl
 8006d5c:	9901      	ldrpl	r1, [sp, #4]
 8006d5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d62:	bf58      	it	pl
 8006d64:	eba9 0101 	subpl.w	r1, r9, r1
 8006d68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006d6c:	f04f 0900 	mov.w	r9, #0
 8006d70:	bf58      	it	pl
 8006d72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006d76:	6022      	str	r2, [r4, #0]
 8006d78:	e78a      	b.n	8006c90 <_scanf_float+0x18c>
 8006d7a:	f04f 0a03 	mov.w	sl, #3
 8006d7e:	e787      	b.n	8006c90 <_scanf_float+0x18c>
 8006d80:	4639      	mov	r1, r7
 8006d82:	4640      	mov	r0, r8
 8006d84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d88:	4798      	blx	r3
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	f43f aedf 	beq.w	8006b4e <_scanf_float+0x4a>
 8006d90:	e6ea      	b.n	8006b68 <_scanf_float+0x64>
 8006d92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d96:	463a      	mov	r2, r7
 8006d98:	4640      	mov	r0, r8
 8006d9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d9e:	4798      	blx	r3
 8006da0:	6923      	ldr	r3, [r4, #16]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	6123      	str	r3, [r4, #16]
 8006da6:	e6ec      	b.n	8006b82 <_scanf_float+0x7e>
 8006da8:	1e6b      	subs	r3, r5, #1
 8006daa:	2b06      	cmp	r3, #6
 8006dac:	d825      	bhi.n	8006dfa <_scanf_float+0x2f6>
 8006dae:	2d02      	cmp	r5, #2
 8006db0:	d836      	bhi.n	8006e20 <_scanf_float+0x31c>
 8006db2:	455e      	cmp	r6, fp
 8006db4:	f67f aee8 	bls.w	8006b88 <_scanf_float+0x84>
 8006db8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dbc:	463a      	mov	r2, r7
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dc4:	4798      	blx	r3
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	6123      	str	r3, [r4, #16]
 8006dcc:	e7f1      	b.n	8006db2 <_scanf_float+0x2ae>
 8006dce:	9802      	ldr	r0, [sp, #8]
 8006dd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dd4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006dd8:	463a      	mov	r2, r7
 8006dda:	9002      	str	r0, [sp, #8]
 8006ddc:	4640      	mov	r0, r8
 8006dde:	4798      	blx	r3
 8006de0:	6923      	ldr	r3, [r4, #16]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	6123      	str	r3, [r4, #16]
 8006de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dea:	fa5f fa8a 	uxtb.w	sl, sl
 8006dee:	f1ba 0f02 	cmp.w	sl, #2
 8006df2:	d1ec      	bne.n	8006dce <_scanf_float+0x2ca>
 8006df4:	3d03      	subs	r5, #3
 8006df6:	b2ed      	uxtb	r5, r5
 8006df8:	1b76      	subs	r6, r6, r5
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	05da      	lsls	r2, r3, #23
 8006dfe:	d52f      	bpl.n	8006e60 <_scanf_float+0x35c>
 8006e00:	055b      	lsls	r3, r3, #21
 8006e02:	d510      	bpl.n	8006e26 <_scanf_float+0x322>
 8006e04:	455e      	cmp	r6, fp
 8006e06:	f67f aebf 	bls.w	8006b88 <_scanf_float+0x84>
 8006e0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e0e:	463a      	mov	r2, r7
 8006e10:	4640      	mov	r0, r8
 8006e12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e16:	4798      	blx	r3
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	6123      	str	r3, [r4, #16]
 8006e1e:	e7f1      	b.n	8006e04 <_scanf_float+0x300>
 8006e20:	46aa      	mov	sl, r5
 8006e22:	9602      	str	r6, [sp, #8]
 8006e24:	e7df      	b.n	8006de6 <_scanf_float+0x2e2>
 8006e26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	2965      	cmp	r1, #101	; 0x65
 8006e2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e32:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	d00c      	beq.n	8006e54 <_scanf_float+0x350>
 8006e3a:	2945      	cmp	r1, #69	; 0x45
 8006e3c:	d00a      	beq.n	8006e54 <_scanf_float+0x350>
 8006e3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e42:	463a      	mov	r2, r7
 8006e44:	4640      	mov	r0, r8
 8006e46:	4798      	blx	r3
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	1eb5      	subs	r5, r6, #2
 8006e52:	6123      	str	r3, [r4, #16]
 8006e54:	463a      	mov	r2, r7
 8006e56:	4640      	mov	r0, r8
 8006e58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e5c:	4798      	blx	r3
 8006e5e:	462e      	mov	r6, r5
 8006e60:	6825      	ldr	r5, [r4, #0]
 8006e62:	f015 0510 	ands.w	r5, r5, #16
 8006e66:	d159      	bne.n	8006f1c <_scanf_float+0x418>
 8006e68:	7035      	strb	r5, [r6, #0]
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e74:	d11c      	bne.n	8006eb0 <_scanf_float+0x3ac>
 8006e76:	9b01      	ldr	r3, [sp, #4]
 8006e78:	454b      	cmp	r3, r9
 8006e7a:	eba3 0209 	sub.w	r2, r3, r9
 8006e7e:	d124      	bne.n	8006eca <_scanf_float+0x3c6>
 8006e80:	2200      	movs	r2, #0
 8006e82:	4659      	mov	r1, fp
 8006e84:	4640      	mov	r0, r8
 8006e86:	f000 fe8b 	bl	8007ba0 <_strtod_r>
 8006e8a:	f8d4 c000 	ldr.w	ip, [r4]
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	f01c 0f02 	tst.w	ip, #2
 8006e94:	4606      	mov	r6, r0
 8006e96:	460f      	mov	r7, r1
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	d021      	beq.n	8006ee0 <_scanf_float+0x3dc>
 8006e9c:	9903      	ldr	r1, [sp, #12]
 8006e9e:	1d1a      	adds	r2, r3, #4
 8006ea0:	600a      	str	r2, [r1, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	e9c3 6700 	strd	r6, r7, [r3]
 8006ea8:	68e3      	ldr	r3, [r4, #12]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60e3      	str	r3, [r4, #12]
 8006eae:	e66c      	b.n	8006b8a <_scanf_float+0x86>
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0e4      	beq.n	8006e80 <_scanf_float+0x37c>
 8006eb6:	9905      	ldr	r1, [sp, #20]
 8006eb8:	230a      	movs	r3, #10
 8006eba:	462a      	mov	r2, r5
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	3101      	adds	r1, #1
 8006ec0:	f000 fefa 	bl	8007cb8 <_strtol_r>
 8006ec4:	9b04      	ldr	r3, [sp, #16]
 8006ec6:	9e05      	ldr	r6, [sp, #20]
 8006ec8:	1ac2      	subs	r2, r0, r3
 8006eca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006ece:	429e      	cmp	r6, r3
 8006ed0:	bf28      	it	cs
 8006ed2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	4911      	ldr	r1, [pc, #68]	; (8006f20 <_scanf_float+0x41c>)
 8006eda:	f000 f829 	bl	8006f30 <siprintf>
 8006ede:	e7cf      	b.n	8006e80 <_scanf_float+0x37c>
 8006ee0:	f01c 0f04 	tst.w	ip, #4
 8006ee4:	f103 0e04 	add.w	lr, r3, #4
 8006ee8:	d003      	beq.n	8006ef2 <_scanf_float+0x3ee>
 8006eea:	9903      	ldr	r1, [sp, #12]
 8006eec:	f8c1 e000 	str.w	lr, [r1]
 8006ef0:	e7d7      	b.n	8006ea2 <_scanf_float+0x39e>
 8006ef2:	9a03      	ldr	r2, [sp, #12]
 8006ef4:	f8c2 e000 	str.w	lr, [r2]
 8006ef8:	f8d3 8000 	ldr.w	r8, [r3]
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	f7f9 fd84 	bl	8000a0c <__aeabi_dcmpun>
 8006f04:	b128      	cbz	r0, 8006f12 <_scanf_float+0x40e>
 8006f06:	4807      	ldr	r0, [pc, #28]	; (8006f24 <_scanf_float+0x420>)
 8006f08:	f000 f80e 	bl	8006f28 <nanf>
 8006f0c:	f8c8 0000 	str.w	r0, [r8]
 8006f10:	e7ca      	b.n	8006ea8 <_scanf_float+0x3a4>
 8006f12:	4630      	mov	r0, r6
 8006f14:	4639      	mov	r1, r7
 8006f16:	f7f9 fdd7 	bl	8000ac8 <__aeabi_d2f>
 8006f1a:	e7f7      	b.n	8006f0c <_scanf_float+0x408>
 8006f1c:	2500      	movs	r5, #0
 8006f1e:	e634      	b.n	8006b8a <_scanf_float+0x86>
 8006f20:	0800b1e8 	.word	0x0800b1e8
 8006f24:	0800b600 	.word	0x0800b600

08006f28 <nanf>:
 8006f28:	4800      	ldr	r0, [pc, #0]	; (8006f2c <nanf+0x4>)
 8006f2a:	4770      	bx	lr
 8006f2c:	7fc00000 	.word	0x7fc00000

08006f30 <siprintf>:
 8006f30:	b40e      	push	{r1, r2, r3}
 8006f32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f36:	b500      	push	{lr}
 8006f38:	b09c      	sub	sp, #112	; 0x70
 8006f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f3c:	9002      	str	r0, [sp, #8]
 8006f3e:	9006      	str	r0, [sp, #24]
 8006f40:	9107      	str	r1, [sp, #28]
 8006f42:	9104      	str	r1, [sp, #16]
 8006f44:	4808      	ldr	r0, [pc, #32]	; (8006f68 <siprintf+0x38>)
 8006f46:	4909      	ldr	r1, [pc, #36]	; (8006f6c <siprintf+0x3c>)
 8006f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f4c:	9105      	str	r1, [sp, #20]
 8006f4e:	6800      	ldr	r0, [r0, #0]
 8006f50:	a902      	add	r1, sp, #8
 8006f52:	9301      	str	r3, [sp, #4]
 8006f54:	f002 fe96 	bl	8009c84 <_svfiprintf_r>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	9b02      	ldr	r3, [sp, #8]
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	b01c      	add	sp, #112	; 0x70
 8006f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f64:	b003      	add	sp, #12
 8006f66:	4770      	bx	lr
 8006f68:	20000014 	.word	0x20000014
 8006f6c:	ffff0208 	.word	0xffff0208

08006f70 <sulp>:
 8006f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f74:	460f      	mov	r7, r1
 8006f76:	4690      	mov	r8, r2
 8006f78:	f002 fc2c 	bl	80097d4 <__ulp>
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	f1b8 0f00 	cmp.w	r8, #0
 8006f84:	d011      	beq.n	8006faa <sulp+0x3a>
 8006f86:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006f8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	dd0b      	ble.n	8006faa <sulp+0x3a>
 8006f92:	2400      	movs	r4, #0
 8006f94:	051b      	lsls	r3, r3, #20
 8006f96:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	f7f9 fa99 	bl	80004d8 <__aeabi_dmul>
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	460d      	mov	r5, r1
 8006faa:	4620      	mov	r0, r4
 8006fac:	4629      	mov	r1, r5
 8006fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb2:	0000      	movs	r0, r0
 8006fb4:	0000      	movs	r0, r0
	...

08006fb8 <_strtod_l>:
 8006fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	469b      	mov	fp, r3
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	b0a1      	sub	sp, #132	; 0x84
 8006fc2:	931c      	str	r3, [sp, #112]	; 0x70
 8006fc4:	4ba1      	ldr	r3, [pc, #644]	; (800724c <_strtod_l+0x294>)
 8006fc6:	4682      	mov	sl, r0
 8006fc8:	681f      	ldr	r7, [r3, #0]
 8006fca:	460e      	mov	r6, r1
 8006fcc:	4638      	mov	r0, r7
 8006fce:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fd0:	f7f9 f8be 	bl	8000150 <strlen>
 8006fd4:	f04f 0800 	mov.w	r8, #0
 8006fd8:	4604      	mov	r4, r0
 8006fda:	f04f 0900 	mov.w	r9, #0
 8006fde:	961b      	str	r6, [sp, #108]	; 0x6c
 8006fe0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fe2:	781a      	ldrb	r2, [r3, #0]
 8006fe4:	2a2b      	cmp	r2, #43	; 0x2b
 8006fe6:	d04c      	beq.n	8007082 <_strtod_l+0xca>
 8006fe8:	d83a      	bhi.n	8007060 <_strtod_l+0xa8>
 8006fea:	2a0d      	cmp	r2, #13
 8006fec:	d833      	bhi.n	8007056 <_strtod_l+0x9e>
 8006fee:	2a08      	cmp	r2, #8
 8006ff0:	d833      	bhi.n	800705a <_strtod_l+0xa2>
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d03d      	beq.n	8007072 <_strtod_l+0xba>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8006ffa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006ffc:	782b      	ldrb	r3, [r5, #0]
 8006ffe:	2b30      	cmp	r3, #48	; 0x30
 8007000:	f040 80af 	bne.w	8007162 <_strtod_l+0x1aa>
 8007004:	786b      	ldrb	r3, [r5, #1]
 8007006:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800700a:	2b58      	cmp	r3, #88	; 0x58
 800700c:	d16c      	bne.n	80070e8 <_strtod_l+0x130>
 800700e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007010:	4650      	mov	r0, sl
 8007012:	9301      	str	r3, [sp, #4]
 8007014:	ab1c      	add	r3, sp, #112	; 0x70
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4a8d      	ldr	r2, [pc, #564]	; (8007250 <_strtod_l+0x298>)
 800701a:	f8cd b008 	str.w	fp, [sp, #8]
 800701e:	ab1d      	add	r3, sp, #116	; 0x74
 8007020:	a91b      	add	r1, sp, #108	; 0x6c
 8007022:	f001 fd2f 	bl	8008a84 <__gethex>
 8007026:	f010 0607 	ands.w	r6, r0, #7
 800702a:	4604      	mov	r4, r0
 800702c:	d005      	beq.n	800703a <_strtod_l+0x82>
 800702e:	2e06      	cmp	r6, #6
 8007030:	d129      	bne.n	8007086 <_strtod_l+0xce>
 8007032:	2300      	movs	r3, #0
 8007034:	3501      	adds	r5, #1
 8007036:	951b      	str	r5, [sp, #108]	; 0x6c
 8007038:	930c      	str	r3, [sp, #48]	; 0x30
 800703a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800703c:	2b00      	cmp	r3, #0
 800703e:	f040 8596 	bne.w	8007b6e <_strtod_l+0xbb6>
 8007042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007044:	b1d3      	cbz	r3, 800707c <_strtod_l+0xc4>
 8007046:	4642      	mov	r2, r8
 8007048:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800704c:	4610      	mov	r0, r2
 800704e:	4619      	mov	r1, r3
 8007050:	b021      	add	sp, #132	; 0x84
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	2a20      	cmp	r2, #32
 8007058:	d1cd      	bne.n	8006ff6 <_strtod_l+0x3e>
 800705a:	3301      	adds	r3, #1
 800705c:	931b      	str	r3, [sp, #108]	; 0x6c
 800705e:	e7bf      	b.n	8006fe0 <_strtod_l+0x28>
 8007060:	2a2d      	cmp	r2, #45	; 0x2d
 8007062:	d1c8      	bne.n	8006ff6 <_strtod_l+0x3e>
 8007064:	2201      	movs	r2, #1
 8007066:	920c      	str	r2, [sp, #48]	; 0x30
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	921b      	str	r2, [sp, #108]	; 0x6c
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1c3      	bne.n	8006ffa <_strtod_l+0x42>
 8007072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007074:	961b      	str	r6, [sp, #108]	; 0x6c
 8007076:	2b00      	cmp	r3, #0
 8007078:	f040 8577 	bne.w	8007b6a <_strtod_l+0xbb2>
 800707c:	4642      	mov	r2, r8
 800707e:	464b      	mov	r3, r9
 8007080:	e7e4      	b.n	800704c <_strtod_l+0x94>
 8007082:	2200      	movs	r2, #0
 8007084:	e7ef      	b.n	8007066 <_strtod_l+0xae>
 8007086:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007088:	b13a      	cbz	r2, 800709a <_strtod_l+0xe2>
 800708a:	2135      	movs	r1, #53	; 0x35
 800708c:	a81e      	add	r0, sp, #120	; 0x78
 800708e:	f002 fca5 	bl	80099dc <__copybits>
 8007092:	4650      	mov	r0, sl
 8007094:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007096:	f002 f86d 	bl	8009174 <_Bfree>
 800709a:	3e01      	subs	r6, #1
 800709c:	2e05      	cmp	r6, #5
 800709e:	d807      	bhi.n	80070b0 <_strtod_l+0xf8>
 80070a0:	e8df f006 	tbb	[pc, r6]
 80070a4:	1d180b0e 	.word	0x1d180b0e
 80070a8:	030e      	.short	0x030e
 80070aa:	f04f 0900 	mov.w	r9, #0
 80070ae:	46c8      	mov	r8, r9
 80070b0:	0721      	lsls	r1, r4, #28
 80070b2:	d5c2      	bpl.n	800703a <_strtod_l+0x82>
 80070b4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80070b8:	e7bf      	b.n	800703a <_strtod_l+0x82>
 80070ba:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80070be:	e7f7      	b.n	80070b0 <_strtod_l+0xf8>
 80070c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80070c2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80070c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070ce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80070d2:	e7ed      	b.n	80070b0 <_strtod_l+0xf8>
 80070d4:	f04f 0800 	mov.w	r8, #0
 80070d8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007254 <_strtod_l+0x29c>
 80070dc:	e7e8      	b.n	80070b0 <_strtod_l+0xf8>
 80070de:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80070e2:	f04f 38ff 	mov.w	r8, #4294967295
 80070e6:	e7e3      	b.n	80070b0 <_strtod_l+0xf8>
 80070e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	921b      	str	r2, [sp, #108]	; 0x6c
 80070ee:	785b      	ldrb	r3, [r3, #1]
 80070f0:	2b30      	cmp	r3, #48	; 0x30
 80070f2:	d0f9      	beq.n	80070e8 <_strtod_l+0x130>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0a0      	beq.n	800703a <_strtod_l+0x82>
 80070f8:	2301      	movs	r3, #1
 80070fa:	9307      	str	r3, [sp, #28]
 80070fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070fe:	220a      	movs	r2, #10
 8007100:	9308      	str	r3, [sp, #32]
 8007102:	2300      	movs	r3, #0
 8007104:	469b      	mov	fp, r3
 8007106:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800710a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800710c:	7805      	ldrb	r5, [r0, #0]
 800710e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007112:	b2d9      	uxtb	r1, r3
 8007114:	2909      	cmp	r1, #9
 8007116:	d926      	bls.n	8007166 <_strtod_l+0x1ae>
 8007118:	4622      	mov	r2, r4
 800711a:	4639      	mov	r1, r7
 800711c:	f002 fec8 	bl	8009eb0 <strncmp>
 8007120:	2800      	cmp	r0, #0
 8007122:	d032      	beq.n	800718a <_strtod_l+0x1d2>
 8007124:	2000      	movs	r0, #0
 8007126:	462b      	mov	r3, r5
 8007128:	465c      	mov	r4, fp
 800712a:	4602      	mov	r2, r0
 800712c:	9004      	str	r0, [sp, #16]
 800712e:	2b65      	cmp	r3, #101	; 0x65
 8007130:	d001      	beq.n	8007136 <_strtod_l+0x17e>
 8007132:	2b45      	cmp	r3, #69	; 0x45
 8007134:	d113      	bne.n	800715e <_strtod_l+0x1a6>
 8007136:	b91c      	cbnz	r4, 8007140 <_strtod_l+0x188>
 8007138:	9b07      	ldr	r3, [sp, #28]
 800713a:	4303      	orrs	r3, r0
 800713c:	d099      	beq.n	8007072 <_strtod_l+0xba>
 800713e:	2400      	movs	r4, #0
 8007140:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007142:	1c73      	adds	r3, r6, #1
 8007144:	931b      	str	r3, [sp, #108]	; 0x6c
 8007146:	7873      	ldrb	r3, [r6, #1]
 8007148:	2b2b      	cmp	r3, #43	; 0x2b
 800714a:	d078      	beq.n	800723e <_strtod_l+0x286>
 800714c:	2b2d      	cmp	r3, #45	; 0x2d
 800714e:	d07b      	beq.n	8007248 <_strtod_l+0x290>
 8007150:	2700      	movs	r7, #0
 8007152:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007156:	2909      	cmp	r1, #9
 8007158:	f240 8082 	bls.w	8007260 <_strtod_l+0x2a8>
 800715c:	961b      	str	r6, [sp, #108]	; 0x6c
 800715e:	2500      	movs	r5, #0
 8007160:	e09e      	b.n	80072a0 <_strtod_l+0x2e8>
 8007162:	2300      	movs	r3, #0
 8007164:	e7c9      	b.n	80070fa <_strtod_l+0x142>
 8007166:	f1bb 0f08 	cmp.w	fp, #8
 800716a:	bfd5      	itete	le
 800716c:	9906      	ldrle	r1, [sp, #24]
 800716e:	9905      	ldrgt	r1, [sp, #20]
 8007170:	fb02 3301 	mlale	r3, r2, r1, r3
 8007174:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007178:	f100 0001 	add.w	r0, r0, #1
 800717c:	bfd4      	ite	le
 800717e:	9306      	strle	r3, [sp, #24]
 8007180:	9305      	strgt	r3, [sp, #20]
 8007182:	f10b 0b01 	add.w	fp, fp, #1
 8007186:	901b      	str	r0, [sp, #108]	; 0x6c
 8007188:	e7bf      	b.n	800710a <_strtod_l+0x152>
 800718a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800718c:	191a      	adds	r2, r3, r4
 800718e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007190:	5d1b      	ldrb	r3, [r3, r4]
 8007192:	f1bb 0f00 	cmp.w	fp, #0
 8007196:	d036      	beq.n	8007206 <_strtod_l+0x24e>
 8007198:	465c      	mov	r4, fp
 800719a:	9004      	str	r0, [sp, #16]
 800719c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80071a0:	2a09      	cmp	r2, #9
 80071a2:	d912      	bls.n	80071ca <_strtod_l+0x212>
 80071a4:	2201      	movs	r2, #1
 80071a6:	e7c2      	b.n	800712e <_strtod_l+0x176>
 80071a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071aa:	3001      	adds	r0, #1
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	921b      	str	r2, [sp, #108]	; 0x6c
 80071b0:	785b      	ldrb	r3, [r3, #1]
 80071b2:	2b30      	cmp	r3, #48	; 0x30
 80071b4:	d0f8      	beq.n	80071a8 <_strtod_l+0x1f0>
 80071b6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80071ba:	2a08      	cmp	r2, #8
 80071bc:	f200 84dc 	bhi.w	8007b78 <_strtod_l+0xbc0>
 80071c0:	9004      	str	r0, [sp, #16]
 80071c2:	2000      	movs	r0, #0
 80071c4:	4604      	mov	r4, r0
 80071c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80071c8:	9208      	str	r2, [sp, #32]
 80071ca:	3b30      	subs	r3, #48	; 0x30
 80071cc:	f100 0201 	add.w	r2, r0, #1
 80071d0:	d013      	beq.n	80071fa <_strtod_l+0x242>
 80071d2:	9904      	ldr	r1, [sp, #16]
 80071d4:	1905      	adds	r5, r0, r4
 80071d6:	4411      	add	r1, r2
 80071d8:	9104      	str	r1, [sp, #16]
 80071da:	4622      	mov	r2, r4
 80071dc:	210a      	movs	r1, #10
 80071de:	42aa      	cmp	r2, r5
 80071e0:	d113      	bne.n	800720a <_strtod_l+0x252>
 80071e2:	1822      	adds	r2, r4, r0
 80071e4:	2a08      	cmp	r2, #8
 80071e6:	f104 0401 	add.w	r4, r4, #1
 80071ea:	4404      	add	r4, r0
 80071ec:	dc1b      	bgt.n	8007226 <_strtod_l+0x26e>
 80071ee:	220a      	movs	r2, #10
 80071f0:	9906      	ldr	r1, [sp, #24]
 80071f2:	fb02 3301 	mla	r3, r2, r1, r3
 80071f6:	9306      	str	r3, [sp, #24]
 80071f8:	2200      	movs	r2, #0
 80071fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071fc:	4610      	mov	r0, r2
 80071fe:	1c59      	adds	r1, r3, #1
 8007200:	911b      	str	r1, [sp, #108]	; 0x6c
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	e7ca      	b.n	800719c <_strtod_l+0x1e4>
 8007206:	4658      	mov	r0, fp
 8007208:	e7d3      	b.n	80071b2 <_strtod_l+0x1fa>
 800720a:	2a08      	cmp	r2, #8
 800720c:	dc04      	bgt.n	8007218 <_strtod_l+0x260>
 800720e:	9f06      	ldr	r7, [sp, #24]
 8007210:	434f      	muls	r7, r1
 8007212:	9706      	str	r7, [sp, #24]
 8007214:	3201      	adds	r2, #1
 8007216:	e7e2      	b.n	80071de <_strtod_l+0x226>
 8007218:	1c57      	adds	r7, r2, #1
 800721a:	2f10      	cmp	r7, #16
 800721c:	bfde      	ittt	le
 800721e:	9f05      	ldrle	r7, [sp, #20]
 8007220:	434f      	mulle	r7, r1
 8007222:	9705      	strle	r7, [sp, #20]
 8007224:	e7f6      	b.n	8007214 <_strtod_l+0x25c>
 8007226:	2c10      	cmp	r4, #16
 8007228:	bfdf      	itttt	le
 800722a:	220a      	movle	r2, #10
 800722c:	9905      	ldrle	r1, [sp, #20]
 800722e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007232:	9305      	strle	r3, [sp, #20]
 8007234:	e7e0      	b.n	80071f8 <_strtod_l+0x240>
 8007236:	2300      	movs	r3, #0
 8007238:	2201      	movs	r2, #1
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	e77c      	b.n	8007138 <_strtod_l+0x180>
 800723e:	2700      	movs	r7, #0
 8007240:	1cb3      	adds	r3, r6, #2
 8007242:	931b      	str	r3, [sp, #108]	; 0x6c
 8007244:	78b3      	ldrb	r3, [r6, #2]
 8007246:	e784      	b.n	8007152 <_strtod_l+0x19a>
 8007248:	2701      	movs	r7, #1
 800724a:	e7f9      	b.n	8007240 <_strtod_l+0x288>
 800724c:	0800b440 	.word	0x0800b440
 8007250:	0800b1f0 	.word	0x0800b1f0
 8007254:	7ff00000 	.word	0x7ff00000
 8007258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800725a:	1c59      	adds	r1, r3, #1
 800725c:	911b      	str	r1, [sp, #108]	; 0x6c
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	2b30      	cmp	r3, #48	; 0x30
 8007262:	d0f9      	beq.n	8007258 <_strtod_l+0x2a0>
 8007264:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007268:	2908      	cmp	r1, #8
 800726a:	f63f af78 	bhi.w	800715e <_strtod_l+0x1a6>
 800726e:	f04f 0e0a 	mov.w	lr, #10
 8007272:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007278:	9309      	str	r3, [sp, #36]	; 0x24
 800727a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800727c:	1c59      	adds	r1, r3, #1
 800727e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8007286:	2d09      	cmp	r5, #9
 8007288:	d935      	bls.n	80072f6 <_strtod_l+0x33e>
 800728a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800728c:	1b49      	subs	r1, r1, r5
 800728e:	2908      	cmp	r1, #8
 8007290:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007294:	dc02      	bgt.n	800729c <_strtod_l+0x2e4>
 8007296:	4565      	cmp	r5, ip
 8007298:	bfa8      	it	ge
 800729a:	4665      	movge	r5, ip
 800729c:	b107      	cbz	r7, 80072a0 <_strtod_l+0x2e8>
 800729e:	426d      	negs	r5, r5
 80072a0:	2c00      	cmp	r4, #0
 80072a2:	d14c      	bne.n	800733e <_strtod_l+0x386>
 80072a4:	9907      	ldr	r1, [sp, #28]
 80072a6:	4301      	orrs	r1, r0
 80072a8:	f47f aec7 	bne.w	800703a <_strtod_l+0x82>
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	f47f aee0 	bne.w	8007072 <_strtod_l+0xba>
 80072b2:	2b69      	cmp	r3, #105	; 0x69
 80072b4:	d026      	beq.n	8007304 <_strtod_l+0x34c>
 80072b6:	dc23      	bgt.n	8007300 <_strtod_l+0x348>
 80072b8:	2b49      	cmp	r3, #73	; 0x49
 80072ba:	d023      	beq.n	8007304 <_strtod_l+0x34c>
 80072bc:	2b4e      	cmp	r3, #78	; 0x4e
 80072be:	f47f aed8 	bne.w	8007072 <_strtod_l+0xba>
 80072c2:	499c      	ldr	r1, [pc, #624]	; (8007534 <_strtod_l+0x57c>)
 80072c4:	a81b      	add	r0, sp, #108	; 0x6c
 80072c6:	f001 fe2b 	bl	8008f20 <__match>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	f43f aed1 	beq.w	8007072 <_strtod_l+0xba>
 80072d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b28      	cmp	r3, #40	; 0x28
 80072d6:	d12c      	bne.n	8007332 <_strtod_l+0x37a>
 80072d8:	4997      	ldr	r1, [pc, #604]	; (8007538 <_strtod_l+0x580>)
 80072da:	aa1e      	add	r2, sp, #120	; 0x78
 80072dc:	a81b      	add	r0, sp, #108	; 0x6c
 80072de:	f001 fe33 	bl	8008f48 <__hexnan>
 80072e2:	2805      	cmp	r0, #5
 80072e4:	d125      	bne.n	8007332 <_strtod_l+0x37a>
 80072e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072e8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80072ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80072f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80072f4:	e6a1      	b.n	800703a <_strtod_l+0x82>
 80072f6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80072fa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80072fe:	e7bc      	b.n	800727a <_strtod_l+0x2c2>
 8007300:	2b6e      	cmp	r3, #110	; 0x6e
 8007302:	e7dc      	b.n	80072be <_strtod_l+0x306>
 8007304:	498d      	ldr	r1, [pc, #564]	; (800753c <_strtod_l+0x584>)
 8007306:	a81b      	add	r0, sp, #108	; 0x6c
 8007308:	f001 fe0a 	bl	8008f20 <__match>
 800730c:	2800      	cmp	r0, #0
 800730e:	f43f aeb0 	beq.w	8007072 <_strtod_l+0xba>
 8007312:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007314:	498a      	ldr	r1, [pc, #552]	; (8007540 <_strtod_l+0x588>)
 8007316:	3b01      	subs	r3, #1
 8007318:	a81b      	add	r0, sp, #108	; 0x6c
 800731a:	931b      	str	r3, [sp, #108]	; 0x6c
 800731c:	f001 fe00 	bl	8008f20 <__match>
 8007320:	b910      	cbnz	r0, 8007328 <_strtod_l+0x370>
 8007322:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007324:	3301      	adds	r3, #1
 8007326:	931b      	str	r3, [sp, #108]	; 0x6c
 8007328:	f04f 0800 	mov.w	r8, #0
 800732c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8007550 <_strtod_l+0x598>
 8007330:	e683      	b.n	800703a <_strtod_l+0x82>
 8007332:	4884      	ldr	r0, [pc, #528]	; (8007544 <_strtod_l+0x58c>)
 8007334:	f002 fda6 	bl	8009e84 <nan>
 8007338:	4680      	mov	r8, r0
 800733a:	4689      	mov	r9, r1
 800733c:	e67d      	b.n	800703a <_strtod_l+0x82>
 800733e:	9b04      	ldr	r3, [sp, #16]
 8007340:	f1bb 0f00 	cmp.w	fp, #0
 8007344:	bf08      	it	eq
 8007346:	46a3      	moveq	fp, r4
 8007348:	1aeb      	subs	r3, r5, r3
 800734a:	2c10      	cmp	r4, #16
 800734c:	9806      	ldr	r0, [sp, #24]
 800734e:	4626      	mov	r6, r4
 8007350:	9307      	str	r3, [sp, #28]
 8007352:	bfa8      	it	ge
 8007354:	2610      	movge	r6, #16
 8007356:	f7f9 f845 	bl	80003e4 <__aeabi_ui2d>
 800735a:	2c09      	cmp	r4, #9
 800735c:	4680      	mov	r8, r0
 800735e:	4689      	mov	r9, r1
 8007360:	dd13      	ble.n	800738a <_strtod_l+0x3d2>
 8007362:	4b79      	ldr	r3, [pc, #484]	; (8007548 <_strtod_l+0x590>)
 8007364:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007368:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800736c:	f7f9 f8b4 	bl	80004d8 <__aeabi_dmul>
 8007370:	4680      	mov	r8, r0
 8007372:	9805      	ldr	r0, [sp, #20]
 8007374:	4689      	mov	r9, r1
 8007376:	f7f9 f835 	bl	80003e4 <__aeabi_ui2d>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4640      	mov	r0, r8
 8007380:	4649      	mov	r1, r9
 8007382:	f7f8 fef3 	bl	800016c <__adddf3>
 8007386:	4680      	mov	r8, r0
 8007388:	4689      	mov	r9, r1
 800738a:	2c0f      	cmp	r4, #15
 800738c:	dc36      	bgt.n	80073fc <_strtod_l+0x444>
 800738e:	9b07      	ldr	r3, [sp, #28]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f43f ae52 	beq.w	800703a <_strtod_l+0x82>
 8007396:	dd22      	ble.n	80073de <_strtod_l+0x426>
 8007398:	2b16      	cmp	r3, #22
 800739a:	dc09      	bgt.n	80073b0 <_strtod_l+0x3f8>
 800739c:	4c6a      	ldr	r4, [pc, #424]	; (8007548 <_strtod_l+0x590>)
 800739e:	4642      	mov	r2, r8
 80073a0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80073a4:	464b      	mov	r3, r9
 80073a6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80073aa:	f7f9 f895 	bl	80004d8 <__aeabi_dmul>
 80073ae:	e7c3      	b.n	8007338 <_strtod_l+0x380>
 80073b0:	9a07      	ldr	r2, [sp, #28]
 80073b2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80073b6:	4293      	cmp	r3, r2
 80073b8:	db20      	blt.n	80073fc <_strtod_l+0x444>
 80073ba:	4d63      	ldr	r5, [pc, #396]	; (8007548 <_strtod_l+0x590>)
 80073bc:	f1c4 040f 	rsb	r4, r4, #15
 80073c0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80073c4:	4642      	mov	r2, r8
 80073c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ca:	464b      	mov	r3, r9
 80073cc:	f7f9 f884 	bl	80004d8 <__aeabi_dmul>
 80073d0:	9b07      	ldr	r3, [sp, #28]
 80073d2:	1b1c      	subs	r4, r3, r4
 80073d4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80073d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073dc:	e7e5      	b.n	80073aa <_strtod_l+0x3f2>
 80073de:	9b07      	ldr	r3, [sp, #28]
 80073e0:	3316      	adds	r3, #22
 80073e2:	db0b      	blt.n	80073fc <_strtod_l+0x444>
 80073e4:	9b04      	ldr	r3, [sp, #16]
 80073e6:	4a58      	ldr	r2, [pc, #352]	; (8007548 <_strtod_l+0x590>)
 80073e8:	1b5d      	subs	r5, r3, r5
 80073ea:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80073ee:	4640      	mov	r0, r8
 80073f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073f4:	4649      	mov	r1, r9
 80073f6:	f7f9 f999 	bl	800072c <__aeabi_ddiv>
 80073fa:	e79d      	b.n	8007338 <_strtod_l+0x380>
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	1ba6      	subs	r6, r4, r6
 8007400:	441e      	add	r6, r3
 8007402:	2e00      	cmp	r6, #0
 8007404:	dd71      	ble.n	80074ea <_strtod_l+0x532>
 8007406:	f016 030f 	ands.w	r3, r6, #15
 800740a:	d00a      	beq.n	8007422 <_strtod_l+0x46a>
 800740c:	494e      	ldr	r1, [pc, #312]	; (8007548 <_strtod_l+0x590>)
 800740e:	4642      	mov	r2, r8
 8007410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007418:	464b      	mov	r3, r9
 800741a:	f7f9 f85d 	bl	80004d8 <__aeabi_dmul>
 800741e:	4680      	mov	r8, r0
 8007420:	4689      	mov	r9, r1
 8007422:	f036 060f 	bics.w	r6, r6, #15
 8007426:	d050      	beq.n	80074ca <_strtod_l+0x512>
 8007428:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800742c:	dd27      	ble.n	800747e <_strtod_l+0x4c6>
 800742e:	f04f 0b00 	mov.w	fp, #0
 8007432:	f8cd b010 	str.w	fp, [sp, #16]
 8007436:	f8cd b020 	str.w	fp, [sp, #32]
 800743a:	f8cd b018 	str.w	fp, [sp, #24]
 800743e:	2322      	movs	r3, #34	; 0x22
 8007440:	f04f 0800 	mov.w	r8, #0
 8007444:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007550 <_strtod_l+0x598>
 8007448:	f8ca 3000 	str.w	r3, [sl]
 800744c:	9b08      	ldr	r3, [sp, #32]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f43f adf3 	beq.w	800703a <_strtod_l+0x82>
 8007454:	4650      	mov	r0, sl
 8007456:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007458:	f001 fe8c 	bl	8009174 <_Bfree>
 800745c:	4650      	mov	r0, sl
 800745e:	9906      	ldr	r1, [sp, #24]
 8007460:	f001 fe88 	bl	8009174 <_Bfree>
 8007464:	4650      	mov	r0, sl
 8007466:	9904      	ldr	r1, [sp, #16]
 8007468:	f001 fe84 	bl	8009174 <_Bfree>
 800746c:	4650      	mov	r0, sl
 800746e:	9908      	ldr	r1, [sp, #32]
 8007470:	f001 fe80 	bl	8009174 <_Bfree>
 8007474:	4659      	mov	r1, fp
 8007476:	4650      	mov	r0, sl
 8007478:	f001 fe7c 	bl	8009174 <_Bfree>
 800747c:	e5dd      	b.n	800703a <_strtod_l+0x82>
 800747e:	2300      	movs	r3, #0
 8007480:	4640      	mov	r0, r8
 8007482:	4649      	mov	r1, r9
 8007484:	461f      	mov	r7, r3
 8007486:	1136      	asrs	r6, r6, #4
 8007488:	2e01      	cmp	r6, #1
 800748a:	dc21      	bgt.n	80074d0 <_strtod_l+0x518>
 800748c:	b10b      	cbz	r3, 8007492 <_strtod_l+0x4da>
 800748e:	4680      	mov	r8, r0
 8007490:	4689      	mov	r9, r1
 8007492:	4b2e      	ldr	r3, [pc, #184]	; (800754c <_strtod_l+0x594>)
 8007494:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007498:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800749c:	4642      	mov	r2, r8
 800749e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a2:	464b      	mov	r3, r9
 80074a4:	f7f9 f818 	bl	80004d8 <__aeabi_dmul>
 80074a8:	4b29      	ldr	r3, [pc, #164]	; (8007550 <_strtod_l+0x598>)
 80074aa:	460a      	mov	r2, r1
 80074ac:	400b      	ands	r3, r1
 80074ae:	4929      	ldr	r1, [pc, #164]	; (8007554 <_strtod_l+0x59c>)
 80074b0:	4680      	mov	r8, r0
 80074b2:	428b      	cmp	r3, r1
 80074b4:	d8bb      	bhi.n	800742e <_strtod_l+0x476>
 80074b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074ba:	428b      	cmp	r3, r1
 80074bc:	bf86      	itte	hi
 80074be:	f04f 38ff 	movhi.w	r8, #4294967295
 80074c2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007558 <_strtod_l+0x5a0>
 80074c6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80074ca:	2300      	movs	r3, #0
 80074cc:	9305      	str	r3, [sp, #20]
 80074ce:	e07e      	b.n	80075ce <_strtod_l+0x616>
 80074d0:	07f2      	lsls	r2, r6, #31
 80074d2:	d507      	bpl.n	80074e4 <_strtod_l+0x52c>
 80074d4:	4b1d      	ldr	r3, [pc, #116]	; (800754c <_strtod_l+0x594>)
 80074d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f7f8 fffb 	bl	80004d8 <__aeabi_dmul>
 80074e2:	2301      	movs	r3, #1
 80074e4:	3701      	adds	r7, #1
 80074e6:	1076      	asrs	r6, r6, #1
 80074e8:	e7ce      	b.n	8007488 <_strtod_l+0x4d0>
 80074ea:	d0ee      	beq.n	80074ca <_strtod_l+0x512>
 80074ec:	4276      	negs	r6, r6
 80074ee:	f016 020f 	ands.w	r2, r6, #15
 80074f2:	d00a      	beq.n	800750a <_strtod_l+0x552>
 80074f4:	4b14      	ldr	r3, [pc, #80]	; (8007548 <_strtod_l+0x590>)
 80074f6:	4640      	mov	r0, r8
 80074f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074fc:	4649      	mov	r1, r9
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f7f9 f913 	bl	800072c <__aeabi_ddiv>
 8007506:	4680      	mov	r8, r0
 8007508:	4689      	mov	r9, r1
 800750a:	1136      	asrs	r6, r6, #4
 800750c:	d0dd      	beq.n	80074ca <_strtod_l+0x512>
 800750e:	2e1f      	cmp	r6, #31
 8007510:	dd24      	ble.n	800755c <_strtod_l+0x5a4>
 8007512:	f04f 0b00 	mov.w	fp, #0
 8007516:	f8cd b010 	str.w	fp, [sp, #16]
 800751a:	f8cd b020 	str.w	fp, [sp, #32]
 800751e:	f8cd b018 	str.w	fp, [sp, #24]
 8007522:	2322      	movs	r3, #34	; 0x22
 8007524:	f04f 0800 	mov.w	r8, #0
 8007528:	f04f 0900 	mov.w	r9, #0
 800752c:	f8ca 3000 	str.w	r3, [sl]
 8007530:	e78c      	b.n	800744c <_strtod_l+0x494>
 8007532:	bf00      	nop
 8007534:	0800b1c1 	.word	0x0800b1c1
 8007538:	0800b204 	.word	0x0800b204
 800753c:	0800b1b9 	.word	0x0800b1b9
 8007540:	0800b344 	.word	0x0800b344
 8007544:	0800b600 	.word	0x0800b600
 8007548:	0800b4e0 	.word	0x0800b4e0
 800754c:	0800b4b8 	.word	0x0800b4b8
 8007550:	7ff00000 	.word	0x7ff00000
 8007554:	7ca00000 	.word	0x7ca00000
 8007558:	7fefffff 	.word	0x7fefffff
 800755c:	f016 0310 	ands.w	r3, r6, #16
 8007560:	bf18      	it	ne
 8007562:	236a      	movne	r3, #106	; 0x6a
 8007564:	4640      	mov	r0, r8
 8007566:	9305      	str	r3, [sp, #20]
 8007568:	4649      	mov	r1, r9
 800756a:	2300      	movs	r3, #0
 800756c:	4fb2      	ldr	r7, [pc, #712]	; (8007838 <_strtod_l+0x880>)
 800756e:	07f2      	lsls	r2, r6, #31
 8007570:	d504      	bpl.n	800757c <_strtod_l+0x5c4>
 8007572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007576:	f7f8 ffaf 	bl	80004d8 <__aeabi_dmul>
 800757a:	2301      	movs	r3, #1
 800757c:	1076      	asrs	r6, r6, #1
 800757e:	f107 0708 	add.w	r7, r7, #8
 8007582:	d1f4      	bne.n	800756e <_strtod_l+0x5b6>
 8007584:	b10b      	cbz	r3, 800758a <_strtod_l+0x5d2>
 8007586:	4680      	mov	r8, r0
 8007588:	4689      	mov	r9, r1
 800758a:	9b05      	ldr	r3, [sp, #20]
 800758c:	b1bb      	cbz	r3, 80075be <_strtod_l+0x606>
 800758e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8007592:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007596:	2b00      	cmp	r3, #0
 8007598:	4649      	mov	r1, r9
 800759a:	dd10      	ble.n	80075be <_strtod_l+0x606>
 800759c:	2b1f      	cmp	r3, #31
 800759e:	f340 812b 	ble.w	80077f8 <_strtod_l+0x840>
 80075a2:	2b34      	cmp	r3, #52	; 0x34
 80075a4:	bfd8      	it	le
 80075a6:	f04f 32ff 	movle.w	r2, #4294967295
 80075aa:	f04f 0800 	mov.w	r8, #0
 80075ae:	bfcf      	iteee	gt
 80075b0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80075b4:	3b20      	suble	r3, #32
 80075b6:	fa02 f303 	lslle.w	r3, r2, r3
 80075ba:	ea03 0901 	andle.w	r9, r3, r1
 80075be:	2200      	movs	r2, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	4640      	mov	r0, r8
 80075c4:	4649      	mov	r1, r9
 80075c6:	f7f9 f9ef 	bl	80009a8 <__aeabi_dcmpeq>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d1a1      	bne.n	8007512 <_strtod_l+0x55a>
 80075ce:	9b06      	ldr	r3, [sp, #24]
 80075d0:	465a      	mov	r2, fp
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	4650      	mov	r0, sl
 80075d6:	4623      	mov	r3, r4
 80075d8:	9908      	ldr	r1, [sp, #32]
 80075da:	f001 fe37 	bl	800924c <__s2b>
 80075de:	9008      	str	r0, [sp, #32]
 80075e0:	2800      	cmp	r0, #0
 80075e2:	f43f af24 	beq.w	800742e <_strtod_l+0x476>
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	f04f 0b00 	mov.w	fp, #0
 80075ec:	1b5d      	subs	r5, r3, r5
 80075ee:	9b07      	ldr	r3, [sp, #28]
 80075f0:	f8cd b010 	str.w	fp, [sp, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bfb4      	ite	lt
 80075f8:	462b      	movlt	r3, r5
 80075fa:	2300      	movge	r3, #0
 80075fc:	930e      	str	r3, [sp, #56]	; 0x38
 80075fe:	9b07      	ldr	r3, [sp, #28]
 8007600:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007604:	9316      	str	r3, [sp, #88]	; 0x58
 8007606:	9b08      	ldr	r3, [sp, #32]
 8007608:	4650      	mov	r0, sl
 800760a:	6859      	ldr	r1, [r3, #4]
 800760c:	f001 fd72 	bl	80090f4 <_Balloc>
 8007610:	9006      	str	r0, [sp, #24]
 8007612:	2800      	cmp	r0, #0
 8007614:	f43f af13 	beq.w	800743e <_strtod_l+0x486>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	300c      	adds	r0, #12
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	f103 010c 	add.w	r1, r3, #12
 8007622:	3202      	adds	r2, #2
 8007624:	0092      	lsls	r2, r2, #2
 8007626:	f001 fd57 	bl	80090d8 <memcpy>
 800762a:	ab1e      	add	r3, sp, #120	; 0x78
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	ab1d      	add	r3, sp, #116	; 0x74
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	4642      	mov	r2, r8
 8007634:	464b      	mov	r3, r9
 8007636:	4650      	mov	r0, sl
 8007638:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800763c:	f002 f944 	bl	80098c8 <__d2b>
 8007640:	901c      	str	r0, [sp, #112]	; 0x70
 8007642:	2800      	cmp	r0, #0
 8007644:	f43f aefb 	beq.w	800743e <_strtod_l+0x486>
 8007648:	2101      	movs	r1, #1
 800764a:	4650      	mov	r0, sl
 800764c:	f001 fe96 	bl	800937c <__i2b>
 8007650:	4603      	mov	r3, r0
 8007652:	9004      	str	r0, [sp, #16]
 8007654:	2800      	cmp	r0, #0
 8007656:	f43f aef2 	beq.w	800743e <_strtod_l+0x486>
 800765a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800765c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800765e:	2d00      	cmp	r5, #0
 8007660:	bfab      	itete	ge
 8007662:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007664:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007666:	18ee      	addge	r6, r5, r3
 8007668:	1b5c      	sublt	r4, r3, r5
 800766a:	9b05      	ldr	r3, [sp, #20]
 800766c:	bfa8      	it	ge
 800766e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007670:	eba5 0503 	sub.w	r5, r5, r3
 8007674:	4415      	add	r5, r2
 8007676:	4b71      	ldr	r3, [pc, #452]	; (800783c <_strtod_l+0x884>)
 8007678:	f105 35ff 	add.w	r5, r5, #4294967295
 800767c:	bfb8      	it	lt
 800767e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007680:	429d      	cmp	r5, r3
 8007682:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007686:	f280 80c9 	bge.w	800781c <_strtod_l+0x864>
 800768a:	1b5b      	subs	r3, r3, r5
 800768c:	2b1f      	cmp	r3, #31
 800768e:	f04f 0701 	mov.w	r7, #1
 8007692:	eba2 0203 	sub.w	r2, r2, r3
 8007696:	f300 80b6 	bgt.w	8007806 <_strtod_l+0x84e>
 800769a:	2500      	movs	r5, #0
 800769c:	fa07 f303 	lsl.w	r3, r7, r3
 80076a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80076a2:	18b7      	adds	r7, r6, r2
 80076a4:	9b05      	ldr	r3, [sp, #20]
 80076a6:	42be      	cmp	r6, r7
 80076a8:	4414      	add	r4, r2
 80076aa:	441c      	add	r4, r3
 80076ac:	4633      	mov	r3, r6
 80076ae:	bfa8      	it	ge
 80076b0:	463b      	movge	r3, r7
 80076b2:	42a3      	cmp	r3, r4
 80076b4:	bfa8      	it	ge
 80076b6:	4623      	movge	r3, r4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bfc2      	ittt	gt
 80076bc:	1aff      	subgt	r7, r7, r3
 80076be:	1ae4      	subgt	r4, r4, r3
 80076c0:	1af6      	subgt	r6, r6, r3
 80076c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	dd17      	ble.n	80076f8 <_strtod_l+0x740>
 80076c8:	461a      	mov	r2, r3
 80076ca:	4650      	mov	r0, sl
 80076cc:	9904      	ldr	r1, [sp, #16]
 80076ce:	f001 ff0f 	bl	80094f0 <__pow5mult>
 80076d2:	9004      	str	r0, [sp, #16]
 80076d4:	2800      	cmp	r0, #0
 80076d6:	f43f aeb2 	beq.w	800743e <_strtod_l+0x486>
 80076da:	4601      	mov	r1, r0
 80076dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80076de:	4650      	mov	r0, sl
 80076e0:	f001 fe62 	bl	80093a8 <__multiply>
 80076e4:	9009      	str	r0, [sp, #36]	; 0x24
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f43f aea9 	beq.w	800743e <_strtod_l+0x486>
 80076ec:	4650      	mov	r0, sl
 80076ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076f0:	f001 fd40 	bl	8009174 <_Bfree>
 80076f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f6:	931c      	str	r3, [sp, #112]	; 0x70
 80076f8:	2f00      	cmp	r7, #0
 80076fa:	f300 8093 	bgt.w	8007824 <_strtod_l+0x86c>
 80076fe:	9b07      	ldr	r3, [sp, #28]
 8007700:	2b00      	cmp	r3, #0
 8007702:	dd08      	ble.n	8007716 <_strtod_l+0x75e>
 8007704:	4650      	mov	r0, sl
 8007706:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007708:	9906      	ldr	r1, [sp, #24]
 800770a:	f001 fef1 	bl	80094f0 <__pow5mult>
 800770e:	9006      	str	r0, [sp, #24]
 8007710:	2800      	cmp	r0, #0
 8007712:	f43f ae94 	beq.w	800743e <_strtod_l+0x486>
 8007716:	2c00      	cmp	r4, #0
 8007718:	dd08      	ble.n	800772c <_strtod_l+0x774>
 800771a:	4622      	mov	r2, r4
 800771c:	4650      	mov	r0, sl
 800771e:	9906      	ldr	r1, [sp, #24]
 8007720:	f001 ff40 	bl	80095a4 <__lshift>
 8007724:	9006      	str	r0, [sp, #24]
 8007726:	2800      	cmp	r0, #0
 8007728:	f43f ae89 	beq.w	800743e <_strtod_l+0x486>
 800772c:	2e00      	cmp	r6, #0
 800772e:	dd08      	ble.n	8007742 <_strtod_l+0x78a>
 8007730:	4632      	mov	r2, r6
 8007732:	4650      	mov	r0, sl
 8007734:	9904      	ldr	r1, [sp, #16]
 8007736:	f001 ff35 	bl	80095a4 <__lshift>
 800773a:	9004      	str	r0, [sp, #16]
 800773c:	2800      	cmp	r0, #0
 800773e:	f43f ae7e 	beq.w	800743e <_strtod_l+0x486>
 8007742:	4650      	mov	r0, sl
 8007744:	9a06      	ldr	r2, [sp, #24]
 8007746:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007748:	f001 ffb4 	bl	80096b4 <__mdiff>
 800774c:	4683      	mov	fp, r0
 800774e:	2800      	cmp	r0, #0
 8007750:	f43f ae75 	beq.w	800743e <_strtod_l+0x486>
 8007754:	2400      	movs	r4, #0
 8007756:	68c3      	ldr	r3, [r0, #12]
 8007758:	9904      	ldr	r1, [sp, #16]
 800775a:	60c4      	str	r4, [r0, #12]
 800775c:	930d      	str	r3, [sp, #52]	; 0x34
 800775e:	f001 ff8d 	bl	800967c <__mcmp>
 8007762:	42a0      	cmp	r0, r4
 8007764:	da70      	bge.n	8007848 <_strtod_l+0x890>
 8007766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007768:	ea53 0308 	orrs.w	r3, r3, r8
 800776c:	f040 8096 	bne.w	800789c <_strtod_l+0x8e4>
 8007770:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007774:	2b00      	cmp	r3, #0
 8007776:	f040 8091 	bne.w	800789c <_strtod_l+0x8e4>
 800777a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800777e:	0d1b      	lsrs	r3, r3, #20
 8007780:	051b      	lsls	r3, r3, #20
 8007782:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007786:	f240 8089 	bls.w	800789c <_strtod_l+0x8e4>
 800778a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800778e:	b923      	cbnz	r3, 800779a <_strtod_l+0x7e2>
 8007790:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007794:	2b01      	cmp	r3, #1
 8007796:	f340 8081 	ble.w	800789c <_strtod_l+0x8e4>
 800779a:	4659      	mov	r1, fp
 800779c:	2201      	movs	r2, #1
 800779e:	4650      	mov	r0, sl
 80077a0:	f001 ff00 	bl	80095a4 <__lshift>
 80077a4:	9904      	ldr	r1, [sp, #16]
 80077a6:	4683      	mov	fp, r0
 80077a8:	f001 ff68 	bl	800967c <__mcmp>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	dd75      	ble.n	800789c <_strtod_l+0x8e4>
 80077b0:	9905      	ldr	r1, [sp, #20]
 80077b2:	464b      	mov	r3, r9
 80077b4:	4a22      	ldr	r2, [pc, #136]	; (8007840 <_strtod_l+0x888>)
 80077b6:	2900      	cmp	r1, #0
 80077b8:	f000 8091 	beq.w	80078de <_strtod_l+0x926>
 80077bc:	ea02 0109 	and.w	r1, r2, r9
 80077c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077c4:	f300 808b 	bgt.w	80078de <_strtod_l+0x926>
 80077c8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077cc:	f77f aea9 	ble.w	8007522 <_strtod_l+0x56a>
 80077d0:	2300      	movs	r3, #0
 80077d2:	4a1c      	ldr	r2, [pc, #112]	; (8007844 <_strtod_l+0x88c>)
 80077d4:	4640      	mov	r0, r8
 80077d6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80077da:	4649      	mov	r1, r9
 80077dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80077e0:	f7f8 fe7a 	bl	80004d8 <__aeabi_dmul>
 80077e4:	460b      	mov	r3, r1
 80077e6:	4303      	orrs	r3, r0
 80077e8:	bf08      	it	eq
 80077ea:	2322      	moveq	r3, #34	; 0x22
 80077ec:	4680      	mov	r8, r0
 80077ee:	4689      	mov	r9, r1
 80077f0:	bf08      	it	eq
 80077f2:	f8ca 3000 	streq.w	r3, [sl]
 80077f6:	e62d      	b.n	8007454 <_strtod_l+0x49c>
 80077f8:	f04f 32ff 	mov.w	r2, #4294967295
 80077fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007800:	ea03 0808 	and.w	r8, r3, r8
 8007804:	e6db      	b.n	80075be <_strtod_l+0x606>
 8007806:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800780a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800780e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007812:	35e2      	adds	r5, #226	; 0xe2
 8007814:	fa07 f505 	lsl.w	r5, r7, r5
 8007818:	970f      	str	r7, [sp, #60]	; 0x3c
 800781a:	e742      	b.n	80076a2 <_strtod_l+0x6ea>
 800781c:	2301      	movs	r3, #1
 800781e:	2500      	movs	r5, #0
 8007820:	930f      	str	r3, [sp, #60]	; 0x3c
 8007822:	e73e      	b.n	80076a2 <_strtod_l+0x6ea>
 8007824:	463a      	mov	r2, r7
 8007826:	4650      	mov	r0, sl
 8007828:	991c      	ldr	r1, [sp, #112]	; 0x70
 800782a:	f001 febb 	bl	80095a4 <__lshift>
 800782e:	901c      	str	r0, [sp, #112]	; 0x70
 8007830:	2800      	cmp	r0, #0
 8007832:	f47f af64 	bne.w	80076fe <_strtod_l+0x746>
 8007836:	e602      	b.n	800743e <_strtod_l+0x486>
 8007838:	0800b218 	.word	0x0800b218
 800783c:	fffffc02 	.word	0xfffffc02
 8007840:	7ff00000 	.word	0x7ff00000
 8007844:	39500000 	.word	0x39500000
 8007848:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800784c:	d166      	bne.n	800791c <_strtod_l+0x964>
 800784e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007854:	b35a      	cbz	r2, 80078ae <_strtod_l+0x8f6>
 8007856:	4a9c      	ldr	r2, [pc, #624]	; (8007ac8 <_strtod_l+0xb10>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d12c      	bne.n	80078b6 <_strtod_l+0x8fe>
 800785c:	9b05      	ldr	r3, [sp, #20]
 800785e:	4640      	mov	r0, r8
 8007860:	b303      	cbz	r3, 80078a4 <_strtod_l+0x8ec>
 8007862:	464b      	mov	r3, r9
 8007864:	4a99      	ldr	r2, [pc, #612]	; (8007acc <_strtod_l+0xb14>)
 8007866:	f04f 31ff 	mov.w	r1, #4294967295
 800786a:	401a      	ands	r2, r3
 800786c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007870:	d81b      	bhi.n	80078aa <_strtod_l+0x8f2>
 8007872:	0d12      	lsrs	r2, r2, #20
 8007874:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007878:	fa01 f303 	lsl.w	r3, r1, r3
 800787c:	4298      	cmp	r0, r3
 800787e:	d11a      	bne.n	80078b6 <_strtod_l+0x8fe>
 8007880:	4b93      	ldr	r3, [pc, #588]	; (8007ad0 <_strtod_l+0xb18>)
 8007882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007884:	429a      	cmp	r2, r3
 8007886:	d102      	bne.n	800788e <_strtod_l+0x8d6>
 8007888:	3001      	adds	r0, #1
 800788a:	f43f add8 	beq.w	800743e <_strtod_l+0x486>
 800788e:	f04f 0800 	mov.w	r8, #0
 8007892:	4b8e      	ldr	r3, [pc, #568]	; (8007acc <_strtod_l+0xb14>)
 8007894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007896:	401a      	ands	r2, r3
 8007898:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800789c:	9b05      	ldr	r3, [sp, #20]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d196      	bne.n	80077d0 <_strtod_l+0x818>
 80078a2:	e5d7      	b.n	8007454 <_strtod_l+0x49c>
 80078a4:	f04f 33ff 	mov.w	r3, #4294967295
 80078a8:	e7e8      	b.n	800787c <_strtod_l+0x8c4>
 80078aa:	460b      	mov	r3, r1
 80078ac:	e7e6      	b.n	800787c <_strtod_l+0x8c4>
 80078ae:	ea53 0308 	orrs.w	r3, r3, r8
 80078b2:	f43f af7d 	beq.w	80077b0 <_strtod_l+0x7f8>
 80078b6:	b1e5      	cbz	r5, 80078f2 <_strtod_l+0x93a>
 80078b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ba:	421d      	tst	r5, r3
 80078bc:	d0ee      	beq.n	800789c <_strtod_l+0x8e4>
 80078be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	9a05      	ldr	r2, [sp, #20]
 80078c6:	b1c3      	cbz	r3, 80078fa <_strtod_l+0x942>
 80078c8:	f7ff fb52 	bl	8006f70 <sulp>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078d4:	f7f8 fc4a 	bl	800016c <__adddf3>
 80078d8:	4680      	mov	r8, r0
 80078da:	4689      	mov	r9, r1
 80078dc:	e7de      	b.n	800789c <_strtod_l+0x8e4>
 80078de:	4013      	ands	r3, r2
 80078e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078e4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80078e8:	f04f 38ff 	mov.w	r8, #4294967295
 80078ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80078f0:	e7d4      	b.n	800789c <_strtod_l+0x8e4>
 80078f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078f4:	ea13 0f08 	tst.w	r3, r8
 80078f8:	e7e0      	b.n	80078bc <_strtod_l+0x904>
 80078fa:	f7ff fb39 	bl	8006f70 <sulp>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007906:	f7f8 fc2f 	bl	8000168 <__aeabi_dsub>
 800790a:	2200      	movs	r2, #0
 800790c:	2300      	movs	r3, #0
 800790e:	4680      	mov	r8, r0
 8007910:	4689      	mov	r9, r1
 8007912:	f7f9 f849 	bl	80009a8 <__aeabi_dcmpeq>
 8007916:	2800      	cmp	r0, #0
 8007918:	d0c0      	beq.n	800789c <_strtod_l+0x8e4>
 800791a:	e602      	b.n	8007522 <_strtod_l+0x56a>
 800791c:	4658      	mov	r0, fp
 800791e:	9904      	ldr	r1, [sp, #16]
 8007920:	f002 f82e 	bl	8009980 <__ratio>
 8007924:	2200      	movs	r2, #0
 8007926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800792a:	4606      	mov	r6, r0
 800792c:	460f      	mov	r7, r1
 800792e:	f7f9 f84f 	bl	80009d0 <__aeabi_dcmple>
 8007932:	2800      	cmp	r0, #0
 8007934:	d075      	beq.n	8007a22 <_strtod_l+0xa6a>
 8007936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007938:	2b00      	cmp	r3, #0
 800793a:	d047      	beq.n	80079cc <_strtod_l+0xa14>
 800793c:	2600      	movs	r6, #0
 800793e:	4f65      	ldr	r7, [pc, #404]	; (8007ad4 <_strtod_l+0xb1c>)
 8007940:	4d64      	ldr	r5, [pc, #400]	; (8007ad4 <_strtod_l+0xb1c>)
 8007942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007948:	0d1b      	lsrs	r3, r3, #20
 800794a:	051b      	lsls	r3, r3, #20
 800794c:	930f      	str	r3, [sp, #60]	; 0x3c
 800794e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007950:	4b61      	ldr	r3, [pc, #388]	; (8007ad8 <_strtod_l+0xb20>)
 8007952:	429a      	cmp	r2, r3
 8007954:	f040 80c8 	bne.w	8007ae8 <_strtod_l+0xb30>
 8007958:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800795c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007962:	4640      	mov	r0, r8
 8007964:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007968:	4649      	mov	r1, r9
 800796a:	f001 ff33 	bl	80097d4 <__ulp>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4630      	mov	r0, r6
 8007974:	4639      	mov	r1, r7
 8007976:	f7f8 fdaf 	bl	80004d8 <__aeabi_dmul>
 800797a:	4642      	mov	r2, r8
 800797c:	464b      	mov	r3, r9
 800797e:	f7f8 fbf5 	bl	800016c <__adddf3>
 8007982:	460b      	mov	r3, r1
 8007984:	4951      	ldr	r1, [pc, #324]	; (8007acc <_strtod_l+0xb14>)
 8007986:	4a55      	ldr	r2, [pc, #340]	; (8007adc <_strtod_l+0xb24>)
 8007988:	4019      	ands	r1, r3
 800798a:	4291      	cmp	r1, r2
 800798c:	4680      	mov	r8, r0
 800798e:	d95e      	bls.n	8007a4e <_strtod_l+0xa96>
 8007990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007992:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007996:	4293      	cmp	r3, r2
 8007998:	d103      	bne.n	80079a2 <_strtod_l+0x9ea>
 800799a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800799c:	3301      	adds	r3, #1
 800799e:	f43f ad4e 	beq.w	800743e <_strtod_l+0x486>
 80079a2:	f04f 38ff 	mov.w	r8, #4294967295
 80079a6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007ad0 <_strtod_l+0xb18>
 80079aa:	4650      	mov	r0, sl
 80079ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079ae:	f001 fbe1 	bl	8009174 <_Bfree>
 80079b2:	4650      	mov	r0, sl
 80079b4:	9906      	ldr	r1, [sp, #24]
 80079b6:	f001 fbdd 	bl	8009174 <_Bfree>
 80079ba:	4650      	mov	r0, sl
 80079bc:	9904      	ldr	r1, [sp, #16]
 80079be:	f001 fbd9 	bl	8009174 <_Bfree>
 80079c2:	4659      	mov	r1, fp
 80079c4:	4650      	mov	r0, sl
 80079c6:	f001 fbd5 	bl	8009174 <_Bfree>
 80079ca:	e61c      	b.n	8007606 <_strtod_l+0x64e>
 80079cc:	f1b8 0f00 	cmp.w	r8, #0
 80079d0:	d119      	bne.n	8007a06 <_strtod_l+0xa4e>
 80079d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079d8:	b9e3      	cbnz	r3, 8007a14 <_strtod_l+0xa5c>
 80079da:	2200      	movs	r2, #0
 80079dc:	4630      	mov	r0, r6
 80079de:	4639      	mov	r1, r7
 80079e0:	4b3c      	ldr	r3, [pc, #240]	; (8007ad4 <_strtod_l+0xb1c>)
 80079e2:	f7f8 ffeb 	bl	80009bc <__aeabi_dcmplt>
 80079e6:	b9c8      	cbnz	r0, 8007a1c <_strtod_l+0xa64>
 80079e8:	2200      	movs	r2, #0
 80079ea:	4630      	mov	r0, r6
 80079ec:	4639      	mov	r1, r7
 80079ee:	4b3c      	ldr	r3, [pc, #240]	; (8007ae0 <_strtod_l+0xb28>)
 80079f0:	f7f8 fd72 	bl	80004d8 <__aeabi_dmul>
 80079f4:	4604      	mov	r4, r0
 80079f6:	460d      	mov	r5, r1
 80079f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80079fc:	9418      	str	r4, [sp, #96]	; 0x60
 80079fe:	9319      	str	r3, [sp, #100]	; 0x64
 8007a00:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007a04:	e79d      	b.n	8007942 <_strtod_l+0x98a>
 8007a06:	f1b8 0f01 	cmp.w	r8, #1
 8007a0a:	d103      	bne.n	8007a14 <_strtod_l+0xa5c>
 8007a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f43f ad87 	beq.w	8007522 <_strtod_l+0x56a>
 8007a14:	2600      	movs	r6, #0
 8007a16:	2400      	movs	r4, #0
 8007a18:	4f32      	ldr	r7, [pc, #200]	; (8007ae4 <_strtod_l+0xb2c>)
 8007a1a:	e791      	b.n	8007940 <_strtod_l+0x988>
 8007a1c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007a1e:	4d30      	ldr	r5, [pc, #192]	; (8007ae0 <_strtod_l+0xb28>)
 8007a20:	e7ea      	b.n	80079f8 <_strtod_l+0xa40>
 8007a22:	4b2f      	ldr	r3, [pc, #188]	; (8007ae0 <_strtod_l+0xb28>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	4630      	mov	r0, r6
 8007a28:	4639      	mov	r1, r7
 8007a2a:	f7f8 fd55 	bl	80004d8 <__aeabi_dmul>
 8007a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a30:	4604      	mov	r4, r0
 8007a32:	460d      	mov	r5, r1
 8007a34:	b933      	cbnz	r3, 8007a44 <_strtod_l+0xa8c>
 8007a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a3a:	9010      	str	r0, [sp, #64]	; 0x40
 8007a3c:	9311      	str	r3, [sp, #68]	; 0x44
 8007a3e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007a42:	e77e      	b.n	8007942 <_strtod_l+0x98a>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a4c:	e7f7      	b.n	8007a3e <_strtod_l+0xa86>
 8007a4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007a52:	9b05      	ldr	r3, [sp, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1a8      	bne.n	80079aa <_strtod_l+0x9f2>
 8007a58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a5e:	0d1b      	lsrs	r3, r3, #20
 8007a60:	051b      	lsls	r3, r3, #20
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d1a1      	bne.n	80079aa <_strtod_l+0x9f2>
 8007a66:	4620      	mov	r0, r4
 8007a68:	4629      	mov	r1, r5
 8007a6a:	f7f9 f895 	bl	8000b98 <__aeabi_d2lz>
 8007a6e:	f7f8 fd05 	bl	800047c <__aeabi_l2d>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4620      	mov	r0, r4
 8007a78:	4629      	mov	r1, r5
 8007a7a:	f7f8 fb75 	bl	8000168 <__aeabi_dsub>
 8007a7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a84:	ea43 0308 	orr.w	r3, r3, r8
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	460d      	mov	r5, r1
 8007a8e:	d066      	beq.n	8007b5e <_strtod_l+0xba6>
 8007a90:	a309      	add	r3, pc, #36	; (adr r3, 8007ab8 <_strtod_l+0xb00>)
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f7f8 ff91 	bl	80009bc <__aeabi_dcmplt>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	f47f acda 	bne.w	8007454 <_strtod_l+0x49c>
 8007aa0:	a307      	add	r3, pc, #28	; (adr r3, 8007ac0 <_strtod_l+0xb08>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	f7f8 ffa5 	bl	80009f8 <__aeabi_dcmpgt>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f43f af7b 	beq.w	80079aa <_strtod_l+0x9f2>
 8007ab4:	e4ce      	b.n	8007454 <_strtod_l+0x49c>
 8007ab6:	bf00      	nop
 8007ab8:	94a03595 	.word	0x94a03595
 8007abc:	3fdfffff 	.word	0x3fdfffff
 8007ac0:	35afe535 	.word	0x35afe535
 8007ac4:	3fe00000 	.word	0x3fe00000
 8007ac8:	000fffff 	.word	0x000fffff
 8007acc:	7ff00000 	.word	0x7ff00000
 8007ad0:	7fefffff 	.word	0x7fefffff
 8007ad4:	3ff00000 	.word	0x3ff00000
 8007ad8:	7fe00000 	.word	0x7fe00000
 8007adc:	7c9fffff 	.word	0x7c9fffff
 8007ae0:	3fe00000 	.word	0x3fe00000
 8007ae4:	bff00000 	.word	0xbff00000
 8007ae8:	9b05      	ldr	r3, [sp, #20]
 8007aea:	b313      	cbz	r3, 8007b32 <_strtod_l+0xb7a>
 8007aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007af2:	d81e      	bhi.n	8007b32 <_strtod_l+0xb7a>
 8007af4:	a326      	add	r3, pc, #152	; (adr r3, 8007b90 <_strtod_l+0xbd8>)
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	4620      	mov	r0, r4
 8007afc:	4629      	mov	r1, r5
 8007afe:	f7f8 ff67 	bl	80009d0 <__aeabi_dcmple>
 8007b02:	b190      	cbz	r0, 8007b2a <_strtod_l+0xb72>
 8007b04:	4629      	mov	r1, r5
 8007b06:	4620      	mov	r0, r4
 8007b08:	f7f8 ffbe 	bl	8000a88 <__aeabi_d2uiz>
 8007b0c:	2801      	cmp	r0, #1
 8007b0e:	bf38      	it	cc
 8007b10:	2001      	movcc	r0, #1
 8007b12:	f7f8 fc67 	bl	80003e4 <__aeabi_ui2d>
 8007b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b18:	4604      	mov	r4, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	b9d3      	cbnz	r3, 8007b54 <_strtod_l+0xb9c>
 8007b1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b22:	9012      	str	r0, [sp, #72]	; 0x48
 8007b24:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b26:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007b2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b2c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007b30:	1a9f      	subs	r7, r3, r2
 8007b32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b36:	f001 fe4d 	bl	80097d4 <__ulp>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4630      	mov	r0, r6
 8007b40:	4639      	mov	r1, r7
 8007b42:	f7f8 fcc9 	bl	80004d8 <__aeabi_dmul>
 8007b46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b4a:	f7f8 fb0f 	bl	800016c <__adddf3>
 8007b4e:	4680      	mov	r8, r0
 8007b50:	4689      	mov	r9, r1
 8007b52:	e77e      	b.n	8007a52 <_strtod_l+0xa9a>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007b5c:	e7e3      	b.n	8007b26 <_strtod_l+0xb6e>
 8007b5e:	a30e      	add	r3, pc, #56	; (adr r3, 8007b98 <_strtod_l+0xbe0>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 ff2a 	bl	80009bc <__aeabi_dcmplt>
 8007b68:	e7a1      	b.n	8007aae <_strtod_l+0xaf6>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	f7ff ba65 	b.w	8007042 <_strtod_l+0x8a>
 8007b78:	2b65      	cmp	r3, #101	; 0x65
 8007b7a:	f43f ab5c 	beq.w	8007236 <_strtod_l+0x27e>
 8007b7e:	2b45      	cmp	r3, #69	; 0x45
 8007b80:	f43f ab59 	beq.w	8007236 <_strtod_l+0x27e>
 8007b84:	2201      	movs	r2, #1
 8007b86:	f7ff bb8d 	b.w	80072a4 <_strtod_l+0x2ec>
 8007b8a:	bf00      	nop
 8007b8c:	f3af 8000 	nop.w
 8007b90:	ffc00000 	.word	0xffc00000
 8007b94:	41dfffff 	.word	0x41dfffff
 8007b98:	94a03595 	.word	0x94a03595
 8007b9c:	3fcfffff 	.word	0x3fcfffff

08007ba0 <_strtod_r>:
 8007ba0:	4b01      	ldr	r3, [pc, #4]	; (8007ba8 <_strtod_r+0x8>)
 8007ba2:	f7ff ba09 	b.w	8006fb8 <_strtod_l>
 8007ba6:	bf00      	nop
 8007ba8:	2000007c 	.word	0x2000007c

08007bac <_strtol_l.isra.0>:
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb2:	4686      	mov	lr, r0
 8007bb4:	d001      	beq.n	8007bba <_strtol_l.isra.0+0xe>
 8007bb6:	2b24      	cmp	r3, #36	; 0x24
 8007bb8:	d906      	bls.n	8007bc8 <_strtol_l.isra.0+0x1c>
 8007bba:	f7fe fb11 	bl	80061e0 <__errno>
 8007bbe:	2316      	movs	r3, #22
 8007bc0:	6003      	str	r3, [r0, #0]
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc8:	468c      	mov	ip, r1
 8007bca:	4e3a      	ldr	r6, [pc, #232]	; (8007cb4 <_strtol_l.isra.0+0x108>)
 8007bcc:	4660      	mov	r0, ip
 8007bce:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007bd2:	5da5      	ldrb	r5, [r4, r6]
 8007bd4:	f015 0508 	ands.w	r5, r5, #8
 8007bd8:	d1f8      	bne.n	8007bcc <_strtol_l.isra.0+0x20>
 8007bda:	2c2d      	cmp	r4, #45	; 0x2d
 8007bdc:	d133      	bne.n	8007c46 <_strtol_l.isra.0+0x9a>
 8007bde:	f04f 0801 	mov.w	r8, #1
 8007be2:	f89c 4000 	ldrb.w	r4, [ip]
 8007be6:	f100 0c02 	add.w	ip, r0, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d05d      	beq.n	8007caa <_strtol_l.isra.0+0xfe>
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d10c      	bne.n	8007c0c <_strtol_l.isra.0+0x60>
 8007bf2:	2c30      	cmp	r4, #48	; 0x30
 8007bf4:	d10a      	bne.n	8007c0c <_strtol_l.isra.0+0x60>
 8007bf6:	f89c 0000 	ldrb.w	r0, [ip]
 8007bfa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007bfe:	2858      	cmp	r0, #88	; 0x58
 8007c00:	d14e      	bne.n	8007ca0 <_strtol_l.isra.0+0xf4>
 8007c02:	2310      	movs	r3, #16
 8007c04:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007c08:	f10c 0c02 	add.w	ip, ip, #2
 8007c0c:	2500      	movs	r5, #0
 8007c0e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8007c12:	3f01      	subs	r7, #1
 8007c14:	fbb7 f9f3 	udiv	r9, r7, r3
 8007c18:	4628      	mov	r0, r5
 8007c1a:	fb03 7a19 	mls	sl, r3, r9, r7
 8007c1e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007c22:	2e09      	cmp	r6, #9
 8007c24:	d818      	bhi.n	8007c58 <_strtol_l.isra.0+0xac>
 8007c26:	4634      	mov	r4, r6
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	dd24      	ble.n	8007c76 <_strtol_l.isra.0+0xca>
 8007c2c:	2d00      	cmp	r5, #0
 8007c2e:	db1f      	blt.n	8007c70 <_strtol_l.isra.0+0xc4>
 8007c30:	4581      	cmp	r9, r0
 8007c32:	d31d      	bcc.n	8007c70 <_strtol_l.isra.0+0xc4>
 8007c34:	d101      	bne.n	8007c3a <_strtol_l.isra.0+0x8e>
 8007c36:	45a2      	cmp	sl, r4
 8007c38:	db1a      	blt.n	8007c70 <_strtol_l.isra.0+0xc4>
 8007c3a:	2501      	movs	r5, #1
 8007c3c:	fb00 4003 	mla	r0, r0, r3, r4
 8007c40:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007c44:	e7eb      	b.n	8007c1e <_strtol_l.isra.0+0x72>
 8007c46:	2c2b      	cmp	r4, #43	; 0x2b
 8007c48:	bf08      	it	eq
 8007c4a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007c4e:	46a8      	mov	r8, r5
 8007c50:	bf08      	it	eq
 8007c52:	f100 0c02 	addeq.w	ip, r0, #2
 8007c56:	e7c8      	b.n	8007bea <_strtol_l.isra.0+0x3e>
 8007c58:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007c5c:	2e19      	cmp	r6, #25
 8007c5e:	d801      	bhi.n	8007c64 <_strtol_l.isra.0+0xb8>
 8007c60:	3c37      	subs	r4, #55	; 0x37
 8007c62:	e7e1      	b.n	8007c28 <_strtol_l.isra.0+0x7c>
 8007c64:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007c68:	2e19      	cmp	r6, #25
 8007c6a:	d804      	bhi.n	8007c76 <_strtol_l.isra.0+0xca>
 8007c6c:	3c57      	subs	r4, #87	; 0x57
 8007c6e:	e7db      	b.n	8007c28 <_strtol_l.isra.0+0x7c>
 8007c70:	f04f 35ff 	mov.w	r5, #4294967295
 8007c74:	e7e4      	b.n	8007c40 <_strtol_l.isra.0+0x94>
 8007c76:	2d00      	cmp	r5, #0
 8007c78:	da08      	bge.n	8007c8c <_strtol_l.isra.0+0xe0>
 8007c7a:	2322      	movs	r3, #34	; 0x22
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f8ce 3000 	str.w	r3, [lr]
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	d09e      	beq.n	8007bc4 <_strtol_l.isra.0+0x18>
 8007c86:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007c8a:	e007      	b.n	8007c9c <_strtol_l.isra.0+0xf0>
 8007c8c:	f1b8 0f00 	cmp.w	r8, #0
 8007c90:	d000      	beq.n	8007c94 <_strtol_l.isra.0+0xe8>
 8007c92:	4240      	negs	r0, r0
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	d095      	beq.n	8007bc4 <_strtol_l.isra.0+0x18>
 8007c98:	2d00      	cmp	r5, #0
 8007c9a:	d1f4      	bne.n	8007c86 <_strtol_l.isra.0+0xda>
 8007c9c:	6011      	str	r1, [r2, #0]
 8007c9e:	e791      	b.n	8007bc4 <_strtol_l.isra.0+0x18>
 8007ca0:	2430      	movs	r4, #48	; 0x30
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1b2      	bne.n	8007c0c <_strtol_l.isra.0+0x60>
 8007ca6:	2308      	movs	r3, #8
 8007ca8:	e7b0      	b.n	8007c0c <_strtol_l.isra.0+0x60>
 8007caa:	2c30      	cmp	r4, #48	; 0x30
 8007cac:	d0a3      	beq.n	8007bf6 <_strtol_l.isra.0+0x4a>
 8007cae:	230a      	movs	r3, #10
 8007cb0:	e7ac      	b.n	8007c0c <_strtol_l.isra.0+0x60>
 8007cb2:	bf00      	nop
 8007cb4:	0800b241 	.word	0x0800b241

08007cb8 <_strtol_r>:
 8007cb8:	f7ff bf78 	b.w	8007bac <_strtol_l.isra.0>

08007cbc <quorem>:
 8007cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc0:	6903      	ldr	r3, [r0, #16]
 8007cc2:	690c      	ldr	r4, [r1, #16]
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	42a3      	cmp	r3, r4
 8007cc8:	f2c0 8083 	blt.w	8007dd2 <quorem+0x116>
 8007ccc:	3c01      	subs	r4, #1
 8007cce:	f100 0514 	add.w	r5, r0, #20
 8007cd2:	f101 0814 	add.w	r8, r1, #20
 8007cd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cf4:	d332      	bcc.n	8007d5c <quorem+0xa0>
 8007cf6:	f04f 0e00 	mov.w	lr, #0
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	46ac      	mov	ip, r5
 8007cfe:	46f2      	mov	sl, lr
 8007d00:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d04:	b293      	uxth	r3, r2
 8007d06:	fb06 e303 	mla	r3, r6, r3, lr
 8007d0a:	0c12      	lsrs	r2, r2, #16
 8007d0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d10:	fb06 e202 	mla	r2, r6, r2, lr
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	ebaa 0303 	sub.w	r3, sl, r3
 8007d1a:	f8dc a000 	ldr.w	sl, [ip]
 8007d1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d22:	fa1f fa8a 	uxth.w	sl, sl
 8007d26:	4453      	add	r3, sl
 8007d28:	fa1f fa82 	uxth.w	sl, r2
 8007d2c:	f8dc 2000 	ldr.w	r2, [ip]
 8007d30:	4581      	cmp	r9, r0
 8007d32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d44:	f84c 3b04 	str.w	r3, [ip], #4
 8007d48:	d2da      	bcs.n	8007d00 <quorem+0x44>
 8007d4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d4e:	b92b      	cbnz	r3, 8007d5c <quorem+0xa0>
 8007d50:	9b01      	ldr	r3, [sp, #4]
 8007d52:	3b04      	subs	r3, #4
 8007d54:	429d      	cmp	r5, r3
 8007d56:	461a      	mov	r2, r3
 8007d58:	d32f      	bcc.n	8007dba <quorem+0xfe>
 8007d5a:	613c      	str	r4, [r7, #16]
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f001 fc8d 	bl	800967c <__mcmp>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	db25      	blt.n	8007db2 <quorem+0xf6>
 8007d66:	4628      	mov	r0, r5
 8007d68:	f04f 0c00 	mov.w	ip, #0
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	f858 1b04 	ldr.w	r1, [r8], #4
 8007d72:	f8d0 e000 	ldr.w	lr, [r0]
 8007d76:	b28b      	uxth	r3, r1
 8007d78:	ebac 0303 	sub.w	r3, ip, r3
 8007d7c:	fa1f f28e 	uxth.w	r2, lr
 8007d80:	4413      	add	r3, r2
 8007d82:	0c0a      	lsrs	r2, r1, #16
 8007d84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d92:	45c1      	cmp	r9, r8
 8007d94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d98:	f840 3b04 	str.w	r3, [r0], #4
 8007d9c:	d2e7      	bcs.n	8007d6e <quorem+0xb2>
 8007d9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007da6:	b922      	cbnz	r2, 8007db2 <quorem+0xf6>
 8007da8:	3b04      	subs	r3, #4
 8007daa:	429d      	cmp	r5, r3
 8007dac:	461a      	mov	r2, r3
 8007dae:	d30a      	bcc.n	8007dc6 <quorem+0x10a>
 8007db0:	613c      	str	r4, [r7, #16]
 8007db2:	4630      	mov	r0, r6
 8007db4:	b003      	add	sp, #12
 8007db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	3b04      	subs	r3, #4
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	d1cb      	bne.n	8007d5a <quorem+0x9e>
 8007dc2:	3c01      	subs	r4, #1
 8007dc4:	e7c6      	b.n	8007d54 <quorem+0x98>
 8007dc6:	6812      	ldr	r2, [r2, #0]
 8007dc8:	3b04      	subs	r3, #4
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	d1f0      	bne.n	8007db0 <quorem+0xf4>
 8007dce:	3c01      	subs	r4, #1
 8007dd0:	e7eb      	b.n	8007daa <quorem+0xee>
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	e7ee      	b.n	8007db4 <quorem+0xf8>
	...

08007dd8 <_dtoa_r>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	4616      	mov	r6, r2
 8007dde:	461f      	mov	r7, r3
 8007de0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007de2:	b099      	sub	sp, #100	; 0x64
 8007de4:	4605      	mov	r5, r0
 8007de6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007dea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007dee:	b974      	cbnz	r4, 8007e0e <_dtoa_r+0x36>
 8007df0:	2010      	movs	r0, #16
 8007df2:	f001 f949 	bl	8009088 <malloc>
 8007df6:	4602      	mov	r2, r0
 8007df8:	6268      	str	r0, [r5, #36]	; 0x24
 8007dfa:	b920      	cbnz	r0, 8007e06 <_dtoa_r+0x2e>
 8007dfc:	21ea      	movs	r1, #234	; 0xea
 8007dfe:	4bae      	ldr	r3, [pc, #696]	; (80080b8 <_dtoa_r+0x2e0>)
 8007e00:	48ae      	ldr	r0, [pc, #696]	; (80080bc <_dtoa_r+0x2e4>)
 8007e02:	f002 f875 	bl	8009ef0 <__assert_func>
 8007e06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e0a:	6004      	str	r4, [r0, #0]
 8007e0c:	60c4      	str	r4, [r0, #12]
 8007e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e10:	6819      	ldr	r1, [r3, #0]
 8007e12:	b151      	cbz	r1, 8007e2a <_dtoa_r+0x52>
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	2301      	movs	r3, #1
 8007e18:	4093      	lsls	r3, r2
 8007e1a:	604a      	str	r2, [r1, #4]
 8007e1c:	608b      	str	r3, [r1, #8]
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f001 f9a8 	bl	8009174 <_Bfree>
 8007e24:	2200      	movs	r2, #0
 8007e26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	1e3b      	subs	r3, r7, #0
 8007e2c:	bfaf      	iteee	ge
 8007e2e:	2300      	movge	r3, #0
 8007e30:	2201      	movlt	r2, #1
 8007e32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e36:	9305      	strlt	r3, [sp, #20]
 8007e38:	bfa8      	it	ge
 8007e3a:	f8c8 3000 	strge.w	r3, [r8]
 8007e3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007e42:	4b9f      	ldr	r3, [pc, #636]	; (80080c0 <_dtoa_r+0x2e8>)
 8007e44:	bfb8      	it	lt
 8007e46:	f8c8 2000 	strlt.w	r2, [r8]
 8007e4a:	ea33 0309 	bics.w	r3, r3, r9
 8007e4e:	d119      	bne.n	8007e84 <_dtoa_r+0xac>
 8007e50:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e5c:	4333      	orrs	r3, r6
 8007e5e:	f000 8580 	beq.w	8008962 <_dtoa_r+0xb8a>
 8007e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e64:	b953      	cbnz	r3, 8007e7c <_dtoa_r+0xa4>
 8007e66:	4b97      	ldr	r3, [pc, #604]	; (80080c4 <_dtoa_r+0x2ec>)
 8007e68:	e022      	b.n	8007eb0 <_dtoa_r+0xd8>
 8007e6a:	4b97      	ldr	r3, [pc, #604]	; (80080c8 <_dtoa_r+0x2f0>)
 8007e6c:	9308      	str	r3, [sp, #32]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	9808      	ldr	r0, [sp, #32]
 8007e76:	b019      	add	sp, #100	; 0x64
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	4b91      	ldr	r3, [pc, #580]	; (80080c4 <_dtoa_r+0x2ec>)
 8007e7e:	9308      	str	r3, [sp, #32]
 8007e80:	3303      	adds	r3, #3
 8007e82:	e7f5      	b.n	8007e70 <_dtoa_r+0x98>
 8007e84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007e88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007e8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e90:	2200      	movs	r2, #0
 8007e92:	2300      	movs	r3, #0
 8007e94:	f7f8 fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8007e98:	4680      	mov	r8, r0
 8007e9a:	b158      	cbz	r0, 8007eb4 <_dtoa_r+0xdc>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8559 	beq.w	800895c <_dtoa_r+0xb84>
 8007eaa:	4888      	ldr	r0, [pc, #544]	; (80080cc <_dtoa_r+0x2f4>)
 8007eac:	6018      	str	r0, [r3, #0]
 8007eae:	1e43      	subs	r3, r0, #1
 8007eb0:	9308      	str	r3, [sp, #32]
 8007eb2:	e7df      	b.n	8007e74 <_dtoa_r+0x9c>
 8007eb4:	ab16      	add	r3, sp, #88	; 0x58
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	ab17      	add	r3, sp, #92	; 0x5c
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ec2:	f001 fd01 	bl	80098c8 <__d2b>
 8007ec6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007eca:	4682      	mov	sl, r0
 8007ecc:	2c00      	cmp	r4, #0
 8007ece:	d07e      	beq.n	8007fce <_dtoa_r+0x1f6>
 8007ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ed6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ede:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007ee2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007ee6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007eea:	2200      	movs	r2, #0
 8007eec:	4b78      	ldr	r3, [pc, #480]	; (80080d0 <_dtoa_r+0x2f8>)
 8007eee:	f7f8 f93b 	bl	8000168 <__aeabi_dsub>
 8007ef2:	a36b      	add	r3, pc, #428	; (adr r3, 80080a0 <_dtoa_r+0x2c8>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 faee 	bl	80004d8 <__aeabi_dmul>
 8007efc:	a36a      	add	r3, pc, #424	; (adr r3, 80080a8 <_dtoa_r+0x2d0>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f7f8 f933 	bl	800016c <__adddf3>
 8007f06:	4606      	mov	r6, r0
 8007f08:	4620      	mov	r0, r4
 8007f0a:	460f      	mov	r7, r1
 8007f0c:	f7f8 fa7a 	bl	8000404 <__aeabi_i2d>
 8007f10:	a367      	add	r3, pc, #412	; (adr r3, 80080b0 <_dtoa_r+0x2d8>)
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	f7f8 fadf 	bl	80004d8 <__aeabi_dmul>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4630      	mov	r0, r6
 8007f20:	4639      	mov	r1, r7
 8007f22:	f7f8 f923 	bl	800016c <__adddf3>
 8007f26:	4606      	mov	r6, r0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	f7f8 fd85 	bl	8000a38 <__aeabi_d2iz>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4681      	mov	r9, r0
 8007f32:	2300      	movs	r3, #0
 8007f34:	4630      	mov	r0, r6
 8007f36:	4639      	mov	r1, r7
 8007f38:	f7f8 fd40 	bl	80009bc <__aeabi_dcmplt>
 8007f3c:	b148      	cbz	r0, 8007f52 <_dtoa_r+0x17a>
 8007f3e:	4648      	mov	r0, r9
 8007f40:	f7f8 fa60 	bl	8000404 <__aeabi_i2d>
 8007f44:	4632      	mov	r2, r6
 8007f46:	463b      	mov	r3, r7
 8007f48:	f7f8 fd2e 	bl	80009a8 <__aeabi_dcmpeq>
 8007f4c:	b908      	cbnz	r0, 8007f52 <_dtoa_r+0x17a>
 8007f4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007f52:	f1b9 0f16 	cmp.w	r9, #22
 8007f56:	d857      	bhi.n	8008008 <_dtoa_r+0x230>
 8007f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f5c:	4b5d      	ldr	r3, [pc, #372]	; (80080d4 <_dtoa_r+0x2fc>)
 8007f5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 fd29 	bl	80009bc <__aeabi_dcmplt>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d04e      	beq.n	800800c <_dtoa_r+0x234>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f109 39ff 	add.w	r9, r9, #4294967295
 8007f74:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f78:	1b1c      	subs	r4, r3, r4
 8007f7a:	1e63      	subs	r3, r4, #1
 8007f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f7e:	bf49      	itett	mi
 8007f80:	f1c4 0301 	rsbmi	r3, r4, #1
 8007f84:	2300      	movpl	r3, #0
 8007f86:	9306      	strmi	r3, [sp, #24]
 8007f88:	2300      	movmi	r3, #0
 8007f8a:	bf54      	ite	pl
 8007f8c:	9306      	strpl	r3, [sp, #24]
 8007f8e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007f90:	f1b9 0f00 	cmp.w	r9, #0
 8007f94:	db3c      	blt.n	8008010 <_dtoa_r+0x238>
 8007f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f98:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007f9c:	444b      	add	r3, r9
 8007f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fa6:	2b09      	cmp	r3, #9
 8007fa8:	d86c      	bhi.n	8008084 <_dtoa_r+0x2ac>
 8007faa:	2b05      	cmp	r3, #5
 8007fac:	bfc4      	itt	gt
 8007fae:	3b04      	subgt	r3, #4
 8007fb0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007fb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fb4:	bfc8      	it	gt
 8007fb6:	2400      	movgt	r4, #0
 8007fb8:	f1a3 0302 	sub.w	r3, r3, #2
 8007fbc:	bfd8      	it	le
 8007fbe:	2401      	movle	r4, #1
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	f200 808b 	bhi.w	80080dc <_dtoa_r+0x304>
 8007fc6:	e8df f003 	tbb	[pc, r3]
 8007fca:	4f2d      	.short	0x4f2d
 8007fcc:	5b4d      	.short	0x5b4d
 8007fce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007fd2:	441c      	add	r4, r3
 8007fd4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	bfc3      	ittte	gt
 8007fdc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007fe0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007fe4:	fa09 f303 	lslgt.w	r3, r9, r3
 8007fe8:	f1c3 0320 	rsble	r3, r3, #32
 8007fec:	bfc6      	itte	gt
 8007fee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ff2:	4318      	orrgt	r0, r3
 8007ff4:	fa06 f003 	lslle.w	r0, r6, r3
 8007ff8:	f7f8 f9f4 	bl	80003e4 <__aeabi_ui2d>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008002:	3c01      	subs	r4, #1
 8008004:	9313      	str	r3, [sp, #76]	; 0x4c
 8008006:	e770      	b.n	8007eea <_dtoa_r+0x112>
 8008008:	2301      	movs	r3, #1
 800800a:	e7b3      	b.n	8007f74 <_dtoa_r+0x19c>
 800800c:	900f      	str	r0, [sp, #60]	; 0x3c
 800800e:	e7b2      	b.n	8007f76 <_dtoa_r+0x19e>
 8008010:	9b06      	ldr	r3, [sp, #24]
 8008012:	eba3 0309 	sub.w	r3, r3, r9
 8008016:	9306      	str	r3, [sp, #24]
 8008018:	f1c9 0300 	rsb	r3, r9, #0
 800801c:	930a      	str	r3, [sp, #40]	; 0x28
 800801e:	2300      	movs	r3, #0
 8008020:	930e      	str	r3, [sp, #56]	; 0x38
 8008022:	e7bf      	b.n	8007fa4 <_dtoa_r+0x1cc>
 8008024:	2300      	movs	r3, #0
 8008026:	930b      	str	r3, [sp, #44]	; 0x2c
 8008028:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800802a:	2b00      	cmp	r3, #0
 800802c:	dc59      	bgt.n	80080e2 <_dtoa_r+0x30a>
 800802e:	f04f 0b01 	mov.w	fp, #1
 8008032:	465b      	mov	r3, fp
 8008034:	f8cd b008 	str.w	fp, [sp, #8]
 8008038:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800803c:	2200      	movs	r2, #0
 800803e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008040:	6042      	str	r2, [r0, #4]
 8008042:	2204      	movs	r2, #4
 8008044:	f102 0614 	add.w	r6, r2, #20
 8008048:	429e      	cmp	r6, r3
 800804a:	6841      	ldr	r1, [r0, #4]
 800804c:	d94f      	bls.n	80080ee <_dtoa_r+0x316>
 800804e:	4628      	mov	r0, r5
 8008050:	f001 f850 	bl	80090f4 <_Balloc>
 8008054:	9008      	str	r0, [sp, #32]
 8008056:	2800      	cmp	r0, #0
 8008058:	d14d      	bne.n	80080f6 <_dtoa_r+0x31e>
 800805a:	4602      	mov	r2, r0
 800805c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008060:	4b1d      	ldr	r3, [pc, #116]	; (80080d8 <_dtoa_r+0x300>)
 8008062:	e6cd      	b.n	8007e00 <_dtoa_r+0x28>
 8008064:	2301      	movs	r3, #1
 8008066:	e7de      	b.n	8008026 <_dtoa_r+0x24e>
 8008068:	2300      	movs	r3, #0
 800806a:	930b      	str	r3, [sp, #44]	; 0x2c
 800806c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800806e:	eb09 0b03 	add.w	fp, r9, r3
 8008072:	f10b 0301 	add.w	r3, fp, #1
 8008076:	2b01      	cmp	r3, #1
 8008078:	9302      	str	r3, [sp, #8]
 800807a:	bfb8      	it	lt
 800807c:	2301      	movlt	r3, #1
 800807e:	e7dd      	b.n	800803c <_dtoa_r+0x264>
 8008080:	2301      	movs	r3, #1
 8008082:	e7f2      	b.n	800806a <_dtoa_r+0x292>
 8008084:	2401      	movs	r4, #1
 8008086:	2300      	movs	r3, #0
 8008088:	940b      	str	r4, [sp, #44]	; 0x2c
 800808a:	9322      	str	r3, [sp, #136]	; 0x88
 800808c:	f04f 3bff 	mov.w	fp, #4294967295
 8008090:	2200      	movs	r2, #0
 8008092:	2312      	movs	r3, #18
 8008094:	f8cd b008 	str.w	fp, [sp, #8]
 8008098:	9223      	str	r2, [sp, #140]	; 0x8c
 800809a:	e7cf      	b.n	800803c <_dtoa_r+0x264>
 800809c:	f3af 8000 	nop.w
 80080a0:	636f4361 	.word	0x636f4361
 80080a4:	3fd287a7 	.word	0x3fd287a7
 80080a8:	8b60c8b3 	.word	0x8b60c8b3
 80080ac:	3fc68a28 	.word	0x3fc68a28
 80080b0:	509f79fb 	.word	0x509f79fb
 80080b4:	3fd34413 	.word	0x3fd34413
 80080b8:	0800b34e 	.word	0x0800b34e
 80080bc:	0800b365 	.word	0x0800b365
 80080c0:	7ff00000 	.word	0x7ff00000
 80080c4:	0800b34a 	.word	0x0800b34a
 80080c8:	0800b341 	.word	0x0800b341
 80080cc:	0800b1c5 	.word	0x0800b1c5
 80080d0:	3ff80000 	.word	0x3ff80000
 80080d4:	0800b4e0 	.word	0x0800b4e0
 80080d8:	0800b3c4 	.word	0x0800b3c4
 80080dc:	2301      	movs	r3, #1
 80080de:	930b      	str	r3, [sp, #44]	; 0x2c
 80080e0:	e7d4      	b.n	800808c <_dtoa_r+0x2b4>
 80080e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80080e6:	465b      	mov	r3, fp
 80080e8:	f8cd b008 	str.w	fp, [sp, #8]
 80080ec:	e7a6      	b.n	800803c <_dtoa_r+0x264>
 80080ee:	3101      	adds	r1, #1
 80080f0:	6041      	str	r1, [r0, #4]
 80080f2:	0052      	lsls	r2, r2, #1
 80080f4:	e7a6      	b.n	8008044 <_dtoa_r+0x26c>
 80080f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080f8:	9a08      	ldr	r2, [sp, #32]
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	2b0e      	cmp	r3, #14
 8008100:	f200 80a8 	bhi.w	8008254 <_dtoa_r+0x47c>
 8008104:	2c00      	cmp	r4, #0
 8008106:	f000 80a5 	beq.w	8008254 <_dtoa_r+0x47c>
 800810a:	f1b9 0f00 	cmp.w	r9, #0
 800810e:	dd34      	ble.n	800817a <_dtoa_r+0x3a2>
 8008110:	4a9a      	ldr	r2, [pc, #616]	; (800837c <_dtoa_r+0x5a4>)
 8008112:	f009 030f 	and.w	r3, r9, #15
 8008116:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800811a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800811e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008122:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008126:	ea4f 1429 	mov.w	r4, r9, asr #4
 800812a:	d016      	beq.n	800815a <_dtoa_r+0x382>
 800812c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008130:	4b93      	ldr	r3, [pc, #588]	; (8008380 <_dtoa_r+0x5a8>)
 8008132:	2703      	movs	r7, #3
 8008134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008138:	f7f8 faf8 	bl	800072c <__aeabi_ddiv>
 800813c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008140:	f004 040f 	and.w	r4, r4, #15
 8008144:	4e8e      	ldr	r6, [pc, #568]	; (8008380 <_dtoa_r+0x5a8>)
 8008146:	b954      	cbnz	r4, 800815e <_dtoa_r+0x386>
 8008148:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800814c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008150:	f7f8 faec 	bl	800072c <__aeabi_ddiv>
 8008154:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008158:	e029      	b.n	80081ae <_dtoa_r+0x3d6>
 800815a:	2702      	movs	r7, #2
 800815c:	e7f2      	b.n	8008144 <_dtoa_r+0x36c>
 800815e:	07e1      	lsls	r1, r4, #31
 8008160:	d508      	bpl.n	8008174 <_dtoa_r+0x39c>
 8008162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008166:	e9d6 2300 	ldrd	r2, r3, [r6]
 800816a:	f7f8 f9b5 	bl	80004d8 <__aeabi_dmul>
 800816e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008172:	3701      	adds	r7, #1
 8008174:	1064      	asrs	r4, r4, #1
 8008176:	3608      	adds	r6, #8
 8008178:	e7e5      	b.n	8008146 <_dtoa_r+0x36e>
 800817a:	f000 80a5 	beq.w	80082c8 <_dtoa_r+0x4f0>
 800817e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008182:	f1c9 0400 	rsb	r4, r9, #0
 8008186:	4b7d      	ldr	r3, [pc, #500]	; (800837c <_dtoa_r+0x5a4>)
 8008188:	f004 020f 	and.w	r2, r4, #15
 800818c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	f7f8 f9a0 	bl	80004d8 <__aeabi_dmul>
 8008198:	2702      	movs	r7, #2
 800819a:	2300      	movs	r3, #0
 800819c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081a0:	4e77      	ldr	r6, [pc, #476]	; (8008380 <_dtoa_r+0x5a8>)
 80081a2:	1124      	asrs	r4, r4, #4
 80081a4:	2c00      	cmp	r4, #0
 80081a6:	f040 8084 	bne.w	80082b2 <_dtoa_r+0x4da>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1d2      	bne.n	8008154 <_dtoa_r+0x37c>
 80081ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 808b 	beq.w	80082cc <_dtoa_r+0x4f4>
 80081b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80081ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80081be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081c2:	2200      	movs	r2, #0
 80081c4:	4b6f      	ldr	r3, [pc, #444]	; (8008384 <_dtoa_r+0x5ac>)
 80081c6:	f7f8 fbf9 	bl	80009bc <__aeabi_dcmplt>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d07e      	beq.n	80082cc <_dtoa_r+0x4f4>
 80081ce:	9b02      	ldr	r3, [sp, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d07b      	beq.n	80082cc <_dtoa_r+0x4f4>
 80081d4:	f1bb 0f00 	cmp.w	fp, #0
 80081d8:	dd38      	ble.n	800824c <_dtoa_r+0x474>
 80081da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081de:	2200      	movs	r2, #0
 80081e0:	4b69      	ldr	r3, [pc, #420]	; (8008388 <_dtoa_r+0x5b0>)
 80081e2:	f7f8 f979 	bl	80004d8 <__aeabi_dmul>
 80081e6:	465c      	mov	r4, fp
 80081e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ec:	f109 38ff 	add.w	r8, r9, #4294967295
 80081f0:	3701      	adds	r7, #1
 80081f2:	4638      	mov	r0, r7
 80081f4:	f7f8 f906 	bl	8000404 <__aeabi_i2d>
 80081f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081fc:	f7f8 f96c 	bl	80004d8 <__aeabi_dmul>
 8008200:	2200      	movs	r2, #0
 8008202:	4b62      	ldr	r3, [pc, #392]	; (800838c <_dtoa_r+0x5b4>)
 8008204:	f7f7 ffb2 	bl	800016c <__adddf3>
 8008208:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800820c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008210:	9611      	str	r6, [sp, #68]	; 0x44
 8008212:	2c00      	cmp	r4, #0
 8008214:	d15d      	bne.n	80082d2 <_dtoa_r+0x4fa>
 8008216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800821a:	2200      	movs	r2, #0
 800821c:	4b5c      	ldr	r3, [pc, #368]	; (8008390 <_dtoa_r+0x5b8>)
 800821e:	f7f7 ffa3 	bl	8000168 <__aeabi_dsub>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800822a:	4633      	mov	r3, r6
 800822c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800822e:	f7f8 fbe3 	bl	80009f8 <__aeabi_dcmpgt>
 8008232:	2800      	cmp	r0, #0
 8008234:	f040 829e 	bne.w	8008774 <_dtoa_r+0x99c>
 8008238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800823c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800823e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008242:	f7f8 fbbb 	bl	80009bc <__aeabi_dcmplt>
 8008246:	2800      	cmp	r0, #0
 8008248:	f040 8292 	bne.w	8008770 <_dtoa_r+0x998>
 800824c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008250:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008256:	2b00      	cmp	r3, #0
 8008258:	f2c0 8153 	blt.w	8008502 <_dtoa_r+0x72a>
 800825c:	f1b9 0f0e 	cmp.w	r9, #14
 8008260:	f300 814f 	bgt.w	8008502 <_dtoa_r+0x72a>
 8008264:	4b45      	ldr	r3, [pc, #276]	; (800837c <_dtoa_r+0x5a4>)
 8008266:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800826a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800826e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008272:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008274:	2b00      	cmp	r3, #0
 8008276:	f280 80db 	bge.w	8008430 <_dtoa_r+0x658>
 800827a:	9b02      	ldr	r3, [sp, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f300 80d7 	bgt.w	8008430 <_dtoa_r+0x658>
 8008282:	f040 8274 	bne.w	800876e <_dtoa_r+0x996>
 8008286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800828a:	2200      	movs	r2, #0
 800828c:	4b40      	ldr	r3, [pc, #256]	; (8008390 <_dtoa_r+0x5b8>)
 800828e:	f7f8 f923 	bl	80004d8 <__aeabi_dmul>
 8008292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008296:	f7f8 fba5 	bl	80009e4 <__aeabi_dcmpge>
 800829a:	9c02      	ldr	r4, [sp, #8]
 800829c:	4626      	mov	r6, r4
 800829e:	2800      	cmp	r0, #0
 80082a0:	f040 824a 	bne.w	8008738 <_dtoa_r+0x960>
 80082a4:	2331      	movs	r3, #49	; 0x31
 80082a6:	9f08      	ldr	r7, [sp, #32]
 80082a8:	f109 0901 	add.w	r9, r9, #1
 80082ac:	f807 3b01 	strb.w	r3, [r7], #1
 80082b0:	e246      	b.n	8008740 <_dtoa_r+0x968>
 80082b2:	07e2      	lsls	r2, r4, #31
 80082b4:	d505      	bpl.n	80082c2 <_dtoa_r+0x4ea>
 80082b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082ba:	f7f8 f90d 	bl	80004d8 <__aeabi_dmul>
 80082be:	2301      	movs	r3, #1
 80082c0:	3701      	adds	r7, #1
 80082c2:	1064      	asrs	r4, r4, #1
 80082c4:	3608      	adds	r6, #8
 80082c6:	e76d      	b.n	80081a4 <_dtoa_r+0x3cc>
 80082c8:	2702      	movs	r7, #2
 80082ca:	e770      	b.n	80081ae <_dtoa_r+0x3d6>
 80082cc:	46c8      	mov	r8, r9
 80082ce:	9c02      	ldr	r4, [sp, #8]
 80082d0:	e78f      	b.n	80081f2 <_dtoa_r+0x41a>
 80082d2:	9908      	ldr	r1, [sp, #32]
 80082d4:	4b29      	ldr	r3, [pc, #164]	; (800837c <_dtoa_r+0x5a4>)
 80082d6:	4421      	add	r1, r4
 80082d8:	9112      	str	r1, [sp, #72]	; 0x48
 80082da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80082e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082e8:	2900      	cmp	r1, #0
 80082ea:	d055      	beq.n	8008398 <_dtoa_r+0x5c0>
 80082ec:	2000      	movs	r0, #0
 80082ee:	4929      	ldr	r1, [pc, #164]	; (8008394 <_dtoa_r+0x5bc>)
 80082f0:	f7f8 fa1c 	bl	800072c <__aeabi_ddiv>
 80082f4:	463b      	mov	r3, r7
 80082f6:	4632      	mov	r2, r6
 80082f8:	f7f7 ff36 	bl	8000168 <__aeabi_dsub>
 80082fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008300:	9f08      	ldr	r7, [sp, #32]
 8008302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008306:	f7f8 fb97 	bl	8000a38 <__aeabi_d2iz>
 800830a:	4604      	mov	r4, r0
 800830c:	f7f8 f87a 	bl	8000404 <__aeabi_i2d>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008318:	f7f7 ff26 	bl	8000168 <__aeabi_dsub>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	3430      	adds	r4, #48	; 0x30
 8008322:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008326:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800832a:	f807 4b01 	strb.w	r4, [r7], #1
 800832e:	f7f8 fb45 	bl	80009bc <__aeabi_dcmplt>
 8008332:	2800      	cmp	r0, #0
 8008334:	d174      	bne.n	8008420 <_dtoa_r+0x648>
 8008336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800833a:	2000      	movs	r0, #0
 800833c:	4911      	ldr	r1, [pc, #68]	; (8008384 <_dtoa_r+0x5ac>)
 800833e:	f7f7 ff13 	bl	8000168 <__aeabi_dsub>
 8008342:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008346:	f7f8 fb39 	bl	80009bc <__aeabi_dcmplt>
 800834a:	2800      	cmp	r0, #0
 800834c:	f040 80b6 	bne.w	80084bc <_dtoa_r+0x6e4>
 8008350:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008352:	429f      	cmp	r7, r3
 8008354:	f43f af7a 	beq.w	800824c <_dtoa_r+0x474>
 8008358:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800835c:	2200      	movs	r2, #0
 800835e:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <_dtoa_r+0x5b0>)
 8008360:	f7f8 f8ba 	bl	80004d8 <__aeabi_dmul>
 8008364:	2200      	movs	r2, #0
 8008366:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800836a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800836e:	4b06      	ldr	r3, [pc, #24]	; (8008388 <_dtoa_r+0x5b0>)
 8008370:	f7f8 f8b2 	bl	80004d8 <__aeabi_dmul>
 8008374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008378:	e7c3      	b.n	8008302 <_dtoa_r+0x52a>
 800837a:	bf00      	nop
 800837c:	0800b4e0 	.word	0x0800b4e0
 8008380:	0800b4b8 	.word	0x0800b4b8
 8008384:	3ff00000 	.word	0x3ff00000
 8008388:	40240000 	.word	0x40240000
 800838c:	401c0000 	.word	0x401c0000
 8008390:	40140000 	.word	0x40140000
 8008394:	3fe00000 	.word	0x3fe00000
 8008398:	4630      	mov	r0, r6
 800839a:	4639      	mov	r1, r7
 800839c:	f7f8 f89c 	bl	80004d8 <__aeabi_dmul>
 80083a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083a6:	9c08      	ldr	r4, [sp, #32]
 80083a8:	9314      	str	r3, [sp, #80]	; 0x50
 80083aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ae:	f7f8 fb43 	bl	8000a38 <__aeabi_d2iz>
 80083b2:	9015      	str	r0, [sp, #84]	; 0x54
 80083b4:	f7f8 f826 	bl	8000404 <__aeabi_i2d>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083c0:	f7f7 fed2 	bl	8000168 <__aeabi_dsub>
 80083c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083c6:	4606      	mov	r6, r0
 80083c8:	3330      	adds	r3, #48	; 0x30
 80083ca:	f804 3b01 	strb.w	r3, [r4], #1
 80083ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083d0:	460f      	mov	r7, r1
 80083d2:	429c      	cmp	r4, r3
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	d124      	bne.n	8008424 <_dtoa_r+0x64c>
 80083da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083de:	4bb3      	ldr	r3, [pc, #716]	; (80086ac <_dtoa_r+0x8d4>)
 80083e0:	f7f7 fec4 	bl	800016c <__adddf3>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4630      	mov	r0, r6
 80083ea:	4639      	mov	r1, r7
 80083ec:	f7f8 fb04 	bl	80009f8 <__aeabi_dcmpgt>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d162      	bne.n	80084ba <_dtoa_r+0x6e2>
 80083f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083f8:	2000      	movs	r0, #0
 80083fa:	49ac      	ldr	r1, [pc, #688]	; (80086ac <_dtoa_r+0x8d4>)
 80083fc:	f7f7 feb4 	bl	8000168 <__aeabi_dsub>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4630      	mov	r0, r6
 8008406:	4639      	mov	r1, r7
 8008408:	f7f8 fad8 	bl	80009bc <__aeabi_dcmplt>
 800840c:	2800      	cmp	r0, #0
 800840e:	f43f af1d 	beq.w	800824c <_dtoa_r+0x474>
 8008412:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008414:	1e7b      	subs	r3, r7, #1
 8008416:	9314      	str	r3, [sp, #80]	; 0x50
 8008418:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800841c:	2b30      	cmp	r3, #48	; 0x30
 800841e:	d0f8      	beq.n	8008412 <_dtoa_r+0x63a>
 8008420:	46c1      	mov	r9, r8
 8008422:	e03a      	b.n	800849a <_dtoa_r+0x6c2>
 8008424:	4ba2      	ldr	r3, [pc, #648]	; (80086b0 <_dtoa_r+0x8d8>)
 8008426:	f7f8 f857 	bl	80004d8 <__aeabi_dmul>
 800842a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800842e:	e7bc      	b.n	80083aa <_dtoa_r+0x5d2>
 8008430:	9f08      	ldr	r7, [sp, #32]
 8008432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800843a:	f7f8 f977 	bl	800072c <__aeabi_ddiv>
 800843e:	f7f8 fafb 	bl	8000a38 <__aeabi_d2iz>
 8008442:	4604      	mov	r4, r0
 8008444:	f7f7 ffde 	bl	8000404 <__aeabi_i2d>
 8008448:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800844c:	f7f8 f844 	bl	80004d8 <__aeabi_dmul>
 8008450:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008454:	460b      	mov	r3, r1
 8008456:	4602      	mov	r2, r0
 8008458:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800845c:	f7f7 fe84 	bl	8000168 <__aeabi_dsub>
 8008460:	f807 6b01 	strb.w	r6, [r7], #1
 8008464:	9e08      	ldr	r6, [sp, #32]
 8008466:	9b02      	ldr	r3, [sp, #8]
 8008468:	1bbe      	subs	r6, r7, r6
 800846a:	42b3      	cmp	r3, r6
 800846c:	d13a      	bne.n	80084e4 <_dtoa_r+0x70c>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	f7f7 fe7b 	bl	800016c <__adddf3>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800847e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008482:	f7f8 fab9 	bl	80009f8 <__aeabi_dcmpgt>
 8008486:	bb58      	cbnz	r0, 80084e0 <_dtoa_r+0x708>
 8008488:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800848c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008490:	f7f8 fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 8008494:	b108      	cbz	r0, 800849a <_dtoa_r+0x6c2>
 8008496:	07e1      	lsls	r1, r4, #31
 8008498:	d422      	bmi.n	80084e0 <_dtoa_r+0x708>
 800849a:	4628      	mov	r0, r5
 800849c:	4651      	mov	r1, sl
 800849e:	f000 fe69 	bl	8009174 <_Bfree>
 80084a2:	2300      	movs	r3, #0
 80084a4:	703b      	strb	r3, [r7, #0]
 80084a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80084a8:	f109 0001 	add.w	r0, r9, #1
 80084ac:	6018      	str	r0, [r3, #0]
 80084ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f43f acdf 	beq.w	8007e74 <_dtoa_r+0x9c>
 80084b6:	601f      	str	r7, [r3, #0]
 80084b8:	e4dc      	b.n	8007e74 <_dtoa_r+0x9c>
 80084ba:	4627      	mov	r7, r4
 80084bc:	463b      	mov	r3, r7
 80084be:	461f      	mov	r7, r3
 80084c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084c4:	2a39      	cmp	r2, #57	; 0x39
 80084c6:	d107      	bne.n	80084d8 <_dtoa_r+0x700>
 80084c8:	9a08      	ldr	r2, [sp, #32]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d1f7      	bne.n	80084be <_dtoa_r+0x6e6>
 80084ce:	2230      	movs	r2, #48	; 0x30
 80084d0:	9908      	ldr	r1, [sp, #32]
 80084d2:	f108 0801 	add.w	r8, r8, #1
 80084d6:	700a      	strb	r2, [r1, #0]
 80084d8:	781a      	ldrb	r2, [r3, #0]
 80084da:	3201      	adds	r2, #1
 80084dc:	701a      	strb	r2, [r3, #0]
 80084de:	e79f      	b.n	8008420 <_dtoa_r+0x648>
 80084e0:	46c8      	mov	r8, r9
 80084e2:	e7eb      	b.n	80084bc <_dtoa_r+0x6e4>
 80084e4:	2200      	movs	r2, #0
 80084e6:	4b72      	ldr	r3, [pc, #456]	; (80086b0 <_dtoa_r+0x8d8>)
 80084e8:	f7f7 fff6 	bl	80004d8 <__aeabi_dmul>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084f4:	2200      	movs	r2, #0
 80084f6:	2300      	movs	r3, #0
 80084f8:	f7f8 fa56 	bl	80009a8 <__aeabi_dcmpeq>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d098      	beq.n	8008432 <_dtoa_r+0x65a>
 8008500:	e7cb      	b.n	800849a <_dtoa_r+0x6c2>
 8008502:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008504:	2a00      	cmp	r2, #0
 8008506:	f000 80cd 	beq.w	80086a4 <_dtoa_r+0x8cc>
 800850a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800850c:	2a01      	cmp	r2, #1
 800850e:	f300 80af 	bgt.w	8008670 <_dtoa_r+0x898>
 8008512:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008514:	2a00      	cmp	r2, #0
 8008516:	f000 80a7 	beq.w	8008668 <_dtoa_r+0x890>
 800851a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800851e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008520:	9f06      	ldr	r7, [sp, #24]
 8008522:	9a06      	ldr	r2, [sp, #24]
 8008524:	2101      	movs	r1, #1
 8008526:	441a      	add	r2, r3
 8008528:	9206      	str	r2, [sp, #24]
 800852a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800852c:	4628      	mov	r0, r5
 800852e:	441a      	add	r2, r3
 8008530:	9209      	str	r2, [sp, #36]	; 0x24
 8008532:	f000 ff23 	bl	800937c <__i2b>
 8008536:	4606      	mov	r6, r0
 8008538:	2f00      	cmp	r7, #0
 800853a:	dd0c      	ble.n	8008556 <_dtoa_r+0x77e>
 800853c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853e:	2b00      	cmp	r3, #0
 8008540:	dd09      	ble.n	8008556 <_dtoa_r+0x77e>
 8008542:	42bb      	cmp	r3, r7
 8008544:	bfa8      	it	ge
 8008546:	463b      	movge	r3, r7
 8008548:	9a06      	ldr	r2, [sp, #24]
 800854a:	1aff      	subs	r7, r7, r3
 800854c:	1ad2      	subs	r2, r2, r3
 800854e:	9206      	str	r2, [sp, #24]
 8008550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	9309      	str	r3, [sp, #36]	; 0x24
 8008556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008558:	b1f3      	cbz	r3, 8008598 <_dtoa_r+0x7c0>
 800855a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 80a9 	beq.w	80086b4 <_dtoa_r+0x8dc>
 8008562:	2c00      	cmp	r4, #0
 8008564:	dd10      	ble.n	8008588 <_dtoa_r+0x7b0>
 8008566:	4631      	mov	r1, r6
 8008568:	4622      	mov	r2, r4
 800856a:	4628      	mov	r0, r5
 800856c:	f000 ffc0 	bl	80094f0 <__pow5mult>
 8008570:	4652      	mov	r2, sl
 8008572:	4601      	mov	r1, r0
 8008574:	4606      	mov	r6, r0
 8008576:	4628      	mov	r0, r5
 8008578:	f000 ff16 	bl	80093a8 <__multiply>
 800857c:	4680      	mov	r8, r0
 800857e:	4651      	mov	r1, sl
 8008580:	4628      	mov	r0, r5
 8008582:	f000 fdf7 	bl	8009174 <_Bfree>
 8008586:	46c2      	mov	sl, r8
 8008588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858a:	1b1a      	subs	r2, r3, r4
 800858c:	d004      	beq.n	8008598 <_dtoa_r+0x7c0>
 800858e:	4651      	mov	r1, sl
 8008590:	4628      	mov	r0, r5
 8008592:	f000 ffad 	bl	80094f0 <__pow5mult>
 8008596:	4682      	mov	sl, r0
 8008598:	2101      	movs	r1, #1
 800859a:	4628      	mov	r0, r5
 800859c:	f000 feee 	bl	800937c <__i2b>
 80085a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085a2:	4604      	mov	r4, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f340 8087 	ble.w	80086b8 <_dtoa_r+0x8e0>
 80085aa:	461a      	mov	r2, r3
 80085ac:	4601      	mov	r1, r0
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 ff9e 	bl	80094f0 <__pow5mult>
 80085b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085b6:	4604      	mov	r4, r0
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	f340 8080 	ble.w	80086be <_dtoa_r+0x8e6>
 80085be:	f04f 0800 	mov.w	r8, #0
 80085c2:	6923      	ldr	r3, [r4, #16]
 80085c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085c8:	6918      	ldr	r0, [r3, #16]
 80085ca:	f000 fe89 	bl	80092e0 <__hi0bits>
 80085ce:	f1c0 0020 	rsb	r0, r0, #32
 80085d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d4:	4418      	add	r0, r3
 80085d6:	f010 001f 	ands.w	r0, r0, #31
 80085da:	f000 8092 	beq.w	8008702 <_dtoa_r+0x92a>
 80085de:	f1c0 0320 	rsb	r3, r0, #32
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	f340 808a 	ble.w	80086fc <_dtoa_r+0x924>
 80085e8:	f1c0 001c 	rsb	r0, r0, #28
 80085ec:	9b06      	ldr	r3, [sp, #24]
 80085ee:	4407      	add	r7, r0
 80085f0:	4403      	add	r3, r0
 80085f2:	9306      	str	r3, [sp, #24]
 80085f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f6:	4403      	add	r3, r0
 80085f8:	9309      	str	r3, [sp, #36]	; 0x24
 80085fa:	9b06      	ldr	r3, [sp, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dd05      	ble.n	800860c <_dtoa_r+0x834>
 8008600:	4651      	mov	r1, sl
 8008602:	461a      	mov	r2, r3
 8008604:	4628      	mov	r0, r5
 8008606:	f000 ffcd 	bl	80095a4 <__lshift>
 800860a:	4682      	mov	sl, r0
 800860c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	dd05      	ble.n	800861e <_dtoa_r+0x846>
 8008612:	4621      	mov	r1, r4
 8008614:	461a      	mov	r2, r3
 8008616:	4628      	mov	r0, r5
 8008618:	f000 ffc4 	bl	80095a4 <__lshift>
 800861c:	4604      	mov	r4, r0
 800861e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008620:	2b00      	cmp	r3, #0
 8008622:	d070      	beq.n	8008706 <_dtoa_r+0x92e>
 8008624:	4621      	mov	r1, r4
 8008626:	4650      	mov	r0, sl
 8008628:	f001 f828 	bl	800967c <__mcmp>
 800862c:	2800      	cmp	r0, #0
 800862e:	da6a      	bge.n	8008706 <_dtoa_r+0x92e>
 8008630:	2300      	movs	r3, #0
 8008632:	4651      	mov	r1, sl
 8008634:	220a      	movs	r2, #10
 8008636:	4628      	mov	r0, r5
 8008638:	f000 fdbe 	bl	80091b8 <__multadd>
 800863c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800863e:	4682      	mov	sl, r0
 8008640:	f109 39ff 	add.w	r9, r9, #4294967295
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 8193 	beq.w	8008970 <_dtoa_r+0xb98>
 800864a:	4631      	mov	r1, r6
 800864c:	2300      	movs	r3, #0
 800864e:	220a      	movs	r2, #10
 8008650:	4628      	mov	r0, r5
 8008652:	f000 fdb1 	bl	80091b8 <__multadd>
 8008656:	f1bb 0f00 	cmp.w	fp, #0
 800865a:	4606      	mov	r6, r0
 800865c:	f300 8093 	bgt.w	8008786 <_dtoa_r+0x9ae>
 8008660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008662:	2b02      	cmp	r3, #2
 8008664:	dc57      	bgt.n	8008716 <_dtoa_r+0x93e>
 8008666:	e08e      	b.n	8008786 <_dtoa_r+0x9ae>
 8008668:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800866a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800866e:	e756      	b.n	800851e <_dtoa_r+0x746>
 8008670:	9b02      	ldr	r3, [sp, #8]
 8008672:	1e5c      	subs	r4, r3, #1
 8008674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008676:	42a3      	cmp	r3, r4
 8008678:	bfb7      	itett	lt
 800867a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800867c:	1b1c      	subge	r4, r3, r4
 800867e:	1ae2      	sublt	r2, r4, r3
 8008680:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008682:	bfbe      	ittt	lt
 8008684:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008686:	189b      	addlt	r3, r3, r2
 8008688:	930e      	strlt	r3, [sp, #56]	; 0x38
 800868a:	9b02      	ldr	r3, [sp, #8]
 800868c:	bfb8      	it	lt
 800868e:	2400      	movlt	r4, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfbb      	ittet	lt
 8008694:	9b06      	ldrlt	r3, [sp, #24]
 8008696:	9a02      	ldrlt	r2, [sp, #8]
 8008698:	9f06      	ldrge	r7, [sp, #24]
 800869a:	1a9f      	sublt	r7, r3, r2
 800869c:	bfac      	ite	ge
 800869e:	9b02      	ldrge	r3, [sp, #8]
 80086a0:	2300      	movlt	r3, #0
 80086a2:	e73e      	b.n	8008522 <_dtoa_r+0x74a>
 80086a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086a6:	9f06      	ldr	r7, [sp, #24]
 80086a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80086aa:	e745      	b.n	8008538 <_dtoa_r+0x760>
 80086ac:	3fe00000 	.word	0x3fe00000
 80086b0:	40240000 	.word	0x40240000
 80086b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086b6:	e76a      	b.n	800858e <_dtoa_r+0x7b6>
 80086b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	dc19      	bgt.n	80086f2 <_dtoa_r+0x91a>
 80086be:	9b04      	ldr	r3, [sp, #16]
 80086c0:	b9bb      	cbnz	r3, 80086f2 <_dtoa_r+0x91a>
 80086c2:	9b05      	ldr	r3, [sp, #20]
 80086c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086c8:	b99b      	cbnz	r3, 80086f2 <_dtoa_r+0x91a>
 80086ca:	9b05      	ldr	r3, [sp, #20]
 80086cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086d0:	0d1b      	lsrs	r3, r3, #20
 80086d2:	051b      	lsls	r3, r3, #20
 80086d4:	b183      	cbz	r3, 80086f8 <_dtoa_r+0x920>
 80086d6:	f04f 0801 	mov.w	r8, #1
 80086da:	9b06      	ldr	r3, [sp, #24]
 80086dc:	3301      	adds	r3, #1
 80086de:	9306      	str	r3, [sp, #24]
 80086e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e2:	3301      	adds	r3, #1
 80086e4:	9309      	str	r3, [sp, #36]	; 0x24
 80086e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f47f af6a 	bne.w	80085c2 <_dtoa_r+0x7ea>
 80086ee:	2001      	movs	r0, #1
 80086f0:	e76f      	b.n	80085d2 <_dtoa_r+0x7fa>
 80086f2:	f04f 0800 	mov.w	r8, #0
 80086f6:	e7f6      	b.n	80086e6 <_dtoa_r+0x90e>
 80086f8:	4698      	mov	r8, r3
 80086fa:	e7f4      	b.n	80086e6 <_dtoa_r+0x90e>
 80086fc:	f43f af7d 	beq.w	80085fa <_dtoa_r+0x822>
 8008700:	4618      	mov	r0, r3
 8008702:	301c      	adds	r0, #28
 8008704:	e772      	b.n	80085ec <_dtoa_r+0x814>
 8008706:	9b02      	ldr	r3, [sp, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	dc36      	bgt.n	800877a <_dtoa_r+0x9a2>
 800870c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800870e:	2b02      	cmp	r3, #2
 8008710:	dd33      	ble.n	800877a <_dtoa_r+0x9a2>
 8008712:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008716:	f1bb 0f00 	cmp.w	fp, #0
 800871a:	d10d      	bne.n	8008738 <_dtoa_r+0x960>
 800871c:	4621      	mov	r1, r4
 800871e:	465b      	mov	r3, fp
 8008720:	2205      	movs	r2, #5
 8008722:	4628      	mov	r0, r5
 8008724:	f000 fd48 	bl	80091b8 <__multadd>
 8008728:	4601      	mov	r1, r0
 800872a:	4604      	mov	r4, r0
 800872c:	4650      	mov	r0, sl
 800872e:	f000 ffa5 	bl	800967c <__mcmp>
 8008732:	2800      	cmp	r0, #0
 8008734:	f73f adb6 	bgt.w	80082a4 <_dtoa_r+0x4cc>
 8008738:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800873a:	9f08      	ldr	r7, [sp, #32]
 800873c:	ea6f 0903 	mvn.w	r9, r3
 8008740:	f04f 0800 	mov.w	r8, #0
 8008744:	4621      	mov	r1, r4
 8008746:	4628      	mov	r0, r5
 8008748:	f000 fd14 	bl	8009174 <_Bfree>
 800874c:	2e00      	cmp	r6, #0
 800874e:	f43f aea4 	beq.w	800849a <_dtoa_r+0x6c2>
 8008752:	f1b8 0f00 	cmp.w	r8, #0
 8008756:	d005      	beq.n	8008764 <_dtoa_r+0x98c>
 8008758:	45b0      	cmp	r8, r6
 800875a:	d003      	beq.n	8008764 <_dtoa_r+0x98c>
 800875c:	4641      	mov	r1, r8
 800875e:	4628      	mov	r0, r5
 8008760:	f000 fd08 	bl	8009174 <_Bfree>
 8008764:	4631      	mov	r1, r6
 8008766:	4628      	mov	r0, r5
 8008768:	f000 fd04 	bl	8009174 <_Bfree>
 800876c:	e695      	b.n	800849a <_dtoa_r+0x6c2>
 800876e:	2400      	movs	r4, #0
 8008770:	4626      	mov	r6, r4
 8008772:	e7e1      	b.n	8008738 <_dtoa_r+0x960>
 8008774:	46c1      	mov	r9, r8
 8008776:	4626      	mov	r6, r4
 8008778:	e594      	b.n	80082a4 <_dtoa_r+0x4cc>
 800877a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800877c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f000 80fc 	beq.w	800897e <_dtoa_r+0xba6>
 8008786:	2f00      	cmp	r7, #0
 8008788:	dd05      	ble.n	8008796 <_dtoa_r+0x9be>
 800878a:	4631      	mov	r1, r6
 800878c:	463a      	mov	r2, r7
 800878e:	4628      	mov	r0, r5
 8008790:	f000 ff08 	bl	80095a4 <__lshift>
 8008794:	4606      	mov	r6, r0
 8008796:	f1b8 0f00 	cmp.w	r8, #0
 800879a:	d05c      	beq.n	8008856 <_dtoa_r+0xa7e>
 800879c:	4628      	mov	r0, r5
 800879e:	6871      	ldr	r1, [r6, #4]
 80087a0:	f000 fca8 	bl	80090f4 <_Balloc>
 80087a4:	4607      	mov	r7, r0
 80087a6:	b928      	cbnz	r0, 80087b4 <_dtoa_r+0x9dc>
 80087a8:	4602      	mov	r2, r0
 80087aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087ae:	4b7e      	ldr	r3, [pc, #504]	; (80089a8 <_dtoa_r+0xbd0>)
 80087b0:	f7ff bb26 	b.w	8007e00 <_dtoa_r+0x28>
 80087b4:	6932      	ldr	r2, [r6, #16]
 80087b6:	f106 010c 	add.w	r1, r6, #12
 80087ba:	3202      	adds	r2, #2
 80087bc:	0092      	lsls	r2, r2, #2
 80087be:	300c      	adds	r0, #12
 80087c0:	f000 fc8a 	bl	80090d8 <memcpy>
 80087c4:	2201      	movs	r2, #1
 80087c6:	4639      	mov	r1, r7
 80087c8:	4628      	mov	r0, r5
 80087ca:	f000 feeb 	bl	80095a4 <__lshift>
 80087ce:	46b0      	mov	r8, r6
 80087d0:	4606      	mov	r6, r0
 80087d2:	9b08      	ldr	r3, [sp, #32]
 80087d4:	3301      	adds	r3, #1
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	445b      	add	r3, fp
 80087dc:	930a      	str	r3, [sp, #40]	; 0x28
 80087de:	9b04      	ldr	r3, [sp, #16]
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	9309      	str	r3, [sp, #36]	; 0x24
 80087e6:	9b02      	ldr	r3, [sp, #8]
 80087e8:	4621      	mov	r1, r4
 80087ea:	4650      	mov	r0, sl
 80087ec:	f103 3bff 	add.w	fp, r3, #4294967295
 80087f0:	f7ff fa64 	bl	8007cbc <quorem>
 80087f4:	4603      	mov	r3, r0
 80087f6:	4641      	mov	r1, r8
 80087f8:	3330      	adds	r3, #48	; 0x30
 80087fa:	9004      	str	r0, [sp, #16]
 80087fc:	4650      	mov	r0, sl
 80087fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008800:	f000 ff3c 	bl	800967c <__mcmp>
 8008804:	4632      	mov	r2, r6
 8008806:	9006      	str	r0, [sp, #24]
 8008808:	4621      	mov	r1, r4
 800880a:	4628      	mov	r0, r5
 800880c:	f000 ff52 	bl	80096b4 <__mdiff>
 8008810:	68c2      	ldr	r2, [r0, #12]
 8008812:	4607      	mov	r7, r0
 8008814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008816:	bb02      	cbnz	r2, 800885a <_dtoa_r+0xa82>
 8008818:	4601      	mov	r1, r0
 800881a:	4650      	mov	r0, sl
 800881c:	f000 ff2e 	bl	800967c <__mcmp>
 8008820:	4602      	mov	r2, r0
 8008822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008824:	4639      	mov	r1, r7
 8008826:	4628      	mov	r0, r5
 8008828:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800882c:	f000 fca2 	bl	8009174 <_Bfree>
 8008830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008834:	9f02      	ldr	r7, [sp, #8]
 8008836:	ea43 0102 	orr.w	r1, r3, r2
 800883a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800883c:	430b      	orrs	r3, r1
 800883e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008840:	d10d      	bne.n	800885e <_dtoa_r+0xa86>
 8008842:	2b39      	cmp	r3, #57	; 0x39
 8008844:	d027      	beq.n	8008896 <_dtoa_r+0xabe>
 8008846:	9a06      	ldr	r2, [sp, #24]
 8008848:	2a00      	cmp	r2, #0
 800884a:	dd01      	ble.n	8008850 <_dtoa_r+0xa78>
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	3331      	adds	r3, #49	; 0x31
 8008850:	f88b 3000 	strb.w	r3, [fp]
 8008854:	e776      	b.n	8008744 <_dtoa_r+0x96c>
 8008856:	4630      	mov	r0, r6
 8008858:	e7b9      	b.n	80087ce <_dtoa_r+0x9f6>
 800885a:	2201      	movs	r2, #1
 800885c:	e7e2      	b.n	8008824 <_dtoa_r+0xa4c>
 800885e:	9906      	ldr	r1, [sp, #24]
 8008860:	2900      	cmp	r1, #0
 8008862:	db04      	blt.n	800886e <_dtoa_r+0xa96>
 8008864:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008866:	4301      	orrs	r1, r0
 8008868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800886a:	4301      	orrs	r1, r0
 800886c:	d120      	bne.n	80088b0 <_dtoa_r+0xad8>
 800886e:	2a00      	cmp	r2, #0
 8008870:	ddee      	ble.n	8008850 <_dtoa_r+0xa78>
 8008872:	4651      	mov	r1, sl
 8008874:	2201      	movs	r2, #1
 8008876:	4628      	mov	r0, r5
 8008878:	9302      	str	r3, [sp, #8]
 800887a:	f000 fe93 	bl	80095a4 <__lshift>
 800887e:	4621      	mov	r1, r4
 8008880:	4682      	mov	sl, r0
 8008882:	f000 fefb 	bl	800967c <__mcmp>
 8008886:	2800      	cmp	r0, #0
 8008888:	9b02      	ldr	r3, [sp, #8]
 800888a:	dc02      	bgt.n	8008892 <_dtoa_r+0xaba>
 800888c:	d1e0      	bne.n	8008850 <_dtoa_r+0xa78>
 800888e:	07da      	lsls	r2, r3, #31
 8008890:	d5de      	bpl.n	8008850 <_dtoa_r+0xa78>
 8008892:	2b39      	cmp	r3, #57	; 0x39
 8008894:	d1da      	bne.n	800884c <_dtoa_r+0xa74>
 8008896:	2339      	movs	r3, #57	; 0x39
 8008898:	f88b 3000 	strb.w	r3, [fp]
 800889c:	463b      	mov	r3, r7
 800889e:	461f      	mov	r7, r3
 80088a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	2a39      	cmp	r2, #57	; 0x39
 80088a8:	d050      	beq.n	800894c <_dtoa_r+0xb74>
 80088aa:	3201      	adds	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	e749      	b.n	8008744 <_dtoa_r+0x96c>
 80088b0:	2a00      	cmp	r2, #0
 80088b2:	dd03      	ble.n	80088bc <_dtoa_r+0xae4>
 80088b4:	2b39      	cmp	r3, #57	; 0x39
 80088b6:	d0ee      	beq.n	8008896 <_dtoa_r+0xabe>
 80088b8:	3301      	adds	r3, #1
 80088ba:	e7c9      	b.n	8008850 <_dtoa_r+0xa78>
 80088bc:	9a02      	ldr	r2, [sp, #8]
 80088be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088c4:	428a      	cmp	r2, r1
 80088c6:	d02a      	beq.n	800891e <_dtoa_r+0xb46>
 80088c8:	4651      	mov	r1, sl
 80088ca:	2300      	movs	r3, #0
 80088cc:	220a      	movs	r2, #10
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 fc72 	bl	80091b8 <__multadd>
 80088d4:	45b0      	cmp	r8, r6
 80088d6:	4682      	mov	sl, r0
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	f04f 020a 	mov.w	r2, #10
 80088e0:	4641      	mov	r1, r8
 80088e2:	4628      	mov	r0, r5
 80088e4:	d107      	bne.n	80088f6 <_dtoa_r+0xb1e>
 80088e6:	f000 fc67 	bl	80091b8 <__multadd>
 80088ea:	4680      	mov	r8, r0
 80088ec:	4606      	mov	r6, r0
 80088ee:	9b02      	ldr	r3, [sp, #8]
 80088f0:	3301      	adds	r3, #1
 80088f2:	9302      	str	r3, [sp, #8]
 80088f4:	e777      	b.n	80087e6 <_dtoa_r+0xa0e>
 80088f6:	f000 fc5f 	bl	80091b8 <__multadd>
 80088fa:	4631      	mov	r1, r6
 80088fc:	4680      	mov	r8, r0
 80088fe:	2300      	movs	r3, #0
 8008900:	220a      	movs	r2, #10
 8008902:	4628      	mov	r0, r5
 8008904:	f000 fc58 	bl	80091b8 <__multadd>
 8008908:	4606      	mov	r6, r0
 800890a:	e7f0      	b.n	80088ee <_dtoa_r+0xb16>
 800890c:	f1bb 0f00 	cmp.w	fp, #0
 8008910:	bfcc      	ite	gt
 8008912:	465f      	movgt	r7, fp
 8008914:	2701      	movle	r7, #1
 8008916:	f04f 0800 	mov.w	r8, #0
 800891a:	9a08      	ldr	r2, [sp, #32]
 800891c:	4417      	add	r7, r2
 800891e:	4651      	mov	r1, sl
 8008920:	2201      	movs	r2, #1
 8008922:	4628      	mov	r0, r5
 8008924:	9302      	str	r3, [sp, #8]
 8008926:	f000 fe3d 	bl	80095a4 <__lshift>
 800892a:	4621      	mov	r1, r4
 800892c:	4682      	mov	sl, r0
 800892e:	f000 fea5 	bl	800967c <__mcmp>
 8008932:	2800      	cmp	r0, #0
 8008934:	dcb2      	bgt.n	800889c <_dtoa_r+0xac4>
 8008936:	d102      	bne.n	800893e <_dtoa_r+0xb66>
 8008938:	9b02      	ldr	r3, [sp, #8]
 800893a:	07db      	lsls	r3, r3, #31
 800893c:	d4ae      	bmi.n	800889c <_dtoa_r+0xac4>
 800893e:	463b      	mov	r3, r7
 8008940:	461f      	mov	r7, r3
 8008942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008946:	2a30      	cmp	r2, #48	; 0x30
 8008948:	d0fa      	beq.n	8008940 <_dtoa_r+0xb68>
 800894a:	e6fb      	b.n	8008744 <_dtoa_r+0x96c>
 800894c:	9a08      	ldr	r2, [sp, #32]
 800894e:	429a      	cmp	r2, r3
 8008950:	d1a5      	bne.n	800889e <_dtoa_r+0xac6>
 8008952:	2331      	movs	r3, #49	; 0x31
 8008954:	f109 0901 	add.w	r9, r9, #1
 8008958:	7013      	strb	r3, [r2, #0]
 800895a:	e6f3      	b.n	8008744 <_dtoa_r+0x96c>
 800895c:	4b13      	ldr	r3, [pc, #76]	; (80089ac <_dtoa_r+0xbd4>)
 800895e:	f7ff baa7 	b.w	8007eb0 <_dtoa_r+0xd8>
 8008962:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008964:	2b00      	cmp	r3, #0
 8008966:	f47f aa80 	bne.w	8007e6a <_dtoa_r+0x92>
 800896a:	4b11      	ldr	r3, [pc, #68]	; (80089b0 <_dtoa_r+0xbd8>)
 800896c:	f7ff baa0 	b.w	8007eb0 <_dtoa_r+0xd8>
 8008970:	f1bb 0f00 	cmp.w	fp, #0
 8008974:	dc03      	bgt.n	800897e <_dtoa_r+0xba6>
 8008976:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008978:	2b02      	cmp	r3, #2
 800897a:	f73f aecc 	bgt.w	8008716 <_dtoa_r+0x93e>
 800897e:	9f08      	ldr	r7, [sp, #32]
 8008980:	4621      	mov	r1, r4
 8008982:	4650      	mov	r0, sl
 8008984:	f7ff f99a 	bl	8007cbc <quorem>
 8008988:	9a08      	ldr	r2, [sp, #32]
 800898a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800898e:	f807 3b01 	strb.w	r3, [r7], #1
 8008992:	1aba      	subs	r2, r7, r2
 8008994:	4593      	cmp	fp, r2
 8008996:	ddb9      	ble.n	800890c <_dtoa_r+0xb34>
 8008998:	4651      	mov	r1, sl
 800899a:	2300      	movs	r3, #0
 800899c:	220a      	movs	r2, #10
 800899e:	4628      	mov	r0, r5
 80089a0:	f000 fc0a 	bl	80091b8 <__multadd>
 80089a4:	4682      	mov	sl, r0
 80089a6:	e7eb      	b.n	8008980 <_dtoa_r+0xba8>
 80089a8:	0800b3c4 	.word	0x0800b3c4
 80089ac:	0800b1c4 	.word	0x0800b1c4
 80089b0:	0800b341 	.word	0x0800b341

080089b4 <rshift>:
 80089b4:	6903      	ldr	r3, [r0, #16]
 80089b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80089be:	f100 0414 	add.w	r4, r0, #20
 80089c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089c6:	dd46      	ble.n	8008a56 <rshift+0xa2>
 80089c8:	f011 011f 	ands.w	r1, r1, #31
 80089cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089d4:	d10c      	bne.n	80089f0 <rshift+0x3c>
 80089d6:	4629      	mov	r1, r5
 80089d8:	f100 0710 	add.w	r7, r0, #16
 80089dc:	42b1      	cmp	r1, r6
 80089de:	d335      	bcc.n	8008a4c <rshift+0x98>
 80089e0:	1a9b      	subs	r3, r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	1eea      	subs	r2, r5, #3
 80089e6:	4296      	cmp	r6, r2
 80089e8:	bf38      	it	cc
 80089ea:	2300      	movcc	r3, #0
 80089ec:	4423      	add	r3, r4
 80089ee:	e015      	b.n	8008a1c <rshift+0x68>
 80089f0:	46a1      	mov	r9, r4
 80089f2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089f6:	f1c1 0820 	rsb	r8, r1, #32
 80089fa:	40cf      	lsrs	r7, r1
 80089fc:	f105 0e04 	add.w	lr, r5, #4
 8008a00:	4576      	cmp	r6, lr
 8008a02:	46f4      	mov	ip, lr
 8008a04:	d816      	bhi.n	8008a34 <rshift+0x80>
 8008a06:	1a9b      	subs	r3, r3, r2
 8008a08:	009a      	lsls	r2, r3, #2
 8008a0a:	3a04      	subs	r2, #4
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	42ae      	cmp	r6, r5
 8008a10:	bf38      	it	cc
 8008a12:	2200      	movcc	r2, #0
 8008a14:	18a3      	adds	r3, r4, r2
 8008a16:	50a7      	str	r7, [r4, r2]
 8008a18:	b107      	cbz	r7, 8008a1c <rshift+0x68>
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	eba3 0204 	sub.w	r2, r3, r4
 8008a22:	bf08      	it	eq
 8008a24:	2300      	moveq	r3, #0
 8008a26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a2a:	6102      	str	r2, [r0, #16]
 8008a2c:	bf08      	it	eq
 8008a2e:	6143      	streq	r3, [r0, #20]
 8008a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a34:	f8dc c000 	ldr.w	ip, [ip]
 8008a38:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a3c:	ea4c 0707 	orr.w	r7, ip, r7
 8008a40:	f849 7b04 	str.w	r7, [r9], #4
 8008a44:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a48:	40cf      	lsrs	r7, r1
 8008a4a:	e7d9      	b.n	8008a00 <rshift+0x4c>
 8008a4c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a50:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a54:	e7c2      	b.n	80089dc <rshift+0x28>
 8008a56:	4623      	mov	r3, r4
 8008a58:	e7e0      	b.n	8008a1c <rshift+0x68>

08008a5a <__hexdig_fun>:
 8008a5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a5e:	2b09      	cmp	r3, #9
 8008a60:	d802      	bhi.n	8008a68 <__hexdig_fun+0xe>
 8008a62:	3820      	subs	r0, #32
 8008a64:	b2c0      	uxtb	r0, r0
 8008a66:	4770      	bx	lr
 8008a68:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a6c:	2b05      	cmp	r3, #5
 8008a6e:	d801      	bhi.n	8008a74 <__hexdig_fun+0x1a>
 8008a70:	3847      	subs	r0, #71	; 0x47
 8008a72:	e7f7      	b.n	8008a64 <__hexdig_fun+0xa>
 8008a74:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a78:	2b05      	cmp	r3, #5
 8008a7a:	d801      	bhi.n	8008a80 <__hexdig_fun+0x26>
 8008a7c:	3827      	subs	r0, #39	; 0x27
 8008a7e:	e7f1      	b.n	8008a64 <__hexdig_fun+0xa>
 8008a80:	2000      	movs	r0, #0
 8008a82:	4770      	bx	lr

08008a84 <__gethex>:
 8008a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a88:	b08b      	sub	sp, #44	; 0x2c
 8008a8a:	9306      	str	r3, [sp, #24]
 8008a8c:	4bb9      	ldr	r3, [pc, #740]	; (8008d74 <__gethex+0x2f0>)
 8008a8e:	9002      	str	r0, [sp, #8]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	468b      	mov	fp, r1
 8008a94:	4618      	mov	r0, r3
 8008a96:	4690      	mov	r8, r2
 8008a98:	9303      	str	r3, [sp, #12]
 8008a9a:	f7f7 fb59 	bl	8000150 <strlen>
 8008a9e:	4682      	mov	sl, r0
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	f8db 2000 	ldr.w	r2, [fp]
 8008aa6:	4403      	add	r3, r0
 8008aa8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008aac:	9307      	str	r3, [sp, #28]
 8008aae:	1c93      	adds	r3, r2, #2
 8008ab0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ab4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ab8:	32fe      	adds	r2, #254	; 0xfe
 8008aba:	18d1      	adds	r1, r2, r3
 8008abc:	461f      	mov	r7, r3
 8008abe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ac2:	9101      	str	r1, [sp, #4]
 8008ac4:	2830      	cmp	r0, #48	; 0x30
 8008ac6:	d0f8      	beq.n	8008aba <__gethex+0x36>
 8008ac8:	f7ff ffc7 	bl	8008a5a <__hexdig_fun>
 8008acc:	4604      	mov	r4, r0
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d13a      	bne.n	8008b48 <__gethex+0xc4>
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	9903      	ldr	r1, [sp, #12]
 8008ad8:	f001 f9ea 	bl	8009eb0 <strncmp>
 8008adc:	4605      	mov	r5, r0
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d166      	bne.n	8008bb0 <__gethex+0x12c>
 8008ae2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ae6:	eb07 060a 	add.w	r6, r7, sl
 8008aea:	f7ff ffb6 	bl	8008a5a <__hexdig_fun>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d060      	beq.n	8008bb4 <__gethex+0x130>
 8008af2:	4633      	mov	r3, r6
 8008af4:	7818      	ldrb	r0, [r3, #0]
 8008af6:	461f      	mov	r7, r3
 8008af8:	2830      	cmp	r0, #48	; 0x30
 8008afa:	f103 0301 	add.w	r3, r3, #1
 8008afe:	d0f9      	beq.n	8008af4 <__gethex+0x70>
 8008b00:	f7ff ffab 	bl	8008a5a <__hexdig_fun>
 8008b04:	2301      	movs	r3, #1
 8008b06:	fab0 f480 	clz	r4, r0
 8008b0a:	4635      	mov	r5, r6
 8008b0c:	0964      	lsrs	r4, r4, #5
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	463a      	mov	r2, r7
 8008b12:	4616      	mov	r6, r2
 8008b14:	7830      	ldrb	r0, [r6, #0]
 8008b16:	3201      	adds	r2, #1
 8008b18:	f7ff ff9f 	bl	8008a5a <__hexdig_fun>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d1f8      	bne.n	8008b12 <__gethex+0x8e>
 8008b20:	4652      	mov	r2, sl
 8008b22:	4630      	mov	r0, r6
 8008b24:	9903      	ldr	r1, [sp, #12]
 8008b26:	f001 f9c3 	bl	8009eb0 <strncmp>
 8008b2a:	b980      	cbnz	r0, 8008b4e <__gethex+0xca>
 8008b2c:	b94d      	cbnz	r5, 8008b42 <__gethex+0xbe>
 8008b2e:	eb06 050a 	add.w	r5, r6, sl
 8008b32:	462a      	mov	r2, r5
 8008b34:	4616      	mov	r6, r2
 8008b36:	7830      	ldrb	r0, [r6, #0]
 8008b38:	3201      	adds	r2, #1
 8008b3a:	f7ff ff8e 	bl	8008a5a <__hexdig_fun>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d1f8      	bne.n	8008b34 <__gethex+0xb0>
 8008b42:	1bad      	subs	r5, r5, r6
 8008b44:	00ad      	lsls	r5, r5, #2
 8008b46:	e004      	b.n	8008b52 <__gethex+0xce>
 8008b48:	2400      	movs	r4, #0
 8008b4a:	4625      	mov	r5, r4
 8008b4c:	e7e0      	b.n	8008b10 <__gethex+0x8c>
 8008b4e:	2d00      	cmp	r5, #0
 8008b50:	d1f7      	bne.n	8008b42 <__gethex+0xbe>
 8008b52:	7833      	ldrb	r3, [r6, #0]
 8008b54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b58:	2b50      	cmp	r3, #80	; 0x50
 8008b5a:	d139      	bne.n	8008bd0 <__gethex+0x14c>
 8008b5c:	7873      	ldrb	r3, [r6, #1]
 8008b5e:	2b2b      	cmp	r3, #43	; 0x2b
 8008b60:	d02a      	beq.n	8008bb8 <__gethex+0x134>
 8008b62:	2b2d      	cmp	r3, #45	; 0x2d
 8008b64:	d02c      	beq.n	8008bc0 <__gethex+0x13c>
 8008b66:	f04f 0900 	mov.w	r9, #0
 8008b6a:	1c71      	adds	r1, r6, #1
 8008b6c:	7808      	ldrb	r0, [r1, #0]
 8008b6e:	f7ff ff74 	bl	8008a5a <__hexdig_fun>
 8008b72:	1e43      	subs	r3, r0, #1
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b18      	cmp	r3, #24
 8008b78:	d82a      	bhi.n	8008bd0 <__gethex+0x14c>
 8008b7a:	f1a0 0210 	sub.w	r2, r0, #16
 8008b7e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b82:	f7ff ff6a 	bl	8008a5a <__hexdig_fun>
 8008b86:	1e43      	subs	r3, r0, #1
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b18      	cmp	r3, #24
 8008b8c:	d91b      	bls.n	8008bc6 <__gethex+0x142>
 8008b8e:	f1b9 0f00 	cmp.w	r9, #0
 8008b92:	d000      	beq.n	8008b96 <__gethex+0x112>
 8008b94:	4252      	negs	r2, r2
 8008b96:	4415      	add	r5, r2
 8008b98:	f8cb 1000 	str.w	r1, [fp]
 8008b9c:	b1d4      	cbz	r4, 8008bd4 <__gethex+0x150>
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bf14      	ite	ne
 8008ba4:	2700      	movne	r7, #0
 8008ba6:	2706      	moveq	r7, #6
 8008ba8:	4638      	mov	r0, r7
 8008baa:	b00b      	add	sp, #44	; 0x2c
 8008bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb0:	463e      	mov	r6, r7
 8008bb2:	4625      	mov	r5, r4
 8008bb4:	2401      	movs	r4, #1
 8008bb6:	e7cc      	b.n	8008b52 <__gethex+0xce>
 8008bb8:	f04f 0900 	mov.w	r9, #0
 8008bbc:	1cb1      	adds	r1, r6, #2
 8008bbe:	e7d5      	b.n	8008b6c <__gethex+0xe8>
 8008bc0:	f04f 0901 	mov.w	r9, #1
 8008bc4:	e7fa      	b.n	8008bbc <__gethex+0x138>
 8008bc6:	230a      	movs	r3, #10
 8008bc8:	fb03 0202 	mla	r2, r3, r2, r0
 8008bcc:	3a10      	subs	r2, #16
 8008bce:	e7d6      	b.n	8008b7e <__gethex+0xfa>
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	e7e1      	b.n	8008b98 <__gethex+0x114>
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	1bf3      	subs	r3, r6, r7
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	2b07      	cmp	r3, #7
 8008bdc:	dc0a      	bgt.n	8008bf4 <__gethex+0x170>
 8008bde:	9802      	ldr	r0, [sp, #8]
 8008be0:	f000 fa88 	bl	80090f4 <_Balloc>
 8008be4:	4604      	mov	r4, r0
 8008be6:	b940      	cbnz	r0, 8008bfa <__gethex+0x176>
 8008be8:	4602      	mov	r2, r0
 8008bea:	21de      	movs	r1, #222	; 0xde
 8008bec:	4b62      	ldr	r3, [pc, #392]	; (8008d78 <__gethex+0x2f4>)
 8008bee:	4863      	ldr	r0, [pc, #396]	; (8008d7c <__gethex+0x2f8>)
 8008bf0:	f001 f97e 	bl	8009ef0 <__assert_func>
 8008bf4:	3101      	adds	r1, #1
 8008bf6:	105b      	asrs	r3, r3, #1
 8008bf8:	e7ef      	b.n	8008bda <__gethex+0x156>
 8008bfa:	f04f 0b00 	mov.w	fp, #0
 8008bfe:	f100 0914 	add.w	r9, r0, #20
 8008c02:	f1ca 0301 	rsb	r3, sl, #1
 8008c06:	f8cd 9010 	str.w	r9, [sp, #16]
 8008c0a:	f8cd b004 	str.w	fp, [sp, #4]
 8008c0e:	9308      	str	r3, [sp, #32]
 8008c10:	42b7      	cmp	r7, r6
 8008c12:	d33f      	bcc.n	8008c94 <__gethex+0x210>
 8008c14:	9f04      	ldr	r7, [sp, #16]
 8008c16:	9b01      	ldr	r3, [sp, #4]
 8008c18:	f847 3b04 	str.w	r3, [r7], #4
 8008c1c:	eba7 0709 	sub.w	r7, r7, r9
 8008c20:	10bf      	asrs	r7, r7, #2
 8008c22:	6127      	str	r7, [r4, #16]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 fb5b 	bl	80092e0 <__hi0bits>
 8008c2a:	017f      	lsls	r7, r7, #5
 8008c2c:	f8d8 6000 	ldr.w	r6, [r8]
 8008c30:	1a3f      	subs	r7, r7, r0
 8008c32:	42b7      	cmp	r7, r6
 8008c34:	dd62      	ble.n	8008cfc <__gethex+0x278>
 8008c36:	1bbf      	subs	r7, r7, r6
 8008c38:	4639      	mov	r1, r7
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fef1 	bl	8009a22 <__any_on>
 8008c40:	4682      	mov	sl, r0
 8008c42:	b1a8      	cbz	r0, 8008c70 <__gethex+0x1ec>
 8008c44:	f04f 0a01 	mov.w	sl, #1
 8008c48:	1e7b      	subs	r3, r7, #1
 8008c4a:	1159      	asrs	r1, r3, #5
 8008c4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008c50:	f003 021f 	and.w	r2, r3, #31
 8008c54:	fa0a f202 	lsl.w	r2, sl, r2
 8008c58:	420a      	tst	r2, r1
 8008c5a:	d009      	beq.n	8008c70 <__gethex+0x1ec>
 8008c5c:	4553      	cmp	r3, sl
 8008c5e:	dd05      	ble.n	8008c6c <__gethex+0x1e8>
 8008c60:	4620      	mov	r0, r4
 8008c62:	1eb9      	subs	r1, r7, #2
 8008c64:	f000 fedd 	bl	8009a22 <__any_on>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d144      	bne.n	8008cf6 <__gethex+0x272>
 8008c6c:	f04f 0a02 	mov.w	sl, #2
 8008c70:	4639      	mov	r1, r7
 8008c72:	4620      	mov	r0, r4
 8008c74:	f7ff fe9e 	bl	80089b4 <rshift>
 8008c78:	443d      	add	r5, r7
 8008c7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c7e:	42ab      	cmp	r3, r5
 8008c80:	da4a      	bge.n	8008d18 <__gethex+0x294>
 8008c82:	4621      	mov	r1, r4
 8008c84:	9802      	ldr	r0, [sp, #8]
 8008c86:	f000 fa75 	bl	8009174 <_Bfree>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c8e:	27a3      	movs	r7, #163	; 0xa3
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	e789      	b.n	8008ba8 <__gethex+0x124>
 8008c94:	1e73      	subs	r3, r6, #1
 8008c96:	9a07      	ldr	r2, [sp, #28]
 8008c98:	9305      	str	r3, [sp, #20]
 8008c9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d019      	beq.n	8008cd6 <__gethex+0x252>
 8008ca2:	f1bb 0f20 	cmp.w	fp, #32
 8008ca6:	d107      	bne.n	8008cb8 <__gethex+0x234>
 8008ca8:	9b04      	ldr	r3, [sp, #16]
 8008caa:	9a01      	ldr	r2, [sp, #4]
 8008cac:	f843 2b04 	str.w	r2, [r3], #4
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	469b      	mov	fp, r3
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008cbc:	f7ff fecd 	bl	8008a5a <__hexdig_fun>
 8008cc0:	9b01      	ldr	r3, [sp, #4]
 8008cc2:	f000 000f 	and.w	r0, r0, #15
 8008cc6:	fa00 f00b 	lsl.w	r0, r0, fp
 8008cca:	4303      	orrs	r3, r0
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	f10b 0b04 	add.w	fp, fp, #4
 8008cd2:	9b05      	ldr	r3, [sp, #20]
 8008cd4:	e00d      	b.n	8008cf2 <__gethex+0x26e>
 8008cd6:	9b05      	ldr	r3, [sp, #20]
 8008cd8:	9a08      	ldr	r2, [sp, #32]
 8008cda:	4413      	add	r3, r2
 8008cdc:	42bb      	cmp	r3, r7
 8008cde:	d3e0      	bcc.n	8008ca2 <__gethex+0x21e>
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	4652      	mov	r2, sl
 8008ce4:	9903      	ldr	r1, [sp, #12]
 8008ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce8:	f001 f8e2 	bl	8009eb0 <strncmp>
 8008cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d1d7      	bne.n	8008ca2 <__gethex+0x21e>
 8008cf2:	461e      	mov	r6, r3
 8008cf4:	e78c      	b.n	8008c10 <__gethex+0x18c>
 8008cf6:	f04f 0a03 	mov.w	sl, #3
 8008cfa:	e7b9      	b.n	8008c70 <__gethex+0x1ec>
 8008cfc:	da09      	bge.n	8008d12 <__gethex+0x28e>
 8008cfe:	1bf7      	subs	r7, r6, r7
 8008d00:	4621      	mov	r1, r4
 8008d02:	463a      	mov	r2, r7
 8008d04:	9802      	ldr	r0, [sp, #8]
 8008d06:	f000 fc4d 	bl	80095a4 <__lshift>
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	1bed      	subs	r5, r5, r7
 8008d0e:	f100 0914 	add.w	r9, r0, #20
 8008d12:	f04f 0a00 	mov.w	sl, #0
 8008d16:	e7b0      	b.n	8008c7a <__gethex+0x1f6>
 8008d18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008d1c:	42a8      	cmp	r0, r5
 8008d1e:	dd71      	ble.n	8008e04 <__gethex+0x380>
 8008d20:	1b45      	subs	r5, r0, r5
 8008d22:	42ae      	cmp	r6, r5
 8008d24:	dc34      	bgt.n	8008d90 <__gethex+0x30c>
 8008d26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d028      	beq.n	8008d80 <__gethex+0x2fc>
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	d02a      	beq.n	8008d88 <__gethex+0x304>
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d115      	bne.n	8008d62 <__gethex+0x2de>
 8008d36:	42ae      	cmp	r6, r5
 8008d38:	d113      	bne.n	8008d62 <__gethex+0x2de>
 8008d3a:	2e01      	cmp	r6, #1
 8008d3c:	d10b      	bne.n	8008d56 <__gethex+0x2d2>
 8008d3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d42:	9a06      	ldr	r2, [sp, #24]
 8008d44:	2762      	movs	r7, #98	; 0x62
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	2301      	movs	r3, #1
 8008d4a:	6123      	str	r3, [r4, #16]
 8008d4c:	f8c9 3000 	str.w	r3, [r9]
 8008d50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d52:	601c      	str	r4, [r3, #0]
 8008d54:	e728      	b.n	8008ba8 <__gethex+0x124>
 8008d56:	4620      	mov	r0, r4
 8008d58:	1e71      	subs	r1, r6, #1
 8008d5a:	f000 fe62 	bl	8009a22 <__any_on>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d1ed      	bne.n	8008d3e <__gethex+0x2ba>
 8008d62:	4621      	mov	r1, r4
 8008d64:	9802      	ldr	r0, [sp, #8]
 8008d66:	f000 fa05 	bl	8009174 <_Bfree>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d6e:	2750      	movs	r7, #80	; 0x50
 8008d70:	6013      	str	r3, [r2, #0]
 8008d72:	e719      	b.n	8008ba8 <__gethex+0x124>
 8008d74:	0800b440 	.word	0x0800b440
 8008d78:	0800b3c4 	.word	0x0800b3c4
 8008d7c:	0800b3d5 	.word	0x0800b3d5
 8008d80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1ed      	bne.n	8008d62 <__gethex+0x2de>
 8008d86:	e7da      	b.n	8008d3e <__gethex+0x2ba>
 8008d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1d7      	bne.n	8008d3e <__gethex+0x2ba>
 8008d8e:	e7e8      	b.n	8008d62 <__gethex+0x2de>
 8008d90:	1e6f      	subs	r7, r5, #1
 8008d92:	f1ba 0f00 	cmp.w	sl, #0
 8008d96:	d132      	bne.n	8008dfe <__gethex+0x37a>
 8008d98:	b127      	cbz	r7, 8008da4 <__gethex+0x320>
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 fe40 	bl	8009a22 <__any_on>
 8008da2:	4682      	mov	sl, r0
 8008da4:	2101      	movs	r1, #1
 8008da6:	117b      	asrs	r3, r7, #5
 8008da8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008dac:	f007 071f 	and.w	r7, r7, #31
 8008db0:	fa01 f707 	lsl.w	r7, r1, r7
 8008db4:	421f      	tst	r7, r3
 8008db6:	f04f 0702 	mov.w	r7, #2
 8008dba:	4629      	mov	r1, r5
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	bf18      	it	ne
 8008dc0:	f04a 0a02 	orrne.w	sl, sl, #2
 8008dc4:	1b76      	subs	r6, r6, r5
 8008dc6:	f7ff fdf5 	bl	80089b4 <rshift>
 8008dca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008dce:	f1ba 0f00 	cmp.w	sl, #0
 8008dd2:	d048      	beq.n	8008e66 <__gethex+0x3e2>
 8008dd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d015      	beq.n	8008e08 <__gethex+0x384>
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d017      	beq.n	8008e10 <__gethex+0x38c>
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d109      	bne.n	8008df8 <__gethex+0x374>
 8008de4:	f01a 0f02 	tst.w	sl, #2
 8008de8:	d006      	beq.n	8008df8 <__gethex+0x374>
 8008dea:	f8d9 0000 	ldr.w	r0, [r9]
 8008dee:	ea4a 0a00 	orr.w	sl, sl, r0
 8008df2:	f01a 0f01 	tst.w	sl, #1
 8008df6:	d10e      	bne.n	8008e16 <__gethex+0x392>
 8008df8:	f047 0710 	orr.w	r7, r7, #16
 8008dfc:	e033      	b.n	8008e66 <__gethex+0x3e2>
 8008dfe:	f04f 0a01 	mov.w	sl, #1
 8008e02:	e7cf      	b.n	8008da4 <__gethex+0x320>
 8008e04:	2701      	movs	r7, #1
 8008e06:	e7e2      	b.n	8008dce <__gethex+0x34a>
 8008e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e0a:	f1c3 0301 	rsb	r3, r3, #1
 8008e0e:	9315      	str	r3, [sp, #84]	; 0x54
 8008e10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0f0      	beq.n	8008df8 <__gethex+0x374>
 8008e16:	f04f 0c00 	mov.w	ip, #0
 8008e1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e1e:	f104 0314 	add.w	r3, r4, #20
 8008e22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e30:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e34:	d01c      	beq.n	8008e70 <__gethex+0x3ec>
 8008e36:	3201      	adds	r2, #1
 8008e38:	6002      	str	r2, [r0, #0]
 8008e3a:	2f02      	cmp	r7, #2
 8008e3c:	f104 0314 	add.w	r3, r4, #20
 8008e40:	d13d      	bne.n	8008ebe <__gethex+0x43a>
 8008e42:	f8d8 2000 	ldr.w	r2, [r8]
 8008e46:	3a01      	subs	r2, #1
 8008e48:	42b2      	cmp	r2, r6
 8008e4a:	d10a      	bne.n	8008e62 <__gethex+0x3de>
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	1171      	asrs	r1, r6, #5
 8008e50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e54:	f006 061f 	and.w	r6, r6, #31
 8008e58:	fa02 f606 	lsl.w	r6, r2, r6
 8008e5c:	421e      	tst	r6, r3
 8008e5e:	bf18      	it	ne
 8008e60:	4617      	movne	r7, r2
 8008e62:	f047 0720 	orr.w	r7, r7, #32
 8008e66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e68:	601c      	str	r4, [r3, #0]
 8008e6a:	9b06      	ldr	r3, [sp, #24]
 8008e6c:	601d      	str	r5, [r3, #0]
 8008e6e:	e69b      	b.n	8008ba8 <__gethex+0x124>
 8008e70:	4299      	cmp	r1, r3
 8008e72:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e76:	d8d8      	bhi.n	8008e2a <__gethex+0x3a6>
 8008e78:	68a3      	ldr	r3, [r4, #8]
 8008e7a:	459b      	cmp	fp, r3
 8008e7c:	db17      	blt.n	8008eae <__gethex+0x42a>
 8008e7e:	6861      	ldr	r1, [r4, #4]
 8008e80:	9802      	ldr	r0, [sp, #8]
 8008e82:	3101      	adds	r1, #1
 8008e84:	f000 f936 	bl	80090f4 <_Balloc>
 8008e88:	4681      	mov	r9, r0
 8008e8a:	b918      	cbnz	r0, 8008e94 <__gethex+0x410>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	2184      	movs	r1, #132	; 0x84
 8008e90:	4b19      	ldr	r3, [pc, #100]	; (8008ef8 <__gethex+0x474>)
 8008e92:	e6ac      	b.n	8008bee <__gethex+0x16a>
 8008e94:	6922      	ldr	r2, [r4, #16]
 8008e96:	f104 010c 	add.w	r1, r4, #12
 8008e9a:	3202      	adds	r2, #2
 8008e9c:	0092      	lsls	r2, r2, #2
 8008e9e:	300c      	adds	r0, #12
 8008ea0:	f000 f91a 	bl	80090d8 <memcpy>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	9802      	ldr	r0, [sp, #8]
 8008ea8:	f000 f964 	bl	8009174 <_Bfree>
 8008eac:	464c      	mov	r4, r9
 8008eae:	6923      	ldr	r3, [r4, #16]
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	6122      	str	r2, [r4, #16]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008eba:	615a      	str	r2, [r3, #20]
 8008ebc:	e7bd      	b.n	8008e3a <__gethex+0x3b6>
 8008ebe:	6922      	ldr	r2, [r4, #16]
 8008ec0:	455a      	cmp	r2, fp
 8008ec2:	dd0b      	ble.n	8008edc <__gethex+0x458>
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f7ff fd74 	bl	80089b4 <rshift>
 8008ecc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	42ab      	cmp	r3, r5
 8008ed4:	f6ff aed5 	blt.w	8008c82 <__gethex+0x1fe>
 8008ed8:	2701      	movs	r7, #1
 8008eda:	e7c2      	b.n	8008e62 <__gethex+0x3de>
 8008edc:	f016 061f 	ands.w	r6, r6, #31
 8008ee0:	d0fa      	beq.n	8008ed8 <__gethex+0x454>
 8008ee2:	449a      	add	sl, r3
 8008ee4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008ee8:	f000 f9fa 	bl	80092e0 <__hi0bits>
 8008eec:	f1c6 0620 	rsb	r6, r6, #32
 8008ef0:	42b0      	cmp	r0, r6
 8008ef2:	dbe7      	blt.n	8008ec4 <__gethex+0x440>
 8008ef4:	e7f0      	b.n	8008ed8 <__gethex+0x454>
 8008ef6:	bf00      	nop
 8008ef8:	0800b3c4 	.word	0x0800b3c4

08008efc <L_shift>:
 8008efc:	f1c2 0208 	rsb	r2, r2, #8
 8008f00:	0092      	lsls	r2, r2, #2
 8008f02:	b570      	push	{r4, r5, r6, lr}
 8008f04:	f1c2 0620 	rsb	r6, r2, #32
 8008f08:	6843      	ldr	r3, [r0, #4]
 8008f0a:	6804      	ldr	r4, [r0, #0]
 8008f0c:	fa03 f506 	lsl.w	r5, r3, r6
 8008f10:	432c      	orrs	r4, r5
 8008f12:	40d3      	lsrs	r3, r2
 8008f14:	6004      	str	r4, [r0, #0]
 8008f16:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f1a:	4288      	cmp	r0, r1
 8008f1c:	d3f4      	bcc.n	8008f08 <L_shift+0xc>
 8008f1e:	bd70      	pop	{r4, r5, r6, pc}

08008f20 <__match>:
 8008f20:	b530      	push	{r4, r5, lr}
 8008f22:	6803      	ldr	r3, [r0, #0]
 8008f24:	3301      	adds	r3, #1
 8008f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f2a:	b914      	cbnz	r4, 8008f32 <__match+0x12>
 8008f2c:	6003      	str	r3, [r0, #0]
 8008f2e:	2001      	movs	r0, #1
 8008f30:	bd30      	pop	{r4, r5, pc}
 8008f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008f3a:	2d19      	cmp	r5, #25
 8008f3c:	bf98      	it	ls
 8008f3e:	3220      	addls	r2, #32
 8008f40:	42a2      	cmp	r2, r4
 8008f42:	d0f0      	beq.n	8008f26 <__match+0x6>
 8008f44:	2000      	movs	r0, #0
 8008f46:	e7f3      	b.n	8008f30 <__match+0x10>

08008f48 <__hexnan>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	2500      	movs	r5, #0
 8008f4e:	680b      	ldr	r3, [r1, #0]
 8008f50:	4682      	mov	sl, r0
 8008f52:	115e      	asrs	r6, r3, #5
 8008f54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f58:	f013 031f 	ands.w	r3, r3, #31
 8008f5c:	bf18      	it	ne
 8008f5e:	3604      	addne	r6, #4
 8008f60:	1f37      	subs	r7, r6, #4
 8008f62:	4690      	mov	r8, r2
 8008f64:	46b9      	mov	r9, r7
 8008f66:	463c      	mov	r4, r7
 8008f68:	46ab      	mov	fp, r5
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	6801      	ldr	r1, [r0, #0]
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f74:	9502      	str	r5, [sp, #8]
 8008f76:	784a      	ldrb	r2, [r1, #1]
 8008f78:	1c4b      	adds	r3, r1, #1
 8008f7a:	9303      	str	r3, [sp, #12]
 8008f7c:	b342      	cbz	r2, 8008fd0 <__hexnan+0x88>
 8008f7e:	4610      	mov	r0, r2
 8008f80:	9105      	str	r1, [sp, #20]
 8008f82:	9204      	str	r2, [sp, #16]
 8008f84:	f7ff fd69 	bl	8008a5a <__hexdig_fun>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d14f      	bne.n	800902c <__hexnan+0xe4>
 8008f8c:	9a04      	ldr	r2, [sp, #16]
 8008f8e:	9905      	ldr	r1, [sp, #20]
 8008f90:	2a20      	cmp	r2, #32
 8008f92:	d818      	bhi.n	8008fc6 <__hexnan+0x7e>
 8008f94:	9b02      	ldr	r3, [sp, #8]
 8008f96:	459b      	cmp	fp, r3
 8008f98:	dd13      	ble.n	8008fc2 <__hexnan+0x7a>
 8008f9a:	454c      	cmp	r4, r9
 8008f9c:	d206      	bcs.n	8008fac <__hexnan+0x64>
 8008f9e:	2d07      	cmp	r5, #7
 8008fa0:	dc04      	bgt.n	8008fac <__hexnan+0x64>
 8008fa2:	462a      	mov	r2, r5
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f7ff ffa8 	bl	8008efc <L_shift>
 8008fac:	4544      	cmp	r4, r8
 8008fae:	d950      	bls.n	8009052 <__hexnan+0x10a>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f1a4 0904 	sub.w	r9, r4, #4
 8008fb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fba:	461d      	mov	r5, r3
 8008fbc:	464c      	mov	r4, r9
 8008fbe:	f8cd b008 	str.w	fp, [sp, #8]
 8008fc2:	9903      	ldr	r1, [sp, #12]
 8008fc4:	e7d7      	b.n	8008f76 <__hexnan+0x2e>
 8008fc6:	2a29      	cmp	r2, #41	; 0x29
 8008fc8:	d156      	bne.n	8009078 <__hexnan+0x130>
 8008fca:	3102      	adds	r1, #2
 8008fcc:	f8ca 1000 	str.w	r1, [sl]
 8008fd0:	f1bb 0f00 	cmp.w	fp, #0
 8008fd4:	d050      	beq.n	8009078 <__hexnan+0x130>
 8008fd6:	454c      	cmp	r4, r9
 8008fd8:	d206      	bcs.n	8008fe8 <__hexnan+0xa0>
 8008fda:	2d07      	cmp	r5, #7
 8008fdc:	dc04      	bgt.n	8008fe8 <__hexnan+0xa0>
 8008fde:	462a      	mov	r2, r5
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f7ff ff8a 	bl	8008efc <L_shift>
 8008fe8:	4544      	cmp	r4, r8
 8008fea:	d934      	bls.n	8009056 <__hexnan+0x10e>
 8008fec:	4623      	mov	r3, r4
 8008fee:	f1a8 0204 	sub.w	r2, r8, #4
 8008ff2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ff6:	429f      	cmp	r7, r3
 8008ff8:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ffc:	d2f9      	bcs.n	8008ff2 <__hexnan+0xaa>
 8008ffe:	1b3b      	subs	r3, r7, r4
 8009000:	f023 0303 	bic.w	r3, r3, #3
 8009004:	3304      	adds	r3, #4
 8009006:	3401      	adds	r4, #1
 8009008:	3e03      	subs	r6, #3
 800900a:	42b4      	cmp	r4, r6
 800900c:	bf88      	it	hi
 800900e:	2304      	movhi	r3, #4
 8009010:	2200      	movs	r2, #0
 8009012:	4443      	add	r3, r8
 8009014:	f843 2b04 	str.w	r2, [r3], #4
 8009018:	429f      	cmp	r7, r3
 800901a:	d2fb      	bcs.n	8009014 <__hexnan+0xcc>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	b91b      	cbnz	r3, 8009028 <__hexnan+0xe0>
 8009020:	4547      	cmp	r7, r8
 8009022:	d127      	bne.n	8009074 <__hexnan+0x12c>
 8009024:	2301      	movs	r3, #1
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	2005      	movs	r0, #5
 800902a:	e026      	b.n	800907a <__hexnan+0x132>
 800902c:	3501      	adds	r5, #1
 800902e:	2d08      	cmp	r5, #8
 8009030:	f10b 0b01 	add.w	fp, fp, #1
 8009034:	dd06      	ble.n	8009044 <__hexnan+0xfc>
 8009036:	4544      	cmp	r4, r8
 8009038:	d9c3      	bls.n	8008fc2 <__hexnan+0x7a>
 800903a:	2300      	movs	r3, #0
 800903c:	2501      	movs	r5, #1
 800903e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009042:	3c04      	subs	r4, #4
 8009044:	6822      	ldr	r2, [r4, #0]
 8009046:	f000 000f 	and.w	r0, r0, #15
 800904a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800904e:	6022      	str	r2, [r4, #0]
 8009050:	e7b7      	b.n	8008fc2 <__hexnan+0x7a>
 8009052:	2508      	movs	r5, #8
 8009054:	e7b5      	b.n	8008fc2 <__hexnan+0x7a>
 8009056:	9b01      	ldr	r3, [sp, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d0df      	beq.n	800901c <__hexnan+0xd4>
 800905c:	f04f 32ff 	mov.w	r2, #4294967295
 8009060:	f1c3 0320 	rsb	r3, r3, #32
 8009064:	fa22 f303 	lsr.w	r3, r2, r3
 8009068:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800906c:	401a      	ands	r2, r3
 800906e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009072:	e7d3      	b.n	800901c <__hexnan+0xd4>
 8009074:	3f04      	subs	r7, #4
 8009076:	e7d1      	b.n	800901c <__hexnan+0xd4>
 8009078:	2004      	movs	r0, #4
 800907a:	b007      	add	sp, #28
 800907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009080 <_localeconv_r>:
 8009080:	4800      	ldr	r0, [pc, #0]	; (8009084 <_localeconv_r+0x4>)
 8009082:	4770      	bx	lr
 8009084:	2000016c 	.word	0x2000016c

08009088 <malloc>:
 8009088:	4b02      	ldr	r3, [pc, #8]	; (8009094 <malloc+0xc>)
 800908a:	4601      	mov	r1, r0
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	f000 bd43 	b.w	8009b18 <_malloc_r>
 8009092:	bf00      	nop
 8009094:	20000014 	.word	0x20000014

08009098 <__ascii_mbtowc>:
 8009098:	b082      	sub	sp, #8
 800909a:	b901      	cbnz	r1, 800909e <__ascii_mbtowc+0x6>
 800909c:	a901      	add	r1, sp, #4
 800909e:	b142      	cbz	r2, 80090b2 <__ascii_mbtowc+0x1a>
 80090a0:	b14b      	cbz	r3, 80090b6 <__ascii_mbtowc+0x1e>
 80090a2:	7813      	ldrb	r3, [r2, #0]
 80090a4:	600b      	str	r3, [r1, #0]
 80090a6:	7812      	ldrb	r2, [r2, #0]
 80090a8:	1e10      	subs	r0, r2, #0
 80090aa:	bf18      	it	ne
 80090ac:	2001      	movne	r0, #1
 80090ae:	b002      	add	sp, #8
 80090b0:	4770      	bx	lr
 80090b2:	4610      	mov	r0, r2
 80090b4:	e7fb      	b.n	80090ae <__ascii_mbtowc+0x16>
 80090b6:	f06f 0001 	mvn.w	r0, #1
 80090ba:	e7f8      	b.n	80090ae <__ascii_mbtowc+0x16>

080090bc <memchr>:
 80090bc:	4603      	mov	r3, r0
 80090be:	b510      	push	{r4, lr}
 80090c0:	b2c9      	uxtb	r1, r1
 80090c2:	4402      	add	r2, r0
 80090c4:	4293      	cmp	r3, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	d101      	bne.n	80090ce <memchr+0x12>
 80090ca:	2000      	movs	r0, #0
 80090cc:	e003      	b.n	80090d6 <memchr+0x1a>
 80090ce:	7804      	ldrb	r4, [r0, #0]
 80090d0:	3301      	adds	r3, #1
 80090d2:	428c      	cmp	r4, r1
 80090d4:	d1f6      	bne.n	80090c4 <memchr+0x8>
 80090d6:	bd10      	pop	{r4, pc}

080090d8 <memcpy>:
 80090d8:	440a      	add	r2, r1
 80090da:	4291      	cmp	r1, r2
 80090dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80090e0:	d100      	bne.n	80090e4 <memcpy+0xc>
 80090e2:	4770      	bx	lr
 80090e4:	b510      	push	{r4, lr}
 80090e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ea:	4291      	cmp	r1, r2
 80090ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090f0:	d1f9      	bne.n	80090e6 <memcpy+0xe>
 80090f2:	bd10      	pop	{r4, pc}

080090f4 <_Balloc>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090f8:	4604      	mov	r4, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	b976      	cbnz	r6, 800911c <_Balloc+0x28>
 80090fe:	2010      	movs	r0, #16
 8009100:	f7ff ffc2 	bl	8009088 <malloc>
 8009104:	4602      	mov	r2, r0
 8009106:	6260      	str	r0, [r4, #36]	; 0x24
 8009108:	b920      	cbnz	r0, 8009114 <_Balloc+0x20>
 800910a:	2166      	movs	r1, #102	; 0x66
 800910c:	4b17      	ldr	r3, [pc, #92]	; (800916c <_Balloc+0x78>)
 800910e:	4818      	ldr	r0, [pc, #96]	; (8009170 <_Balloc+0x7c>)
 8009110:	f000 feee 	bl	8009ef0 <__assert_func>
 8009114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009118:	6006      	str	r6, [r0, #0]
 800911a:	60c6      	str	r6, [r0, #12]
 800911c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800911e:	68f3      	ldr	r3, [r6, #12]
 8009120:	b183      	cbz	r3, 8009144 <_Balloc+0x50>
 8009122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800912a:	b9b8      	cbnz	r0, 800915c <_Balloc+0x68>
 800912c:	2101      	movs	r1, #1
 800912e:	fa01 f605 	lsl.w	r6, r1, r5
 8009132:	1d72      	adds	r2, r6, #5
 8009134:	4620      	mov	r0, r4
 8009136:	0092      	lsls	r2, r2, #2
 8009138:	f000 fc94 	bl	8009a64 <_calloc_r>
 800913c:	b160      	cbz	r0, 8009158 <_Balloc+0x64>
 800913e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009142:	e00e      	b.n	8009162 <_Balloc+0x6e>
 8009144:	2221      	movs	r2, #33	; 0x21
 8009146:	2104      	movs	r1, #4
 8009148:	4620      	mov	r0, r4
 800914a:	f000 fc8b 	bl	8009a64 <_calloc_r>
 800914e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009150:	60f0      	str	r0, [r6, #12]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e4      	bne.n	8009122 <_Balloc+0x2e>
 8009158:	2000      	movs	r0, #0
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	6802      	ldr	r2, [r0, #0]
 800915e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009162:	2300      	movs	r3, #0
 8009164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009168:	e7f7      	b.n	800915a <_Balloc+0x66>
 800916a:	bf00      	nop
 800916c:	0800b34e 	.word	0x0800b34e
 8009170:	0800b454 	.word	0x0800b454

08009174 <_Bfree>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009178:	4605      	mov	r5, r0
 800917a:	460c      	mov	r4, r1
 800917c:	b976      	cbnz	r6, 800919c <_Bfree+0x28>
 800917e:	2010      	movs	r0, #16
 8009180:	f7ff ff82 	bl	8009088 <malloc>
 8009184:	4602      	mov	r2, r0
 8009186:	6268      	str	r0, [r5, #36]	; 0x24
 8009188:	b920      	cbnz	r0, 8009194 <_Bfree+0x20>
 800918a:	218a      	movs	r1, #138	; 0x8a
 800918c:	4b08      	ldr	r3, [pc, #32]	; (80091b0 <_Bfree+0x3c>)
 800918e:	4809      	ldr	r0, [pc, #36]	; (80091b4 <_Bfree+0x40>)
 8009190:	f000 feae 	bl	8009ef0 <__assert_func>
 8009194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009198:	6006      	str	r6, [r0, #0]
 800919a:	60c6      	str	r6, [r0, #12]
 800919c:	b13c      	cbz	r4, 80091ae <_Bfree+0x3a>
 800919e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80091a0:	6862      	ldr	r2, [r4, #4]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091a8:	6021      	str	r1, [r4, #0]
 80091aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	0800b34e 	.word	0x0800b34e
 80091b4:	0800b454 	.word	0x0800b454

080091b8 <__multadd>:
 80091b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091bc:	4698      	mov	r8, r3
 80091be:	460c      	mov	r4, r1
 80091c0:	2300      	movs	r3, #0
 80091c2:	690e      	ldr	r6, [r1, #16]
 80091c4:	4607      	mov	r7, r0
 80091c6:	f101 0014 	add.w	r0, r1, #20
 80091ca:	6805      	ldr	r5, [r0, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	b2a9      	uxth	r1, r5
 80091d0:	fb02 8101 	mla	r1, r2, r1, r8
 80091d4:	0c2d      	lsrs	r5, r5, #16
 80091d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80091da:	fb02 c505 	mla	r5, r2, r5, ip
 80091de:	b289      	uxth	r1, r1
 80091e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80091e4:	429e      	cmp	r6, r3
 80091e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80091ea:	f840 1b04 	str.w	r1, [r0], #4
 80091ee:	dcec      	bgt.n	80091ca <__multadd+0x12>
 80091f0:	f1b8 0f00 	cmp.w	r8, #0
 80091f4:	d022      	beq.n	800923c <__multadd+0x84>
 80091f6:	68a3      	ldr	r3, [r4, #8]
 80091f8:	42b3      	cmp	r3, r6
 80091fa:	dc19      	bgt.n	8009230 <__multadd+0x78>
 80091fc:	6861      	ldr	r1, [r4, #4]
 80091fe:	4638      	mov	r0, r7
 8009200:	3101      	adds	r1, #1
 8009202:	f7ff ff77 	bl	80090f4 <_Balloc>
 8009206:	4605      	mov	r5, r0
 8009208:	b928      	cbnz	r0, 8009216 <__multadd+0x5e>
 800920a:	4602      	mov	r2, r0
 800920c:	21b5      	movs	r1, #181	; 0xb5
 800920e:	4b0d      	ldr	r3, [pc, #52]	; (8009244 <__multadd+0x8c>)
 8009210:	480d      	ldr	r0, [pc, #52]	; (8009248 <__multadd+0x90>)
 8009212:	f000 fe6d 	bl	8009ef0 <__assert_func>
 8009216:	6922      	ldr	r2, [r4, #16]
 8009218:	f104 010c 	add.w	r1, r4, #12
 800921c:	3202      	adds	r2, #2
 800921e:	0092      	lsls	r2, r2, #2
 8009220:	300c      	adds	r0, #12
 8009222:	f7ff ff59 	bl	80090d8 <memcpy>
 8009226:	4621      	mov	r1, r4
 8009228:	4638      	mov	r0, r7
 800922a:	f7ff ffa3 	bl	8009174 <_Bfree>
 800922e:	462c      	mov	r4, r5
 8009230:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009234:	3601      	adds	r6, #1
 8009236:	f8c3 8014 	str.w	r8, [r3, #20]
 800923a:	6126      	str	r6, [r4, #16]
 800923c:	4620      	mov	r0, r4
 800923e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009242:	bf00      	nop
 8009244:	0800b3c4 	.word	0x0800b3c4
 8009248:	0800b454 	.word	0x0800b454

0800924c <__s2b>:
 800924c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009250:	4615      	mov	r5, r2
 8009252:	2209      	movs	r2, #9
 8009254:	461f      	mov	r7, r3
 8009256:	3308      	adds	r3, #8
 8009258:	460c      	mov	r4, r1
 800925a:	fb93 f3f2 	sdiv	r3, r3, r2
 800925e:	4606      	mov	r6, r0
 8009260:	2201      	movs	r2, #1
 8009262:	2100      	movs	r1, #0
 8009264:	429a      	cmp	r2, r3
 8009266:	db09      	blt.n	800927c <__s2b+0x30>
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff ff43 	bl	80090f4 <_Balloc>
 800926e:	b940      	cbnz	r0, 8009282 <__s2b+0x36>
 8009270:	4602      	mov	r2, r0
 8009272:	21ce      	movs	r1, #206	; 0xce
 8009274:	4b18      	ldr	r3, [pc, #96]	; (80092d8 <__s2b+0x8c>)
 8009276:	4819      	ldr	r0, [pc, #100]	; (80092dc <__s2b+0x90>)
 8009278:	f000 fe3a 	bl	8009ef0 <__assert_func>
 800927c:	0052      	lsls	r2, r2, #1
 800927e:	3101      	adds	r1, #1
 8009280:	e7f0      	b.n	8009264 <__s2b+0x18>
 8009282:	9b08      	ldr	r3, [sp, #32]
 8009284:	2d09      	cmp	r5, #9
 8009286:	6143      	str	r3, [r0, #20]
 8009288:	f04f 0301 	mov.w	r3, #1
 800928c:	6103      	str	r3, [r0, #16]
 800928e:	dd16      	ble.n	80092be <__s2b+0x72>
 8009290:	f104 0909 	add.w	r9, r4, #9
 8009294:	46c8      	mov	r8, r9
 8009296:	442c      	add	r4, r5
 8009298:	f818 3b01 	ldrb.w	r3, [r8], #1
 800929c:	4601      	mov	r1, r0
 800929e:	220a      	movs	r2, #10
 80092a0:	4630      	mov	r0, r6
 80092a2:	3b30      	subs	r3, #48	; 0x30
 80092a4:	f7ff ff88 	bl	80091b8 <__multadd>
 80092a8:	45a0      	cmp	r8, r4
 80092aa:	d1f5      	bne.n	8009298 <__s2b+0x4c>
 80092ac:	f1a5 0408 	sub.w	r4, r5, #8
 80092b0:	444c      	add	r4, r9
 80092b2:	1b2d      	subs	r5, r5, r4
 80092b4:	1963      	adds	r3, r4, r5
 80092b6:	42bb      	cmp	r3, r7
 80092b8:	db04      	blt.n	80092c4 <__s2b+0x78>
 80092ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092be:	2509      	movs	r5, #9
 80092c0:	340a      	adds	r4, #10
 80092c2:	e7f6      	b.n	80092b2 <__s2b+0x66>
 80092c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092c8:	4601      	mov	r1, r0
 80092ca:	220a      	movs	r2, #10
 80092cc:	4630      	mov	r0, r6
 80092ce:	3b30      	subs	r3, #48	; 0x30
 80092d0:	f7ff ff72 	bl	80091b8 <__multadd>
 80092d4:	e7ee      	b.n	80092b4 <__s2b+0x68>
 80092d6:	bf00      	nop
 80092d8:	0800b3c4 	.word	0x0800b3c4
 80092dc:	0800b454 	.word	0x0800b454

080092e0 <__hi0bits>:
 80092e0:	0c02      	lsrs	r2, r0, #16
 80092e2:	0412      	lsls	r2, r2, #16
 80092e4:	4603      	mov	r3, r0
 80092e6:	b9ca      	cbnz	r2, 800931c <__hi0bits+0x3c>
 80092e8:	0403      	lsls	r3, r0, #16
 80092ea:	2010      	movs	r0, #16
 80092ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80092f0:	bf04      	itt	eq
 80092f2:	021b      	lsleq	r3, r3, #8
 80092f4:	3008      	addeq	r0, #8
 80092f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80092fa:	bf04      	itt	eq
 80092fc:	011b      	lsleq	r3, r3, #4
 80092fe:	3004      	addeq	r0, #4
 8009300:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009304:	bf04      	itt	eq
 8009306:	009b      	lsleq	r3, r3, #2
 8009308:	3002      	addeq	r0, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	db05      	blt.n	800931a <__hi0bits+0x3a>
 800930e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009312:	f100 0001 	add.w	r0, r0, #1
 8009316:	bf08      	it	eq
 8009318:	2020      	moveq	r0, #32
 800931a:	4770      	bx	lr
 800931c:	2000      	movs	r0, #0
 800931e:	e7e5      	b.n	80092ec <__hi0bits+0xc>

08009320 <__lo0bits>:
 8009320:	6803      	ldr	r3, [r0, #0]
 8009322:	4602      	mov	r2, r0
 8009324:	f013 0007 	ands.w	r0, r3, #7
 8009328:	d00b      	beq.n	8009342 <__lo0bits+0x22>
 800932a:	07d9      	lsls	r1, r3, #31
 800932c:	d422      	bmi.n	8009374 <__lo0bits+0x54>
 800932e:	0798      	lsls	r0, r3, #30
 8009330:	bf49      	itett	mi
 8009332:	085b      	lsrmi	r3, r3, #1
 8009334:	089b      	lsrpl	r3, r3, #2
 8009336:	2001      	movmi	r0, #1
 8009338:	6013      	strmi	r3, [r2, #0]
 800933a:	bf5c      	itt	pl
 800933c:	2002      	movpl	r0, #2
 800933e:	6013      	strpl	r3, [r2, #0]
 8009340:	4770      	bx	lr
 8009342:	b299      	uxth	r1, r3
 8009344:	b909      	cbnz	r1, 800934a <__lo0bits+0x2a>
 8009346:	2010      	movs	r0, #16
 8009348:	0c1b      	lsrs	r3, r3, #16
 800934a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800934e:	bf04      	itt	eq
 8009350:	0a1b      	lsreq	r3, r3, #8
 8009352:	3008      	addeq	r0, #8
 8009354:	0719      	lsls	r1, r3, #28
 8009356:	bf04      	itt	eq
 8009358:	091b      	lsreq	r3, r3, #4
 800935a:	3004      	addeq	r0, #4
 800935c:	0799      	lsls	r1, r3, #30
 800935e:	bf04      	itt	eq
 8009360:	089b      	lsreq	r3, r3, #2
 8009362:	3002      	addeq	r0, #2
 8009364:	07d9      	lsls	r1, r3, #31
 8009366:	d403      	bmi.n	8009370 <__lo0bits+0x50>
 8009368:	085b      	lsrs	r3, r3, #1
 800936a:	f100 0001 	add.w	r0, r0, #1
 800936e:	d003      	beq.n	8009378 <__lo0bits+0x58>
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	4770      	bx	lr
 8009374:	2000      	movs	r0, #0
 8009376:	4770      	bx	lr
 8009378:	2020      	movs	r0, #32
 800937a:	4770      	bx	lr

0800937c <__i2b>:
 800937c:	b510      	push	{r4, lr}
 800937e:	460c      	mov	r4, r1
 8009380:	2101      	movs	r1, #1
 8009382:	f7ff feb7 	bl	80090f4 <_Balloc>
 8009386:	4602      	mov	r2, r0
 8009388:	b928      	cbnz	r0, 8009396 <__i2b+0x1a>
 800938a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800938e:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <__i2b+0x24>)
 8009390:	4804      	ldr	r0, [pc, #16]	; (80093a4 <__i2b+0x28>)
 8009392:	f000 fdad 	bl	8009ef0 <__assert_func>
 8009396:	2301      	movs	r3, #1
 8009398:	6144      	str	r4, [r0, #20]
 800939a:	6103      	str	r3, [r0, #16]
 800939c:	bd10      	pop	{r4, pc}
 800939e:	bf00      	nop
 80093a0:	0800b3c4 	.word	0x0800b3c4
 80093a4:	0800b454 	.word	0x0800b454

080093a8 <__multiply>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	4614      	mov	r4, r2
 80093ae:	690a      	ldr	r2, [r1, #16]
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	460d      	mov	r5, r1
 80093b4:	429a      	cmp	r2, r3
 80093b6:	bfbe      	ittt	lt
 80093b8:	460b      	movlt	r3, r1
 80093ba:	4625      	movlt	r5, r4
 80093bc:	461c      	movlt	r4, r3
 80093be:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80093c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80093c6:	68ab      	ldr	r3, [r5, #8]
 80093c8:	6869      	ldr	r1, [r5, #4]
 80093ca:	eb0a 0709 	add.w	r7, sl, r9
 80093ce:	42bb      	cmp	r3, r7
 80093d0:	b085      	sub	sp, #20
 80093d2:	bfb8      	it	lt
 80093d4:	3101      	addlt	r1, #1
 80093d6:	f7ff fe8d 	bl	80090f4 <_Balloc>
 80093da:	b930      	cbnz	r0, 80093ea <__multiply+0x42>
 80093dc:	4602      	mov	r2, r0
 80093de:	f240 115d 	movw	r1, #349	; 0x15d
 80093e2:	4b41      	ldr	r3, [pc, #260]	; (80094e8 <__multiply+0x140>)
 80093e4:	4841      	ldr	r0, [pc, #260]	; (80094ec <__multiply+0x144>)
 80093e6:	f000 fd83 	bl	8009ef0 <__assert_func>
 80093ea:	f100 0614 	add.w	r6, r0, #20
 80093ee:	4633      	mov	r3, r6
 80093f0:	2200      	movs	r2, #0
 80093f2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80093f6:	4543      	cmp	r3, r8
 80093f8:	d31e      	bcc.n	8009438 <__multiply+0x90>
 80093fa:	f105 0c14 	add.w	ip, r5, #20
 80093fe:	f104 0314 	add.w	r3, r4, #20
 8009402:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009406:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800940a:	9202      	str	r2, [sp, #8]
 800940c:	ebac 0205 	sub.w	r2, ip, r5
 8009410:	3a15      	subs	r2, #21
 8009412:	f022 0203 	bic.w	r2, r2, #3
 8009416:	3204      	adds	r2, #4
 8009418:	f105 0115 	add.w	r1, r5, #21
 800941c:	458c      	cmp	ip, r1
 800941e:	bf38      	it	cc
 8009420:	2204      	movcc	r2, #4
 8009422:	9201      	str	r2, [sp, #4]
 8009424:	9a02      	ldr	r2, [sp, #8]
 8009426:	9303      	str	r3, [sp, #12]
 8009428:	429a      	cmp	r2, r3
 800942a:	d808      	bhi.n	800943e <__multiply+0x96>
 800942c:	2f00      	cmp	r7, #0
 800942e:	dc55      	bgt.n	80094dc <__multiply+0x134>
 8009430:	6107      	str	r7, [r0, #16]
 8009432:	b005      	add	sp, #20
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	f843 2b04 	str.w	r2, [r3], #4
 800943c:	e7db      	b.n	80093f6 <__multiply+0x4e>
 800943e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009442:	f1ba 0f00 	cmp.w	sl, #0
 8009446:	d020      	beq.n	800948a <__multiply+0xe2>
 8009448:	46b1      	mov	r9, r6
 800944a:	2200      	movs	r2, #0
 800944c:	f105 0e14 	add.w	lr, r5, #20
 8009450:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009454:	f8d9 b000 	ldr.w	fp, [r9]
 8009458:	b2a1      	uxth	r1, r4
 800945a:	fa1f fb8b 	uxth.w	fp, fp
 800945e:	fb0a b101 	mla	r1, sl, r1, fp
 8009462:	4411      	add	r1, r2
 8009464:	f8d9 2000 	ldr.w	r2, [r9]
 8009468:	0c24      	lsrs	r4, r4, #16
 800946a:	0c12      	lsrs	r2, r2, #16
 800946c:	fb0a 2404 	mla	r4, sl, r4, r2
 8009470:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009474:	b289      	uxth	r1, r1
 8009476:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800947a:	45f4      	cmp	ip, lr
 800947c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009480:	f849 1b04 	str.w	r1, [r9], #4
 8009484:	d8e4      	bhi.n	8009450 <__multiply+0xa8>
 8009486:	9901      	ldr	r1, [sp, #4]
 8009488:	5072      	str	r2, [r6, r1]
 800948a:	9a03      	ldr	r2, [sp, #12]
 800948c:	3304      	adds	r3, #4
 800948e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009492:	f1b9 0f00 	cmp.w	r9, #0
 8009496:	d01f      	beq.n	80094d8 <__multiply+0x130>
 8009498:	46b6      	mov	lr, r6
 800949a:	f04f 0a00 	mov.w	sl, #0
 800949e:	6834      	ldr	r4, [r6, #0]
 80094a0:	f105 0114 	add.w	r1, r5, #20
 80094a4:	880a      	ldrh	r2, [r1, #0]
 80094a6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80094aa:	b2a4      	uxth	r4, r4
 80094ac:	fb09 b202 	mla	r2, r9, r2, fp
 80094b0:	4492      	add	sl, r2
 80094b2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80094b6:	f84e 4b04 	str.w	r4, [lr], #4
 80094ba:	f851 4b04 	ldr.w	r4, [r1], #4
 80094be:	f8be 2000 	ldrh.w	r2, [lr]
 80094c2:	0c24      	lsrs	r4, r4, #16
 80094c4:	fb09 2404 	mla	r4, r9, r4, r2
 80094c8:	458c      	cmp	ip, r1
 80094ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80094ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80094d2:	d8e7      	bhi.n	80094a4 <__multiply+0xfc>
 80094d4:	9a01      	ldr	r2, [sp, #4]
 80094d6:	50b4      	str	r4, [r6, r2]
 80094d8:	3604      	adds	r6, #4
 80094da:	e7a3      	b.n	8009424 <__multiply+0x7c>
 80094dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1a5      	bne.n	8009430 <__multiply+0x88>
 80094e4:	3f01      	subs	r7, #1
 80094e6:	e7a1      	b.n	800942c <__multiply+0x84>
 80094e8:	0800b3c4 	.word	0x0800b3c4
 80094ec:	0800b454 	.word	0x0800b454

080094f0 <__pow5mult>:
 80094f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f4:	4615      	mov	r5, r2
 80094f6:	f012 0203 	ands.w	r2, r2, #3
 80094fa:	4606      	mov	r6, r0
 80094fc:	460f      	mov	r7, r1
 80094fe:	d007      	beq.n	8009510 <__pow5mult+0x20>
 8009500:	4c25      	ldr	r4, [pc, #148]	; (8009598 <__pow5mult+0xa8>)
 8009502:	3a01      	subs	r2, #1
 8009504:	2300      	movs	r3, #0
 8009506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800950a:	f7ff fe55 	bl	80091b8 <__multadd>
 800950e:	4607      	mov	r7, r0
 8009510:	10ad      	asrs	r5, r5, #2
 8009512:	d03d      	beq.n	8009590 <__pow5mult+0xa0>
 8009514:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009516:	b97c      	cbnz	r4, 8009538 <__pow5mult+0x48>
 8009518:	2010      	movs	r0, #16
 800951a:	f7ff fdb5 	bl	8009088 <malloc>
 800951e:	4602      	mov	r2, r0
 8009520:	6270      	str	r0, [r6, #36]	; 0x24
 8009522:	b928      	cbnz	r0, 8009530 <__pow5mult+0x40>
 8009524:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009528:	4b1c      	ldr	r3, [pc, #112]	; (800959c <__pow5mult+0xac>)
 800952a:	481d      	ldr	r0, [pc, #116]	; (80095a0 <__pow5mult+0xb0>)
 800952c:	f000 fce0 	bl	8009ef0 <__assert_func>
 8009530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009534:	6004      	str	r4, [r0, #0]
 8009536:	60c4      	str	r4, [r0, #12]
 8009538:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800953c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009540:	b94c      	cbnz	r4, 8009556 <__pow5mult+0x66>
 8009542:	f240 2171 	movw	r1, #625	; 0x271
 8009546:	4630      	mov	r0, r6
 8009548:	f7ff ff18 	bl	800937c <__i2b>
 800954c:	2300      	movs	r3, #0
 800954e:	4604      	mov	r4, r0
 8009550:	f8c8 0008 	str.w	r0, [r8, #8]
 8009554:	6003      	str	r3, [r0, #0]
 8009556:	f04f 0900 	mov.w	r9, #0
 800955a:	07eb      	lsls	r3, r5, #31
 800955c:	d50a      	bpl.n	8009574 <__pow5mult+0x84>
 800955e:	4639      	mov	r1, r7
 8009560:	4622      	mov	r2, r4
 8009562:	4630      	mov	r0, r6
 8009564:	f7ff ff20 	bl	80093a8 <__multiply>
 8009568:	4680      	mov	r8, r0
 800956a:	4639      	mov	r1, r7
 800956c:	4630      	mov	r0, r6
 800956e:	f7ff fe01 	bl	8009174 <_Bfree>
 8009572:	4647      	mov	r7, r8
 8009574:	106d      	asrs	r5, r5, #1
 8009576:	d00b      	beq.n	8009590 <__pow5mult+0xa0>
 8009578:	6820      	ldr	r0, [r4, #0]
 800957a:	b938      	cbnz	r0, 800958c <__pow5mult+0x9c>
 800957c:	4622      	mov	r2, r4
 800957e:	4621      	mov	r1, r4
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff ff11 	bl	80093a8 <__multiply>
 8009586:	6020      	str	r0, [r4, #0]
 8009588:	f8c0 9000 	str.w	r9, [r0]
 800958c:	4604      	mov	r4, r0
 800958e:	e7e4      	b.n	800955a <__pow5mult+0x6a>
 8009590:	4638      	mov	r0, r7
 8009592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009596:	bf00      	nop
 8009598:	0800b5a8 	.word	0x0800b5a8
 800959c:	0800b34e 	.word	0x0800b34e
 80095a0:	0800b454 	.word	0x0800b454

080095a4 <__lshift>:
 80095a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a8:	460c      	mov	r4, r1
 80095aa:	4607      	mov	r7, r0
 80095ac:	4691      	mov	r9, r2
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	6849      	ldr	r1, [r1, #4]
 80095b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095b6:	68a3      	ldr	r3, [r4, #8]
 80095b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095bc:	f108 0601 	add.w	r6, r8, #1
 80095c0:	42b3      	cmp	r3, r6
 80095c2:	db0b      	blt.n	80095dc <__lshift+0x38>
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff fd95 	bl	80090f4 <_Balloc>
 80095ca:	4605      	mov	r5, r0
 80095cc:	b948      	cbnz	r0, 80095e2 <__lshift+0x3e>
 80095ce:	4602      	mov	r2, r0
 80095d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80095d4:	4b27      	ldr	r3, [pc, #156]	; (8009674 <__lshift+0xd0>)
 80095d6:	4828      	ldr	r0, [pc, #160]	; (8009678 <__lshift+0xd4>)
 80095d8:	f000 fc8a 	bl	8009ef0 <__assert_func>
 80095dc:	3101      	adds	r1, #1
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	e7ee      	b.n	80095c0 <__lshift+0x1c>
 80095e2:	2300      	movs	r3, #0
 80095e4:	f100 0114 	add.w	r1, r0, #20
 80095e8:	f100 0210 	add.w	r2, r0, #16
 80095ec:	4618      	mov	r0, r3
 80095ee:	4553      	cmp	r3, sl
 80095f0:	db33      	blt.n	800965a <__lshift+0xb6>
 80095f2:	6920      	ldr	r0, [r4, #16]
 80095f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095f8:	f104 0314 	add.w	r3, r4, #20
 80095fc:	f019 091f 	ands.w	r9, r9, #31
 8009600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009604:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009608:	d02b      	beq.n	8009662 <__lshift+0xbe>
 800960a:	468a      	mov	sl, r1
 800960c:	2200      	movs	r2, #0
 800960e:	f1c9 0e20 	rsb	lr, r9, #32
 8009612:	6818      	ldr	r0, [r3, #0]
 8009614:	fa00 f009 	lsl.w	r0, r0, r9
 8009618:	4302      	orrs	r2, r0
 800961a:	f84a 2b04 	str.w	r2, [sl], #4
 800961e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009622:	459c      	cmp	ip, r3
 8009624:	fa22 f20e 	lsr.w	r2, r2, lr
 8009628:	d8f3      	bhi.n	8009612 <__lshift+0x6e>
 800962a:	ebac 0304 	sub.w	r3, ip, r4
 800962e:	3b15      	subs	r3, #21
 8009630:	f023 0303 	bic.w	r3, r3, #3
 8009634:	3304      	adds	r3, #4
 8009636:	f104 0015 	add.w	r0, r4, #21
 800963a:	4584      	cmp	ip, r0
 800963c:	bf38      	it	cc
 800963e:	2304      	movcc	r3, #4
 8009640:	50ca      	str	r2, [r1, r3]
 8009642:	b10a      	cbz	r2, 8009648 <__lshift+0xa4>
 8009644:	f108 0602 	add.w	r6, r8, #2
 8009648:	3e01      	subs	r6, #1
 800964a:	4638      	mov	r0, r7
 800964c:	4621      	mov	r1, r4
 800964e:	612e      	str	r6, [r5, #16]
 8009650:	f7ff fd90 	bl	8009174 <_Bfree>
 8009654:	4628      	mov	r0, r5
 8009656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965a:	f842 0f04 	str.w	r0, [r2, #4]!
 800965e:	3301      	adds	r3, #1
 8009660:	e7c5      	b.n	80095ee <__lshift+0x4a>
 8009662:	3904      	subs	r1, #4
 8009664:	f853 2b04 	ldr.w	r2, [r3], #4
 8009668:	459c      	cmp	ip, r3
 800966a:	f841 2f04 	str.w	r2, [r1, #4]!
 800966e:	d8f9      	bhi.n	8009664 <__lshift+0xc0>
 8009670:	e7ea      	b.n	8009648 <__lshift+0xa4>
 8009672:	bf00      	nop
 8009674:	0800b3c4 	.word	0x0800b3c4
 8009678:	0800b454 	.word	0x0800b454

0800967c <__mcmp>:
 800967c:	4603      	mov	r3, r0
 800967e:	690a      	ldr	r2, [r1, #16]
 8009680:	6900      	ldr	r0, [r0, #16]
 8009682:	b530      	push	{r4, r5, lr}
 8009684:	1a80      	subs	r0, r0, r2
 8009686:	d10d      	bne.n	80096a4 <__mcmp+0x28>
 8009688:	3314      	adds	r3, #20
 800968a:	3114      	adds	r1, #20
 800968c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009690:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009694:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009698:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800969c:	4295      	cmp	r5, r2
 800969e:	d002      	beq.n	80096a6 <__mcmp+0x2a>
 80096a0:	d304      	bcc.n	80096ac <__mcmp+0x30>
 80096a2:	2001      	movs	r0, #1
 80096a4:	bd30      	pop	{r4, r5, pc}
 80096a6:	42a3      	cmp	r3, r4
 80096a8:	d3f4      	bcc.n	8009694 <__mcmp+0x18>
 80096aa:	e7fb      	b.n	80096a4 <__mcmp+0x28>
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295
 80096b0:	e7f8      	b.n	80096a4 <__mcmp+0x28>
	...

080096b4 <__mdiff>:
 80096b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	460c      	mov	r4, r1
 80096ba:	4606      	mov	r6, r0
 80096bc:	4611      	mov	r1, r2
 80096be:	4620      	mov	r0, r4
 80096c0:	4692      	mov	sl, r2
 80096c2:	f7ff ffdb 	bl	800967c <__mcmp>
 80096c6:	1e05      	subs	r5, r0, #0
 80096c8:	d111      	bne.n	80096ee <__mdiff+0x3a>
 80096ca:	4629      	mov	r1, r5
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7ff fd11 	bl	80090f4 <_Balloc>
 80096d2:	4602      	mov	r2, r0
 80096d4:	b928      	cbnz	r0, 80096e2 <__mdiff+0x2e>
 80096d6:	f240 2132 	movw	r1, #562	; 0x232
 80096da:	4b3c      	ldr	r3, [pc, #240]	; (80097cc <__mdiff+0x118>)
 80096dc:	483c      	ldr	r0, [pc, #240]	; (80097d0 <__mdiff+0x11c>)
 80096de:	f000 fc07 	bl	8009ef0 <__assert_func>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096e8:	4610      	mov	r0, r2
 80096ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ee:	bfa4      	itt	ge
 80096f0:	4653      	movge	r3, sl
 80096f2:	46a2      	movge	sl, r4
 80096f4:	4630      	mov	r0, r6
 80096f6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80096fa:	bfa6      	itte	ge
 80096fc:	461c      	movge	r4, r3
 80096fe:	2500      	movge	r5, #0
 8009700:	2501      	movlt	r5, #1
 8009702:	f7ff fcf7 	bl	80090f4 <_Balloc>
 8009706:	4602      	mov	r2, r0
 8009708:	b918      	cbnz	r0, 8009712 <__mdiff+0x5e>
 800970a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800970e:	4b2f      	ldr	r3, [pc, #188]	; (80097cc <__mdiff+0x118>)
 8009710:	e7e4      	b.n	80096dc <__mdiff+0x28>
 8009712:	f100 0814 	add.w	r8, r0, #20
 8009716:	f8da 7010 	ldr.w	r7, [sl, #16]
 800971a:	60c5      	str	r5, [r0, #12]
 800971c:	f04f 0c00 	mov.w	ip, #0
 8009720:	f10a 0514 	add.w	r5, sl, #20
 8009724:	f10a 0010 	add.w	r0, sl, #16
 8009728:	46c2      	mov	sl, r8
 800972a:	6926      	ldr	r6, [r4, #16]
 800972c:	f104 0914 	add.w	r9, r4, #20
 8009730:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009734:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009738:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800973c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009740:	fa1f f18b 	uxth.w	r1, fp
 8009744:	4461      	add	r1, ip
 8009746:	fa1f fc83 	uxth.w	ip, r3
 800974a:	0c1b      	lsrs	r3, r3, #16
 800974c:	eba1 010c 	sub.w	r1, r1, ip
 8009750:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009754:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009758:	b289      	uxth	r1, r1
 800975a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800975e:	454e      	cmp	r6, r9
 8009760:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009764:	f84a 3b04 	str.w	r3, [sl], #4
 8009768:	d8e6      	bhi.n	8009738 <__mdiff+0x84>
 800976a:	1b33      	subs	r3, r6, r4
 800976c:	3b15      	subs	r3, #21
 800976e:	f023 0303 	bic.w	r3, r3, #3
 8009772:	3415      	adds	r4, #21
 8009774:	3304      	adds	r3, #4
 8009776:	42a6      	cmp	r6, r4
 8009778:	bf38      	it	cc
 800977a:	2304      	movcc	r3, #4
 800977c:	441d      	add	r5, r3
 800977e:	4443      	add	r3, r8
 8009780:	461e      	mov	r6, r3
 8009782:	462c      	mov	r4, r5
 8009784:	4574      	cmp	r4, lr
 8009786:	d30e      	bcc.n	80097a6 <__mdiff+0xf2>
 8009788:	f10e 0103 	add.w	r1, lr, #3
 800978c:	1b49      	subs	r1, r1, r5
 800978e:	f021 0103 	bic.w	r1, r1, #3
 8009792:	3d03      	subs	r5, #3
 8009794:	45ae      	cmp	lr, r5
 8009796:	bf38      	it	cc
 8009798:	2100      	movcc	r1, #0
 800979a:	4419      	add	r1, r3
 800979c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80097a0:	b18b      	cbz	r3, 80097c6 <__mdiff+0x112>
 80097a2:	6117      	str	r7, [r2, #16]
 80097a4:	e7a0      	b.n	80096e8 <__mdiff+0x34>
 80097a6:	f854 8b04 	ldr.w	r8, [r4], #4
 80097aa:	fa1f f188 	uxth.w	r1, r8
 80097ae:	4461      	add	r1, ip
 80097b0:	1408      	asrs	r0, r1, #16
 80097b2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80097b6:	b289      	uxth	r1, r1
 80097b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80097bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097c0:	f846 1b04 	str.w	r1, [r6], #4
 80097c4:	e7de      	b.n	8009784 <__mdiff+0xd0>
 80097c6:	3f01      	subs	r7, #1
 80097c8:	e7e8      	b.n	800979c <__mdiff+0xe8>
 80097ca:	bf00      	nop
 80097cc:	0800b3c4 	.word	0x0800b3c4
 80097d0:	0800b454 	.word	0x0800b454

080097d4 <__ulp>:
 80097d4:	4b11      	ldr	r3, [pc, #68]	; (800981c <__ulp+0x48>)
 80097d6:	400b      	ands	r3, r1
 80097d8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	dd02      	ble.n	80097e6 <__ulp+0x12>
 80097e0:	2000      	movs	r0, #0
 80097e2:	4619      	mov	r1, r3
 80097e4:	4770      	bx	lr
 80097e6:	425b      	negs	r3, r3
 80097e8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80097ec:	f04f 0000 	mov.w	r0, #0
 80097f0:	f04f 0100 	mov.w	r1, #0
 80097f4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80097f8:	da04      	bge.n	8009804 <__ulp+0x30>
 80097fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097fe:	fa43 f102 	asr.w	r1, r3, r2
 8009802:	4770      	bx	lr
 8009804:	f1a2 0314 	sub.w	r3, r2, #20
 8009808:	2b1e      	cmp	r3, #30
 800980a:	bfd6      	itet	le
 800980c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009810:	2301      	movgt	r3, #1
 8009812:	fa22 f303 	lsrle.w	r3, r2, r3
 8009816:	4618      	mov	r0, r3
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	7ff00000 	.word	0x7ff00000

08009820 <__b2d>:
 8009820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009824:	6907      	ldr	r7, [r0, #16]
 8009826:	f100 0914 	add.w	r9, r0, #20
 800982a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800982e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009832:	f1a7 0804 	sub.w	r8, r7, #4
 8009836:	4630      	mov	r0, r6
 8009838:	f7ff fd52 	bl	80092e0 <__hi0bits>
 800983c:	f1c0 0320 	rsb	r3, r0, #32
 8009840:	280a      	cmp	r0, #10
 8009842:	600b      	str	r3, [r1, #0]
 8009844:	491f      	ldr	r1, [pc, #124]	; (80098c4 <__b2d+0xa4>)
 8009846:	dc17      	bgt.n	8009878 <__b2d+0x58>
 8009848:	45c1      	cmp	r9, r8
 800984a:	bf28      	it	cs
 800984c:	2200      	movcs	r2, #0
 800984e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009852:	fa26 f30c 	lsr.w	r3, r6, ip
 8009856:	bf38      	it	cc
 8009858:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800985c:	ea43 0501 	orr.w	r5, r3, r1
 8009860:	f100 0315 	add.w	r3, r0, #21
 8009864:	fa06 f303 	lsl.w	r3, r6, r3
 8009868:	fa22 f20c 	lsr.w	r2, r2, ip
 800986c:	ea43 0402 	orr.w	r4, r3, r2
 8009870:	4620      	mov	r0, r4
 8009872:	4629      	mov	r1, r5
 8009874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009878:	45c1      	cmp	r9, r8
 800987a:	bf2e      	itee	cs
 800987c:	2200      	movcs	r2, #0
 800987e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009882:	f1a7 0808 	subcc.w	r8, r7, #8
 8009886:	f1b0 030b 	subs.w	r3, r0, #11
 800988a:	d016      	beq.n	80098ba <__b2d+0x9a>
 800988c:	f1c3 0720 	rsb	r7, r3, #32
 8009890:	fa22 f107 	lsr.w	r1, r2, r7
 8009894:	45c8      	cmp	r8, r9
 8009896:	fa06 f603 	lsl.w	r6, r6, r3
 800989a:	ea46 0601 	orr.w	r6, r6, r1
 800989e:	bf94      	ite	ls
 80098a0:	2100      	movls	r1, #0
 80098a2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80098a6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80098aa:	fa02 f003 	lsl.w	r0, r2, r3
 80098ae:	40f9      	lsrs	r1, r7
 80098b0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80098b4:	ea40 0401 	orr.w	r4, r0, r1
 80098b8:	e7da      	b.n	8009870 <__b2d+0x50>
 80098ba:	4614      	mov	r4, r2
 80098bc:	ea46 0501 	orr.w	r5, r6, r1
 80098c0:	e7d6      	b.n	8009870 <__b2d+0x50>
 80098c2:	bf00      	nop
 80098c4:	3ff00000 	.word	0x3ff00000

080098c8 <__d2b>:
 80098c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80098cc:	2101      	movs	r1, #1
 80098ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80098d2:	4690      	mov	r8, r2
 80098d4:	461d      	mov	r5, r3
 80098d6:	f7ff fc0d 	bl	80090f4 <_Balloc>
 80098da:	4604      	mov	r4, r0
 80098dc:	b930      	cbnz	r0, 80098ec <__d2b+0x24>
 80098de:	4602      	mov	r2, r0
 80098e0:	f240 310a 	movw	r1, #778	; 0x30a
 80098e4:	4b24      	ldr	r3, [pc, #144]	; (8009978 <__d2b+0xb0>)
 80098e6:	4825      	ldr	r0, [pc, #148]	; (800997c <__d2b+0xb4>)
 80098e8:	f000 fb02 	bl	8009ef0 <__assert_func>
 80098ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80098f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80098f4:	bb2d      	cbnz	r5, 8009942 <__d2b+0x7a>
 80098f6:	9301      	str	r3, [sp, #4]
 80098f8:	f1b8 0300 	subs.w	r3, r8, #0
 80098fc:	d026      	beq.n	800994c <__d2b+0x84>
 80098fe:	4668      	mov	r0, sp
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	f7ff fd0d 	bl	8009320 <__lo0bits>
 8009906:	9900      	ldr	r1, [sp, #0]
 8009908:	b1f0      	cbz	r0, 8009948 <__d2b+0x80>
 800990a:	9a01      	ldr	r2, [sp, #4]
 800990c:	f1c0 0320 	rsb	r3, r0, #32
 8009910:	fa02 f303 	lsl.w	r3, r2, r3
 8009914:	430b      	orrs	r3, r1
 8009916:	40c2      	lsrs	r2, r0
 8009918:	6163      	str	r3, [r4, #20]
 800991a:	9201      	str	r2, [sp, #4]
 800991c:	9b01      	ldr	r3, [sp, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	bf14      	ite	ne
 8009922:	2102      	movne	r1, #2
 8009924:	2101      	moveq	r1, #1
 8009926:	61a3      	str	r3, [r4, #24]
 8009928:	6121      	str	r1, [r4, #16]
 800992a:	b1c5      	cbz	r5, 800995e <__d2b+0x96>
 800992c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009930:	4405      	add	r5, r0
 8009932:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009936:	603d      	str	r5, [r7, #0]
 8009938:	6030      	str	r0, [r6, #0]
 800993a:	4620      	mov	r0, r4
 800993c:	b002      	add	sp, #8
 800993e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009946:	e7d6      	b.n	80098f6 <__d2b+0x2e>
 8009948:	6161      	str	r1, [r4, #20]
 800994a:	e7e7      	b.n	800991c <__d2b+0x54>
 800994c:	a801      	add	r0, sp, #4
 800994e:	f7ff fce7 	bl	8009320 <__lo0bits>
 8009952:	2101      	movs	r1, #1
 8009954:	9b01      	ldr	r3, [sp, #4]
 8009956:	6121      	str	r1, [r4, #16]
 8009958:	6163      	str	r3, [r4, #20]
 800995a:	3020      	adds	r0, #32
 800995c:	e7e5      	b.n	800992a <__d2b+0x62>
 800995e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009962:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009966:	6038      	str	r0, [r7, #0]
 8009968:	6918      	ldr	r0, [r3, #16]
 800996a:	f7ff fcb9 	bl	80092e0 <__hi0bits>
 800996e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009972:	6031      	str	r1, [r6, #0]
 8009974:	e7e1      	b.n	800993a <__d2b+0x72>
 8009976:	bf00      	nop
 8009978:	0800b3c4 	.word	0x0800b3c4
 800997c:	0800b454 	.word	0x0800b454

08009980 <__ratio>:
 8009980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	4688      	mov	r8, r1
 8009986:	4669      	mov	r1, sp
 8009988:	4681      	mov	r9, r0
 800998a:	f7ff ff49 	bl	8009820 <__b2d>
 800998e:	460f      	mov	r7, r1
 8009990:	4604      	mov	r4, r0
 8009992:	460d      	mov	r5, r1
 8009994:	4640      	mov	r0, r8
 8009996:	a901      	add	r1, sp, #4
 8009998:	f7ff ff42 	bl	8009820 <__b2d>
 800999c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80099a4:	468b      	mov	fp, r1
 80099a6:	eba3 0c02 	sub.w	ip, r3, r2
 80099aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099ae:	1a9b      	subs	r3, r3, r2
 80099b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	bfd5      	itete	le
 80099b8:	460a      	movle	r2, r1
 80099ba:	462a      	movgt	r2, r5
 80099bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80099c0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80099c4:	bfd8      	it	le
 80099c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80099ca:	465b      	mov	r3, fp
 80099cc:	4602      	mov	r2, r0
 80099ce:	4639      	mov	r1, r7
 80099d0:	4620      	mov	r0, r4
 80099d2:	f7f6 feab 	bl	800072c <__aeabi_ddiv>
 80099d6:	b003      	add	sp, #12
 80099d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099dc <__copybits>:
 80099dc:	3901      	subs	r1, #1
 80099de:	b570      	push	{r4, r5, r6, lr}
 80099e0:	1149      	asrs	r1, r1, #5
 80099e2:	6914      	ldr	r4, [r2, #16]
 80099e4:	3101      	adds	r1, #1
 80099e6:	f102 0314 	add.w	r3, r2, #20
 80099ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099f2:	1f05      	subs	r5, r0, #4
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	d30c      	bcc.n	8009a12 <__copybits+0x36>
 80099f8:	1aa3      	subs	r3, r4, r2
 80099fa:	3b11      	subs	r3, #17
 80099fc:	f023 0303 	bic.w	r3, r3, #3
 8009a00:	3211      	adds	r2, #17
 8009a02:	42a2      	cmp	r2, r4
 8009a04:	bf88      	it	hi
 8009a06:	2300      	movhi	r3, #0
 8009a08:	4418      	add	r0, r3
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4288      	cmp	r0, r1
 8009a0e:	d305      	bcc.n	8009a1c <__copybits+0x40>
 8009a10:	bd70      	pop	{r4, r5, r6, pc}
 8009a12:	f853 6b04 	ldr.w	r6, [r3], #4
 8009a16:	f845 6f04 	str.w	r6, [r5, #4]!
 8009a1a:	e7eb      	b.n	80099f4 <__copybits+0x18>
 8009a1c:	f840 3b04 	str.w	r3, [r0], #4
 8009a20:	e7f4      	b.n	8009a0c <__copybits+0x30>

08009a22 <__any_on>:
 8009a22:	f100 0214 	add.w	r2, r0, #20
 8009a26:	6900      	ldr	r0, [r0, #16]
 8009a28:	114b      	asrs	r3, r1, #5
 8009a2a:	4298      	cmp	r0, r3
 8009a2c:	b510      	push	{r4, lr}
 8009a2e:	db11      	blt.n	8009a54 <__any_on+0x32>
 8009a30:	dd0a      	ble.n	8009a48 <__any_on+0x26>
 8009a32:	f011 011f 	ands.w	r1, r1, #31
 8009a36:	d007      	beq.n	8009a48 <__any_on+0x26>
 8009a38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a3c:	fa24 f001 	lsr.w	r0, r4, r1
 8009a40:	fa00 f101 	lsl.w	r1, r0, r1
 8009a44:	428c      	cmp	r4, r1
 8009a46:	d10b      	bne.n	8009a60 <__any_on+0x3e>
 8009a48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d803      	bhi.n	8009a58 <__any_on+0x36>
 8009a50:	2000      	movs	r0, #0
 8009a52:	bd10      	pop	{r4, pc}
 8009a54:	4603      	mov	r3, r0
 8009a56:	e7f7      	b.n	8009a48 <__any_on+0x26>
 8009a58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a5c:	2900      	cmp	r1, #0
 8009a5e:	d0f5      	beq.n	8009a4c <__any_on+0x2a>
 8009a60:	2001      	movs	r0, #1
 8009a62:	e7f6      	b.n	8009a52 <__any_on+0x30>

08009a64 <_calloc_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	fb02 f501 	mul.w	r5, r2, r1
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f000 f854 	bl	8009b18 <_malloc_r>
 8009a70:	4604      	mov	r4, r0
 8009a72:	b118      	cbz	r0, 8009a7c <_calloc_r+0x18>
 8009a74:	462a      	mov	r2, r5
 8009a76:	2100      	movs	r1, #0
 8009a78:	f7fc fbdc 	bl	8006234 <memset>
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}

08009a80 <_free_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4605      	mov	r5, r0
 8009a84:	2900      	cmp	r1, #0
 8009a86:	d043      	beq.n	8009b10 <_free_r+0x90>
 8009a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a8c:	1f0c      	subs	r4, r1, #4
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	bfb8      	it	lt
 8009a92:	18e4      	addlt	r4, r4, r3
 8009a94:	f000 fa76 	bl	8009f84 <__malloc_lock>
 8009a98:	4a1e      	ldr	r2, [pc, #120]	; (8009b14 <_free_r+0x94>)
 8009a9a:	6813      	ldr	r3, [r2, #0]
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	b933      	cbnz	r3, 8009aae <_free_r+0x2e>
 8009aa0:	6063      	str	r3, [r4, #4]
 8009aa2:	6014      	str	r4, [r2, #0]
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aaa:	f000 ba71 	b.w	8009f90 <__malloc_unlock>
 8009aae:	42a3      	cmp	r3, r4
 8009ab0:	d90a      	bls.n	8009ac8 <_free_r+0x48>
 8009ab2:	6821      	ldr	r1, [r4, #0]
 8009ab4:	1862      	adds	r2, r4, r1
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	bf01      	itttt	eq
 8009aba:	681a      	ldreq	r2, [r3, #0]
 8009abc:	685b      	ldreq	r3, [r3, #4]
 8009abe:	1852      	addeq	r2, r2, r1
 8009ac0:	6022      	streq	r2, [r4, #0]
 8009ac2:	6063      	str	r3, [r4, #4]
 8009ac4:	6004      	str	r4, [r0, #0]
 8009ac6:	e7ed      	b.n	8009aa4 <_free_r+0x24>
 8009ac8:	461a      	mov	r2, r3
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	b10b      	cbz	r3, 8009ad2 <_free_r+0x52>
 8009ace:	42a3      	cmp	r3, r4
 8009ad0:	d9fa      	bls.n	8009ac8 <_free_r+0x48>
 8009ad2:	6811      	ldr	r1, [r2, #0]
 8009ad4:	1850      	adds	r0, r2, r1
 8009ad6:	42a0      	cmp	r0, r4
 8009ad8:	d10b      	bne.n	8009af2 <_free_r+0x72>
 8009ada:	6820      	ldr	r0, [r4, #0]
 8009adc:	4401      	add	r1, r0
 8009ade:	1850      	adds	r0, r2, r1
 8009ae0:	4283      	cmp	r3, r0
 8009ae2:	6011      	str	r1, [r2, #0]
 8009ae4:	d1de      	bne.n	8009aa4 <_free_r+0x24>
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	4401      	add	r1, r0
 8009aec:	6011      	str	r1, [r2, #0]
 8009aee:	6053      	str	r3, [r2, #4]
 8009af0:	e7d8      	b.n	8009aa4 <_free_r+0x24>
 8009af2:	d902      	bls.n	8009afa <_free_r+0x7a>
 8009af4:	230c      	movs	r3, #12
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	e7d4      	b.n	8009aa4 <_free_r+0x24>
 8009afa:	6820      	ldr	r0, [r4, #0]
 8009afc:	1821      	adds	r1, r4, r0
 8009afe:	428b      	cmp	r3, r1
 8009b00:	bf01      	itttt	eq
 8009b02:	6819      	ldreq	r1, [r3, #0]
 8009b04:	685b      	ldreq	r3, [r3, #4]
 8009b06:	1809      	addeq	r1, r1, r0
 8009b08:	6021      	streq	r1, [r4, #0]
 8009b0a:	6063      	str	r3, [r4, #4]
 8009b0c:	6054      	str	r4, [r2, #4]
 8009b0e:	e7c9      	b.n	8009aa4 <_free_r+0x24>
 8009b10:	bd38      	pop	{r3, r4, r5, pc}
 8009b12:	bf00      	nop
 8009b14:	20000264 	.word	0x20000264

08009b18 <_malloc_r>:
 8009b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1a:	1ccd      	adds	r5, r1, #3
 8009b1c:	f025 0503 	bic.w	r5, r5, #3
 8009b20:	3508      	adds	r5, #8
 8009b22:	2d0c      	cmp	r5, #12
 8009b24:	bf38      	it	cc
 8009b26:	250c      	movcc	r5, #12
 8009b28:	2d00      	cmp	r5, #0
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	db01      	blt.n	8009b32 <_malloc_r+0x1a>
 8009b2e:	42a9      	cmp	r1, r5
 8009b30:	d903      	bls.n	8009b3a <_malloc_r+0x22>
 8009b32:	230c      	movs	r3, #12
 8009b34:	6033      	str	r3, [r6, #0]
 8009b36:	2000      	movs	r0, #0
 8009b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3a:	f000 fa23 	bl	8009f84 <__malloc_lock>
 8009b3e:	4921      	ldr	r1, [pc, #132]	; (8009bc4 <_malloc_r+0xac>)
 8009b40:	680a      	ldr	r2, [r1, #0]
 8009b42:	4614      	mov	r4, r2
 8009b44:	b99c      	cbnz	r4, 8009b6e <_malloc_r+0x56>
 8009b46:	4f20      	ldr	r7, [pc, #128]	; (8009bc8 <_malloc_r+0xb0>)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	b923      	cbnz	r3, 8009b56 <_malloc_r+0x3e>
 8009b4c:	4621      	mov	r1, r4
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f000 f99e 	bl	8009e90 <_sbrk_r>
 8009b54:	6038      	str	r0, [r7, #0]
 8009b56:	4629      	mov	r1, r5
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f000 f999 	bl	8009e90 <_sbrk_r>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d123      	bne.n	8009baa <_malloc_r+0x92>
 8009b62:	230c      	movs	r3, #12
 8009b64:	4630      	mov	r0, r6
 8009b66:	6033      	str	r3, [r6, #0]
 8009b68:	f000 fa12 	bl	8009f90 <__malloc_unlock>
 8009b6c:	e7e3      	b.n	8009b36 <_malloc_r+0x1e>
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	1b5b      	subs	r3, r3, r5
 8009b72:	d417      	bmi.n	8009ba4 <_malloc_r+0x8c>
 8009b74:	2b0b      	cmp	r3, #11
 8009b76:	d903      	bls.n	8009b80 <_malloc_r+0x68>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	441c      	add	r4, r3
 8009b7c:	6025      	str	r5, [r4, #0]
 8009b7e:	e004      	b.n	8009b8a <_malloc_r+0x72>
 8009b80:	6863      	ldr	r3, [r4, #4]
 8009b82:	42a2      	cmp	r2, r4
 8009b84:	bf0c      	ite	eq
 8009b86:	600b      	streq	r3, [r1, #0]
 8009b88:	6053      	strne	r3, [r2, #4]
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f000 fa00 	bl	8009f90 <__malloc_unlock>
 8009b90:	f104 000b 	add.w	r0, r4, #11
 8009b94:	1d23      	adds	r3, r4, #4
 8009b96:	f020 0007 	bic.w	r0, r0, #7
 8009b9a:	1ac2      	subs	r2, r0, r3
 8009b9c:	d0cc      	beq.n	8009b38 <_malloc_r+0x20>
 8009b9e:	1a1b      	subs	r3, r3, r0
 8009ba0:	50a3      	str	r3, [r4, r2]
 8009ba2:	e7c9      	b.n	8009b38 <_malloc_r+0x20>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	6864      	ldr	r4, [r4, #4]
 8009ba8:	e7cc      	b.n	8009b44 <_malloc_r+0x2c>
 8009baa:	1cc4      	adds	r4, r0, #3
 8009bac:	f024 0403 	bic.w	r4, r4, #3
 8009bb0:	42a0      	cmp	r0, r4
 8009bb2:	d0e3      	beq.n	8009b7c <_malloc_r+0x64>
 8009bb4:	1a21      	subs	r1, r4, r0
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f000 f96a 	bl	8009e90 <_sbrk_r>
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d1dd      	bne.n	8009b7c <_malloc_r+0x64>
 8009bc0:	e7cf      	b.n	8009b62 <_malloc_r+0x4a>
 8009bc2:	bf00      	nop
 8009bc4:	20000264 	.word	0x20000264
 8009bc8:	20000268 	.word	0x20000268

08009bcc <__ssputs_r>:
 8009bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd0:	688e      	ldr	r6, [r1, #8]
 8009bd2:	4682      	mov	sl, r0
 8009bd4:	429e      	cmp	r6, r3
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	4690      	mov	r8, r2
 8009bda:	461f      	mov	r7, r3
 8009bdc:	d838      	bhi.n	8009c50 <__ssputs_r+0x84>
 8009bde:	898a      	ldrh	r2, [r1, #12]
 8009be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009be4:	d032      	beq.n	8009c4c <__ssputs_r+0x80>
 8009be6:	6825      	ldr	r5, [r4, #0]
 8009be8:	6909      	ldr	r1, [r1, #16]
 8009bea:	3301      	adds	r3, #1
 8009bec:	eba5 0901 	sub.w	r9, r5, r1
 8009bf0:	6965      	ldr	r5, [r4, #20]
 8009bf2:	444b      	add	r3, r9
 8009bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bfc:	106d      	asrs	r5, r5, #1
 8009bfe:	429d      	cmp	r5, r3
 8009c00:	bf38      	it	cc
 8009c02:	461d      	movcc	r5, r3
 8009c04:	0553      	lsls	r3, r2, #21
 8009c06:	d531      	bpl.n	8009c6c <__ssputs_r+0xa0>
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7ff ff85 	bl	8009b18 <_malloc_r>
 8009c0e:	4606      	mov	r6, r0
 8009c10:	b950      	cbnz	r0, 8009c28 <__ssputs_r+0x5c>
 8009c12:	230c      	movs	r3, #12
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	f8ca 3000 	str.w	r3, [sl]
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c28:	464a      	mov	r2, r9
 8009c2a:	6921      	ldr	r1, [r4, #16]
 8009c2c:	f7ff fa54 	bl	80090d8 <memcpy>
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	6126      	str	r6, [r4, #16]
 8009c3e:	444e      	add	r6, r9
 8009c40:	6026      	str	r6, [r4, #0]
 8009c42:	463e      	mov	r6, r7
 8009c44:	6165      	str	r5, [r4, #20]
 8009c46:	eba5 0509 	sub.w	r5, r5, r9
 8009c4a:	60a5      	str	r5, [r4, #8]
 8009c4c:	42be      	cmp	r6, r7
 8009c4e:	d900      	bls.n	8009c52 <__ssputs_r+0x86>
 8009c50:	463e      	mov	r6, r7
 8009c52:	4632      	mov	r2, r6
 8009c54:	4641      	mov	r1, r8
 8009c56:	6820      	ldr	r0, [r4, #0]
 8009c58:	f000 f97a 	bl	8009f50 <memmove>
 8009c5c:	68a3      	ldr	r3, [r4, #8]
 8009c5e:	6822      	ldr	r2, [r4, #0]
 8009c60:	1b9b      	subs	r3, r3, r6
 8009c62:	4432      	add	r2, r6
 8009c64:	2000      	movs	r0, #0
 8009c66:	60a3      	str	r3, [r4, #8]
 8009c68:	6022      	str	r2, [r4, #0]
 8009c6a:	e7db      	b.n	8009c24 <__ssputs_r+0x58>
 8009c6c:	462a      	mov	r2, r5
 8009c6e:	f000 f995 	bl	8009f9c <_realloc_r>
 8009c72:	4606      	mov	r6, r0
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d1e1      	bne.n	8009c3c <__ssputs_r+0x70>
 8009c78:	4650      	mov	r0, sl
 8009c7a:	6921      	ldr	r1, [r4, #16]
 8009c7c:	f7ff ff00 	bl	8009a80 <_free_r>
 8009c80:	e7c7      	b.n	8009c12 <__ssputs_r+0x46>
	...

08009c84 <_svfiprintf_r>:
 8009c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c88:	4698      	mov	r8, r3
 8009c8a:	898b      	ldrh	r3, [r1, #12]
 8009c8c:	4607      	mov	r7, r0
 8009c8e:	061b      	lsls	r3, r3, #24
 8009c90:	460d      	mov	r5, r1
 8009c92:	4614      	mov	r4, r2
 8009c94:	b09d      	sub	sp, #116	; 0x74
 8009c96:	d50e      	bpl.n	8009cb6 <_svfiprintf_r+0x32>
 8009c98:	690b      	ldr	r3, [r1, #16]
 8009c9a:	b963      	cbnz	r3, 8009cb6 <_svfiprintf_r+0x32>
 8009c9c:	2140      	movs	r1, #64	; 0x40
 8009c9e:	f7ff ff3b 	bl	8009b18 <_malloc_r>
 8009ca2:	6028      	str	r0, [r5, #0]
 8009ca4:	6128      	str	r0, [r5, #16]
 8009ca6:	b920      	cbnz	r0, 8009cb2 <_svfiprintf_r+0x2e>
 8009ca8:	230c      	movs	r3, #12
 8009caa:	603b      	str	r3, [r7, #0]
 8009cac:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb0:	e0d1      	b.n	8009e56 <_svfiprintf_r+0x1d2>
 8009cb2:	2340      	movs	r3, #64	; 0x40
 8009cb4:	616b      	str	r3, [r5, #20]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cba:	2320      	movs	r3, #32
 8009cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cc0:	2330      	movs	r3, #48	; 0x30
 8009cc2:	f04f 0901 	mov.w	r9, #1
 8009cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e70 <_svfiprintf_r+0x1ec>
 8009cce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cd2:	4623      	mov	r3, r4
 8009cd4:	469a      	mov	sl, r3
 8009cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cda:	b10a      	cbz	r2, 8009ce0 <_svfiprintf_r+0x5c>
 8009cdc:	2a25      	cmp	r2, #37	; 0x25
 8009cde:	d1f9      	bne.n	8009cd4 <_svfiprintf_r+0x50>
 8009ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ce4:	d00b      	beq.n	8009cfe <_svfiprintf_r+0x7a>
 8009ce6:	465b      	mov	r3, fp
 8009ce8:	4622      	mov	r2, r4
 8009cea:	4629      	mov	r1, r5
 8009cec:	4638      	mov	r0, r7
 8009cee:	f7ff ff6d 	bl	8009bcc <__ssputs_r>
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	f000 80aa 	beq.w	8009e4c <_svfiprintf_r+0x1c8>
 8009cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cfa:	445a      	add	r2, fp
 8009cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8009cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 80a2 	beq.w	8009e4c <_svfiprintf_r+0x1c8>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d12:	f10a 0a01 	add.w	sl, sl, #1
 8009d16:	9304      	str	r3, [sp, #16]
 8009d18:	9307      	str	r3, [sp, #28]
 8009d1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d20:	4654      	mov	r4, sl
 8009d22:	2205      	movs	r2, #5
 8009d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d28:	4851      	ldr	r0, [pc, #324]	; (8009e70 <_svfiprintf_r+0x1ec>)
 8009d2a:	f7ff f9c7 	bl	80090bc <memchr>
 8009d2e:	9a04      	ldr	r2, [sp, #16]
 8009d30:	b9d8      	cbnz	r0, 8009d6a <_svfiprintf_r+0xe6>
 8009d32:	06d0      	lsls	r0, r2, #27
 8009d34:	bf44      	itt	mi
 8009d36:	2320      	movmi	r3, #32
 8009d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d3c:	0711      	lsls	r1, r2, #28
 8009d3e:	bf44      	itt	mi
 8009d40:	232b      	movmi	r3, #43	; 0x2b
 8009d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d46:	f89a 3000 	ldrb.w	r3, [sl]
 8009d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d4c:	d015      	beq.n	8009d7a <_svfiprintf_r+0xf6>
 8009d4e:	4654      	mov	r4, sl
 8009d50:	2000      	movs	r0, #0
 8009d52:	f04f 0c0a 	mov.w	ip, #10
 8009d56:	9a07      	ldr	r2, [sp, #28]
 8009d58:	4621      	mov	r1, r4
 8009d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d5e:	3b30      	subs	r3, #48	; 0x30
 8009d60:	2b09      	cmp	r3, #9
 8009d62:	d94e      	bls.n	8009e02 <_svfiprintf_r+0x17e>
 8009d64:	b1b0      	cbz	r0, 8009d94 <_svfiprintf_r+0x110>
 8009d66:	9207      	str	r2, [sp, #28]
 8009d68:	e014      	b.n	8009d94 <_svfiprintf_r+0x110>
 8009d6a:	eba0 0308 	sub.w	r3, r0, r8
 8009d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8009d72:	4313      	orrs	r3, r2
 8009d74:	46a2      	mov	sl, r4
 8009d76:	9304      	str	r3, [sp, #16]
 8009d78:	e7d2      	b.n	8009d20 <_svfiprintf_r+0x9c>
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	1d19      	adds	r1, r3, #4
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	9103      	str	r1, [sp, #12]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bfbb      	ittet	lt
 8009d86:	425b      	neglt	r3, r3
 8009d88:	f042 0202 	orrlt.w	r2, r2, #2
 8009d8c:	9307      	strge	r3, [sp, #28]
 8009d8e:	9307      	strlt	r3, [sp, #28]
 8009d90:	bfb8      	it	lt
 8009d92:	9204      	strlt	r2, [sp, #16]
 8009d94:	7823      	ldrb	r3, [r4, #0]
 8009d96:	2b2e      	cmp	r3, #46	; 0x2e
 8009d98:	d10c      	bne.n	8009db4 <_svfiprintf_r+0x130>
 8009d9a:	7863      	ldrb	r3, [r4, #1]
 8009d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d9e:	d135      	bne.n	8009e0c <_svfiprintf_r+0x188>
 8009da0:	9b03      	ldr	r3, [sp, #12]
 8009da2:	3402      	adds	r4, #2
 8009da4:	1d1a      	adds	r2, r3, #4
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	9203      	str	r2, [sp, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	bfb8      	it	lt
 8009dae:	f04f 33ff 	movlt.w	r3, #4294967295
 8009db2:	9305      	str	r3, [sp, #20]
 8009db4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e80 <_svfiprintf_r+0x1fc>
 8009db8:	2203      	movs	r2, #3
 8009dba:	4650      	mov	r0, sl
 8009dbc:	7821      	ldrb	r1, [r4, #0]
 8009dbe:	f7ff f97d 	bl	80090bc <memchr>
 8009dc2:	b140      	cbz	r0, 8009dd6 <_svfiprintf_r+0x152>
 8009dc4:	2340      	movs	r3, #64	; 0x40
 8009dc6:	eba0 000a 	sub.w	r0, r0, sl
 8009dca:	fa03 f000 	lsl.w	r0, r3, r0
 8009dce:	9b04      	ldr	r3, [sp, #16]
 8009dd0:	3401      	adds	r4, #1
 8009dd2:	4303      	orrs	r3, r0
 8009dd4:	9304      	str	r3, [sp, #16]
 8009dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dda:	2206      	movs	r2, #6
 8009ddc:	4825      	ldr	r0, [pc, #148]	; (8009e74 <_svfiprintf_r+0x1f0>)
 8009dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009de2:	f7ff f96b 	bl	80090bc <memchr>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d038      	beq.n	8009e5c <_svfiprintf_r+0x1d8>
 8009dea:	4b23      	ldr	r3, [pc, #140]	; (8009e78 <_svfiprintf_r+0x1f4>)
 8009dec:	bb1b      	cbnz	r3, 8009e36 <_svfiprintf_r+0x1b2>
 8009dee:	9b03      	ldr	r3, [sp, #12]
 8009df0:	3307      	adds	r3, #7
 8009df2:	f023 0307 	bic.w	r3, r3, #7
 8009df6:	3308      	adds	r3, #8
 8009df8:	9303      	str	r3, [sp, #12]
 8009dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfc:	4433      	add	r3, r6
 8009dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009e00:	e767      	b.n	8009cd2 <_svfiprintf_r+0x4e>
 8009e02:	460c      	mov	r4, r1
 8009e04:	2001      	movs	r0, #1
 8009e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e0a:	e7a5      	b.n	8009d58 <_svfiprintf_r+0xd4>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f04f 0c0a 	mov.w	ip, #10
 8009e12:	4619      	mov	r1, r3
 8009e14:	3401      	adds	r4, #1
 8009e16:	9305      	str	r3, [sp, #20]
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e1e:	3a30      	subs	r2, #48	; 0x30
 8009e20:	2a09      	cmp	r2, #9
 8009e22:	d903      	bls.n	8009e2c <_svfiprintf_r+0x1a8>
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d0c5      	beq.n	8009db4 <_svfiprintf_r+0x130>
 8009e28:	9105      	str	r1, [sp, #20]
 8009e2a:	e7c3      	b.n	8009db4 <_svfiprintf_r+0x130>
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	2301      	movs	r3, #1
 8009e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e34:	e7f0      	b.n	8009e18 <_svfiprintf_r+0x194>
 8009e36:	ab03      	add	r3, sp, #12
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <_svfiprintf_r+0x1f8>)
 8009e40:	a904      	add	r1, sp, #16
 8009e42:	f7fc fa9d 	bl	8006380 <_printf_float>
 8009e46:	1c42      	adds	r2, r0, #1
 8009e48:	4606      	mov	r6, r0
 8009e4a:	d1d6      	bne.n	8009dfa <_svfiprintf_r+0x176>
 8009e4c:	89ab      	ldrh	r3, [r5, #12]
 8009e4e:	065b      	lsls	r3, r3, #25
 8009e50:	f53f af2c 	bmi.w	8009cac <_svfiprintf_r+0x28>
 8009e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e56:	b01d      	add	sp, #116	; 0x74
 8009e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5c:	ab03      	add	r3, sp, #12
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	462a      	mov	r2, r5
 8009e62:	4638      	mov	r0, r7
 8009e64:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <_svfiprintf_r+0x1f8>)
 8009e66:	a904      	add	r1, sp, #16
 8009e68:	f7fc fd26 	bl	80068b8 <_printf_i>
 8009e6c:	e7eb      	b.n	8009e46 <_svfiprintf_r+0x1c2>
 8009e6e:	bf00      	nop
 8009e70:	0800b5b4 	.word	0x0800b5b4
 8009e74:	0800b5be 	.word	0x0800b5be
 8009e78:	08006381 	.word	0x08006381
 8009e7c:	08009bcd 	.word	0x08009bcd
 8009e80:	0800b5ba 	.word	0x0800b5ba

08009e84 <nan>:
 8009e84:	2000      	movs	r0, #0
 8009e86:	4901      	ldr	r1, [pc, #4]	; (8009e8c <nan+0x8>)
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	7ff80000 	.word	0x7ff80000

08009e90 <_sbrk_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	2300      	movs	r3, #0
 8009e94:	4d05      	ldr	r5, [pc, #20]	; (8009eac <_sbrk_r+0x1c>)
 8009e96:	4604      	mov	r4, r0
 8009e98:	4608      	mov	r0, r1
 8009e9a:	602b      	str	r3, [r5, #0]
 8009e9c:	f7f7 fed6 	bl	8001c4c <_sbrk>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_sbrk_r+0x1a>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_sbrk_r+0x1a>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20000844 	.word	0x20000844

08009eb0 <strncmp>:
 8009eb0:	b510      	push	{r4, lr}
 8009eb2:	b16a      	cbz	r2, 8009ed0 <strncmp+0x20>
 8009eb4:	3901      	subs	r1, #1
 8009eb6:	1884      	adds	r4, r0, r2
 8009eb8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009ebc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d103      	bne.n	8009ecc <strncmp+0x1c>
 8009ec4:	42a0      	cmp	r0, r4
 8009ec6:	d001      	beq.n	8009ecc <strncmp+0x1c>
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1f5      	bne.n	8009eb8 <strncmp+0x8>
 8009ecc:	1a98      	subs	r0, r3, r2
 8009ece:	bd10      	pop	{r4, pc}
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	e7fc      	b.n	8009ece <strncmp+0x1e>

08009ed4 <__ascii_wctomb>:
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	4608      	mov	r0, r1
 8009ed8:	b141      	cbz	r1, 8009eec <__ascii_wctomb+0x18>
 8009eda:	2aff      	cmp	r2, #255	; 0xff
 8009edc:	d904      	bls.n	8009ee8 <__ascii_wctomb+0x14>
 8009ede:	228a      	movs	r2, #138	; 0x8a
 8009ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	4770      	bx	lr
 8009ee8:	2001      	movs	r0, #1
 8009eea:	700a      	strb	r2, [r1, #0]
 8009eec:	4770      	bx	lr
	...

08009ef0 <__assert_func>:
 8009ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ef2:	4614      	mov	r4, r2
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <__assert_func+0x2c>)
 8009ef8:	4605      	mov	r5, r0
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68d8      	ldr	r0, [r3, #12]
 8009efe:	b14c      	cbz	r4, 8009f14 <__assert_func+0x24>
 8009f00:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <__assert_func+0x30>)
 8009f02:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f06:	9100      	str	r1, [sp, #0]
 8009f08:	462b      	mov	r3, r5
 8009f0a:	4906      	ldr	r1, [pc, #24]	; (8009f24 <__assert_func+0x34>)
 8009f0c:	f000 f80e 	bl	8009f2c <fiprintf>
 8009f10:	f000 fa82 	bl	800a418 <abort>
 8009f14:	4b04      	ldr	r3, [pc, #16]	; (8009f28 <__assert_func+0x38>)
 8009f16:	461c      	mov	r4, r3
 8009f18:	e7f3      	b.n	8009f02 <__assert_func+0x12>
 8009f1a:	bf00      	nop
 8009f1c:	20000014 	.word	0x20000014
 8009f20:	0800b5c5 	.word	0x0800b5c5
 8009f24:	0800b5d2 	.word	0x0800b5d2
 8009f28:	0800b600 	.word	0x0800b600

08009f2c <fiprintf>:
 8009f2c:	b40e      	push	{r1, r2, r3}
 8009f2e:	b503      	push	{r0, r1, lr}
 8009f30:	4601      	mov	r1, r0
 8009f32:	ab03      	add	r3, sp, #12
 8009f34:	4805      	ldr	r0, [pc, #20]	; (8009f4c <fiprintf+0x20>)
 8009f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f3a:	6800      	ldr	r0, [r0, #0]
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	f000 f87b 	bl	800a038 <_vfiprintf_r>
 8009f42:	b002      	add	sp, #8
 8009f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f48:	b003      	add	sp, #12
 8009f4a:	4770      	bx	lr
 8009f4c:	20000014 	.word	0x20000014

08009f50 <memmove>:
 8009f50:	4288      	cmp	r0, r1
 8009f52:	b510      	push	{r4, lr}
 8009f54:	eb01 0402 	add.w	r4, r1, r2
 8009f58:	d902      	bls.n	8009f60 <memmove+0x10>
 8009f5a:	4284      	cmp	r4, r0
 8009f5c:	4623      	mov	r3, r4
 8009f5e:	d807      	bhi.n	8009f70 <memmove+0x20>
 8009f60:	1e43      	subs	r3, r0, #1
 8009f62:	42a1      	cmp	r1, r4
 8009f64:	d008      	beq.n	8009f78 <memmove+0x28>
 8009f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f6e:	e7f8      	b.n	8009f62 <memmove+0x12>
 8009f70:	4601      	mov	r1, r0
 8009f72:	4402      	add	r2, r0
 8009f74:	428a      	cmp	r2, r1
 8009f76:	d100      	bne.n	8009f7a <memmove+0x2a>
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f82:	e7f7      	b.n	8009f74 <memmove+0x24>

08009f84 <__malloc_lock>:
 8009f84:	4801      	ldr	r0, [pc, #4]	; (8009f8c <__malloc_lock+0x8>)
 8009f86:	f000 bc07 	b.w	800a798 <__retarget_lock_acquire_recursive>
 8009f8a:	bf00      	nop
 8009f8c:	2000084c 	.word	0x2000084c

08009f90 <__malloc_unlock>:
 8009f90:	4801      	ldr	r0, [pc, #4]	; (8009f98 <__malloc_unlock+0x8>)
 8009f92:	f000 bc02 	b.w	800a79a <__retarget_lock_release_recursive>
 8009f96:	bf00      	nop
 8009f98:	2000084c 	.word	0x2000084c

08009f9c <_realloc_r>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	4607      	mov	r7, r0
 8009fa0:	4614      	mov	r4, r2
 8009fa2:	460e      	mov	r6, r1
 8009fa4:	b921      	cbnz	r1, 8009fb0 <_realloc_r+0x14>
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fac:	f7ff bdb4 	b.w	8009b18 <_malloc_r>
 8009fb0:	b922      	cbnz	r2, 8009fbc <_realloc_r+0x20>
 8009fb2:	f7ff fd65 	bl	8009a80 <_free_r>
 8009fb6:	4625      	mov	r5, r4
 8009fb8:	4628      	mov	r0, r5
 8009fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fbc:	f000 fc52 	bl	800a864 <_malloc_usable_size_r>
 8009fc0:	42a0      	cmp	r0, r4
 8009fc2:	d20f      	bcs.n	8009fe4 <_realloc_r+0x48>
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	f7ff fda6 	bl	8009b18 <_malloc_r>
 8009fcc:	4605      	mov	r5, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d0f2      	beq.n	8009fb8 <_realloc_r+0x1c>
 8009fd2:	4631      	mov	r1, r6
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	f7ff f87f 	bl	80090d8 <memcpy>
 8009fda:	4631      	mov	r1, r6
 8009fdc:	4638      	mov	r0, r7
 8009fde:	f7ff fd4f 	bl	8009a80 <_free_r>
 8009fe2:	e7e9      	b.n	8009fb8 <_realloc_r+0x1c>
 8009fe4:	4635      	mov	r5, r6
 8009fe6:	e7e7      	b.n	8009fb8 <_realloc_r+0x1c>

08009fe8 <__sfputc_r>:
 8009fe8:	6893      	ldr	r3, [r2, #8]
 8009fea:	b410      	push	{r4}
 8009fec:	3b01      	subs	r3, #1
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	6093      	str	r3, [r2, #8]
 8009ff2:	da07      	bge.n	800a004 <__sfputc_r+0x1c>
 8009ff4:	6994      	ldr	r4, [r2, #24]
 8009ff6:	42a3      	cmp	r3, r4
 8009ff8:	db01      	blt.n	8009ffe <__sfputc_r+0x16>
 8009ffa:	290a      	cmp	r1, #10
 8009ffc:	d102      	bne.n	800a004 <__sfputc_r+0x1c>
 8009ffe:	bc10      	pop	{r4}
 800a000:	f000 b94a 	b.w	800a298 <__swbuf_r>
 800a004:	6813      	ldr	r3, [r2, #0]
 800a006:	1c58      	adds	r0, r3, #1
 800a008:	6010      	str	r0, [r2, #0]
 800a00a:	7019      	strb	r1, [r3, #0]
 800a00c:	4608      	mov	r0, r1
 800a00e:	bc10      	pop	{r4}
 800a010:	4770      	bx	lr

0800a012 <__sfputs_r>:
 800a012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	4614      	mov	r4, r2
 800a01a:	18d5      	adds	r5, r2, r3
 800a01c:	42ac      	cmp	r4, r5
 800a01e:	d101      	bne.n	800a024 <__sfputs_r+0x12>
 800a020:	2000      	movs	r0, #0
 800a022:	e007      	b.n	800a034 <__sfputs_r+0x22>
 800a024:	463a      	mov	r2, r7
 800a026:	4630      	mov	r0, r6
 800a028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a02c:	f7ff ffdc 	bl	8009fe8 <__sfputc_r>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	d1f3      	bne.n	800a01c <__sfputs_r+0xa>
 800a034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a038 <_vfiprintf_r>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	460d      	mov	r5, r1
 800a03e:	4614      	mov	r4, r2
 800a040:	4698      	mov	r8, r3
 800a042:	4606      	mov	r6, r0
 800a044:	b09d      	sub	sp, #116	; 0x74
 800a046:	b118      	cbz	r0, 800a050 <_vfiprintf_r+0x18>
 800a048:	6983      	ldr	r3, [r0, #24]
 800a04a:	b90b      	cbnz	r3, 800a050 <_vfiprintf_r+0x18>
 800a04c:	f000 fb06 	bl	800a65c <__sinit>
 800a050:	4b89      	ldr	r3, [pc, #548]	; (800a278 <_vfiprintf_r+0x240>)
 800a052:	429d      	cmp	r5, r3
 800a054:	d11b      	bne.n	800a08e <_vfiprintf_r+0x56>
 800a056:	6875      	ldr	r5, [r6, #4]
 800a058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a05a:	07d9      	lsls	r1, r3, #31
 800a05c:	d405      	bmi.n	800a06a <_vfiprintf_r+0x32>
 800a05e:	89ab      	ldrh	r3, [r5, #12]
 800a060:	059a      	lsls	r2, r3, #22
 800a062:	d402      	bmi.n	800a06a <_vfiprintf_r+0x32>
 800a064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a066:	f000 fb97 	bl	800a798 <__retarget_lock_acquire_recursive>
 800a06a:	89ab      	ldrh	r3, [r5, #12]
 800a06c:	071b      	lsls	r3, r3, #28
 800a06e:	d501      	bpl.n	800a074 <_vfiprintf_r+0x3c>
 800a070:	692b      	ldr	r3, [r5, #16]
 800a072:	b9eb      	cbnz	r3, 800a0b0 <_vfiprintf_r+0x78>
 800a074:	4629      	mov	r1, r5
 800a076:	4630      	mov	r0, r6
 800a078:	f000 f960 	bl	800a33c <__swsetup_r>
 800a07c:	b1c0      	cbz	r0, 800a0b0 <_vfiprintf_r+0x78>
 800a07e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a080:	07dc      	lsls	r4, r3, #31
 800a082:	d50e      	bpl.n	800a0a2 <_vfiprintf_r+0x6a>
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	b01d      	add	sp, #116	; 0x74
 800a08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08e:	4b7b      	ldr	r3, [pc, #492]	; (800a27c <_vfiprintf_r+0x244>)
 800a090:	429d      	cmp	r5, r3
 800a092:	d101      	bne.n	800a098 <_vfiprintf_r+0x60>
 800a094:	68b5      	ldr	r5, [r6, #8]
 800a096:	e7df      	b.n	800a058 <_vfiprintf_r+0x20>
 800a098:	4b79      	ldr	r3, [pc, #484]	; (800a280 <_vfiprintf_r+0x248>)
 800a09a:	429d      	cmp	r5, r3
 800a09c:	bf08      	it	eq
 800a09e:	68f5      	ldreq	r5, [r6, #12]
 800a0a0:	e7da      	b.n	800a058 <_vfiprintf_r+0x20>
 800a0a2:	89ab      	ldrh	r3, [r5, #12]
 800a0a4:	0598      	lsls	r0, r3, #22
 800a0a6:	d4ed      	bmi.n	800a084 <_vfiprintf_r+0x4c>
 800a0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0aa:	f000 fb76 	bl	800a79a <__retarget_lock_release_recursive>
 800a0ae:	e7e9      	b.n	800a084 <_vfiprintf_r+0x4c>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b4:	2320      	movs	r3, #32
 800a0b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0ba:	2330      	movs	r3, #48	; 0x30
 800a0bc:	f04f 0901 	mov.w	r9, #1
 800a0c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a284 <_vfiprintf_r+0x24c>
 800a0c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0cc:	4623      	mov	r3, r4
 800a0ce:	469a      	mov	sl, r3
 800a0d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0d4:	b10a      	cbz	r2, 800a0da <_vfiprintf_r+0xa2>
 800a0d6:	2a25      	cmp	r2, #37	; 0x25
 800a0d8:	d1f9      	bne.n	800a0ce <_vfiprintf_r+0x96>
 800a0da:	ebba 0b04 	subs.w	fp, sl, r4
 800a0de:	d00b      	beq.n	800a0f8 <_vfiprintf_r+0xc0>
 800a0e0:	465b      	mov	r3, fp
 800a0e2:	4622      	mov	r2, r4
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f7ff ff93 	bl	800a012 <__sfputs_r>
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	f000 80aa 	beq.w	800a246 <_vfiprintf_r+0x20e>
 800a0f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0f4:	445a      	add	r2, fp
 800a0f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 80a2 	beq.w	800a246 <_vfiprintf_r+0x20e>
 800a102:	2300      	movs	r3, #0
 800a104:	f04f 32ff 	mov.w	r2, #4294967295
 800a108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a10c:	f10a 0a01 	add.w	sl, sl, #1
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	9307      	str	r3, [sp, #28]
 800a114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a118:	931a      	str	r3, [sp, #104]	; 0x68
 800a11a:	4654      	mov	r4, sl
 800a11c:	2205      	movs	r2, #5
 800a11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a122:	4858      	ldr	r0, [pc, #352]	; (800a284 <_vfiprintf_r+0x24c>)
 800a124:	f7fe ffca 	bl	80090bc <memchr>
 800a128:	9a04      	ldr	r2, [sp, #16]
 800a12a:	b9d8      	cbnz	r0, 800a164 <_vfiprintf_r+0x12c>
 800a12c:	06d1      	lsls	r1, r2, #27
 800a12e:	bf44      	itt	mi
 800a130:	2320      	movmi	r3, #32
 800a132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a136:	0713      	lsls	r3, r2, #28
 800a138:	bf44      	itt	mi
 800a13a:	232b      	movmi	r3, #43	; 0x2b
 800a13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a140:	f89a 3000 	ldrb.w	r3, [sl]
 800a144:	2b2a      	cmp	r3, #42	; 0x2a
 800a146:	d015      	beq.n	800a174 <_vfiprintf_r+0x13c>
 800a148:	4654      	mov	r4, sl
 800a14a:	2000      	movs	r0, #0
 800a14c:	f04f 0c0a 	mov.w	ip, #10
 800a150:	9a07      	ldr	r2, [sp, #28]
 800a152:	4621      	mov	r1, r4
 800a154:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a158:	3b30      	subs	r3, #48	; 0x30
 800a15a:	2b09      	cmp	r3, #9
 800a15c:	d94e      	bls.n	800a1fc <_vfiprintf_r+0x1c4>
 800a15e:	b1b0      	cbz	r0, 800a18e <_vfiprintf_r+0x156>
 800a160:	9207      	str	r2, [sp, #28]
 800a162:	e014      	b.n	800a18e <_vfiprintf_r+0x156>
 800a164:	eba0 0308 	sub.w	r3, r0, r8
 800a168:	fa09 f303 	lsl.w	r3, r9, r3
 800a16c:	4313      	orrs	r3, r2
 800a16e:	46a2      	mov	sl, r4
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	e7d2      	b.n	800a11a <_vfiprintf_r+0xe2>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	1d19      	adds	r1, r3, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	9103      	str	r1, [sp, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bfbb      	ittet	lt
 800a180:	425b      	neglt	r3, r3
 800a182:	f042 0202 	orrlt.w	r2, r2, #2
 800a186:	9307      	strge	r3, [sp, #28]
 800a188:	9307      	strlt	r3, [sp, #28]
 800a18a:	bfb8      	it	lt
 800a18c:	9204      	strlt	r2, [sp, #16]
 800a18e:	7823      	ldrb	r3, [r4, #0]
 800a190:	2b2e      	cmp	r3, #46	; 0x2e
 800a192:	d10c      	bne.n	800a1ae <_vfiprintf_r+0x176>
 800a194:	7863      	ldrb	r3, [r4, #1]
 800a196:	2b2a      	cmp	r3, #42	; 0x2a
 800a198:	d135      	bne.n	800a206 <_vfiprintf_r+0x1ce>
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	3402      	adds	r4, #2
 800a19e:	1d1a      	adds	r2, r3, #4
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	9203      	str	r2, [sp, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	bfb8      	it	lt
 800a1a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1ac:	9305      	str	r3, [sp, #20]
 800a1ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a294 <_vfiprintf_r+0x25c>
 800a1b2:	2203      	movs	r2, #3
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	7821      	ldrb	r1, [r4, #0]
 800a1b8:	f7fe ff80 	bl	80090bc <memchr>
 800a1bc:	b140      	cbz	r0, 800a1d0 <_vfiprintf_r+0x198>
 800a1be:	2340      	movs	r3, #64	; 0x40
 800a1c0:	eba0 000a 	sub.w	r0, r0, sl
 800a1c4:	fa03 f000 	lsl.w	r0, r3, r0
 800a1c8:	9b04      	ldr	r3, [sp, #16]
 800a1ca:	3401      	adds	r4, #1
 800a1cc:	4303      	orrs	r3, r0
 800a1ce:	9304      	str	r3, [sp, #16]
 800a1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d4:	2206      	movs	r2, #6
 800a1d6:	482c      	ldr	r0, [pc, #176]	; (800a288 <_vfiprintf_r+0x250>)
 800a1d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1dc:	f7fe ff6e 	bl	80090bc <memchr>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d03f      	beq.n	800a264 <_vfiprintf_r+0x22c>
 800a1e4:	4b29      	ldr	r3, [pc, #164]	; (800a28c <_vfiprintf_r+0x254>)
 800a1e6:	bb1b      	cbnz	r3, 800a230 <_vfiprintf_r+0x1f8>
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	3307      	adds	r3, #7
 800a1ec:	f023 0307 	bic.w	r3, r3, #7
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	9303      	str	r3, [sp, #12]
 800a1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f6:	443b      	add	r3, r7
 800a1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1fa:	e767      	b.n	800a0cc <_vfiprintf_r+0x94>
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	2001      	movs	r0, #1
 800a200:	fb0c 3202 	mla	r2, ip, r2, r3
 800a204:	e7a5      	b.n	800a152 <_vfiprintf_r+0x11a>
 800a206:	2300      	movs	r3, #0
 800a208:	f04f 0c0a 	mov.w	ip, #10
 800a20c:	4619      	mov	r1, r3
 800a20e:	3401      	adds	r4, #1
 800a210:	9305      	str	r3, [sp, #20]
 800a212:	4620      	mov	r0, r4
 800a214:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a218:	3a30      	subs	r2, #48	; 0x30
 800a21a:	2a09      	cmp	r2, #9
 800a21c:	d903      	bls.n	800a226 <_vfiprintf_r+0x1ee>
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0c5      	beq.n	800a1ae <_vfiprintf_r+0x176>
 800a222:	9105      	str	r1, [sp, #20]
 800a224:	e7c3      	b.n	800a1ae <_vfiprintf_r+0x176>
 800a226:	4604      	mov	r4, r0
 800a228:	2301      	movs	r3, #1
 800a22a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a22e:	e7f0      	b.n	800a212 <_vfiprintf_r+0x1da>
 800a230:	ab03      	add	r3, sp, #12
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	462a      	mov	r2, r5
 800a236:	4630      	mov	r0, r6
 800a238:	4b15      	ldr	r3, [pc, #84]	; (800a290 <_vfiprintf_r+0x258>)
 800a23a:	a904      	add	r1, sp, #16
 800a23c:	f7fc f8a0 	bl	8006380 <_printf_float>
 800a240:	4607      	mov	r7, r0
 800a242:	1c78      	adds	r0, r7, #1
 800a244:	d1d6      	bne.n	800a1f4 <_vfiprintf_r+0x1bc>
 800a246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a248:	07d9      	lsls	r1, r3, #31
 800a24a:	d405      	bmi.n	800a258 <_vfiprintf_r+0x220>
 800a24c:	89ab      	ldrh	r3, [r5, #12]
 800a24e:	059a      	lsls	r2, r3, #22
 800a250:	d402      	bmi.n	800a258 <_vfiprintf_r+0x220>
 800a252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a254:	f000 faa1 	bl	800a79a <__retarget_lock_release_recursive>
 800a258:	89ab      	ldrh	r3, [r5, #12]
 800a25a:	065b      	lsls	r3, r3, #25
 800a25c:	f53f af12 	bmi.w	800a084 <_vfiprintf_r+0x4c>
 800a260:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a262:	e711      	b.n	800a088 <_vfiprintf_r+0x50>
 800a264:	ab03      	add	r3, sp, #12
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	462a      	mov	r2, r5
 800a26a:	4630      	mov	r0, r6
 800a26c:	4b08      	ldr	r3, [pc, #32]	; (800a290 <_vfiprintf_r+0x258>)
 800a26e:	a904      	add	r1, sp, #16
 800a270:	f7fc fb22 	bl	80068b8 <_printf_i>
 800a274:	e7e4      	b.n	800a240 <_vfiprintf_r+0x208>
 800a276:	bf00      	nop
 800a278:	0800b624 	.word	0x0800b624
 800a27c:	0800b644 	.word	0x0800b644
 800a280:	0800b604 	.word	0x0800b604
 800a284:	0800b5b4 	.word	0x0800b5b4
 800a288:	0800b5be 	.word	0x0800b5be
 800a28c:	08006381 	.word	0x08006381
 800a290:	0800a013 	.word	0x0800a013
 800a294:	0800b5ba 	.word	0x0800b5ba

0800a298 <__swbuf_r>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	460e      	mov	r6, r1
 800a29c:	4614      	mov	r4, r2
 800a29e:	4605      	mov	r5, r0
 800a2a0:	b118      	cbz	r0, 800a2aa <__swbuf_r+0x12>
 800a2a2:	6983      	ldr	r3, [r0, #24]
 800a2a4:	b90b      	cbnz	r3, 800a2aa <__swbuf_r+0x12>
 800a2a6:	f000 f9d9 	bl	800a65c <__sinit>
 800a2aa:	4b21      	ldr	r3, [pc, #132]	; (800a330 <__swbuf_r+0x98>)
 800a2ac:	429c      	cmp	r4, r3
 800a2ae:	d12b      	bne.n	800a308 <__swbuf_r+0x70>
 800a2b0:	686c      	ldr	r4, [r5, #4]
 800a2b2:	69a3      	ldr	r3, [r4, #24]
 800a2b4:	60a3      	str	r3, [r4, #8]
 800a2b6:	89a3      	ldrh	r3, [r4, #12]
 800a2b8:	071a      	lsls	r2, r3, #28
 800a2ba:	d52f      	bpl.n	800a31c <__swbuf_r+0x84>
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	b36b      	cbz	r3, 800a31c <__swbuf_r+0x84>
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	6820      	ldr	r0, [r4, #0]
 800a2c4:	b2f6      	uxtb	r6, r6
 800a2c6:	1ac0      	subs	r0, r0, r3
 800a2c8:	6963      	ldr	r3, [r4, #20]
 800a2ca:	4637      	mov	r7, r6
 800a2cc:	4283      	cmp	r3, r0
 800a2ce:	dc04      	bgt.n	800a2da <__swbuf_r+0x42>
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	f000 f92e 	bl	800a534 <_fflush_r>
 800a2d8:	bb30      	cbnz	r0, 800a328 <__swbuf_r+0x90>
 800a2da:	68a3      	ldr	r3, [r4, #8]
 800a2dc:	3001      	adds	r0, #1
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	60a3      	str	r3, [r4, #8]
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	1c5a      	adds	r2, r3, #1
 800a2e6:	6022      	str	r2, [r4, #0]
 800a2e8:	701e      	strb	r6, [r3, #0]
 800a2ea:	6963      	ldr	r3, [r4, #20]
 800a2ec:	4283      	cmp	r3, r0
 800a2ee:	d004      	beq.n	800a2fa <__swbuf_r+0x62>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	07db      	lsls	r3, r3, #31
 800a2f4:	d506      	bpl.n	800a304 <__swbuf_r+0x6c>
 800a2f6:	2e0a      	cmp	r6, #10
 800a2f8:	d104      	bne.n	800a304 <__swbuf_r+0x6c>
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	f000 f919 	bl	800a534 <_fflush_r>
 800a302:	b988      	cbnz	r0, 800a328 <__swbuf_r+0x90>
 800a304:	4638      	mov	r0, r7
 800a306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a308:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <__swbuf_r+0x9c>)
 800a30a:	429c      	cmp	r4, r3
 800a30c:	d101      	bne.n	800a312 <__swbuf_r+0x7a>
 800a30e:	68ac      	ldr	r4, [r5, #8]
 800a310:	e7cf      	b.n	800a2b2 <__swbuf_r+0x1a>
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <__swbuf_r+0xa0>)
 800a314:	429c      	cmp	r4, r3
 800a316:	bf08      	it	eq
 800a318:	68ec      	ldreq	r4, [r5, #12]
 800a31a:	e7ca      	b.n	800a2b2 <__swbuf_r+0x1a>
 800a31c:	4621      	mov	r1, r4
 800a31e:	4628      	mov	r0, r5
 800a320:	f000 f80c 	bl	800a33c <__swsetup_r>
 800a324:	2800      	cmp	r0, #0
 800a326:	d0cb      	beq.n	800a2c0 <__swbuf_r+0x28>
 800a328:	f04f 37ff 	mov.w	r7, #4294967295
 800a32c:	e7ea      	b.n	800a304 <__swbuf_r+0x6c>
 800a32e:	bf00      	nop
 800a330:	0800b624 	.word	0x0800b624
 800a334:	0800b644 	.word	0x0800b644
 800a338:	0800b604 	.word	0x0800b604

0800a33c <__swsetup_r>:
 800a33c:	4b32      	ldr	r3, [pc, #200]	; (800a408 <__swsetup_r+0xcc>)
 800a33e:	b570      	push	{r4, r5, r6, lr}
 800a340:	681d      	ldr	r5, [r3, #0]
 800a342:	4606      	mov	r6, r0
 800a344:	460c      	mov	r4, r1
 800a346:	b125      	cbz	r5, 800a352 <__swsetup_r+0x16>
 800a348:	69ab      	ldr	r3, [r5, #24]
 800a34a:	b913      	cbnz	r3, 800a352 <__swsetup_r+0x16>
 800a34c:	4628      	mov	r0, r5
 800a34e:	f000 f985 	bl	800a65c <__sinit>
 800a352:	4b2e      	ldr	r3, [pc, #184]	; (800a40c <__swsetup_r+0xd0>)
 800a354:	429c      	cmp	r4, r3
 800a356:	d10f      	bne.n	800a378 <__swsetup_r+0x3c>
 800a358:	686c      	ldr	r4, [r5, #4]
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a360:	0719      	lsls	r1, r3, #28
 800a362:	d42c      	bmi.n	800a3be <__swsetup_r+0x82>
 800a364:	06dd      	lsls	r5, r3, #27
 800a366:	d411      	bmi.n	800a38c <__swsetup_r+0x50>
 800a368:	2309      	movs	r3, #9
 800a36a:	6033      	str	r3, [r6, #0]
 800a36c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a370:	f04f 30ff 	mov.w	r0, #4294967295
 800a374:	81a3      	strh	r3, [r4, #12]
 800a376:	e03e      	b.n	800a3f6 <__swsetup_r+0xba>
 800a378:	4b25      	ldr	r3, [pc, #148]	; (800a410 <__swsetup_r+0xd4>)
 800a37a:	429c      	cmp	r4, r3
 800a37c:	d101      	bne.n	800a382 <__swsetup_r+0x46>
 800a37e:	68ac      	ldr	r4, [r5, #8]
 800a380:	e7eb      	b.n	800a35a <__swsetup_r+0x1e>
 800a382:	4b24      	ldr	r3, [pc, #144]	; (800a414 <__swsetup_r+0xd8>)
 800a384:	429c      	cmp	r4, r3
 800a386:	bf08      	it	eq
 800a388:	68ec      	ldreq	r4, [r5, #12]
 800a38a:	e7e6      	b.n	800a35a <__swsetup_r+0x1e>
 800a38c:	0758      	lsls	r0, r3, #29
 800a38e:	d512      	bpl.n	800a3b6 <__swsetup_r+0x7a>
 800a390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a392:	b141      	cbz	r1, 800a3a6 <__swsetup_r+0x6a>
 800a394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a398:	4299      	cmp	r1, r3
 800a39a:	d002      	beq.n	800a3a2 <__swsetup_r+0x66>
 800a39c:	4630      	mov	r0, r6
 800a39e:	f7ff fb6f 	bl	8009a80 <_free_r>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	6063      	str	r3, [r4, #4]
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	f043 0308 	orr.w	r3, r3, #8
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	6923      	ldr	r3, [r4, #16]
 800a3c0:	b94b      	cbnz	r3, 800a3d6 <__swsetup_r+0x9a>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3cc:	d003      	beq.n	800a3d6 <__swsetup_r+0x9a>
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f000 fa07 	bl	800a7e4 <__smakebuf_r>
 800a3d6:	89a0      	ldrh	r0, [r4, #12]
 800a3d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3dc:	f010 0301 	ands.w	r3, r0, #1
 800a3e0:	d00a      	beq.n	800a3f8 <__swsetup_r+0xbc>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60a3      	str	r3, [r4, #8]
 800a3e6:	6963      	ldr	r3, [r4, #20]
 800a3e8:	425b      	negs	r3, r3
 800a3ea:	61a3      	str	r3, [r4, #24]
 800a3ec:	6923      	ldr	r3, [r4, #16]
 800a3ee:	b943      	cbnz	r3, 800a402 <__swsetup_r+0xc6>
 800a3f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3f4:	d1ba      	bne.n	800a36c <__swsetup_r+0x30>
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}
 800a3f8:	0781      	lsls	r1, r0, #30
 800a3fa:	bf58      	it	pl
 800a3fc:	6963      	ldrpl	r3, [r4, #20]
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	e7f4      	b.n	800a3ec <__swsetup_r+0xb0>
 800a402:	2000      	movs	r0, #0
 800a404:	e7f7      	b.n	800a3f6 <__swsetup_r+0xba>
 800a406:	bf00      	nop
 800a408:	20000014 	.word	0x20000014
 800a40c:	0800b624 	.word	0x0800b624
 800a410:	0800b644 	.word	0x0800b644
 800a414:	0800b604 	.word	0x0800b604

0800a418 <abort>:
 800a418:	2006      	movs	r0, #6
 800a41a:	b508      	push	{r3, lr}
 800a41c:	f000 fa52 	bl	800a8c4 <raise>
 800a420:	2001      	movs	r0, #1
 800a422:	f7f7 fba0 	bl	8001b66 <_exit>
	...

0800a428 <__sflush_r>:
 800a428:	898a      	ldrh	r2, [r1, #12]
 800a42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42e:	4605      	mov	r5, r0
 800a430:	0710      	lsls	r0, r2, #28
 800a432:	460c      	mov	r4, r1
 800a434:	d458      	bmi.n	800a4e8 <__sflush_r+0xc0>
 800a436:	684b      	ldr	r3, [r1, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	dc05      	bgt.n	800a448 <__sflush_r+0x20>
 800a43c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a43e:	2b00      	cmp	r3, #0
 800a440:	dc02      	bgt.n	800a448 <__sflush_r+0x20>
 800a442:	2000      	movs	r0, #0
 800a444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a44a:	2e00      	cmp	r6, #0
 800a44c:	d0f9      	beq.n	800a442 <__sflush_r+0x1a>
 800a44e:	2300      	movs	r3, #0
 800a450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a454:	682f      	ldr	r7, [r5, #0]
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	d032      	beq.n	800a4c0 <__sflush_r+0x98>
 800a45a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	075a      	lsls	r2, r3, #29
 800a460:	d505      	bpl.n	800a46e <__sflush_r+0x46>
 800a462:	6863      	ldr	r3, [r4, #4]
 800a464:	1ac0      	subs	r0, r0, r3
 800a466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a468:	b10b      	cbz	r3, 800a46e <__sflush_r+0x46>
 800a46a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a46c:	1ac0      	subs	r0, r0, r3
 800a46e:	2300      	movs	r3, #0
 800a470:	4602      	mov	r2, r0
 800a472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a474:	4628      	mov	r0, r5
 800a476:	6a21      	ldr	r1, [r4, #32]
 800a478:	47b0      	blx	r6
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	d106      	bne.n	800a48e <__sflush_r+0x66>
 800a480:	6829      	ldr	r1, [r5, #0]
 800a482:	291d      	cmp	r1, #29
 800a484:	d82c      	bhi.n	800a4e0 <__sflush_r+0xb8>
 800a486:	4a2a      	ldr	r2, [pc, #168]	; (800a530 <__sflush_r+0x108>)
 800a488:	40ca      	lsrs	r2, r1
 800a48a:	07d6      	lsls	r6, r2, #31
 800a48c:	d528      	bpl.n	800a4e0 <__sflush_r+0xb8>
 800a48e:	2200      	movs	r2, #0
 800a490:	6062      	str	r2, [r4, #4]
 800a492:	6922      	ldr	r2, [r4, #16]
 800a494:	04d9      	lsls	r1, r3, #19
 800a496:	6022      	str	r2, [r4, #0]
 800a498:	d504      	bpl.n	800a4a4 <__sflush_r+0x7c>
 800a49a:	1c42      	adds	r2, r0, #1
 800a49c:	d101      	bne.n	800a4a2 <__sflush_r+0x7a>
 800a49e:	682b      	ldr	r3, [r5, #0]
 800a4a0:	b903      	cbnz	r3, 800a4a4 <__sflush_r+0x7c>
 800a4a2:	6560      	str	r0, [r4, #84]	; 0x54
 800a4a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a6:	602f      	str	r7, [r5, #0]
 800a4a8:	2900      	cmp	r1, #0
 800a4aa:	d0ca      	beq.n	800a442 <__sflush_r+0x1a>
 800a4ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4b0:	4299      	cmp	r1, r3
 800a4b2:	d002      	beq.n	800a4ba <__sflush_r+0x92>
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f7ff fae3 	bl	8009a80 <_free_r>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a4be:	e7c1      	b.n	800a444 <__sflush_r+0x1c>
 800a4c0:	6a21      	ldr	r1, [r4, #32]
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b0      	blx	r6
 800a4c8:	1c41      	adds	r1, r0, #1
 800a4ca:	d1c7      	bne.n	800a45c <__sflush_r+0x34>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0c4      	beq.n	800a45c <__sflush_r+0x34>
 800a4d2:	2b1d      	cmp	r3, #29
 800a4d4:	d001      	beq.n	800a4da <__sflush_r+0xb2>
 800a4d6:	2b16      	cmp	r3, #22
 800a4d8:	d101      	bne.n	800a4de <__sflush_r+0xb6>
 800a4da:	602f      	str	r7, [r5, #0]
 800a4dc:	e7b1      	b.n	800a442 <__sflush_r+0x1a>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e4:	81a3      	strh	r3, [r4, #12]
 800a4e6:	e7ad      	b.n	800a444 <__sflush_r+0x1c>
 800a4e8:	690f      	ldr	r7, [r1, #16]
 800a4ea:	2f00      	cmp	r7, #0
 800a4ec:	d0a9      	beq.n	800a442 <__sflush_r+0x1a>
 800a4ee:	0793      	lsls	r3, r2, #30
 800a4f0:	bf18      	it	ne
 800a4f2:	2300      	movne	r3, #0
 800a4f4:	680e      	ldr	r6, [r1, #0]
 800a4f6:	bf08      	it	eq
 800a4f8:	694b      	ldreq	r3, [r1, #20]
 800a4fa:	eba6 0807 	sub.w	r8, r6, r7
 800a4fe:	600f      	str	r7, [r1, #0]
 800a500:	608b      	str	r3, [r1, #8]
 800a502:	f1b8 0f00 	cmp.w	r8, #0
 800a506:	dd9c      	ble.n	800a442 <__sflush_r+0x1a>
 800a508:	4643      	mov	r3, r8
 800a50a:	463a      	mov	r2, r7
 800a50c:	4628      	mov	r0, r5
 800a50e:	6a21      	ldr	r1, [r4, #32]
 800a510:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a512:	47b0      	blx	r6
 800a514:	2800      	cmp	r0, #0
 800a516:	dc06      	bgt.n	800a526 <__sflush_r+0xfe>
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	f04f 30ff 	mov.w	r0, #4294967295
 800a51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a522:	81a3      	strh	r3, [r4, #12]
 800a524:	e78e      	b.n	800a444 <__sflush_r+0x1c>
 800a526:	4407      	add	r7, r0
 800a528:	eba8 0800 	sub.w	r8, r8, r0
 800a52c:	e7e9      	b.n	800a502 <__sflush_r+0xda>
 800a52e:	bf00      	nop
 800a530:	20400001 	.word	0x20400001

0800a534 <_fflush_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	690b      	ldr	r3, [r1, #16]
 800a538:	4605      	mov	r5, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	b913      	cbnz	r3, 800a544 <_fflush_r+0x10>
 800a53e:	2500      	movs	r5, #0
 800a540:	4628      	mov	r0, r5
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	b118      	cbz	r0, 800a54e <_fflush_r+0x1a>
 800a546:	6983      	ldr	r3, [r0, #24]
 800a548:	b90b      	cbnz	r3, 800a54e <_fflush_r+0x1a>
 800a54a:	f000 f887 	bl	800a65c <__sinit>
 800a54e:	4b14      	ldr	r3, [pc, #80]	; (800a5a0 <_fflush_r+0x6c>)
 800a550:	429c      	cmp	r4, r3
 800a552:	d11b      	bne.n	800a58c <_fflush_r+0x58>
 800a554:	686c      	ldr	r4, [r5, #4]
 800a556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0ef      	beq.n	800a53e <_fflush_r+0xa>
 800a55e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a560:	07d0      	lsls	r0, r2, #31
 800a562:	d404      	bmi.n	800a56e <_fflush_r+0x3a>
 800a564:	0599      	lsls	r1, r3, #22
 800a566:	d402      	bmi.n	800a56e <_fflush_r+0x3a>
 800a568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a56a:	f000 f915 	bl	800a798 <__retarget_lock_acquire_recursive>
 800a56e:	4628      	mov	r0, r5
 800a570:	4621      	mov	r1, r4
 800a572:	f7ff ff59 	bl	800a428 <__sflush_r>
 800a576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a578:	4605      	mov	r5, r0
 800a57a:	07da      	lsls	r2, r3, #31
 800a57c:	d4e0      	bmi.n	800a540 <_fflush_r+0xc>
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	059b      	lsls	r3, r3, #22
 800a582:	d4dd      	bmi.n	800a540 <_fflush_r+0xc>
 800a584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a586:	f000 f908 	bl	800a79a <__retarget_lock_release_recursive>
 800a58a:	e7d9      	b.n	800a540 <_fflush_r+0xc>
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <_fflush_r+0x70>)
 800a58e:	429c      	cmp	r4, r3
 800a590:	d101      	bne.n	800a596 <_fflush_r+0x62>
 800a592:	68ac      	ldr	r4, [r5, #8]
 800a594:	e7df      	b.n	800a556 <_fflush_r+0x22>
 800a596:	4b04      	ldr	r3, [pc, #16]	; (800a5a8 <_fflush_r+0x74>)
 800a598:	429c      	cmp	r4, r3
 800a59a:	bf08      	it	eq
 800a59c:	68ec      	ldreq	r4, [r5, #12]
 800a59e:	e7da      	b.n	800a556 <_fflush_r+0x22>
 800a5a0:	0800b624 	.word	0x0800b624
 800a5a4:	0800b644 	.word	0x0800b644
 800a5a8:	0800b604 	.word	0x0800b604

0800a5ac <std>:
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ba:	6083      	str	r3, [r0, #8]
 800a5bc:	8181      	strh	r1, [r0, #12]
 800a5be:	6643      	str	r3, [r0, #100]	; 0x64
 800a5c0:	81c2      	strh	r2, [r0, #14]
 800a5c2:	6183      	str	r3, [r0, #24]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	2208      	movs	r2, #8
 800a5c8:	305c      	adds	r0, #92	; 0x5c
 800a5ca:	f7fb fe33 	bl	8006234 <memset>
 800a5ce:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <std+0x38>)
 800a5d0:	6224      	str	r4, [r4, #32]
 800a5d2:	6263      	str	r3, [r4, #36]	; 0x24
 800a5d4:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <std+0x3c>)
 800a5d6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5d8:	4b04      	ldr	r3, [pc, #16]	; (800a5ec <std+0x40>)
 800a5da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5dc:	4b04      	ldr	r3, [pc, #16]	; (800a5f0 <std+0x44>)
 800a5de:	6323      	str	r3, [r4, #48]	; 0x30
 800a5e0:	bd10      	pop	{r4, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0800a8fd 	.word	0x0800a8fd
 800a5e8:	0800a91f 	.word	0x0800a91f
 800a5ec:	0800a957 	.word	0x0800a957
 800a5f0:	0800a97b 	.word	0x0800a97b

0800a5f4 <_cleanup_r>:
 800a5f4:	4901      	ldr	r1, [pc, #4]	; (800a5fc <_cleanup_r+0x8>)
 800a5f6:	f000 b8af 	b.w	800a758 <_fwalk_reent>
 800a5fa:	bf00      	nop
 800a5fc:	0800a535 	.word	0x0800a535

0800a600 <__sfmoreglue>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	2568      	movs	r5, #104	; 0x68
 800a604:	1e4a      	subs	r2, r1, #1
 800a606:	4355      	muls	r5, r2
 800a608:	460e      	mov	r6, r1
 800a60a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a60e:	f7ff fa83 	bl	8009b18 <_malloc_r>
 800a612:	4604      	mov	r4, r0
 800a614:	b140      	cbz	r0, 800a628 <__sfmoreglue+0x28>
 800a616:	2100      	movs	r1, #0
 800a618:	e9c0 1600 	strd	r1, r6, [r0]
 800a61c:	300c      	adds	r0, #12
 800a61e:	60a0      	str	r0, [r4, #8]
 800a620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a624:	f7fb fe06 	bl	8006234 <memset>
 800a628:	4620      	mov	r0, r4
 800a62a:	bd70      	pop	{r4, r5, r6, pc}

0800a62c <__sfp_lock_acquire>:
 800a62c:	4801      	ldr	r0, [pc, #4]	; (800a634 <__sfp_lock_acquire+0x8>)
 800a62e:	f000 b8b3 	b.w	800a798 <__retarget_lock_acquire_recursive>
 800a632:	bf00      	nop
 800a634:	20000850 	.word	0x20000850

0800a638 <__sfp_lock_release>:
 800a638:	4801      	ldr	r0, [pc, #4]	; (800a640 <__sfp_lock_release+0x8>)
 800a63a:	f000 b8ae 	b.w	800a79a <__retarget_lock_release_recursive>
 800a63e:	bf00      	nop
 800a640:	20000850 	.word	0x20000850

0800a644 <__sinit_lock_acquire>:
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <__sinit_lock_acquire+0x8>)
 800a646:	f000 b8a7 	b.w	800a798 <__retarget_lock_acquire_recursive>
 800a64a:	bf00      	nop
 800a64c:	2000084b 	.word	0x2000084b

0800a650 <__sinit_lock_release>:
 800a650:	4801      	ldr	r0, [pc, #4]	; (800a658 <__sinit_lock_release+0x8>)
 800a652:	f000 b8a2 	b.w	800a79a <__retarget_lock_release_recursive>
 800a656:	bf00      	nop
 800a658:	2000084b 	.word	0x2000084b

0800a65c <__sinit>:
 800a65c:	b510      	push	{r4, lr}
 800a65e:	4604      	mov	r4, r0
 800a660:	f7ff fff0 	bl	800a644 <__sinit_lock_acquire>
 800a664:	69a3      	ldr	r3, [r4, #24]
 800a666:	b11b      	cbz	r3, 800a670 <__sinit+0x14>
 800a668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a66c:	f7ff bff0 	b.w	800a650 <__sinit_lock_release>
 800a670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a674:	6523      	str	r3, [r4, #80]	; 0x50
 800a676:	4b13      	ldr	r3, [pc, #76]	; (800a6c4 <__sinit+0x68>)
 800a678:	4a13      	ldr	r2, [pc, #76]	; (800a6c8 <__sinit+0x6c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a67e:	42a3      	cmp	r3, r4
 800a680:	bf08      	it	eq
 800a682:	2301      	moveq	r3, #1
 800a684:	4620      	mov	r0, r4
 800a686:	bf08      	it	eq
 800a688:	61a3      	streq	r3, [r4, #24]
 800a68a:	f000 f81f 	bl	800a6cc <__sfp>
 800a68e:	6060      	str	r0, [r4, #4]
 800a690:	4620      	mov	r0, r4
 800a692:	f000 f81b 	bl	800a6cc <__sfp>
 800a696:	60a0      	str	r0, [r4, #8]
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 f817 	bl	800a6cc <__sfp>
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2104      	movs	r1, #4
 800a6a2:	60e0      	str	r0, [r4, #12]
 800a6a4:	6860      	ldr	r0, [r4, #4]
 800a6a6:	f7ff ff81 	bl	800a5ac <std>
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	2109      	movs	r1, #9
 800a6ae:	68a0      	ldr	r0, [r4, #8]
 800a6b0:	f7ff ff7c 	bl	800a5ac <std>
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	2112      	movs	r1, #18
 800a6b8:	68e0      	ldr	r0, [r4, #12]
 800a6ba:	f7ff ff77 	bl	800a5ac <std>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	61a3      	str	r3, [r4, #24]
 800a6c2:	e7d1      	b.n	800a668 <__sinit+0xc>
 800a6c4:	0800b1b0 	.word	0x0800b1b0
 800a6c8:	0800a5f5 	.word	0x0800a5f5

0800a6cc <__sfp>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	f7ff ffac 	bl	800a62c <__sfp_lock_acquire>
 800a6d4:	4b1e      	ldr	r3, [pc, #120]	; (800a750 <__sfp+0x84>)
 800a6d6:	681e      	ldr	r6, [r3, #0]
 800a6d8:	69b3      	ldr	r3, [r6, #24]
 800a6da:	b913      	cbnz	r3, 800a6e2 <__sfp+0x16>
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f7ff ffbd 	bl	800a65c <__sinit>
 800a6e2:	3648      	adds	r6, #72	; 0x48
 800a6e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	d503      	bpl.n	800a6f4 <__sfp+0x28>
 800a6ec:	6833      	ldr	r3, [r6, #0]
 800a6ee:	b30b      	cbz	r3, 800a734 <__sfp+0x68>
 800a6f0:	6836      	ldr	r6, [r6, #0]
 800a6f2:	e7f7      	b.n	800a6e4 <__sfp+0x18>
 800a6f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6f8:	b9d5      	cbnz	r5, 800a730 <__sfp+0x64>
 800a6fa:	4b16      	ldr	r3, [pc, #88]	; (800a754 <__sfp+0x88>)
 800a6fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a700:	60e3      	str	r3, [r4, #12]
 800a702:	6665      	str	r5, [r4, #100]	; 0x64
 800a704:	f000 f847 	bl	800a796 <__retarget_lock_init_recursive>
 800a708:	f7ff ff96 	bl	800a638 <__sfp_lock_release>
 800a70c:	2208      	movs	r2, #8
 800a70e:	4629      	mov	r1, r5
 800a710:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a714:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a718:	6025      	str	r5, [r4, #0]
 800a71a:	61a5      	str	r5, [r4, #24]
 800a71c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a720:	f7fb fd88 	bl	8006234 <memset>
 800a724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a72c:	4620      	mov	r0, r4
 800a72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a730:	3468      	adds	r4, #104	; 0x68
 800a732:	e7d9      	b.n	800a6e8 <__sfp+0x1c>
 800a734:	2104      	movs	r1, #4
 800a736:	4638      	mov	r0, r7
 800a738:	f7ff ff62 	bl	800a600 <__sfmoreglue>
 800a73c:	4604      	mov	r4, r0
 800a73e:	6030      	str	r0, [r6, #0]
 800a740:	2800      	cmp	r0, #0
 800a742:	d1d5      	bne.n	800a6f0 <__sfp+0x24>
 800a744:	f7ff ff78 	bl	800a638 <__sfp_lock_release>
 800a748:	230c      	movs	r3, #12
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	e7ee      	b.n	800a72c <__sfp+0x60>
 800a74e:	bf00      	nop
 800a750:	0800b1b0 	.word	0x0800b1b0
 800a754:	ffff0001 	.word	0xffff0001

0800a758 <_fwalk_reent>:
 800a758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a75c:	4606      	mov	r6, r0
 800a75e:	4688      	mov	r8, r1
 800a760:	2700      	movs	r7, #0
 800a762:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a76a:	f1b9 0901 	subs.w	r9, r9, #1
 800a76e:	d505      	bpl.n	800a77c <_fwalk_reent+0x24>
 800a770:	6824      	ldr	r4, [r4, #0]
 800a772:	2c00      	cmp	r4, #0
 800a774:	d1f7      	bne.n	800a766 <_fwalk_reent+0xe>
 800a776:	4638      	mov	r0, r7
 800a778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a77c:	89ab      	ldrh	r3, [r5, #12]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d907      	bls.n	800a792 <_fwalk_reent+0x3a>
 800a782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a786:	3301      	adds	r3, #1
 800a788:	d003      	beq.n	800a792 <_fwalk_reent+0x3a>
 800a78a:	4629      	mov	r1, r5
 800a78c:	4630      	mov	r0, r6
 800a78e:	47c0      	blx	r8
 800a790:	4307      	orrs	r7, r0
 800a792:	3568      	adds	r5, #104	; 0x68
 800a794:	e7e9      	b.n	800a76a <_fwalk_reent+0x12>

0800a796 <__retarget_lock_init_recursive>:
 800a796:	4770      	bx	lr

0800a798 <__retarget_lock_acquire_recursive>:
 800a798:	4770      	bx	lr

0800a79a <__retarget_lock_release_recursive>:
 800a79a:	4770      	bx	lr

0800a79c <__swhatbuf_r>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	460e      	mov	r6, r1
 800a7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a4:	4614      	mov	r4, r2
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	461d      	mov	r5, r3
 800a7aa:	b096      	sub	sp, #88	; 0x58
 800a7ac:	da07      	bge.n	800a7be <__swhatbuf_r+0x22>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	602b      	str	r3, [r5, #0]
 800a7b2:	89b3      	ldrh	r3, [r6, #12]
 800a7b4:	061a      	lsls	r2, r3, #24
 800a7b6:	d410      	bmi.n	800a7da <__swhatbuf_r+0x3e>
 800a7b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7bc:	e00e      	b.n	800a7dc <__swhatbuf_r+0x40>
 800a7be:	466a      	mov	r2, sp
 800a7c0:	f000 f902 	bl	800a9c8 <_fstat_r>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	dbf2      	blt.n	800a7ae <__swhatbuf_r+0x12>
 800a7c8:	9a01      	ldr	r2, [sp, #4]
 800a7ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7d2:	425a      	negs	r2, r3
 800a7d4:	415a      	adcs	r2, r3
 800a7d6:	602a      	str	r2, [r5, #0]
 800a7d8:	e7ee      	b.n	800a7b8 <__swhatbuf_r+0x1c>
 800a7da:	2340      	movs	r3, #64	; 0x40
 800a7dc:	2000      	movs	r0, #0
 800a7de:	6023      	str	r3, [r4, #0]
 800a7e0:	b016      	add	sp, #88	; 0x58
 800a7e2:	bd70      	pop	{r4, r5, r6, pc}

0800a7e4 <__smakebuf_r>:
 800a7e4:	898b      	ldrh	r3, [r1, #12]
 800a7e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7e8:	079d      	lsls	r5, r3, #30
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	d507      	bpl.n	800a800 <__smakebuf_r+0x1c>
 800a7f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	6123      	str	r3, [r4, #16]
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	6163      	str	r3, [r4, #20]
 800a7fc:	b002      	add	sp, #8
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	466a      	mov	r2, sp
 800a802:	ab01      	add	r3, sp, #4
 800a804:	f7ff ffca 	bl	800a79c <__swhatbuf_r>
 800a808:	9900      	ldr	r1, [sp, #0]
 800a80a:	4605      	mov	r5, r0
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7ff f983 	bl	8009b18 <_malloc_r>
 800a812:	b948      	cbnz	r0, 800a828 <__smakebuf_r+0x44>
 800a814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a818:	059a      	lsls	r2, r3, #22
 800a81a:	d4ef      	bmi.n	800a7fc <__smakebuf_r+0x18>
 800a81c:	f023 0303 	bic.w	r3, r3, #3
 800a820:	f043 0302 	orr.w	r3, r3, #2
 800a824:	81a3      	strh	r3, [r4, #12]
 800a826:	e7e3      	b.n	800a7f0 <__smakebuf_r+0xc>
 800a828:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <__smakebuf_r+0x7c>)
 800a82a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	6020      	str	r0, [r4, #0]
 800a830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a834:	81a3      	strh	r3, [r4, #12]
 800a836:	9b00      	ldr	r3, [sp, #0]
 800a838:	6120      	str	r0, [r4, #16]
 800a83a:	6163      	str	r3, [r4, #20]
 800a83c:	9b01      	ldr	r3, [sp, #4]
 800a83e:	b15b      	cbz	r3, 800a858 <__smakebuf_r+0x74>
 800a840:	4630      	mov	r0, r6
 800a842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a846:	f000 f8d1 	bl	800a9ec <_isatty_r>
 800a84a:	b128      	cbz	r0, 800a858 <__smakebuf_r+0x74>
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	f043 0301 	orr.w	r3, r3, #1
 800a856:	81a3      	strh	r3, [r4, #12]
 800a858:	89a0      	ldrh	r0, [r4, #12]
 800a85a:	4305      	orrs	r5, r0
 800a85c:	81a5      	strh	r5, [r4, #12]
 800a85e:	e7cd      	b.n	800a7fc <__smakebuf_r+0x18>
 800a860:	0800a5f5 	.word	0x0800a5f5

0800a864 <_malloc_usable_size_r>:
 800a864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a868:	1f18      	subs	r0, r3, #4
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	bfbc      	itt	lt
 800a86e:	580b      	ldrlt	r3, [r1, r0]
 800a870:	18c0      	addlt	r0, r0, r3
 800a872:	4770      	bx	lr

0800a874 <_raise_r>:
 800a874:	291f      	cmp	r1, #31
 800a876:	b538      	push	{r3, r4, r5, lr}
 800a878:	4604      	mov	r4, r0
 800a87a:	460d      	mov	r5, r1
 800a87c:	d904      	bls.n	800a888 <_raise_r+0x14>
 800a87e:	2316      	movs	r3, #22
 800a880:	6003      	str	r3, [r0, #0]
 800a882:	f04f 30ff 	mov.w	r0, #4294967295
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a88a:	b112      	cbz	r2, 800a892 <_raise_r+0x1e>
 800a88c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a890:	b94b      	cbnz	r3, 800a8a6 <_raise_r+0x32>
 800a892:	4620      	mov	r0, r4
 800a894:	f000 f830 	bl	800a8f8 <_getpid_r>
 800a898:	462a      	mov	r2, r5
 800a89a:	4601      	mov	r1, r0
 800a89c:	4620      	mov	r0, r4
 800a89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a2:	f000 b817 	b.w	800a8d4 <_kill_r>
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d00a      	beq.n	800a8c0 <_raise_r+0x4c>
 800a8aa:	1c59      	adds	r1, r3, #1
 800a8ac:	d103      	bne.n	800a8b6 <_raise_r+0x42>
 800a8ae:	2316      	movs	r3, #22
 800a8b0:	6003      	str	r3, [r0, #0]
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	e7e7      	b.n	800a886 <_raise_r+0x12>
 800a8b6:	2400      	movs	r4, #0
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8be:	4798      	blx	r3
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	e7e0      	b.n	800a886 <_raise_r+0x12>

0800a8c4 <raise>:
 800a8c4:	4b02      	ldr	r3, [pc, #8]	; (800a8d0 <raise+0xc>)
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	6818      	ldr	r0, [r3, #0]
 800a8ca:	f7ff bfd3 	b.w	800a874 <_raise_r>
 800a8ce:	bf00      	nop
 800a8d0:	20000014 	.word	0x20000014

0800a8d4 <_kill_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4d06      	ldr	r5, [pc, #24]	; (800a8f4 <_kill_r+0x20>)
 800a8da:	4604      	mov	r4, r0
 800a8dc:	4608      	mov	r0, r1
 800a8de:	4611      	mov	r1, r2
 800a8e0:	602b      	str	r3, [r5, #0]
 800a8e2:	f7f7 f930 	bl	8001b46 <_kill>
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	d102      	bne.n	800a8f0 <_kill_r+0x1c>
 800a8ea:	682b      	ldr	r3, [r5, #0]
 800a8ec:	b103      	cbz	r3, 800a8f0 <_kill_r+0x1c>
 800a8ee:	6023      	str	r3, [r4, #0]
 800a8f0:	bd38      	pop	{r3, r4, r5, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20000844 	.word	0x20000844

0800a8f8 <_getpid_r>:
 800a8f8:	f7f7 b91e 	b.w	8001b38 <_getpid>

0800a8fc <__sread>:
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	460c      	mov	r4, r1
 800a900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a904:	f000 f894 	bl	800aa30 <_read_r>
 800a908:	2800      	cmp	r0, #0
 800a90a:	bfab      	itete	ge
 800a90c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a90e:	89a3      	ldrhlt	r3, [r4, #12]
 800a910:	181b      	addge	r3, r3, r0
 800a912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a916:	bfac      	ite	ge
 800a918:	6563      	strge	r3, [r4, #84]	; 0x54
 800a91a:	81a3      	strhlt	r3, [r4, #12]
 800a91c:	bd10      	pop	{r4, pc}

0800a91e <__swrite>:
 800a91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a922:	461f      	mov	r7, r3
 800a924:	898b      	ldrh	r3, [r1, #12]
 800a926:	4605      	mov	r5, r0
 800a928:	05db      	lsls	r3, r3, #23
 800a92a:	460c      	mov	r4, r1
 800a92c:	4616      	mov	r6, r2
 800a92e:	d505      	bpl.n	800a93c <__swrite+0x1e>
 800a930:	2302      	movs	r3, #2
 800a932:	2200      	movs	r2, #0
 800a934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a938:	f000 f868 	bl	800aa0c <_lseek_r>
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	4632      	mov	r2, r6
 800a940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a944:	81a3      	strh	r3, [r4, #12]
 800a946:	4628      	mov	r0, r5
 800a948:	463b      	mov	r3, r7
 800a94a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a952:	f000 b817 	b.w	800a984 <_write_r>

0800a956 <__sseek>:
 800a956:	b510      	push	{r4, lr}
 800a958:	460c      	mov	r4, r1
 800a95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a95e:	f000 f855 	bl	800aa0c <_lseek_r>
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	bf15      	itete	ne
 800a968:	6560      	strne	r0, [r4, #84]	; 0x54
 800a96a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a96e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a972:	81a3      	strheq	r3, [r4, #12]
 800a974:	bf18      	it	ne
 800a976:	81a3      	strhne	r3, [r4, #12]
 800a978:	bd10      	pop	{r4, pc}

0800a97a <__sclose>:
 800a97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97e:	f000 b813 	b.w	800a9a8 <_close_r>
	...

0800a984 <_write_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4604      	mov	r4, r0
 800a988:	4608      	mov	r0, r1
 800a98a:	4611      	mov	r1, r2
 800a98c:	2200      	movs	r2, #0
 800a98e:	4d05      	ldr	r5, [pc, #20]	; (800a9a4 <_write_r+0x20>)
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	f7f7 f90e 	bl	8001bb4 <_write>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_write_r+0x1e>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_write_r+0x1e>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	20000844 	.word	0x20000844

0800a9a8 <_close_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4d05      	ldr	r5, [pc, #20]	; (800a9c4 <_close_r+0x1c>)
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	602b      	str	r3, [r5, #0]
 800a9b4:	f7f7 f91a 	bl	8001bec <_close>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d102      	bne.n	800a9c2 <_close_r+0x1a>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	b103      	cbz	r3, 800a9c2 <_close_r+0x1a>
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	20000844 	.word	0x20000844

0800a9c8 <_fstat_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	4d06      	ldr	r5, [pc, #24]	; (800a9e8 <_fstat_r+0x20>)
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	602b      	str	r3, [r5, #0]
 800a9d6:	f7f7 f914 	bl	8001c02 <_fstat>
 800a9da:	1c43      	adds	r3, r0, #1
 800a9dc:	d102      	bne.n	800a9e4 <_fstat_r+0x1c>
 800a9de:	682b      	ldr	r3, [r5, #0]
 800a9e0:	b103      	cbz	r3, 800a9e4 <_fstat_r+0x1c>
 800a9e2:	6023      	str	r3, [r4, #0]
 800a9e4:	bd38      	pop	{r3, r4, r5, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20000844 	.word	0x20000844

0800a9ec <_isatty_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4d05      	ldr	r5, [pc, #20]	; (800aa08 <_isatty_r+0x1c>)
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	602b      	str	r3, [r5, #0]
 800a9f8:	f7f7 f912 	bl	8001c20 <_isatty>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_isatty_r+0x1a>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_isatty_r+0x1a>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	20000844 	.word	0x20000844

0800aa0c <_lseek_r>:
 800aa0c:	b538      	push	{r3, r4, r5, lr}
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4608      	mov	r0, r1
 800aa12:	4611      	mov	r1, r2
 800aa14:	2200      	movs	r2, #0
 800aa16:	4d05      	ldr	r5, [pc, #20]	; (800aa2c <_lseek_r+0x20>)
 800aa18:	602a      	str	r2, [r5, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f7f7 f90a 	bl	8001c34 <_lseek>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_lseek_r+0x1e>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_lseek_r+0x1e>
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	20000844 	.word	0x20000844

0800aa30 <_read_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	4611      	mov	r1, r2
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4d05      	ldr	r5, [pc, #20]	; (800aa50 <_read_r+0x20>)
 800aa3c:	602a      	str	r2, [r5, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f7f7 f89b 	bl	8001b7a <_read>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	d102      	bne.n	800aa4e <_read_r+0x1e>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	b103      	cbz	r3, 800aa4e <_read_r+0x1e>
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	bd38      	pop	{r3, r4, r5, pc}
 800aa50:	20000844 	.word	0x20000844

0800aa54 <_init>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	bf00      	nop
 800aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5a:	bc08      	pop	{r3}
 800aa5c:	469e      	mov	lr, r3
 800aa5e:	4770      	bx	lr

0800aa60 <_fini>:
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	bf00      	nop
 800aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa66:	bc08      	pop	{r3}
 800aa68:	469e      	mov	lr, r3
 800aa6a:	4770      	bx	lr
