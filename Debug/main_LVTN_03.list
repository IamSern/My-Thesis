
main_LVTN_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08008e68  08008e68  00018e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009344  08009344  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009344  08009344  00019344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800934c  0800934c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009350  08009350  00019350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  200001e0  08009534  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  08009534  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140d0  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ff  00000000  00000000  000342d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00036bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00037dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e8d  00000000  00000000  00038ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147da  00000000  00000000  00052d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091570  00000000  00000000  0006753f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8aaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061e8  00000000  00000000  000f8b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e4c 	.word	0x08008e4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008e4c 	.word	0x08008e4c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b9a6 	b.w	8000ecc <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f83e 	bl	8000c08 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2lz>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	4605      	mov	r5, r0
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f7ff ff09 	bl	80009bc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x20>
 8000bac:	4628      	mov	r0, r5
 8000bae:	4621      	mov	r1, r4
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fc7f 	bl	80004d8 <__aeabi_dmul>
 8000bda:	f7ff ff55 	bl	8000a88 <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc00 	bl	80003e4 <__aeabi_ui2d>
 8000be4:	2200      	movs	r2, #0
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <__aeabi_d2ulz+0x38>)
 8000be8:	f7ff fc76 	bl	80004d8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fab8 	bl	8000168 <__aeabi_dsub>
 8000bf8:	f7ff ff46 	bl	8000a88 <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	468e      	mov	lr, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f040 8083 	bne.w	8000d20 <__udivmoddi4+0x118>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4617      	mov	r7, r2
 8000c1e:	d947      	bls.n	8000cb0 <__udivmoddi4+0xa8>
 8000c20:	fab2 f382 	clz	r3, r2
 8000c24:	b14b      	cbz	r3, 8000c3a <__udivmoddi4+0x32>
 8000c26:	f1c3 0120 	rsb	r1, r3, #32
 8000c2a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	409f      	lsls	r7, r3
 8000c34:	ea41 0e0e 	orr.w	lr, r1, lr
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3e:	fbbe fcf8 	udiv	ip, lr, r8
 8000c42:	fa1f f987 	uxth.w	r9, r7
 8000c46:	fb08 e21c 	mls	r2, r8, ip, lr
 8000c4a:	fb0c f009 	mul.w	r0, ip, r9
 8000c4e:	0c21      	lsrs	r1, r4, #16
 8000c50:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x66>
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000c5e:	f080 8118 	bcs.w	8000e92 <__udivmoddi4+0x28a>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f240 8115 	bls.w	8000e92 <__udivmoddi4+0x28a>
 8000c68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c6c:	443a      	add	r2, r7
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	fbb2 f0f8 	udiv	r0, r2, r8
 8000c74:	fb08 2210 	mls	r2, r8, r0, r2
 8000c78:	fb00 f109 	mul.w	r1, r0, r9
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c82:	42a1      	cmp	r1, r4
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8c:	f080 8103 	bcs.w	8000e96 <__udivmoddi4+0x28e>
 8000c90:	42a1      	cmp	r1, r4
 8000c92:	f240 8100 	bls.w	8000e96 <__udivmoddi4+0x28e>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	1a64      	subs	r4, r4, r1
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	e9c6 4200 	strd	r4, r2, [r6]
 8000cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xac>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f382 	clz	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d14f      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cbc:	1a8d      	subs	r5, r1, r2
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cc4:	fa1f f882 	uxth.w	r8, r2
 8000cc8:	fbb5 fcfe 	udiv	ip, r5, lr
 8000ccc:	fb0e 551c 	mls	r5, lr, ip, r5
 8000cd0:	fb08 f00c 	mul.w	r0, r8, ip
 8000cd4:	0c22      	lsrs	r2, r4, #16
 8000cd6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000cda:	42a8      	cmp	r0, r5
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0xe6>
 8000cde:	197d      	adds	r5, r7, r5
 8000ce0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0xe4>
 8000ce6:	42a8      	cmp	r0, r5
 8000ce8:	f200 80e9 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000cec:	4694      	mov	ip, r2
 8000cee:	1a2d      	subs	r5, r5, r0
 8000cf0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000cf4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000cf8:	fb08 f800 	mul.w	r8, r8, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d02:	45a0      	cmp	r8, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x10e>
 8000d06:	193c      	adds	r4, r7, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x10c>
 8000d0e:	45a0      	cmp	r8, r4
 8000d10:	f200 80d9 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 0408 	sub.w	r4, r4, r8
 8000d1a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1e:	e7c0      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	f000 80b1 	beq.w	8000e8c <__udivmoddi4+0x284>
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e9c6 0500 	strd	r0, r5, [r6]
 8000d30:	4608      	mov	r0, r1
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d14b      	bne.n	8000dd6 <__udivmoddi4+0x1ce>
 8000d3e:	42ab      	cmp	r3, r5
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b9 	bhi.w	8000eba <__udivmoddi4+0x2b2>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb65 0303 	sbc.w	r3, r5, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	469e      	mov	lr, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0aa      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000d56:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d5a:	e7a7      	b.n	8000cac <__udivmoddi4+0xa4>
 8000d5c:	409f      	lsls	r7, r3
 8000d5e:	f1c3 0220 	rsb	r2, r3, #32
 8000d62:	40d1      	lsrs	r1, r2
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d74:	fa24 f202 	lsr.w	r2, r4, r2
 8000d78:	409d      	lsls	r5, r3
 8000d7a:	fb00 fc08 	mul.w	ip, r0, r8
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	0c15      	lsrs	r5, r2, #16
 8000d82:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d86:	45ac      	cmp	ip, r5
 8000d88:	fa04 f403 	lsl.w	r4, r4, r3
 8000d8c:	d909      	bls.n	8000da2 <__udivmoddi4+0x19a>
 8000d8e:	197d      	adds	r5, r7, r5
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	f080 808f 	bcs.w	8000eb6 <__udivmoddi4+0x2ae>
 8000d98:	45ac      	cmp	ip, r5
 8000d9a:	f240 808c 	bls.w	8000eb6 <__udivmoddi4+0x2ae>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	443d      	add	r5, r7
 8000da2:	eba5 050c 	sub.w	r5, r5, ip
 8000da6:	fbb5 f1fe 	udiv	r1, r5, lr
 8000daa:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000dae:	fb01 f908 	mul.w	r9, r1, r8
 8000db2:	b295      	uxth	r5, r2
 8000db4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000db8:	45a9      	cmp	r9, r5
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	197d      	adds	r5, r7, r5
 8000dbe:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dc2:	d274      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000dc4:	45a9      	cmp	r9, r5
 8000dc6:	d972      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000dc8:	3902      	subs	r1, #2
 8000dca:	443d      	add	r5, r7
 8000dcc:	eba5 0509 	sub.w	r5, r5, r9
 8000dd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd4:	e778      	b.n	8000cc8 <__udivmoddi4+0xc0>
 8000dd6:	f1c1 0720 	rsb	r7, r1, #32
 8000dda:	408b      	lsls	r3, r1
 8000ddc:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de0:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de4:	fa25 f407 	lsr.w	r4, r5, r7
 8000de8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dec:	fbb4 f9fe 	udiv	r9, r4, lr
 8000df0:	fa1f f88c 	uxth.w	r8, ip
 8000df4:	fb0e 4419 	mls	r4, lr, r9, r4
 8000df8:	fa20 f307 	lsr.w	r3, r0, r7
 8000dfc:	fb09 fa08 	mul.w	sl, r9, r8
 8000e00:	408d      	lsls	r5, r1
 8000e02:	431d      	orrs	r5, r3
 8000e04:	0c2b      	lsrs	r3, r5, #16
 8000e06:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e10:	fa00 f301 	lsl.w	r3, r0, r1
 8000e14:	d909      	bls.n	8000e2a <__udivmoddi4+0x222>
 8000e16:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1e:	d248      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e20:	45a2      	cmp	sl, r4
 8000e22:	d946      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e24:	f1a9 0902 	sub.w	r9, r9, #2
 8000e28:	4464      	add	r4, ip
 8000e2a:	eba4 040a 	sub.w	r4, r4, sl
 8000e2e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e32:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e36:	fb00 fa08 	mul.w	sl, r0, r8
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e40:	45a2      	cmp	sl, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x24e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e4c:	d22d      	bcs.n	8000eaa <__udivmoddi4+0x2a2>
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	d92b      	bls.n	8000eaa <__udivmoddi4+0x2a2>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	eba4 040a 	sub.w	r4, r4, sl
 8000e62:	454c      	cmp	r4, r9
 8000e64:	46c6      	mov	lr, r8
 8000e66:	464d      	mov	r5, r9
 8000e68:	d319      	bcc.n	8000e9e <__udivmoddi4+0x296>
 8000e6a:	d016      	beq.n	8000e9a <__udivmoddi4+0x292>
 8000e6c:	b15e      	cbz	r6, 8000e86 <__udivmoddi4+0x27e>
 8000e6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e72:	eb64 0405 	sbc.w	r4, r4, r5
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c6 7400 	strd	r7, r4, [r6]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e70c      	b.n	8000cac <__udivmoddi4+0xa4>
 8000e92:	468c      	mov	ip, r1
 8000e94:	e6eb      	b.n	8000c6e <__udivmoddi4+0x66>
 8000e96:	4610      	mov	r0, r2
 8000e98:	e6ff      	b.n	8000c9a <__udivmoddi4+0x92>
 8000e9a:	4543      	cmp	r3, r8
 8000e9c:	d2e6      	bcs.n	8000e6c <__udivmoddi4+0x264>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb69 050c 	sbc.w	r5, r9, ip
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7e0      	b.n	8000e6c <__udivmoddi4+0x264>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e7d3      	b.n	8000e56 <__udivmoddi4+0x24e>
 8000eae:	4611      	mov	r1, r2
 8000eb0:	e78c      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e7b9      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e773      	b.n	8000da2 <__udivmoddi4+0x19a>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e749      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebe:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec2:	443d      	add	r5, r7
 8000ec4:	e713      	b.n	8000cee <__udivmoddi4+0xe6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	e724      	b.n	8000d16 <__udivmoddi4+0x10e>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f1b      	ldrb	r3, [r3, #28]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	f040 8083 	bne.w	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000ee2:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11a      	bne.n	8000f20 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000eea:	2100      	movs	r1, #0
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f002 fd63 	bl	80039b8 <HAL_TIM_ReadCapturedValue>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a41      	ldr	r2, [pc, #260]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ef6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 020a 	bic.w	r2, r2, #10
 8000f0c:	621a      	str	r2, [r3, #32]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6a1a      	ldr	r2, [r3, #32]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0202 	orr.w	r2, r2, #2
 8000f1c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000f1e:	e063      	b.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d15f      	bne.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f002 fd44 	bl	80039b8 <HAL_TIM_ReadCapturedValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a33      	ldr	r2, [pc, #204]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f34:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d907      	bls.n	8000f5a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	4a2b      	ldr	r2, [pc, #172]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e00f      	b.n	8000f7a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d909      	bls.n	8000f7a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f74:	33ff      	adds	r3, #255	; 0xff
 8000f76:	4a23      	ldr	r2, [pc, #140]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f78:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa30 	bl	80003e4 <__aeabi_ui2d>
 8000f84:	a31a      	add	r3, pc, #104	; (adr r3, 8000ff0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff faa5 	bl	80004d8 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9e:	f7ff fbc5 	bl	800072c <__aeabi_ddiv>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fd6d 	bl	8000a88 <__aeabi_d2uiz>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fb4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6a1a      	ldr	r2, [r3, #32]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020a 	bic.w	r2, r2, #10
 8000fca:	621a      	str	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6a12      	ldr	r2, [r2, #32]
 8000fd6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0202 	bic.w	r2, r2, #2
 8000fe6:	60da      	str	r2, [r3, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	b020c49c 	.word	0xb020c49c
 8000ff4:	3fa16872 	.word	0x3fa16872
 8000ff8:	20000208 	.word	0x20000208
 8000ffc:	200001fc 	.word	0x200001fc
 8001000:	20000200 	.word	0x20000200
 8001004:	20000204 	.word	0x20000204
 8001008:	20000209 	.word	0x20000209
 800100c:	2000035c 	.word	0x2000035c

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f000 fd4d 	bl	8001ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f841 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 f9ed 	bl	80013fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001022:	f000 f8b1 	bl	8001188 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001026:	f000 f8e5 	bl	80011f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800102a:	f000 f919 	bl	8001260 <MX_TIM1_Init>
  MX_I2C1_Init();
 800102e:	f000 f87d 	bl	800112c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001032:	f000 f9b9 	bl	80013a8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001036:	f000 f969 	bl	800130c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  TimerDelay_Init();
 800103a:	f003 fa53 	bl	80044e4 <TimerDelay_Init>
	ST7565_Init();
 800103e:	f003 f935 	bl	80042ac <ST7565_Init>
	HX711_init();
 8001042:	f003 f973 	bl	800432c <HX711_init>

	HAL_Delay(100);
 8001046:	2064      	movs	r0, #100	; 0x64
 8001048:	f000 fd96 	bl	8001b78 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800104c:	2100      	movs	r1, #0
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <main+0x80>)
 8001050:	f002 f94c 	bl	80032ec <HAL_TIM_IC_Start_IT>
	// UImeas_pressure();
  // uint8_t press = 0;
  // char press_ch[5];
  unsigned long noload;
  char noload_ch[10];
  float weight = 0;
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  char weight_ch[5];
  HAL_GPIO_WritePin(Pump_GPIO_Port, Pump_Pin, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <main+0x84>)
 8001062:	f001 f856 	bl	8002112 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Valve_GPIO_Port, Valve_Pin, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	2110      	movs	r1, #16
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <main+0x88>)
 800106c:	f001 f851 	bl	8002112 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Buzzer_GPIO_Port,Buzzer_Pin, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <main+0x8c>)
 8001078:	f001 f84b 	bl	8002112 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800107c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <main+0x8c>)
 8001082:	f001 f85e 	bl	8002142 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001086:	2064      	movs	r0, #100	; 0x64
 8001088:	f000 fd76 	bl	8001b78 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800108c:	e7f6      	b.n	800107c <main+0x6c>
 800108e:	bf00      	nop
 8001090:	2000035c 	.word	0x2000035c
 8001094:	40010800 	.word	0x40010800
 8001098:	40010c00 	.word	0x40010c00
 800109c:	40011000 	.word	0x40011000

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	; 0x40
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	2228      	movs	r2, #40	; 0x28
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 fabc 	bl	800462c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d4:	2302      	movs	r3, #2
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 f987 	bl	80023fc <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010f4:	f000 fa14 	bl	8001520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2302      	movs	r3, #2
 80010fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001108:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2102      	movs	r1, #2
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fbf2 	bl	80028fc <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800111e:	f000 f9ff 	bl	8001520 <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	3740      	adds	r7, #64	; 0x40
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_I2C1_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <MX_I2C1_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_I2C1_Init+0x50>)
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_I2C1_Init+0x58>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_I2C1_Init+0x50>)
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_I2C1_Init+0x50>)
 800116a:	f001 f803 	bl	8002174 <HAL_I2C_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 f9d4 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000304 	.word	0x20000304
 8001180:	40005400 	.word	0x40005400
 8001184:	000186a0 	.word	0x000186a0

08001188 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_SPI1_Init+0x64>)
 800118e:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <MX_SPI1_Init+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_SPI1_Init+0x64>)
 8001194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001198:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_SPI1_Init+0x64>)
 80011b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_SPI1_Init+0x64>)
 80011bc:	2208      	movs	r2, #8
 80011be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_SPI1_Init+0x64>)
 80011d4:	220a      	movs	r2, #10
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_SPI1_Init+0x64>)
 80011da:	f001 fd29 	bl	8002c30 <HAL_SPI_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011e4:	f000 f99c 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200003a4 	.word	0x200003a4
 80011f0:	40013000 	.word	0x40013000

080011f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_SPI2_Init+0x64>)
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <MX_SPI2_Init+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_SPI2_Init+0x64>)
 8001200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001204:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_SPI2_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_SPI2_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_SPI2_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_SPI2_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_SPI2_Init+0x64>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_SPI2_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_SPI2_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_SPI2_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_SPI2_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_SPI2_Init+0x64>)
 8001240:	220a      	movs	r2, #10
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_SPI2_Init+0x64>)
 8001246:	f001 fcf3 	bl	8002c30 <HAL_SPI_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001250:	f000 f966 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000264 	.word	0x20000264
 800125c:	40003800 	.word	0x40003800

08001260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_TIM1_Init+0xa4>)
 800127e:	4a22      	ldr	r2, [pc, #136]	; (8001308 <MX_TIM1_Init+0xa8>)
 8001280:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_TIM1_Init+0xa4>)
 8001284:	2247      	movs	r2, #71	; 0x47
 8001286:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM1_Init+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_TIM1_Init+0xa4>)
 8001290:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001294:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_TIM1_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM1_Init+0xa4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_TIM1_Init+0xa4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80012a8:	4816      	ldr	r0, [pc, #88]	; (8001304 <MX_TIM1_Init+0xa4>)
 80012aa:	f001 ffcf 	bl	800324c <HAL_TIM_IC_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012b4:	f000 f934 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <MX_TIM1_Init+0xa4>)
 80012c8:	f002 fe08 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012d2:	f000 f925 	bl	8001520 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012da:	2301      	movs	r3, #1
 80012dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_TIM1_Init+0xa4>)
 80012ee:	f002 fa0b 	bl	8003708 <HAL_TIM_IC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80012f8:	f000 f912 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000035c 	.word	0x2000035c
 8001308:	40012c00 	.word	0x40012c00

0800130c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_TIM4_Init+0x94>)
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <MX_TIM4_Init+0x98>)
 800132c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_TIM4_Init+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_TIM4_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_TIM4_Init+0x94>)
 800133c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001340:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_TIM4_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_TIM4_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800134e:	4814      	ldr	r0, [pc, #80]	; (80013a0 <MX_TIM4_Init+0x94>)
 8001350:	f001 fee2 	bl	8003118 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800135a:	f000 f8e1 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_TIM4_Init+0x94>)
 800136c:	f002 fa60 	bl	8003830 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001376:	f000 f8d3 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_TIM4_Init+0x94>)
 8001388:	f002 fda8 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001392:	f000 f8c5 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200002bc 	.word	0x200002bc
 80013a4:	40000800 	.word	0x40000800

080013a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART2_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013e0:	f002 fdec 	bl	8003fbc <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 f899 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200003fc 	.word	0x200003fc
 80013f8:	40004400 	.word	0x40004400

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <MX_GPIO_Init+0x114>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <MX_GPIO_Init+0x114>)
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <MX_GPIO_Init+0x114>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001428:	4b39      	ldr	r3, [pc, #228]	; (8001510 <MX_GPIO_Init+0x114>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a38      	ldr	r2, [pc, #224]	; (8001510 <MX_GPIO_Init+0x114>)
 800142e:	f043 0320 	orr.w	r3, r3, #32
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <MX_GPIO_Init+0x114>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <MX_GPIO_Init+0x114>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a32      	ldr	r2, [pc, #200]	; (8001510 <MX_GPIO_Init+0x114>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <MX_GPIO_Init+0x114>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_GPIO_Init+0x114>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a2c      	ldr	r2, [pc, #176]	; (8001510 <MX_GPIO_Init+0x114>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_GPIO_Init+0x114>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|Buzzer_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001476:	4827      	ldr	r0, [pc, #156]	; (8001514 <MX_GPIO_Init+0x118>)
 8001478:	f000 fe4b 	bl	8002112 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|Pump_Pin|GPIO_PIN_10
 800147c:	2200      	movs	r2, #0
 800147e:	f641 6111 	movw	r1, #7697	; 0x1e11
 8001482:	4825      	ldr	r0, [pc, #148]	; (8001518 <MX_GPIO_Init+0x11c>)
 8001484:	f000 fe45 	bl	8002112 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|Valve_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800148e:	4823      	ldr	r0, [pc, #140]	; (800151c <MX_GPIO_Init+0x120>)
 8001490:	f000 fe3f 	bl	8002112 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 Buzzer_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|Buzzer_Pin;
 8001494:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4619      	mov	r1, r3
 80014ac:	4819      	ldr	r0, [pc, #100]	; (8001514 <MX_GPIO_Init+0x118>)
 80014ae:	f000 fc95 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 Pump_Pin PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|Pump_Pin|GPIO_PIN_10
 80014b2:	f641 6311 	movw	r3, #7697	; 0x1e11
 80014b6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4619      	mov	r1, r3
 80014ca:	4813      	ldr	r0, [pc, #76]	; (8001518 <MX_GPIO_Init+0x11c>)
 80014cc:	f000 fc86 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 Valve_Pin PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|Valve_Pin|GPIO_PIN_9;
 80014d0:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2302      	movs	r3, #2
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_GPIO_Init+0x120>)
 80014ea:	f000 fc77 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_GPIO_Init+0x120>)
 8001504:	f000 fc6a 	bl	8001ddc <HAL_GPIO_Init>

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	40011000 	.word	0x40011000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_MspInit+0x5c>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a14      	ldr	r2, [pc, #80]	; (8001588 <HAL_MspInit+0x5c>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_MspInit+0x5c>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_MspInit+0x5c>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_MspInit+0x5c>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	61d3      	str	r3, [r2, #28]
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_MspInit+0x5c>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_MspInit+0x60>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_MspInit+0x60>)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000

08001590 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <HAL_I2C_MspInit+0x70>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d123      	bne.n	80015f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a13      	ldr	r2, [pc, #76]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c8:	23c0      	movs	r3, #192	; 0xc0
 80015ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015cc:	2312      	movs	r3, #18
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	480b      	ldr	r0, [pc, #44]	; (8001608 <HAL_I2C_MspInit+0x78>)
 80015dc:	f000 fbfe 	bl	8001ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ea:	61d3      	str	r3, [r2, #28]
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40005400 	.word	0x40005400
 8001604:	40021000 	.word	0x40021000
 8001608:	40010c00 	.word	0x40010c00

0800160c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0318 	add.w	r3, r7, #24
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a37      	ldr	r2, [pc, #220]	; (8001704 <HAL_SPI_MspInit+0xf8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d130      	bne.n	800168e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a35      	ldr	r2, [pc, #212]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 8001632:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a2f      	ldr	r2, [pc, #188]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	4619      	mov	r1, r3
 800166e:	4827      	ldr	r0, [pc, #156]	; (800170c <HAL_SPI_MspInit+0x100>)
 8001670:	f000 fbb4 	bl	8001ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001674:	2340      	movs	r3, #64	; 0x40
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	4619      	mov	r1, r3
 8001686:	4821      	ldr	r0, [pc, #132]	; (800170c <HAL_SPI_MspInit+0x100>)
 8001688:	f000 fba8 	bl	8001ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800168c:	e036      	b.n	80016fc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <HAL_SPI_MspInit+0x104>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d131      	bne.n	80016fc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 800169e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a2:	61d3      	str	r3, [r2, #28]
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_SPI_MspInit+0xfc>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80016c8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0318 	add.w	r3, r7, #24
 80016da:	4619      	mov	r1, r3
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <HAL_SPI_MspInit+0x108>)
 80016de:	f000 fb7d 	bl	8001ddc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4807      	ldr	r0, [pc, #28]	; (8001714 <HAL_SPI_MspInit+0x108>)
 80016f8:	f000 fb70 	bl	8001ddc <HAL_GPIO_Init>
}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40013000 	.word	0x40013000
 8001708:	40021000 	.word	0x40021000
 800170c:	40010800 	.word	0x40010800
 8001710:	40003800 	.word	0x40003800
 8001714:	40010c00 	.word	0x40010c00

08001718 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_TIM_IC_MspInit+0x84>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d12c      	bne.n	8001792 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_TIM_IC_MspInit+0x88>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <HAL_TIM_IC_MspInit+0x88>)
 800173e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_TIM_IC_MspInit+0x88>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_TIM_IC_MspInit+0x88>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <HAL_TIM_IC_MspInit+0x88>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_TIM_IC_MspInit+0x88>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	4619      	mov	r1, r3
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <HAL_TIM_IC_MspInit+0x8c>)
 800177e:	f000 fb2d 	bl	8001ddc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	201b      	movs	r0, #27
 8001788:	f000 faf1 	bl	8001d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800178c:	201b      	movs	r0, #27
 800178e:	f000 fb0a 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010800 	.word	0x40010800

080017a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a09      	ldr	r2, [pc, #36]	; (80017dc <HAL_TIM_Base_MspInit+0x34>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10b      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_TIM_Base_MspInit+0x38>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_TIM_Base_MspInit+0x38>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_TIM_Base_MspInit+0x38>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40000800 	.word	0x40000800
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_UART_MspInit+0x88>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d12f      	bne.n	8001864 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_UART_MspInit+0x8c>)
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_UART_MspInit+0x8c>)
 800180a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180e:	61d3      	str	r3, [r2, #28]
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_UART_MspInit+0x8c>)
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_UART_MspInit+0x8c>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a13      	ldr	r2, [pc, #76]	; (8001870 <HAL_UART_MspInit+0x8c>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_UART_MspInit+0x8c>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001834:	2304      	movs	r3, #4
 8001836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4619      	mov	r1, r3
 8001846:	480b      	ldr	r0, [pc, #44]	; (8001874 <HAL_UART_MspInit+0x90>)
 8001848:	f000 fac8 	bl	8001ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800184c:	2308      	movs	r3, #8
 800184e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_UART_MspInit+0x90>)
 8001860:	f000 fabc 	bl	8001ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40004400 	.word	0x40004400
 8001870:	40021000 	.word	0x40021000
 8001874:	40010800 	.word	0x40010800

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018be:	f000 f93f 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM1_CC_IRQHandler+0x10>)
 80018ce:	f001 fe13 	bl	80034f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000035c 	.word	0x2000035c

080018dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <_kill>:

int _kill(int pid, int sig)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018f4:	f002 fe70 	bl	80045d8 <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2216      	movs	r2, #22
 80018fc:	601a      	str	r2, [r3, #0]
	return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_exit>:

void _exit (int status)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001912:	f04f 31ff 	mov.w	r1, #4294967295
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffe7 	bl	80018ea <_kill>
	while (1) {}		/* Make sure we hang here */
 800191c:	e7fe      	b.n	800191c <_exit+0x12>

0800191e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e00a      	b.n	8001946 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001930:	f3af 8000 	nop.w
 8001934:	4601      	mov	r1, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	b2ca      	uxtb	r2, r1
 800193e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	dbf0      	blt.n	8001930 <_read+0x12>
	}

return len;
 800194e:	687b      	ldr	r3, [r7, #4]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e009      	b.n	800197e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	60ba      	str	r2, [r7, #8]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	429a      	cmp	r2, r3
 8001984:	dbf1      	blt.n	800196a <_write+0x12>
	}
	return len;
 8001986:	687b      	ldr	r3, [r7, #4]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_close>:

int _close(int file)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	return -1;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b6:	605a      	str	r2, [r3, #4]
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <_isatty>:

int _isatty(int file)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
	return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a20:	f002 fdda 	bl	80045d8 <__errno>
 8001a24:	4603      	mov	r3, r0
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <_sbrk+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20005000 	.word	0x20005000
 8001a50:	00000400 	.word	0x00000400
 8001a54:	2000020c 	.word	0x2000020c
 8001a58:	20000850 	.word	0x20000850

08001a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a6a:	e003      	b.n	8001a74 <LoopCopyDataInit>

08001a6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a72:	3104      	adds	r1, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a74:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a7c:	d3f6      	bcc.n	8001a6c <CopyDataInit>
  ldr r2, =_sbss
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a80:	e002      	b.n	8001a88 <LoopFillZerobss>

08001a82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a84:	f842 3b04 	str.w	r3, [r2], #4

08001a88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a8c:	d3f9      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a8e:	f7ff ffe5 	bl	8001a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f002 fda7 	bl	80045e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a96:	f7ff fabb 	bl	8001010 <main>
  bx lr
 8001a9a:	4770      	bx	lr
  ldr r3, =_sidata
 8001a9c:	08009354 	.word	0x08009354
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001aa4:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001aa8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001aac:	20000850 	.word	0x20000850

08001ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_2_IRQHandler>
	...

08001ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_Init+0x28>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_Init+0x28>)
 8001abe:	f043 0310 	orr.w	r3, r3, #16
 8001ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	f000 f947 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 f808 	bl	8001ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad0:	f7ff fd2c 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40022000 	.word	0x40022000

08001ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x54>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x58>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f95f 	bl	8001dc2 <HAL_SYSTICK_Config>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00e      	b.n	8001b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b0f      	cmp	r3, #15
 8001b12:	d80a      	bhi.n	8001b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b14:	2200      	movs	r2, #0
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f000 f927 	bl	8001d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b20:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <HAL_InitTick+0x5c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_IncTick+0x1c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_IncTick+0x20>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a03      	ldr	r2, [pc, #12]	; (8001b60 <HAL_IncTick+0x20>)
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	2000043c 	.word	0x2000043c

08001b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b02      	ldr	r3, [pc, #8]	; (8001b74 <HAL_GetTick+0x10>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	2000043c 	.word	0x2000043c

08001b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff fff0 	bl	8001b64 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_Delay+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b9e:	bf00      	nop
 8001ba0:	f7ff ffe0 	bl	8001b64 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db0b      	blt.n	8001c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4906      	ldr	r1, [pc, #24]	; (8001c58 <__NVIC_EnableIRQ+0x34>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d24:	d301      	bcc.n	8001d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00f      	b.n	8001d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <SysTick_Config+0x40>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d32:	210f      	movs	r1, #15
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f7ff ff90 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SysTick_Config+0x40>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SysTick_Config+0x40>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff2d 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d80:	f7ff ff42 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f7ff ff90 	bl	8001cb0 <NVIC_EncodePriority>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff5f 	bl	8001c5c <__NVIC_SetPriority>
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff35 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ffa2 	bl	8001d14 <SysTick_Config>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b08b      	sub	sp, #44	; 0x2c
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dee:	e169      	b.n	80020c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df0:	2201      	movs	r2, #1
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8158 	bne.w	80020be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a9a      	ldr	r2, [pc, #616]	; (800207c <HAL_GPIO_Init+0x2a0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d05e      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e18:	4a98      	ldr	r2, [pc, #608]	; (800207c <HAL_GPIO_Init+0x2a0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d875      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e1e:	4a98      	ldr	r2, [pc, #608]	; (8002080 <HAL_GPIO_Init+0x2a4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d058      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e24:	4a96      	ldr	r2, [pc, #600]	; (8002080 <HAL_GPIO_Init+0x2a4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d86f      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e2a:	4a96      	ldr	r2, [pc, #600]	; (8002084 <HAL_GPIO_Init+0x2a8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d052      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e30:	4a94      	ldr	r2, [pc, #592]	; (8002084 <HAL_GPIO_Init+0x2a8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d869      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e36:	4a94      	ldr	r2, [pc, #592]	; (8002088 <HAL_GPIO_Init+0x2ac>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d04c      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e3c:	4a92      	ldr	r2, [pc, #584]	; (8002088 <HAL_GPIO_Init+0x2ac>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d863      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e42:	4a92      	ldr	r2, [pc, #584]	; (800208c <HAL_GPIO_Init+0x2b0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d046      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e48:	4a90      	ldr	r2, [pc, #576]	; (800208c <HAL_GPIO_Init+0x2b0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d85d      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e4e:	2b12      	cmp	r3, #18
 8001e50:	d82a      	bhi.n	8001ea8 <HAL_GPIO_Init+0xcc>
 8001e52:	2b12      	cmp	r3, #18
 8001e54:	d859      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e56:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <HAL_GPIO_Init+0x80>)
 8001e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5c:	08001ed7 	.word	0x08001ed7
 8001e60:	08001eb1 	.word	0x08001eb1
 8001e64:	08001ec3 	.word	0x08001ec3
 8001e68:	08001f05 	.word	0x08001f05
 8001e6c:	08001f0b 	.word	0x08001f0b
 8001e70:	08001f0b 	.word	0x08001f0b
 8001e74:	08001f0b 	.word	0x08001f0b
 8001e78:	08001f0b 	.word	0x08001f0b
 8001e7c:	08001f0b 	.word	0x08001f0b
 8001e80:	08001f0b 	.word	0x08001f0b
 8001e84:	08001f0b 	.word	0x08001f0b
 8001e88:	08001f0b 	.word	0x08001f0b
 8001e8c:	08001f0b 	.word	0x08001f0b
 8001e90:	08001f0b 	.word	0x08001f0b
 8001e94:	08001f0b 	.word	0x08001f0b
 8001e98:	08001f0b 	.word	0x08001f0b
 8001e9c:	08001f0b 	.word	0x08001f0b
 8001ea0:	08001eb9 	.word	0x08001eb9
 8001ea4:	08001ecd 	.word	0x08001ecd
 8001ea8:	4a79      	ldr	r2, [pc, #484]	; (8002090 <HAL_GPIO_Init+0x2b4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eae:	e02c      	b.n	8001f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e029      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e024      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	3308      	adds	r3, #8
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e01f      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e01a      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	623b      	str	r3, [r7, #32]
          break;
 8001ee2:	e013      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eec:	2308      	movs	r3, #8
 8001eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	611a      	str	r2, [r3, #16]
          break;
 8001ef6:	e009      	b.n	8001f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	615a      	str	r2, [r3, #20]
          break;
 8001f02:	e003      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
          break;
 8001f08:	e000      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          break;
 8001f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d801      	bhi.n	8001f16 <HAL_GPIO_Init+0x13a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_Init+0x13e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2bff      	cmp	r3, #255	; 0xff
 8001f20:	d802      	bhi.n	8001f28 <HAL_GPIO_Init+0x14c>
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	e002      	b.n	8001f2e <HAL_GPIO_Init+0x152>
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3b08      	subs	r3, #8
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	210f      	movs	r1, #15
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80b1 	beq.w	80020be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f5c:	4b4d      	ldr	r3, [pc, #308]	; (8002094 <HAL_GPIO_Init+0x2b8>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a4c      	ldr	r2, [pc, #304]	; (8002094 <HAL_GPIO_Init+0x2b8>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_GPIO_Init+0x2b8>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f74:	4a48      	ldr	r2, [pc, #288]	; (8002098 <HAL_GPIO_Init+0x2bc>)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a40      	ldr	r2, [pc, #256]	; (800209c <HAL_GPIO_Init+0x2c0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <HAL_GPIO_Init+0x1ec>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3f      	ldr	r2, [pc, #252]	; (80020a0 <HAL_GPIO_Init+0x2c4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3e      	ldr	r2, [pc, #248]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d007      	beq.n	8001fc0 <HAL_GPIO_Init+0x1e4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3d      	ldr	r2, [pc, #244]	; (80020a8 <HAL_GPIO_Init+0x2cc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_GPIO_Init+0x1e0>
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e006      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	e004      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e002      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fcc:	f002 0203 	and.w	r2, r2, #3
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	4093      	lsls	r3, r2
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fda:	492f      	ldr	r1, [pc, #188]	; (8002098 <HAL_GPIO_Init+0x2bc>)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	492c      	ldr	r1, [pc, #176]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002002:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	4928      	ldr	r1, [pc, #160]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800200c:	4013      	ands	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4922      	ldr	r1, [pc, #136]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	491e      	ldr	r1, [pc, #120]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4918      	ldr	r1, [pc, #96]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	43db      	mvns	r3, r3
 800205a:	4914      	ldr	r1, [pc, #80]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800205c:	4013      	ands	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d021      	beq.n	80020b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
 8002078:	e021      	b.n	80020be <HAL_GPIO_Init+0x2e2>
 800207a:	bf00      	nop
 800207c:	10320000 	.word	0x10320000
 8002080:	10310000 	.word	0x10310000
 8002084:	10220000 	.word	0x10220000
 8002088:	10210000 	.word	0x10210000
 800208c:	10120000 	.word	0x10120000
 8002090:	10110000 	.word	0x10110000
 8002094:	40021000 	.word	0x40021000
 8002098:	40010000 	.word	0x40010000
 800209c:	40010800 	.word	0x40010800
 80020a0:	40010c00 	.word	0x40010c00
 80020a4:	40011000 	.word	0x40011000
 80020a8:	40011400 	.word	0x40011400
 80020ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_GPIO_Init+0x304>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	4909      	ldr	r1, [pc, #36]	; (80020e0 <HAL_GPIO_Init+0x304>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	3301      	adds	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f47f ae8e 	bne.w	8001df0 <HAL_GPIO_Init+0x14>
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	372c      	adds	r7, #44	; 0x2c
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	40010400 	.word	0x40010400

080020e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e001      	b.n	8002106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	807b      	strh	r3, [r7, #2]
 800211e:	4613      	mov	r3, r2
 8002120:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002122:	787b      	ldrb	r3, [r7, #1]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002128:	887a      	ldrh	r2, [r7, #2]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800212e:	e003      	b.n	8002138 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	041a      	lsls	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	611a      	str	r2, [r3, #16]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002142:	b480      	push	{r7}
 8002144:	b085      	sub	sp, #20
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002154:	887a      	ldrh	r2, [r7, #2]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	041a      	lsls	r2, r3, #16
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	43d9      	mvns	r1, r3
 8002160:	887b      	ldrh	r3, [r7, #2]
 8002162:	400b      	ands	r3, r1
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	611a      	str	r2, [r3, #16]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e12b      	b.n	80023de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff f9f8 	bl	8001590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2224      	movs	r2, #36	; 0x24
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021d8:	f000 fce4 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 80021dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a81      	ldr	r2, [pc, #516]	; (80023e8 <HAL_I2C_Init+0x274>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d807      	bhi.n	80021f8 <HAL_I2C_Init+0x84>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a80      	ldr	r2, [pc, #512]	; (80023ec <HAL_I2C_Init+0x278>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	bf94      	ite	ls
 80021f0:	2301      	movls	r3, #1
 80021f2:	2300      	movhi	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e006      	b.n	8002206 <HAL_I2C_Init+0x92>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4a7d      	ldr	r2, [pc, #500]	; (80023f0 <HAL_I2C_Init+0x27c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	bf94      	ite	ls
 8002200:	2301      	movls	r3, #1
 8002202:	2300      	movhi	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0e7      	b.n	80023de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a78      	ldr	r2, [pc, #480]	; (80023f4 <HAL_I2C_Init+0x280>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0c9b      	lsrs	r3, r3, #18
 8002218:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a6a      	ldr	r2, [pc, #424]	; (80023e8 <HAL_I2C_Init+0x274>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d802      	bhi.n	8002248 <HAL_I2C_Init+0xd4>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	3301      	adds	r3, #1
 8002246:	e009      	b.n	800225c <HAL_I2C_Init+0xe8>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	4a69      	ldr	r2, [pc, #420]	; (80023f8 <HAL_I2C_Init+0x284>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	3301      	adds	r3, #1
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	430b      	orrs	r3, r1
 8002262:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800226e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	495c      	ldr	r1, [pc, #368]	; (80023e8 <HAL_I2C_Init+0x274>)
 8002278:	428b      	cmp	r3, r1
 800227a:	d819      	bhi.n	80022b0 <HAL_I2C_Init+0x13c>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1e59      	subs	r1, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fbb1 f3f3 	udiv	r3, r1, r3
 800228a:	1c59      	adds	r1, r3, #1
 800228c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002290:	400b      	ands	r3, r1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_I2C_Init+0x138>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1e59      	subs	r1, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022aa:	e051      	b.n	8002350 <HAL_I2C_Init+0x1dc>
 80022ac:	2304      	movs	r3, #4
 80022ae:	e04f      	b.n	8002350 <HAL_I2C_Init+0x1dc>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d111      	bne.n	80022dc <HAL_I2C_Init+0x168>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1e58      	subs	r0, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	440b      	add	r3, r1
 80022c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e012      	b.n	8002302 <HAL_I2C_Init+0x18e>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1e58      	subs	r0, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	0099      	lsls	r1, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Init+0x196>
 8002306:	2301      	movs	r3, #1
 8002308:	e022      	b.n	8002350 <HAL_I2C_Init+0x1dc>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10e      	bne.n	8002330 <HAL_I2C_Init+0x1bc>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1e58      	subs	r0, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	440b      	add	r3, r1
 8002320:	fbb0 f3f3 	udiv	r3, r0, r3
 8002324:	3301      	adds	r3, #1
 8002326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232e:	e00f      	b.n	8002350 <HAL_I2C_Init+0x1dc>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1e58      	subs	r0, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	0099      	lsls	r1, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	fbb0 f3f3 	udiv	r3, r0, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	6809      	ldr	r1, [r1, #0]
 8002354:	4313      	orrs	r3, r2
 8002356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800237e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6911      	ldr	r1, [r2, #16]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68d2      	ldr	r2, [r2, #12]
 800238a:	4311      	orrs	r1, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	000186a0 	.word	0x000186a0
 80023ec:	001e847f 	.word	0x001e847f
 80023f0:	003d08ff 	.word	0x003d08ff
 80023f4:	431bde83 	.word	0x431bde83
 80023f8:	10624dd3 	.word	0x10624dd3

080023fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e26c      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8087 	beq.w	800252a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800241c:	4b92      	ldr	r3, [pc, #584]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b04      	cmp	r3, #4
 8002426:	d00c      	beq.n	8002442 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002428:	4b8f      	ldr	r3, [pc, #572]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d112      	bne.n	800245a <HAL_RCC_OscConfig+0x5e>
 8002434:	4b8c      	ldr	r3, [pc, #560]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002440:	d10b      	bne.n	800245a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002442:	4b89      	ldr	r3, [pc, #548]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d06c      	beq.n	8002528 <HAL_RCC_OscConfig+0x12c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d168      	bne.n	8002528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e246      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x76>
 8002464:	4b80      	ldr	r3, [pc, #512]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a7f      	ldr	r2, [pc, #508]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e02e      	b.n	80024d0 <HAL_RCC_OscConfig+0xd4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x98>
 800247a:	4b7b      	ldr	r3, [pc, #492]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a7a      	ldr	r2, [pc, #488]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b78      	ldr	r3, [pc, #480]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a77      	ldr	r2, [pc, #476]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e01d      	b.n	80024d0 <HAL_RCC_OscConfig+0xd4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0xbc>
 800249e:	4b72      	ldr	r3, [pc, #456]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a71      	ldr	r2, [pc, #452]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6e      	ldr	r2, [pc, #440]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xd4>
 80024b8:	4b6b      	ldr	r3, [pc, #428]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a6a      	ldr	r2, [pc, #424]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b68      	ldr	r3, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a67      	ldr	r2, [pc, #412]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fb44 	bl	8001b64 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff fb40 	bl	8001b64 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1fa      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xe4>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff fb30 	bl	8001b64 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff fb2c 	bl	8001b64 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1e6      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x10c>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d063      	beq.n	80025fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002536:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002542:	4b49      	ldr	r3, [pc, #292]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b08      	cmp	r3, #8
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x18c>
 800254e:	4b46      	ldr	r3, [pc, #280]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x176>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1ba      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4939      	ldr	r1, [pc, #228]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	e03a      	b.n	80025fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b36      	ldr	r3, [pc, #216]	; (800266c <HAL_RCC_OscConfig+0x270>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7ff fae5 	bl	8001b64 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259e:	f7ff fae1 	bl	8001b64 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e19b      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4927      	ldr	r1, [pc, #156]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_RCC_OscConfig+0x270>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff fac4 	bl	8001b64 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e0:	f7ff fac0 	bl	8001b64 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e17a      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03a      	beq.n	8002680 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d019      	beq.n	8002646 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_RCC_OscConfig+0x274>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7ff faa4 	bl	8001b64 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7ff faa0 	bl	8001b64 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e15a      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800263e:	2001      	movs	r0, #1
 8002640:	f000 fad8 	bl	8002bf4 <RCC_Delay>
 8002644:	e01c      	b.n	8002680 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_RCC_OscConfig+0x274>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7ff fa8a 	bl	8001b64 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002652:	e00f      	b.n	8002674 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7ff fa86 	bl	8001b64 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d908      	bls.n	8002674 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e140      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	42420000 	.word	0x42420000
 8002670:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b9e      	ldr	r3, [pc, #632]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e9      	bne.n	8002654 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a6 	beq.w	80027da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b97      	ldr	r3, [pc, #604]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b94      	ldr	r3, [pc, #592]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	4a93      	ldr	r2, [pc, #588]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	61d3      	str	r3, [r2, #28]
 80026aa:	4b91      	ldr	r3, [pc, #580]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b8e      	ldr	r3, [pc, #568]	; (80028f4 <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b8b      	ldr	r3, [pc, #556]	; (80028f4 <HAL_RCC_OscConfig+0x4f8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a8a      	ldr	r2, [pc, #552]	; (80028f4 <HAL_RCC_OscConfig+0x4f8>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7ff fa47 	bl	8001b64 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7ff fa43 	bl	8001b64 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b64      	cmp	r3, #100	; 0x64
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e0fd      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4b81      	ldr	r3, [pc, #516]	; (80028f4 <HAL_RCC_OscConfig+0x4f8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x312>
 8002700:	4b7b      	ldr	r3, [pc, #492]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a7a      	ldr	r2, [pc, #488]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	e02d      	b.n	800276a <HAL_RCC_OscConfig+0x36e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x334>
 8002716:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a75      	ldr	r2, [pc, #468]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	4b73      	ldr	r3, [pc, #460]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a72      	ldr	r2, [pc, #456]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	6213      	str	r3, [r2, #32]
 800272e:	e01c      	b.n	800276a <HAL_RCC_OscConfig+0x36e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b05      	cmp	r3, #5
 8002736:	d10c      	bne.n	8002752 <HAL_RCC_OscConfig+0x356>
 8002738:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4a6c      	ldr	r2, [pc, #432]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	6213      	str	r3, [r2, #32]
 8002744:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a69      	ldr	r2, [pc, #420]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e00b      	b.n	800276a <HAL_RCC_OscConfig+0x36e>
 8002752:	4b67      	ldr	r3, [pc, #412]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4a66      	ldr	r2, [pc, #408]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	6213      	str	r3, [r2, #32]
 800275e:	4b64      	ldr	r3, [pc, #400]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	4a63      	ldr	r2, [pc, #396]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	f023 0304 	bic.w	r3, r3, #4
 8002768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d015      	beq.n	800279e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7ff f9f7 	bl	8001b64 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7ff f9f3 	bl	8001b64 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0ab      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002790:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ee      	beq.n	800277a <HAL_RCC_OscConfig+0x37e>
 800279c:	e014      	b.n	80027c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7ff f9e1 	bl	8001b64 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7ff f9dd 	bl	8001b64 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e095      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027bc:	4b4c      	ldr	r3, [pc, #304]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ee      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d105      	bne.n	80027da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ce:	4b48      	ldr	r3, [pc, #288]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a47      	ldr	r2, [pc, #284]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8081 	beq.w	80028e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e4:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d061      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d146      	bne.n	8002886 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f8:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <HAL_RCC_OscConfig+0x4fc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7ff f9b1 	bl	8001b64 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7ff f9ad 	bl	8001b64 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e067      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002818:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282c:	d108      	bne.n	8002840 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800282e:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	492d      	ldr	r1, [pc, #180]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a19      	ldr	r1, [r3, #32]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	430b      	orrs	r3, r1
 8002852:	4927      	ldr	r1, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HAL_RCC_OscConfig+0x4fc>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7ff f981 	bl	8001b64 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7ff f97d 	bl	8001b64 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e037      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x46a>
 8002884:	e02f      	b.n	80028e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <HAL_RCC_OscConfig+0x4fc>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7ff f96a 	bl	8001b64 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7ff f966 	bl	8001b64 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e020      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x498>
 80028b2:	e018      	b.n	80028e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e013      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40007000 	.word	0x40007000
 80028f8:	42420060 	.word	0x42420060

080028fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0d0      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d910      	bls.n	8002940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b67      	ldr	r3, [pc, #412]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 0207 	bic.w	r2, r3, #7
 8002926:	4965      	ldr	r1, [pc, #404]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800297a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	494d      	ldr	r1, [pc, #308]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d040      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d115      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e07f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e073      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ca:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06b      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029da:	4b39      	ldr	r3, [pc, #228]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f023 0203 	bic.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4936      	ldr	r1, [pc, #216]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ec:	f7ff f8ba 	bl	8001b64 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f4:	f7ff f8b6 	bl	8001b64 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e053      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 020c 	and.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d1eb      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b27      	ldr	r3, [pc, #156]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d210      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 0207 	bic.w	r2, r3, #7
 8002a32:	4922      	ldr	r1, [pc, #136]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e032      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4916      	ldr	r1, [pc, #88]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	490e      	ldr	r1, [pc, #56]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8a:	f000 f821 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	490a      	ldr	r1, [pc, #40]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	5ccb      	ldrb	r3, [r1, r3]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1d0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f818 	bl	8001ae0 <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08008e78 	.word	0x08008e78
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000004 	.word	0x20000004

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	b490      	push	{r4, r7}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ad6:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ad8:	1d3c      	adds	r4, r7, #4
 8002ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ae0:	f240 2301 	movw	r3, #513	; 0x201
 8002ae4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x40>
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x46>
 8002b0e:	e02d      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b12:	623b      	str	r3, [r7, #32]
      break;
 8002b14:	e02d      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	0c9b      	lsrs	r3, r3, #18
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b22:	4413      	add	r3, r2
 8002b24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	0c5b      	lsrs	r3, r3, #17
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b42:	4413      	add	r3, r2
 8002b44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4e:	fb02 f203 	mul.w	r2, r2, r3
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	e004      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	623b      	str	r3, [r7, #32]
      break;
 8002b6a:	e002      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6e:	623b      	str	r3, [r7, #32]
      break;
 8002b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b72:	6a3b      	ldr	r3, [r7, #32]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3728      	adds	r7, #40	; 0x28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc90      	pop	{r4, r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	08008e68 	.word	0x08008e68
 8002b84:	40021000 	.word	0x40021000
 8002b88:	007a1200 	.word	0x007a1200
 8002b8c:	003d0900 	.word	0x003d0900

08002b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	20000000 	.word	0x20000000

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba8:	f7ff fff2 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08008e88 	.word	0x08008e88

08002bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd0:	f7ff ffde 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0adb      	lsrs	r3, r3, #11
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08008e88 	.word	0x08008e88

08002bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <RCC_Delay+0x34>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <RCC_Delay+0x38>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0a5b      	lsrs	r3, r3, #9
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c10:	bf00      	nop
  }
  while (Delay --);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	60fa      	str	r2, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f9      	bne.n	8002c10 <RCC_Delay+0x1c>
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	10624dd3 	.word	0x10624dd3

08002c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e076      	b.n	8002d30 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d108      	bne.n	8002c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c52:	d009      	beq.n	8002c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
 8002c5a:	e005      	b.n	8002c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fe fcc2 	bl	800160c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cec:	ea42 0103 	orr.w	r1, r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	0c1a      	lsrs	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f002 0204 	and.w	r2, r2, #4
 8002d0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_SPI_Transmit+0x22>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e126      	b.n	8002fa8 <HAL_SPI_Transmit+0x270>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d62:	f7fe feff 	bl	8001b64 <HAL_GetTick>
 8002d66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d002      	beq.n	8002d7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d7c:	e10b      	b.n	8002f96 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_SPI_Transmit+0x52>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d8e:	e102      	b.n	8002f96 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2203      	movs	r2, #3
 8002d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd6:	d10f      	bne.n	8002df8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d007      	beq.n	8002e16 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1e:	d14b      	bne.n	8002eb8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_SPI_Transmit+0xf6>
 8002e28:	8afb      	ldrh	r3, [r7, #22]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d13e      	bne.n	8002eac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	1c9a      	adds	r2, r3, #2
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e52:	e02b      	b.n	8002eac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d112      	bne.n	8002e88 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	881a      	ldrh	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	1c9a      	adds	r2, r3, #2
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e86:	e011      	b.n	8002eac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e88:	f7fe fe6c 	bl	8001b64 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d803      	bhi.n	8002ea0 <HAL_SPI_Transmit+0x168>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d102      	bne.n	8002ea6 <HAL_SPI_Transmit+0x16e>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002eaa:	e074      	b.n	8002f96 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ce      	bne.n	8002e54 <HAL_SPI_Transmit+0x11c>
 8002eb6:	e04c      	b.n	8002f52 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_SPI_Transmit+0x18e>
 8002ec0:	8afb      	ldrh	r3, [r7, #22]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d140      	bne.n	8002f48 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eec:	e02c      	b.n	8002f48 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d113      	bne.n	8002f24 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f22:	e011      	b.n	8002f48 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f24:	f7fe fe1e 	bl	8001b64 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d803      	bhi.n	8002f3c <HAL_SPI_Transmit+0x204>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d102      	bne.n	8002f42 <HAL_SPI_Transmit+0x20a>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f46:	e026      	b.n	8002f96 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1cd      	bne.n	8002eee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	6839      	ldr	r1, [r7, #0]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f8c0 	bl	80030dc <SPI_EndRxTxTransaction>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e000      	b.n	8002f96 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fbe:	b2db      	uxtb	r3, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
	...

08002fcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fdc:	f7fe fdc2 	bl	8001b64 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	4413      	add	r3, r2
 8002fea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fec:	f7fe fdba 	bl	8001b64 <HAL_GetTick>
 8002ff0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	015b      	lsls	r3, r3, #5
 8002ff8:	0d1b      	lsrs	r3, r3, #20
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003002:	e054      	b.n	80030ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d050      	beq.n	80030ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800300c:	f7fe fdaa 	bl	8001b64 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	429a      	cmp	r2, r3
 800301a:	d902      	bls.n	8003022 <SPI_WaitFlagStateUntilTimeout+0x56>
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d13d      	bne.n	800309e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003030:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800303a:	d111      	bne.n	8003060 <SPI_WaitFlagStateUntilTimeout+0x94>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003044:	d004      	beq.n	8003050 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304e:	d107      	bne.n	8003060 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003068:	d10f      	bne.n	800308a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003088:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e017      	b.n	80030ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4013      	ands	r3, r2
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d19b      	bne.n	8003004 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3720      	adds	r7, #32
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000000 	.word	0x20000000

080030dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2200      	movs	r2, #0
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff ff6a 	bl	8002fcc <SPI_WaitFlagStateUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	f043 0220 	orr.w	r2, r3, #32
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e000      	b.n	8003110 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e041      	b.n	80031ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe fb32 	bl	80017a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f000 fc96 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d001      	beq.n	80031d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e032      	b.n	8003236 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a18      	ldr	r2, [pc, #96]	; (8003240 <HAL_TIM_Base_Start+0x88>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <HAL_TIM_Base_Start+0x48>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ea:	d009      	beq.n	8003200 <HAL_TIM_Base_Start+0x48>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <HAL_TIM_Base_Start+0x8c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_TIM_Base_Start+0x48>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a13      	ldr	r2, [pc, #76]	; (8003248 <HAL_TIM_Base_Start+0x90>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d111      	bne.n	8003224 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b06      	cmp	r3, #6
 8003210:	d010      	beq.n	8003234 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003222:	e007      	b.n	8003234 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800

0800324c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e041      	b.n	80032e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe fa50 	bl	8001718 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f000 fbfc 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_IC_Start_IT+0x1a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e013      	b.n	800332e <HAL_TIM_IC_Start_IT+0x42>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d104      	bne.n	8003316 <HAL_TIM_IC_Start_IT+0x2a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003312:	b2db      	uxtb	r3, r3
 8003314:	e00b      	b.n	800332e <HAL_TIM_IC_Start_IT+0x42>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d104      	bne.n	8003326 <HAL_TIM_IC_Start_IT+0x3a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e003      	b.n	800332e <HAL_TIM_IC_Start_IT+0x42>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332c:	b2db      	uxtb	r3, r3
 800332e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <HAL_TIM_IC_Start_IT+0x54>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e013      	b.n	8003368 <HAL_TIM_IC_Start_IT+0x7c>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b04      	cmp	r3, #4
 8003344:	d104      	bne.n	8003350 <HAL_TIM_IC_Start_IT+0x64>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e00b      	b.n	8003368 <HAL_TIM_IC_Start_IT+0x7c>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b08      	cmp	r3, #8
 8003354:	d104      	bne.n	8003360 <HAL_TIM_IC_Start_IT+0x74>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e003      	b.n	8003368 <HAL_TIM_IC_Start_IT+0x7c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003366:	b2db      	uxtb	r3, r3
 8003368:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003370:	7bbb      	ldrb	r3, [r7, #14]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d001      	beq.n	800337a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0b3      	b.n	80034e2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <HAL_TIM_IC_Start_IT+0x9e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003388:	e013      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0xc6>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b04      	cmp	r3, #4
 800338e:	d104      	bne.n	800339a <HAL_TIM_IC_Start_IT+0xae>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003398:	e00b      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0xc6>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d104      	bne.n	80033aa <HAL_TIM_IC_Start_IT+0xbe>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a8:	e003      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0xc6>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d104      	bne.n	80033c2 <HAL_TIM_IC_Start_IT+0xd6>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c0:	e013      	b.n	80033ea <HAL_TIM_IC_Start_IT+0xfe>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_IC_Start_IT+0xe6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d0:	e00b      	b.n	80033ea <HAL_TIM_IC_Start_IT+0xfe>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_IC_Start_IT+0xf6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e0:	e003      	b.n	80033ea <HAL_TIM_IC_Start_IT+0xfe>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d841      	bhi.n	8003474 <HAL_TIM_IC_Start_IT+0x188>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <HAL_TIM_IC_Start_IT+0x10c>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800342d 	.word	0x0800342d
 80033fc:	08003475 	.word	0x08003475
 8003400:	08003475 	.word	0x08003475
 8003404:	08003475 	.word	0x08003475
 8003408:	0800343f 	.word	0x0800343f
 800340c:	08003475 	.word	0x08003475
 8003410:	08003475 	.word	0x08003475
 8003414:	08003475 	.word	0x08003475
 8003418:	08003451 	.word	0x08003451
 800341c:	08003475 	.word	0x08003475
 8003420:	08003475 	.word	0x08003475
 8003424:	08003475 	.word	0x08003475
 8003428:	08003463 	.word	0x08003463
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0202 	orr.w	r2, r2, #2
 800343a:	60da      	str	r2, [r3, #12]
      break;
 800343c:	e01b      	b.n	8003476 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0204 	orr.w	r2, r2, #4
 800344c:	60da      	str	r2, [r3, #12]
      break;
 800344e:	e012      	b.n	8003476 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0208 	orr.w	r2, r2, #8
 800345e:	60da      	str	r2, [r3, #12]
      break;
 8003460:	e009      	b.n	8003476 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0210 	orr.w	r2, r2, #16
 8003470:	60da      	str	r2, [r3, #12]
      break;
 8003472:	e000      	b.n	8003476 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003474:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2201      	movs	r2, #1
 800347c:	6839      	ldr	r1, [r7, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fd07 	bl	8003e92 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a18      	ldr	r2, [pc, #96]	; (80034ec <HAL_TIM_IC_Start_IT+0x200>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00e      	beq.n	80034ac <HAL_TIM_IC_Start_IT+0x1c0>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003496:	d009      	beq.n	80034ac <HAL_TIM_IC_Start_IT+0x1c0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_TIM_IC_Start_IT+0x204>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_TIM_IC_Start_IT+0x1c0>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <HAL_TIM_IC_Start_IT+0x208>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d111      	bne.n	80034d0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d010      	beq.n	80034e0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ce:	e007      	b.n	80034e0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40012c00 	.word	0x40012c00
 80034f0:	40000400 	.word	0x40000400
 80034f4:	40000800 	.word	0x40000800

080034f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0202 	mvn.w	r2, #2
 8003524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fcc8 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa85 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fa8b 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d122      	bne.n	80035a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d11b      	bne.n	80035a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0204 	mvn.w	r2, #4
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd fc9e 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa5b 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fa61 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d122      	bne.n	80035fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d11b      	bne.n	80035fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0208 	mvn.w	r2, #8
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2204      	movs	r2, #4
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fc74 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa31 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fa37 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b10      	cmp	r3, #16
 8003608:	d122      	bne.n	8003650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b10      	cmp	r3, #16
 8003616:	d11b      	bne.n	8003650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0210 	mvn.w	r2, #16
 8003620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2208      	movs	r2, #8
 8003626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fc4a 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa07 	bl	8003a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fa0d 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d10e      	bne.n	800367c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0201 	mvn.w	r2, #1
 8003674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f9e2 	bl	8003a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b80      	cmp	r3, #128	; 0x80
 8003688:	d10e      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b80      	cmp	r3, #128	; 0x80
 8003696:	d107      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fc81 	bl	8003faa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d10e      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d107      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9d1 	bl	8003a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d10e      	bne.n	8003700 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d107      	bne.n	8003700 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0220 	mvn.w	r2, #32
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fc4c 	bl	8003f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_TIM_IC_ConfigChannel+0x1a>
 800371e:	2302      	movs	r3, #2
 8003720:	e082      	b.n	8003828 <HAL_TIM_IC_ConfigChannel+0x120>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	6819      	ldr	r1, [r3, #0]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f000 fa04 	bl	8003b4c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 020c 	bic.w	r2, r2, #12
 8003752:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6999      	ldr	r1, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	619a      	str	r2, [r3, #24]
 8003766:	e05a      	b.n	800381e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b04      	cmp	r3, #4
 800376c:	d11c      	bne.n	80037a8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f000 fa6d 	bl	8003c5c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003790:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6999      	ldr	r1, [r3, #24]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	021a      	lsls	r2, r3, #8
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	619a      	str	r2, [r3, #24]
 80037a6:	e03a      	b.n	800381e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d11b      	bne.n	80037e6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	6819      	ldr	r1, [r3, #0]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f000 fab8 	bl	8003d32 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 020c 	bic.w	r2, r2, #12
 80037d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69d9      	ldr	r1, [r3, #28]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	61da      	str	r2, [r3, #28]
 80037e4:	e01b      	b.n	800381e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6819      	ldr	r1, [r3, #0]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f000 fad7 	bl	8003da8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003808:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69d9      	ldr	r1, [r3, #28]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIM_ConfigClockSource+0x18>
 8003844:	2302      	movs	r3, #2
 8003846:	e0b3      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x180>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003866:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003880:	d03e      	beq.n	8003900 <HAL_TIM_ConfigClockSource+0xd0>
 8003882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003886:	f200 8087 	bhi.w	8003998 <HAL_TIM_ConfigClockSource+0x168>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	f000 8085 	beq.w	800399c <HAL_TIM_ConfigClockSource+0x16c>
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003896:	d87f      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x168>
 8003898:	2b70      	cmp	r3, #112	; 0x70
 800389a:	d01a      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0xa2>
 800389c:	2b70      	cmp	r3, #112	; 0x70
 800389e:	d87b      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x168>
 80038a0:	2b60      	cmp	r3, #96	; 0x60
 80038a2:	d050      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0x116>
 80038a4:	2b60      	cmp	r3, #96	; 0x60
 80038a6:	d877      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x168>
 80038a8:	2b50      	cmp	r3, #80	; 0x50
 80038aa:	d03c      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0xf6>
 80038ac:	2b50      	cmp	r3, #80	; 0x50
 80038ae:	d873      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x168>
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d058      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x136>
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d86f      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x168>
 80038b8:	2b30      	cmp	r3, #48	; 0x30
 80038ba:	d064      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x156>
 80038bc:	2b30      	cmp	r3, #48	; 0x30
 80038be:	d86b      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x168>
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d060      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x156>
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d867      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x168>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d05c      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x156>
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d05a      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038d0:	e062      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6899      	ldr	r1, [r3, #8]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f000 fab7 	bl	8003e54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	609a      	str	r2, [r3, #8]
      break;
 80038fe:	e04e      	b.n	800399e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6899      	ldr	r1, [r3, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f000 faa0 	bl	8003e54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003922:	609a      	str	r2, [r3, #8]
      break;
 8003924:	e03b      	b.n	800399e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6859      	ldr	r1, [r3, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	461a      	mov	r2, r3
 8003934:	f000 f964 	bl	8003c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2150      	movs	r1, #80	; 0x50
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fa6e 	bl	8003e20 <TIM_ITRx_SetConfig>
      break;
 8003944:	e02b      	b.n	800399e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	461a      	mov	r2, r3
 8003954:	f000 f9be 	bl	8003cd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2160      	movs	r1, #96	; 0x60
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fa5e 	bl	8003e20 <TIM_ITRx_SetConfig>
      break;
 8003964:	e01b      	b.n	800399e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	461a      	mov	r2, r3
 8003974:	f000 f944 	bl	8003c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2140      	movs	r1, #64	; 0x40
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fa4e 	bl	8003e20 <TIM_ITRx_SetConfig>
      break;
 8003984:	e00b      	b.n	800399e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4619      	mov	r1, r3
 8003990:	4610      	mov	r0, r2
 8003992:	f000 fa45 	bl	8003e20 <TIM_ITRx_SetConfig>
        break;
 8003996:	e002      	b.n	800399e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003998:	bf00      	nop
 800399a:	e000      	b.n	800399e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800399c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b0c      	cmp	r3, #12
 80039ca:	d831      	bhi.n	8003a30 <HAL_TIM_ReadCapturedValue+0x78>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	08003a09 	.word	0x08003a09
 80039d8:	08003a31 	.word	0x08003a31
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003a13 	.word	0x08003a13
 80039e8:	08003a31 	.word	0x08003a31
 80039ec:	08003a31 	.word	0x08003a31
 80039f0:	08003a31 	.word	0x08003a31
 80039f4:	08003a1d 	.word	0x08003a1d
 80039f8:	08003a31 	.word	0x08003a31
 80039fc:	08003a31 	.word	0x08003a31
 8003a00:	08003a31 	.word	0x08003a31
 8003a04:	08003a27 	.word	0x08003a27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	60fb      	str	r3, [r7, #12]

      break;
 8003a10:	e00f      	b.n	8003a32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	60fb      	str	r3, [r7, #12]

      break;
 8003a1a:	e00a      	b.n	8003a32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	60fb      	str	r3, [r7, #12]

      break;
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	60fb      	str	r3, [r7, #12]

      break;
 8003a2e:	e000      	b.n	8003a32 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a30:	bf00      	nop
  }

  return tmpreg;
 8003a32:	68fb      	ldr	r3, [r7, #12]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop

08003a40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a29      	ldr	r2, [pc, #164]	; (8003b40 <TIM_Base_SetConfig+0xb8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00b      	beq.n	8003ab8 <TIM_Base_SetConfig+0x30>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d007      	beq.n	8003ab8 <TIM_Base_SetConfig+0x30>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <TIM_Base_SetConfig+0xbc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_Base_SetConfig+0x30>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a25      	ldr	r2, [pc, #148]	; (8003b48 <TIM_Base_SetConfig+0xc0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d108      	bne.n	8003aca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1c      	ldr	r2, [pc, #112]	; (8003b40 <TIM_Base_SetConfig+0xb8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_Base_SetConfig+0x62>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad8:	d007      	beq.n	8003aea <TIM_Base_SetConfig+0x62>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <TIM_Base_SetConfig+0xbc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_Base_SetConfig+0x62>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <TIM_Base_SetConfig+0xc0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d108      	bne.n	8003afc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a07      	ldr	r2, [pc, #28]	; (8003b40 <TIM_Base_SetConfig+0xb8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d103      	bne.n	8003b30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	615a      	str	r2, [r3, #20]
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800

08003b4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f023 0201 	bic.w	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <TIM_TI1_SetConfig+0xa8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_TI1_SetConfig+0x46>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b80:	d007      	beq.n	8003b92 <TIM_TI1_SetConfig+0x46>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <TIM_TI1_SetConfig+0xac>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_TI1_SetConfig+0x46>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <TIM_TI1_SetConfig+0xb0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <TIM_TI1_SetConfig+0x4a>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <TIM_TI1_SetConfig+0x4c>
 8003b96:	2300      	movs	r3, #0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	e003      	b.n	8003bb6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f023 030a 	bic.w	r3, r3, #10
 8003bd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f003 030a 	and.w	r3, r3, #10
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800

08003c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f023 0201 	bic.w	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f023 030a 	bic.w	r3, r3, #10
 8003c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f023 0210 	bic.w	r2, r3, #16
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	031b      	lsls	r3, r3, #12
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f023 0210 	bic.w	r2, r3, #16
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	031b      	lsls	r3, r3, #12
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	621a      	str	r2, [r3, #32]
}
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b087      	sub	sp, #28
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003de6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	031b      	lsls	r3, r3, #12
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dfa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	031b      	lsls	r3, r3, #12
 8003e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f043 0307 	orr.w	r3, r3, #7
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	609a      	str	r2, [r3, #8]
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	021a      	lsls	r2, r3, #8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1a      	ldr	r2, [r3, #32]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	401a      	ands	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1a      	ldr	r2, [r3, #32]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
	...

08003edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e046      	b.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f40:	d009      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a12      	ldr	r2, [pc, #72]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d10c      	bne.n	8003f70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800

08003f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e03f      	b.n	800404e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fd fbfe 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f829 	bl	8004058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004092:	f023 030c 	bic.w	r3, r3, #12
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	430b      	orrs	r3, r1
 800409e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2c      	ldr	r2, [pc, #176]	; (800416c <UART_SetConfig+0x114>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d103      	bne.n	80040c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040c0:	f7fe fd84 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	e002      	b.n	80040ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040c8:	f7fe fd6c 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 80040cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009a      	lsls	r2, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	4a22      	ldr	r2, [pc, #136]	; (8004170 <UART_SetConfig+0x118>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	0119      	lsls	r1, r3, #4
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009a      	lsls	r2, r3, #2
 80040f8:	441a      	add	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fbb2 f2f3 	udiv	r2, r2, r3
 8004104:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <UART_SetConfig+0x118>)
 8004106:	fba3 0302 	umull	r0, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2064      	movs	r0, #100	; 0x64
 800410e:	fb00 f303 	mul.w	r3, r0, r3
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	3332      	adds	r3, #50	; 0x32
 8004118:	4a15      	ldr	r2, [pc, #84]	; (8004170 <UART_SetConfig+0x118>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004124:	4419      	add	r1, r3
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009a      	lsls	r2, r3, #2
 8004130:	441a      	add	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	fbb2 f2f3 	udiv	r2, r2, r3
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <UART_SetConfig+0x118>)
 800413e:	fba3 0302 	umull	r0, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2064      	movs	r0, #100	; 0x64
 8004146:	fb00 f303 	mul.w	r3, r0, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	3332      	adds	r3, #50	; 0x32
 8004150:	4a07      	ldr	r2, [pc, #28]	; (8004170 <UART_SetConfig+0x118>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 020f 	and.w	r2, r3, #15
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	440a      	add	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40013800 	.word	0x40013800
 8004170:	51eb851f 	.word	0x51eb851f

08004174 <ST7565_Select>:


uint8_t ST7565_buffer[SCREEN_WIDTH * SCREEN_HEIGHT / 8];
// extern enum {WHITE = 0, BLACK = 1} color_t;

void ST7565_Select(void) {
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <ST7565_Unselect>:
void ST7565_Unselect(void) {
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
					 CS_GPIO_Port->BSRR = CS_Pin;
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <ST7565_Reset>:

void ST7565_Reset( void ){  
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 8004190:	2200      	movs	r2, #0
 8004192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004196:	4808      	ldr	r0, [pc, #32]	; (80041b8 <ST7565_Reset+0x2c>)
 8004198:	f7fd ffbb 	bl	8002112 <HAL_GPIO_WritePin>
 HAL_Delay( 10 ); 
 800419c:	200a      	movs	r0, #10
 800419e:	f7fd fceb 	bl	8001b78 <HAL_Delay>
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80041a2:	2201      	movs	r2, #1
 80041a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041a8:	4803      	ldr	r0, [pc, #12]	; (80041b8 <ST7565_Reset+0x2c>)
 80041aa:	f7fd ffb2 	bl	8002112 <HAL_GPIO_WritePin>
 HAL_Delay( 10 );  
 80041ae:	200a      	movs	r0, #10
 80041b0:	f7fd fce2 	bl	8001b78 <HAL_Delay>
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40010800 	.word	0x40010800

080041bc <ST7565_w_dat>:

void ST7565_w_dat( uint8_t Dat ){  
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
	
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Dat, 1, HAL_MAX_DELAY);
 80041c6:	1df9      	adds	r1, r7, #7
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	2201      	movs	r2, #1
 80041ce:	4807      	ldr	r0, [pc, #28]	; (80041ec <ST7565_w_dat+0x30>)
 80041d0:	f7fe fdb2 	bl	8002d38 <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 80041d4:	bf00      	nop
 80041d6:	4805      	ldr	r0, [pc, #20]	; (80041ec <ST7565_w_dat+0x30>)
 80041d8:	f7fe feea 	bl	8002fb0 <HAL_SPI_GetState>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d1f9      	bne.n	80041d6 <ST7565_w_dat+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------
	
}  
 80041e2:	bf00      	nop
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000264 	.word	0x20000264

080041f0 <ST7565_w_cmd>:

void ST7565_w_cmd( uint8_t Command ){  
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
		
		// pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80041fa:	2200      	movs	r2, #0
 80041fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004200:	480d      	ldr	r0, [pc, #52]	; (8004238 <ST7565_w_cmd+0x48>)
 8004202:	f7fd ff86 	bl	8002112 <HAL_GPIO_WritePin>
		 
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Command, 1, HAL_MAX_DELAY);
 8004206:	1df9      	adds	r1, r7, #7
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
 800420c:	2201      	movs	r2, #1
 800420e:	480b      	ldr	r0, [pc, #44]	; (800423c <ST7565_w_cmd+0x4c>)
 8004210:	f7fe fd92 	bl	8002d38 <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 8004214:	bf00      	nop
 8004216:	4809      	ldr	r0, [pc, #36]	; (800423c <ST7565_w_cmd+0x4c>)
 8004218:	f7fe feca 	bl	8002fb0 <HAL_SPI_GetState>
 800421c:	4603      	mov	r3, r0
 800421e:	2b01      	cmp	r3, #1
 8004220:	d1f9      	bne.n	8004216 <ST7565_w_cmd+0x26>
		 
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8004222:	2201      	movs	r2, #1
 8004224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004228:	4803      	ldr	r0, [pc, #12]	; (8004238 <ST7565_w_cmd+0x48>)
 800422a:	f7fd ff72 	bl	8002112 <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
		
	#endif
	//-----------------------------------------------------------------------------------
	
} 
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40010800 	.word	0x40010800
 800423c:	20000264 	.word	0x20000264

08004240 <ST7565_Display_fill>:

void ST7565_Display_fill( uint8_t fill ){  
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
	
	uint8_t page,column;  
	
	memset( ST7565_buffer, (uint8_t)fill, ( SCREEN_WIDTH * SCREEN_HEIGHT / 8 ) );	// отчистка памяти заполняем массив значением 0x00
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004250:	4619      	mov	r1, r3
 8004252:	4815      	ldr	r0, [pc, #84]	; (80042a8 <ST7565_Display_fill+0x68>)
 8004254:	f000 f9ea 	bl	800462c <memset>
	
	ST7565_Select();
 8004258:	f7ff ff8c 	bl	8004174 <ST7565_Select>
	
	for( page=0xB7; page>=0xB0; page-- ){
 800425c:	23b7      	movs	r3, #183	; 0xb7
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	e019      	b.n	8004296 <ST7565_Display_fill+0x56>
		
		ST7565_w_cmd(page);  //set page address   
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ffc3 	bl	80041f0 <ST7565_w_cmd>
		ST7565_w_cmd(0x10);  //set Column address MSB   
 800426a:	2010      	movs	r0, #16
 800426c:	f7ff ffc0 	bl	80041f0 <ST7565_w_cmd>
		ST7565_w_cmd(0x00);  //set column address LSB   
 8004270:	2000      	movs	r0, #0
 8004272:	f7ff ffbd 	bl	80041f0 <ST7565_w_cmd>
		for( column=0; column<131; column++ ){  
 8004276:	2300      	movs	r3, #0
 8004278:	73bb      	strb	r3, [r7, #14]
 800427a:	e006      	b.n	800428a <ST7565_Display_fill+0x4a>
			ST7565_w_dat(fill);  
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff9c 	bl	80041bc <ST7565_w_dat>
		for( column=0; column<131; column++ ){  
 8004284:	7bbb      	ldrb	r3, [r7, #14]
 8004286:	3301      	adds	r3, #1
 8004288:	73bb      	strb	r3, [r7, #14]
 800428a:	7bbb      	ldrb	r3, [r7, #14]
 800428c:	2b82      	cmp	r3, #130	; 0x82
 800428e:	d9f5      	bls.n	800427c <ST7565_Display_fill+0x3c>
	for( page=0xB7; page>=0xB0; page-- ){
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	3b01      	subs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2baf      	cmp	r3, #175	; 0xaf
 800429a:	d8e2      	bhi.n	8004262 <ST7565_Display_fill+0x22>
        }  
    }
		
	ST7565_Unselect();
 800429c:	f7ff ff70 	bl	8004180 <ST7565_Unselect>
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000440 	.word	0x20000440

080042ac <ST7565_Init>:

void ST7565_Init( void ){  
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
	
	ST7565_Select();
 80042b0:	f7ff ff60 	bl	8004174 <ST7565_Select>
	
	ST7565_Reset();
 80042b4:	f7ff ff6a 	bl	800418c <ST7565_Reset>

	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея	
	ST7565_w_cmd( CMD_SET_BIAS_9 );    // CMD_SET_BIAS_7   1/7    CMD_SET_BIAS_9  1/9
 80042b8:	20a2      	movs	r0, #162	; 0xa2
 80042ba:	f7ff ff99 	bl	80041f0 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80042be:	2001      	movs	r0, #1
 80042c0:	f7fd fc5a 	bl	8001b78 <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	#if defined (SCREEN_ORIENTATION_180)
		ST7565_w_cmd( CMD_SET_ADC_REVERSE );    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		ST7565_w_cmd( CMD_SET_COM_NORMAL );    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#else
		ST7565_w_cmd( CMD_SET_ADC_NORMAL );    		//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
 80042c4:	20a0      	movs	r0, #160	; 0xa0
 80042c6:	f7ff ff93 	bl	80041f0 <ST7565_w_cmd>
		ST7565_w_cmd( CMD_SET_COM_REVERSE );    	//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
 80042ca:	20c8      	movs	r0, #200	; 0xc8
 80042cc:	f7ff ff90 	bl	80041f0 <ST7565_w_cmd>
	#endif		
	//---------------------------------------------------------------------------------------------	
	
	HAL_Delay(1);
 80042d0:	2001      	movs	r0, #1
 80042d2:	f7fd fc51 	bl	8001b78 <HAL_Delay>
	
	// делитель внутреннего резистора установлен на 7 (от 0..7)	
	ST7565_w_cmd( CMD_SET_RESISTOR_RATIO | 0x7 );    //Regulator Resistor Selection   
 80042d6:	2027      	movs	r0, #39	; 0x27
 80042d8:	f7ff ff8a 	bl	80041f0 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80042dc:	2001      	movs	r0, #1
 80042de:	f7fd fc4b 	bl	8001b78 <HAL_Delay>
	
	// управление питанием, все внутренние блоки включены	(от 0..7)
	ST7565_w_cmd( CMD_SET_POWER_CONTROL | 0x7 );
 80042e2:	202f      	movs	r0, #47	; 0x2f
 80042e4:	f7ff ff84 	bl	80041f0 <ST7565_w_cmd>
		
	HAL_Delay(1);
 80042e8:	2001      	movs	r0, #1
 80042ea:	f7fd fc45 	bl	8001b78 <HAL_Delay>

	// войти в режим динамического контраста	
	ST7565_w_cmd( CMD_SET_VOLUME_FIRST );    //Electronic Volume   
 80042ee:	2081      	movs	r0, #129	; 0x81
 80042f0:	f7ff ff7e 	bl	80041f0 <ST7565_w_cmd>
	ST7565_w_cmd( 19 );	// устанавливает контраст от 0..63.
 80042f4:	2013      	movs	r0, #19
 80042f6:	f7ff ff7b 	bl	80041f0 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80042fa:	2001      	movs	r0, #1
 80042fc:	f7fd fc3c 	bl	8001b78 <HAL_Delay>
	
	ST7565_w_cmd( CMD_SET_DISP_START_LINE );
 8004300:	2040      	movs	r0, #64	; 0x40
 8004302:	f7ff ff75 	bl	80041f0 <ST7565_w_cmd>
 
	HAL_Delay(1);
 8004306:	2001      	movs	r0, #1
 8004308:	f7fd fc36 	bl	8001b78 <HAL_Delay>

	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	ST7565_w_cmd( CMD_DISPLAY_ON );    		//Display on   
 800430c:	20af      	movs	r0, #175	; 0xaf
 800430e:	f7ff ff6f 	bl	80041f0 <ST7565_w_cmd>
 
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd( CMD_SET_DISP_NORMAL );
 8004312:	20a6      	movs	r0, #166	; 0xa6
 8004314:	f7ff ff6c 	bl	80041f0 <ST7565_w_cmd>
	
	HAL_Delay(1);
 8004318:	2001      	movs	r0, #1
 800431a:	f7fd fc2d 	bl	8001b78 <HAL_Delay>
	
	ST7565_Display_fill( 0x00 );
 800431e:	2000      	movs	r0, #0
 8004320:	f7ff ff8e 	bl	8004240 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8004324:	f7ff ff2c 	bl	8004180 <ST7565_Unselect>
   
}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}

0800432c <HX711_init>:
/**
 * @brief init hx711
 * 
 */
void  HX711_init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8004332:	2301      	movs	r3, #1
 8004334:	607b      	str	r3, [r7, #4]
  gpio.Pull = GPIO_NOPULL;
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800433a:	2303      	movs	r3, #3
 800433c:	60fb      	str	r3, [r7, #12]
  gpio.Pin = SCK_GPIO_PIN;
 800433e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004342:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(SCK_GPIO_PORT, &gpio);
 8004344:	463b      	mov	r3, r7
 8004346:	4619      	mov	r1, r3
 8004348:	4819      	ldr	r0, [pc, #100]	; (80043b0 <HX711_init+0x84>)
 800434a:	f7fd fd47 	bl	8001ddc <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
  gpio.Pull = GPIO_NOPULL;
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8004356:	2303      	movs	r3, #3
 8004358:	60fb      	str	r3, [r7, #12]
  gpio.Pin = Dout_GPIO_PIN;
 800435a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800435e:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(Dout_GPIO_PORT, &gpio);
 8004360:	463b      	mov	r3, r7
 8004362:	4619      	mov	r1, r3
 8004364:	4812      	ldr	r0, [pc, #72]	; (80043b0 <HX711_init+0x84>)
 8004366:	f7fd fd39 	bl	8001ddc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_SET);
 800436a:	2201      	movs	r2, #1
 800436c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004370:	480f      	ldr	r0, [pc, #60]	; (80043b0 <HX711_init+0x84>)
 8004372:	f7fd fece 	bl	8002112 <HAL_GPIO_WritePin>
  HX711_delay(10);
 8004376:	200a      	movs	r0, #10
 8004378:	f7fd fbfe 	bl	8001b78 <HAL_Delay>
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_RESET);
 800437c:	2200      	movs	r2, #0
 800437e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004382:	480b      	ldr	r0, [pc, #44]	; (80043b0 <HX711_init+0x84>)
 8004384:	f7fd fec5 	bl	8002112 <HAL_GPIO_WritePin>
  HX711_delay(10);
 8004388:	200a      	movs	r0, #10
 800438a:	f7fd fbf5 	bl	8001b78 <HAL_Delay>
  HX711_valueAve(8, Channel_A, 128);
 800438e:	2280      	movs	r2, #128	; 0x80
 8004390:	2100      	movs	r1, #0
 8004392:	2008      	movs	r0, #8
 8004394:	f000 f86e 	bl	8004474 <HX711_valueAve>
  HX711_delay(10);
 8004398:	200a      	movs	r0, #10
 800439a:	f7fd fbed 	bl	8001b78 <HAL_Delay>
  HX711_valueAve(8, Channel_B, 32);
 800439e:	2220      	movs	r2, #32
 80043a0:	2101      	movs	r1, #1
 80043a2:	2008      	movs	r0, #8
 80043a4:	f000 f866 	bl	8004474 <HX711_valueAve>
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40010c00 	.word	0x40010c00

080043b4 <HX711_value>:
 * 
 * @param Channel 
 * @return uint32_t 
 */
uint32_t HX711_value(Channel_t Channel, uint8_t Gain)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	460a      	mov	r2, r1
 80043be:	71fb      	strb	r3, [r7, #7]
 80043c0:	4613      	mov	r3, r2
 80043c2:	71bb      	strb	r3, [r7, #6]
  uint32_t data = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 80043c8:	f7fd fbcc 	bl	8001b64 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(Dout_GPIO_PORT, Dout_GPIO_PIN) == GPIO_PIN_SET);
 80043ce:	bf00      	nop
 80043d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043d4:	4826      	ldr	r0, [pc, #152]	; (8004470 <HX711_value+0xbc>)
 80043d6:	f7fd fe85 	bl	80020e4 <HAL_GPIO_ReadPin>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d0f7      	beq.n	80043d0 <HX711_value+0x1c>

  for(int8_t i=0; i < 24 ; i++)
 80043e0:	2300      	movs	r3, #0
 80043e2:	74fb      	strb	r3, [r7, #19]
 80043e4:	e025      	b.n	8004432 <HX711_value+0x7e>
  {
    HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_SET);
 80043e6:	2201      	movs	r2, #1
 80043e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043ec:	4820      	ldr	r0, [pc, #128]	; (8004470 <HX711_value+0xbc>)
 80043ee:	f7fd fe90 	bl	8002112 <HAL_GPIO_WritePin>
    delay_us(1);
 80043f2:	2001      	movs	r0, #1
 80043f4:	f000 f8d6 	bl	80045a4 <delay_us>
//    HX711_delay_us(1);
    data = data << 1;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_RESET);
 80043fe:	2200      	movs	r2, #0
 8004400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004404:	481a      	ldr	r0, [pc, #104]	; (8004470 <HX711_value+0xbc>)
 8004406:	f7fd fe84 	bl	8002112 <HAL_GPIO_WritePin>
    delay_us(1);
 800440a:	2001      	movs	r0, #1
 800440c:	f000 f8ca 	bl	80045a4 <delay_us>
//    HX711_delay_us(1);
    if(HAL_GPIO_ReadPin(Dout_GPIO_PORT, Dout_GPIO_PIN) == GPIO_PIN_SET)
 8004410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004414:	4816      	ldr	r0, [pc, #88]	; (8004470 <HX711_value+0xbc>)
 8004416:	f7fd fe65 	bl	80020e4 <HAL_GPIO_ReadPin>
 800441a:	4603      	mov	r3, r0
 800441c:	2b01      	cmp	r3, #1
 800441e:	d102      	bne.n	8004426 <HX711_value+0x72>
      data ++;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3301      	adds	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i < 24 ; i++)
 8004426:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	3301      	adds	r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	74fb      	strb	r3, [r7, #19]
 8004432:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004436:	2b17      	cmp	r3, #23
 8004438:	ddd5      	ble.n	80043e6 <HX711_value+0x32>
  }
  data = data ^ 0x800000;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8004440:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_SET);
 8004442:	2201      	movs	r2, #1
 8004444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004448:	4809      	ldr	r0, [pc, #36]	; (8004470 <HX711_value+0xbc>)
 800444a:	f7fd fe62 	bl	8002112 <HAL_GPIO_WritePin>
  delay_us(1);
 800444e:	2001      	movs	r0, #1
 8004450:	f000 f8a8 	bl	80045a4 <delay_us>
//  HX711_delay_us(1);
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_RESET);
 8004454:	2200      	movs	r2, #0
 8004456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800445a:	4805      	ldr	r0, [pc, #20]	; (8004470 <HX711_value+0xbc>)
 800445c:	f7fd fe59 	bl	8002112 <HAL_GPIO_WritePin>
  delay_us(1);
 8004460:	2001      	movs	r0, #1
 8004462:	f000 f89f 	bl	80045a4 <delay_us>
//  HX711_delay_us(1);
  return data;
 8004466:	697b      	ldr	r3, [r7, #20]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40010c00 	.word	0x40010c00

08004474 <HX711_valueAve>:




uint32_t HX711_valueAve(uint16_t sample, Channel_t Channel, uint8_t Gain)
{
 8004474:	b5b0      	push	{r4, r5, r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	80fb      	strh	r3, [r7, #6]
 800447e:	460b      	mov	r3, r1
 8004480:	717b      	strb	r3, [r7, #5]
 8004482:	4613      	mov	r3, r2
 8004484:	713b      	strb	r3, [r7, #4]
  uint64_t  ave = 0;
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  for(uint16_t i=0 ; i < sample ; i++)
 8004492:	2300      	movs	r3, #0
 8004494:	81fb      	strh	r3, [r7, #14]
 8004496:	e013      	b.n	80044c0 <HX711_valueAve+0x4c>
    ave += HX711_value(Channel, Gain);
 8004498:	793a      	ldrb	r2, [r7, #4]
 800449a:	797b      	ldrb	r3, [r7, #5]
 800449c:	4611      	mov	r1, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ff88 	bl	80043b4 <HX711_value>
 80044a4:	4603      	mov	r3, r0
 80044a6:	461a      	mov	r2, r3
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044b0:	1884      	adds	r4, r0, r2
 80044b2:	eb41 0503 	adc.w	r5, r1, r3
 80044b6:	e9c7 4504 	strd	r4, r5, [r7, #16]
  for(uint16_t i=0 ; i < sample ; i++)
 80044ba:	89fb      	ldrh	r3, [r7, #14]
 80044bc:	3301      	adds	r3, #1
 80044be:	81fb      	strh	r3, [r7, #14]
 80044c0:	89fa      	ldrh	r2, [r7, #14]
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d3e7      	bcc.n	8004498 <HX711_valueAve+0x24>
  return (int32_t)(ave / sample);
 80044c8:	88fa      	ldrh	r2, [r7, #6]
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044d2:	f7fc fb49 	bl	8000b68 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4613      	mov	r3, r2
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bdb0      	pop	{r4, r5, r7, pc}

080044e4 <TimerDelay_Init>:
#define TIMER  TIM4
volatile static TIM_HandleTypeDef HTIMx;
volatile static uint32_t gu32_ticks = 0;

void TimerDelay_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80044ea:	f7fe fb51 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 80044ee:	4603      	mov	r3, r0
 80044f0:	4a28      	ldr	r2, [pc, #160]	; (8004594 <TimerDelay_Init+0xb0>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	0c9b      	lsrs	r3, r3, #18
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <TimerDelay_Init+0xb4>)
 80044fa:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <TimerDelay_Init+0xb8>)
 80044fe:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <TimerDelay_Init+0xbc>)
 8004500:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004502:	f107 0308 	add.w	r3, r7, #8
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	609a      	str	r2, [r3, #8]
 800450e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004510:	463b      	mov	r3, r7
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 8004518:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <TimerDelay_Init+0xb4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3b01      	subs	r3, #1
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <TimerDelay_Init+0xb8>)
 8004520:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <TimerDelay_Init+0xb8>)
 8004524:	2200      	movs	r2, #0
 8004526:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 8004528:	4b1c      	ldr	r3, [pc, #112]	; (800459c <TimerDelay_Init+0xb8>)
 800452a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800452e:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <TimerDelay_Init+0xb8>)
 8004532:	2200      	movs	r2, #0
 8004534:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004536:	4b19      	ldr	r3, [pc, #100]	; (800459c <TimerDelay_Init+0xb8>)
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 800453c:	4817      	ldr	r0, [pc, #92]	; (800459c <TimerDelay_Init+0xb8>)
 800453e:	f7fe fdeb 	bl	8003118 <HAL_TIM_Base_Init>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <TimerDelay_Init+0x68>
    {
      Error_Handler();
 8004548:	f7fc ffea 	bl	8001520 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800454c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004550:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	4619      	mov	r1, r3
 8004558:	4810      	ldr	r0, [pc, #64]	; (800459c <TimerDelay_Init+0xb8>)
 800455a:	f7ff f969 	bl	8003830 <HAL_TIM_ConfigClockSource>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <TimerDelay_Init+0x84>
    {
      Error_Handler();
 8004564:	f7fc ffdc 	bl	8001520 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004568:	2300      	movs	r3, #0
 800456a:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800456c:	2300      	movs	r3, #0
 800456e:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 8004570:	463b      	mov	r3, r7
 8004572:	4619      	mov	r1, r3
 8004574:	4809      	ldr	r0, [pc, #36]	; (800459c <TimerDelay_Init+0xb8>)
 8004576:	f7ff fcb1 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 8004580:	f7fc ffce 	bl	8001520 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 8004584:	4805      	ldr	r0, [pc, #20]	; (800459c <TimerDelay_Init+0xb8>)
 8004586:	f7fe fe17 	bl	80031b8 <HAL_TIM_Base_Start>

}
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	431bde83 	.word	0x431bde83
 8004598:	20000258 	.word	0x20000258
 800459c:	20000210 	.word	0x20000210
 80045a0:	40000800 	.word	0x40000800

080045a4 <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 80045ae:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <delay_us+0x30>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24
	while (HTIMx.Instance->CNT < au16_us);
 80045b6:	bf00      	nop
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <delay_us+0x30>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	88fa      	ldrh	r2, [r7, #6]
 80045c0:	b292      	uxth	r2, r2
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d3f8      	bcc.n	80045b8 <delay_us+0x14>
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000210 	.word	0x20000210

080045d8 <__errno>:
 80045d8:	4b01      	ldr	r3, [pc, #4]	; (80045e0 <__errno+0x8>)
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <__libc_init_array>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	2600      	movs	r6, #0
 80045e8:	4d0c      	ldr	r5, [pc, #48]	; (800461c <__libc_init_array+0x38>)
 80045ea:	4c0d      	ldr	r4, [pc, #52]	; (8004620 <__libc_init_array+0x3c>)
 80045ec:	1b64      	subs	r4, r4, r5
 80045ee:	10a4      	asrs	r4, r4, #2
 80045f0:	42a6      	cmp	r6, r4
 80045f2:	d109      	bne.n	8004608 <__libc_init_array+0x24>
 80045f4:	f004 fc2a 	bl	8008e4c <_init>
 80045f8:	2600      	movs	r6, #0
 80045fa:	4d0a      	ldr	r5, [pc, #40]	; (8004624 <__libc_init_array+0x40>)
 80045fc:	4c0a      	ldr	r4, [pc, #40]	; (8004628 <__libc_init_array+0x44>)
 80045fe:	1b64      	subs	r4, r4, r5
 8004600:	10a4      	asrs	r4, r4, #2
 8004602:	42a6      	cmp	r6, r4
 8004604:	d105      	bne.n	8004612 <__libc_init_array+0x2e>
 8004606:	bd70      	pop	{r4, r5, r6, pc}
 8004608:	f855 3b04 	ldr.w	r3, [r5], #4
 800460c:	4798      	blx	r3
 800460e:	3601      	adds	r6, #1
 8004610:	e7ee      	b.n	80045f0 <__libc_init_array+0xc>
 8004612:	f855 3b04 	ldr.w	r3, [r5], #4
 8004616:	4798      	blx	r3
 8004618:	3601      	adds	r6, #1
 800461a:	e7f2      	b.n	8004602 <__libc_init_array+0x1e>
 800461c:	0800934c 	.word	0x0800934c
 8004620:	0800934c 	.word	0x0800934c
 8004624:	0800934c 	.word	0x0800934c
 8004628:	08009350 	.word	0x08009350

0800462c <memset>:
 800462c:	4603      	mov	r3, r0
 800462e:	4402      	add	r2, r0
 8004630:	4293      	cmp	r3, r2
 8004632:	d100      	bne.n	8004636 <memset+0xa>
 8004634:	4770      	bx	lr
 8004636:	f803 1b01 	strb.w	r1, [r3], #1
 800463a:	e7f9      	b.n	8004630 <memset+0x4>

0800463c <__cvt>:
 800463c:	2b00      	cmp	r3, #0
 800463e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004642:	461f      	mov	r7, r3
 8004644:	bfbb      	ittet	lt
 8004646:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800464a:	461f      	movlt	r7, r3
 800464c:	2300      	movge	r3, #0
 800464e:	232d      	movlt	r3, #45	; 0x2d
 8004650:	b088      	sub	sp, #32
 8004652:	4614      	mov	r4, r2
 8004654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004656:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004658:	7013      	strb	r3, [r2, #0]
 800465a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800465c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004660:	f023 0820 	bic.w	r8, r3, #32
 8004664:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004668:	d005      	beq.n	8004676 <__cvt+0x3a>
 800466a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800466e:	d100      	bne.n	8004672 <__cvt+0x36>
 8004670:	3501      	adds	r5, #1
 8004672:	2302      	movs	r3, #2
 8004674:	e000      	b.n	8004678 <__cvt+0x3c>
 8004676:	2303      	movs	r3, #3
 8004678:	aa07      	add	r2, sp, #28
 800467a:	9204      	str	r2, [sp, #16]
 800467c:	aa06      	add	r2, sp, #24
 800467e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004682:	e9cd 3500 	strd	r3, r5, [sp]
 8004686:	4622      	mov	r2, r4
 8004688:	463b      	mov	r3, r7
 800468a:	f001 fda1 	bl	80061d0 <_dtoa_r>
 800468e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004692:	4606      	mov	r6, r0
 8004694:	d102      	bne.n	800469c <__cvt+0x60>
 8004696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004698:	07db      	lsls	r3, r3, #31
 800469a:	d522      	bpl.n	80046e2 <__cvt+0xa6>
 800469c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046a0:	eb06 0905 	add.w	r9, r6, r5
 80046a4:	d110      	bne.n	80046c8 <__cvt+0x8c>
 80046a6:	7833      	ldrb	r3, [r6, #0]
 80046a8:	2b30      	cmp	r3, #48	; 0x30
 80046aa:	d10a      	bne.n	80046c2 <__cvt+0x86>
 80046ac:	2200      	movs	r2, #0
 80046ae:	2300      	movs	r3, #0
 80046b0:	4620      	mov	r0, r4
 80046b2:	4639      	mov	r1, r7
 80046b4:	f7fc f978 	bl	80009a8 <__aeabi_dcmpeq>
 80046b8:	b918      	cbnz	r0, 80046c2 <__cvt+0x86>
 80046ba:	f1c5 0501 	rsb	r5, r5, #1
 80046be:	f8ca 5000 	str.w	r5, [sl]
 80046c2:	f8da 3000 	ldr.w	r3, [sl]
 80046c6:	4499      	add	r9, r3
 80046c8:	2200      	movs	r2, #0
 80046ca:	2300      	movs	r3, #0
 80046cc:	4620      	mov	r0, r4
 80046ce:	4639      	mov	r1, r7
 80046d0:	f7fc f96a 	bl	80009a8 <__aeabi_dcmpeq>
 80046d4:	b108      	cbz	r0, 80046da <__cvt+0x9e>
 80046d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80046da:	2230      	movs	r2, #48	; 0x30
 80046dc:	9b07      	ldr	r3, [sp, #28]
 80046de:	454b      	cmp	r3, r9
 80046e0:	d307      	bcc.n	80046f2 <__cvt+0xb6>
 80046e2:	4630      	mov	r0, r6
 80046e4:	9b07      	ldr	r3, [sp, #28]
 80046e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046e8:	1b9b      	subs	r3, r3, r6
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	b008      	add	sp, #32
 80046ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	9107      	str	r1, [sp, #28]
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	e7f0      	b.n	80046dc <__cvt+0xa0>

080046fa <__exponent>:
 80046fa:	4603      	mov	r3, r0
 80046fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046fe:	2900      	cmp	r1, #0
 8004700:	f803 2b02 	strb.w	r2, [r3], #2
 8004704:	bfb6      	itet	lt
 8004706:	222d      	movlt	r2, #45	; 0x2d
 8004708:	222b      	movge	r2, #43	; 0x2b
 800470a:	4249      	neglt	r1, r1
 800470c:	2909      	cmp	r1, #9
 800470e:	7042      	strb	r2, [r0, #1]
 8004710:	dd2b      	ble.n	800476a <__exponent+0x70>
 8004712:	f10d 0407 	add.w	r4, sp, #7
 8004716:	46a4      	mov	ip, r4
 8004718:	270a      	movs	r7, #10
 800471a:	fb91 f6f7 	sdiv	r6, r1, r7
 800471e:	460a      	mov	r2, r1
 8004720:	46a6      	mov	lr, r4
 8004722:	fb07 1516 	mls	r5, r7, r6, r1
 8004726:	2a63      	cmp	r2, #99	; 0x63
 8004728:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800472c:	4631      	mov	r1, r6
 800472e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004732:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004736:	dcf0      	bgt.n	800471a <__exponent+0x20>
 8004738:	3130      	adds	r1, #48	; 0x30
 800473a:	f1ae 0502 	sub.w	r5, lr, #2
 800473e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004742:	4629      	mov	r1, r5
 8004744:	1c44      	adds	r4, r0, #1
 8004746:	4561      	cmp	r1, ip
 8004748:	d30a      	bcc.n	8004760 <__exponent+0x66>
 800474a:	f10d 0209 	add.w	r2, sp, #9
 800474e:	eba2 020e 	sub.w	r2, r2, lr
 8004752:	4565      	cmp	r5, ip
 8004754:	bf88      	it	hi
 8004756:	2200      	movhi	r2, #0
 8004758:	4413      	add	r3, r2
 800475a:	1a18      	subs	r0, r3, r0
 800475c:	b003      	add	sp, #12
 800475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004760:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004764:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004768:	e7ed      	b.n	8004746 <__exponent+0x4c>
 800476a:	2330      	movs	r3, #48	; 0x30
 800476c:	3130      	adds	r1, #48	; 0x30
 800476e:	7083      	strb	r3, [r0, #2]
 8004770:	70c1      	strb	r1, [r0, #3]
 8004772:	1d03      	adds	r3, r0, #4
 8004774:	e7f1      	b.n	800475a <__exponent+0x60>
	...

08004778 <_printf_float>:
 8004778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477c:	b091      	sub	sp, #68	; 0x44
 800477e:	460c      	mov	r4, r1
 8004780:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004784:	4616      	mov	r6, r2
 8004786:	461f      	mov	r7, r3
 8004788:	4605      	mov	r5, r0
 800478a:	f002 fe75 	bl	8007478 <_localeconv_r>
 800478e:	6803      	ldr	r3, [r0, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	9309      	str	r3, [sp, #36]	; 0x24
 8004794:	f7fb fcdc 	bl	8000150 <strlen>
 8004798:	2300      	movs	r3, #0
 800479a:	930e      	str	r3, [sp, #56]	; 0x38
 800479c:	f8d8 3000 	ldr.w	r3, [r8]
 80047a0:	900a      	str	r0, [sp, #40]	; 0x28
 80047a2:	3307      	adds	r3, #7
 80047a4:	f023 0307 	bic.w	r3, r3, #7
 80047a8:	f103 0208 	add.w	r2, r3, #8
 80047ac:	f894 9018 	ldrb.w	r9, [r4, #24]
 80047b0:	f8d4 b000 	ldr.w	fp, [r4]
 80047b4:	f8c8 2000 	str.w	r2, [r8]
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047c0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80047c4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80047c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ca:	f04f 32ff 	mov.w	r2, #4294967295
 80047ce:	4640      	mov	r0, r8
 80047d0:	4b9c      	ldr	r3, [pc, #624]	; (8004a44 <_printf_float+0x2cc>)
 80047d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047d4:	f7fc f91a 	bl	8000a0c <__aeabi_dcmpun>
 80047d8:	bb70      	cbnz	r0, 8004838 <_printf_float+0xc0>
 80047da:	f04f 32ff 	mov.w	r2, #4294967295
 80047de:	4640      	mov	r0, r8
 80047e0:	4b98      	ldr	r3, [pc, #608]	; (8004a44 <_printf_float+0x2cc>)
 80047e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047e4:	f7fc f8f4 	bl	80009d0 <__aeabi_dcmple>
 80047e8:	bb30      	cbnz	r0, 8004838 <_printf_float+0xc0>
 80047ea:	2200      	movs	r2, #0
 80047ec:	2300      	movs	r3, #0
 80047ee:	4640      	mov	r0, r8
 80047f0:	4651      	mov	r1, sl
 80047f2:	f7fc f8e3 	bl	80009bc <__aeabi_dcmplt>
 80047f6:	b110      	cbz	r0, 80047fe <_printf_float+0x86>
 80047f8:	232d      	movs	r3, #45	; 0x2d
 80047fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047fe:	4b92      	ldr	r3, [pc, #584]	; (8004a48 <_printf_float+0x2d0>)
 8004800:	4892      	ldr	r0, [pc, #584]	; (8004a4c <_printf_float+0x2d4>)
 8004802:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004806:	bf94      	ite	ls
 8004808:	4698      	movls	r8, r3
 800480a:	4680      	movhi	r8, r0
 800480c:	2303      	movs	r3, #3
 800480e:	f04f 0a00 	mov.w	sl, #0
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	f02b 0304 	bic.w	r3, fp, #4
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	4633      	mov	r3, r6
 800481c:	4621      	mov	r1, r4
 800481e:	4628      	mov	r0, r5
 8004820:	9700      	str	r7, [sp, #0]
 8004822:	aa0f      	add	r2, sp, #60	; 0x3c
 8004824:	f000 f9d4 	bl	8004bd0 <_printf_common>
 8004828:	3001      	adds	r0, #1
 800482a:	f040 8090 	bne.w	800494e <_printf_float+0x1d6>
 800482e:	f04f 30ff 	mov.w	r0, #4294967295
 8004832:	b011      	add	sp, #68	; 0x44
 8004834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004838:	4642      	mov	r2, r8
 800483a:	4653      	mov	r3, sl
 800483c:	4640      	mov	r0, r8
 800483e:	4651      	mov	r1, sl
 8004840:	f7fc f8e4 	bl	8000a0c <__aeabi_dcmpun>
 8004844:	b148      	cbz	r0, 800485a <_printf_float+0xe2>
 8004846:	f1ba 0f00 	cmp.w	sl, #0
 800484a:	bfb8      	it	lt
 800484c:	232d      	movlt	r3, #45	; 0x2d
 800484e:	4880      	ldr	r0, [pc, #512]	; (8004a50 <_printf_float+0x2d8>)
 8004850:	bfb8      	it	lt
 8004852:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004856:	4b7f      	ldr	r3, [pc, #508]	; (8004a54 <_printf_float+0x2dc>)
 8004858:	e7d3      	b.n	8004802 <_printf_float+0x8a>
 800485a:	6863      	ldr	r3, [r4, #4]
 800485c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	d142      	bne.n	80048ea <_printf_float+0x172>
 8004864:	2306      	movs	r3, #6
 8004866:	6063      	str	r3, [r4, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	9206      	str	r2, [sp, #24]
 800486c:	aa0e      	add	r2, sp, #56	; 0x38
 800486e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004872:	aa0d      	add	r2, sp, #52	; 0x34
 8004874:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004878:	9203      	str	r2, [sp, #12]
 800487a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800487e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004882:	6023      	str	r3, [r4, #0]
 8004884:	6863      	ldr	r3, [r4, #4]
 8004886:	4642      	mov	r2, r8
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	4628      	mov	r0, r5
 800488c:	4653      	mov	r3, sl
 800488e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004890:	f7ff fed4 	bl	800463c <__cvt>
 8004894:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004896:	4680      	mov	r8, r0
 8004898:	2947      	cmp	r1, #71	; 0x47
 800489a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800489c:	d108      	bne.n	80048b0 <_printf_float+0x138>
 800489e:	1cc8      	adds	r0, r1, #3
 80048a0:	db02      	blt.n	80048a8 <_printf_float+0x130>
 80048a2:	6863      	ldr	r3, [r4, #4]
 80048a4:	4299      	cmp	r1, r3
 80048a6:	dd40      	ble.n	800492a <_printf_float+0x1b2>
 80048a8:	f1a9 0902 	sub.w	r9, r9, #2
 80048ac:	fa5f f989 	uxtb.w	r9, r9
 80048b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80048b4:	d81f      	bhi.n	80048f6 <_printf_float+0x17e>
 80048b6:	464a      	mov	r2, r9
 80048b8:	3901      	subs	r1, #1
 80048ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048be:	910d      	str	r1, [sp, #52]	; 0x34
 80048c0:	f7ff ff1b 	bl	80046fa <__exponent>
 80048c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048c6:	4682      	mov	sl, r0
 80048c8:	1813      	adds	r3, r2, r0
 80048ca:	2a01      	cmp	r2, #1
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	dc02      	bgt.n	80048d6 <_printf_float+0x15e>
 80048d0:	6822      	ldr	r2, [r4, #0]
 80048d2:	07d2      	lsls	r2, r2, #31
 80048d4:	d501      	bpl.n	80048da <_printf_float+0x162>
 80048d6:	3301      	adds	r3, #1
 80048d8:	6123      	str	r3, [r4, #16]
 80048da:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d09b      	beq.n	800481a <_printf_float+0xa2>
 80048e2:	232d      	movs	r3, #45	; 0x2d
 80048e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e8:	e797      	b.n	800481a <_printf_float+0xa2>
 80048ea:	2947      	cmp	r1, #71	; 0x47
 80048ec:	d1bc      	bne.n	8004868 <_printf_float+0xf0>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ba      	bne.n	8004868 <_printf_float+0xf0>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e7b7      	b.n	8004866 <_printf_float+0xee>
 80048f6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80048fa:	d118      	bne.n	800492e <_printf_float+0x1b6>
 80048fc:	2900      	cmp	r1, #0
 80048fe:	6863      	ldr	r3, [r4, #4]
 8004900:	dd0b      	ble.n	800491a <_printf_float+0x1a2>
 8004902:	6121      	str	r1, [r4, #16]
 8004904:	b913      	cbnz	r3, 800490c <_printf_float+0x194>
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	07d0      	lsls	r0, r2, #31
 800490a:	d502      	bpl.n	8004912 <_printf_float+0x19a>
 800490c:	3301      	adds	r3, #1
 800490e:	440b      	add	r3, r1
 8004910:	6123      	str	r3, [r4, #16]
 8004912:	f04f 0a00 	mov.w	sl, #0
 8004916:	65a1      	str	r1, [r4, #88]	; 0x58
 8004918:	e7df      	b.n	80048da <_printf_float+0x162>
 800491a:	b913      	cbnz	r3, 8004922 <_printf_float+0x1aa>
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	07d2      	lsls	r2, r2, #31
 8004920:	d501      	bpl.n	8004926 <_printf_float+0x1ae>
 8004922:	3302      	adds	r3, #2
 8004924:	e7f4      	b.n	8004910 <_printf_float+0x198>
 8004926:	2301      	movs	r3, #1
 8004928:	e7f2      	b.n	8004910 <_printf_float+0x198>
 800492a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800492e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004930:	4299      	cmp	r1, r3
 8004932:	db05      	blt.n	8004940 <_printf_float+0x1c8>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	6121      	str	r1, [r4, #16]
 8004938:	07d8      	lsls	r0, r3, #31
 800493a:	d5ea      	bpl.n	8004912 <_printf_float+0x19a>
 800493c:	1c4b      	adds	r3, r1, #1
 800493e:	e7e7      	b.n	8004910 <_printf_float+0x198>
 8004940:	2900      	cmp	r1, #0
 8004942:	bfcc      	ite	gt
 8004944:	2201      	movgt	r2, #1
 8004946:	f1c1 0202 	rsble	r2, r1, #2
 800494a:	4413      	add	r3, r2
 800494c:	e7e0      	b.n	8004910 <_printf_float+0x198>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	055a      	lsls	r2, r3, #21
 8004952:	d407      	bmi.n	8004964 <_printf_float+0x1ec>
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	4642      	mov	r2, r8
 8004958:	4631      	mov	r1, r6
 800495a:	4628      	mov	r0, r5
 800495c:	47b8      	blx	r7
 800495e:	3001      	adds	r0, #1
 8004960:	d12b      	bne.n	80049ba <_printf_float+0x242>
 8004962:	e764      	b.n	800482e <_printf_float+0xb6>
 8004964:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004968:	f240 80dd 	bls.w	8004b26 <_printf_float+0x3ae>
 800496c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004970:	2200      	movs	r2, #0
 8004972:	2300      	movs	r3, #0
 8004974:	f7fc f818 	bl	80009a8 <__aeabi_dcmpeq>
 8004978:	2800      	cmp	r0, #0
 800497a:	d033      	beq.n	80049e4 <_printf_float+0x26c>
 800497c:	2301      	movs	r3, #1
 800497e:	4631      	mov	r1, r6
 8004980:	4628      	mov	r0, r5
 8004982:	4a35      	ldr	r2, [pc, #212]	; (8004a58 <_printf_float+0x2e0>)
 8004984:	47b8      	blx	r7
 8004986:	3001      	adds	r0, #1
 8004988:	f43f af51 	beq.w	800482e <_printf_float+0xb6>
 800498c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004990:	429a      	cmp	r2, r3
 8004992:	db02      	blt.n	800499a <_printf_float+0x222>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	07d8      	lsls	r0, r3, #31
 8004998:	d50f      	bpl.n	80049ba <_printf_float+0x242>
 800499a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800499e:	4631      	mov	r1, r6
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b8      	blx	r7
 80049a4:	3001      	adds	r0, #1
 80049a6:	f43f af42 	beq.w	800482e <_printf_float+0xb6>
 80049aa:	f04f 0800 	mov.w	r8, #0
 80049ae:	f104 091a 	add.w	r9, r4, #26
 80049b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049b4:	3b01      	subs	r3, #1
 80049b6:	4543      	cmp	r3, r8
 80049b8:	dc09      	bgt.n	80049ce <_printf_float+0x256>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	079b      	lsls	r3, r3, #30
 80049be:	f100 8102 	bmi.w	8004bc6 <_printf_float+0x44e>
 80049c2:	68e0      	ldr	r0, [r4, #12]
 80049c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049c6:	4298      	cmp	r0, r3
 80049c8:	bfb8      	it	lt
 80049ca:	4618      	movlt	r0, r3
 80049cc:	e731      	b.n	8004832 <_printf_float+0xba>
 80049ce:	2301      	movs	r3, #1
 80049d0:	464a      	mov	r2, r9
 80049d2:	4631      	mov	r1, r6
 80049d4:	4628      	mov	r0, r5
 80049d6:	47b8      	blx	r7
 80049d8:	3001      	adds	r0, #1
 80049da:	f43f af28 	beq.w	800482e <_printf_float+0xb6>
 80049de:	f108 0801 	add.w	r8, r8, #1
 80049e2:	e7e6      	b.n	80049b2 <_printf_float+0x23a>
 80049e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	dc38      	bgt.n	8004a5c <_printf_float+0x2e4>
 80049ea:	2301      	movs	r3, #1
 80049ec:	4631      	mov	r1, r6
 80049ee:	4628      	mov	r0, r5
 80049f0:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <_printf_float+0x2e0>)
 80049f2:	47b8      	blx	r7
 80049f4:	3001      	adds	r0, #1
 80049f6:	f43f af1a 	beq.w	800482e <_printf_float+0xb6>
 80049fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049fe:	4313      	orrs	r3, r2
 8004a00:	d102      	bne.n	8004a08 <_printf_float+0x290>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	07d9      	lsls	r1, r3, #31
 8004a06:	d5d8      	bpl.n	80049ba <_printf_float+0x242>
 8004a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4628      	mov	r0, r5
 8004a10:	47b8      	blx	r7
 8004a12:	3001      	adds	r0, #1
 8004a14:	f43f af0b 	beq.w	800482e <_printf_float+0xb6>
 8004a18:	f04f 0900 	mov.w	r9, #0
 8004a1c:	f104 0a1a 	add.w	sl, r4, #26
 8004a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a22:	425b      	negs	r3, r3
 8004a24:	454b      	cmp	r3, r9
 8004a26:	dc01      	bgt.n	8004a2c <_printf_float+0x2b4>
 8004a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a2a:	e794      	b.n	8004956 <_printf_float+0x1de>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4652      	mov	r2, sl
 8004a30:	4631      	mov	r1, r6
 8004a32:	4628      	mov	r0, r5
 8004a34:	47b8      	blx	r7
 8004a36:	3001      	adds	r0, #1
 8004a38:	f43f aef9 	beq.w	800482e <_printf_float+0xb6>
 8004a3c:	f109 0901 	add.w	r9, r9, #1
 8004a40:	e7ee      	b.n	8004a20 <_printf_float+0x2a8>
 8004a42:	bf00      	nop
 8004a44:	7fefffff 	.word	0x7fefffff
 8004a48:	08008e94 	.word	0x08008e94
 8004a4c:	08008e98 	.word	0x08008e98
 8004a50:	08008ea0 	.word	0x08008ea0
 8004a54:	08008e9c 	.word	0x08008e9c
 8004a58:	08008ea4 	.word	0x08008ea4
 8004a5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a60:	429a      	cmp	r2, r3
 8004a62:	bfa8      	it	ge
 8004a64:	461a      	movge	r2, r3
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	4691      	mov	r9, r2
 8004a6a:	dc37      	bgt.n	8004adc <_printf_float+0x364>
 8004a6c:	f04f 0b00 	mov.w	fp, #0
 8004a70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a74:	f104 021a 	add.w	r2, r4, #26
 8004a78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a7c:	ebaa 0309 	sub.w	r3, sl, r9
 8004a80:	455b      	cmp	r3, fp
 8004a82:	dc33      	bgt.n	8004aec <_printf_float+0x374>
 8004a84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	db3b      	blt.n	8004b04 <_printf_float+0x38c>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	07da      	lsls	r2, r3, #31
 8004a90:	d438      	bmi.n	8004b04 <_printf_float+0x38c>
 8004a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a96:	eba2 030a 	sub.w	r3, r2, sl
 8004a9a:	eba2 0901 	sub.w	r9, r2, r1
 8004a9e:	4599      	cmp	r9, r3
 8004aa0:	bfa8      	it	ge
 8004aa2:	4699      	movge	r9, r3
 8004aa4:	f1b9 0f00 	cmp.w	r9, #0
 8004aa8:	dc34      	bgt.n	8004b14 <_printf_float+0x39c>
 8004aaa:	f04f 0800 	mov.w	r8, #0
 8004aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ab2:	f104 0a1a 	add.w	sl, r4, #26
 8004ab6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	eba3 0309 	sub.w	r3, r3, r9
 8004ac0:	4543      	cmp	r3, r8
 8004ac2:	f77f af7a 	ble.w	80049ba <_printf_float+0x242>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4652      	mov	r2, sl
 8004aca:	4631      	mov	r1, r6
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b8      	blx	r7
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	f43f aeac 	beq.w	800482e <_printf_float+0xb6>
 8004ad6:	f108 0801 	add.w	r8, r8, #1
 8004ada:	e7ec      	b.n	8004ab6 <_printf_float+0x33e>
 8004adc:	4613      	mov	r3, r2
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b8      	blx	r7
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d1c0      	bne.n	8004a6c <_printf_float+0x2f4>
 8004aea:	e6a0      	b.n	800482e <_printf_float+0xb6>
 8004aec:	2301      	movs	r3, #1
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	f43f ae99 	beq.w	800482e <_printf_float+0xb6>
 8004afc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004afe:	f10b 0b01 	add.w	fp, fp, #1
 8004b02:	e7b9      	b.n	8004a78 <_printf_float+0x300>
 8004b04:	4631      	mov	r1, r6
 8004b06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d1bf      	bne.n	8004a92 <_printf_float+0x31a>
 8004b12:	e68c      	b.n	800482e <_printf_float+0xb6>
 8004b14:	464b      	mov	r3, r9
 8004b16:	4631      	mov	r1, r6
 8004b18:	4628      	mov	r0, r5
 8004b1a:	eb08 020a 	add.w	r2, r8, sl
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	d1c2      	bne.n	8004aaa <_printf_float+0x332>
 8004b24:	e683      	b.n	800482e <_printf_float+0xb6>
 8004b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b28:	2a01      	cmp	r2, #1
 8004b2a:	dc01      	bgt.n	8004b30 <_printf_float+0x3b8>
 8004b2c:	07db      	lsls	r3, r3, #31
 8004b2e:	d537      	bpl.n	8004ba0 <_printf_float+0x428>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4642      	mov	r2, r8
 8004b34:	4631      	mov	r1, r6
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b8      	blx	r7
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f43f ae77 	beq.w	800482e <_printf_float+0xb6>
 8004b40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	f43f ae6f 	beq.w	800482e <_printf_float+0xb6>
 8004b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b54:	2200      	movs	r2, #0
 8004b56:	2300      	movs	r3, #0
 8004b58:	f7fb ff26 	bl	80009a8 <__aeabi_dcmpeq>
 8004b5c:	b9d8      	cbnz	r0, 8004b96 <_printf_float+0x41e>
 8004b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b60:	f108 0201 	add.w	r2, r8, #1
 8004b64:	3b01      	subs	r3, #1
 8004b66:	4631      	mov	r1, r6
 8004b68:	4628      	mov	r0, r5
 8004b6a:	47b8      	blx	r7
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d10e      	bne.n	8004b8e <_printf_float+0x416>
 8004b70:	e65d      	b.n	800482e <_printf_float+0xb6>
 8004b72:	2301      	movs	r3, #1
 8004b74:	464a      	mov	r2, r9
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f ae56 	beq.w	800482e <_printf_float+0xb6>
 8004b82:	f108 0801 	add.w	r8, r8, #1
 8004b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	4543      	cmp	r3, r8
 8004b8c:	dcf1      	bgt.n	8004b72 <_printf_float+0x3fa>
 8004b8e:	4653      	mov	r3, sl
 8004b90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b94:	e6e0      	b.n	8004958 <_printf_float+0x1e0>
 8004b96:	f04f 0800 	mov.w	r8, #0
 8004b9a:	f104 091a 	add.w	r9, r4, #26
 8004b9e:	e7f2      	b.n	8004b86 <_printf_float+0x40e>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	e7df      	b.n	8004b66 <_printf_float+0x3ee>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	464a      	mov	r2, r9
 8004baa:	4631      	mov	r1, r6
 8004bac:	4628      	mov	r0, r5
 8004bae:	47b8      	blx	r7
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	f43f ae3c 	beq.w	800482e <_printf_float+0xb6>
 8004bb6:	f108 0801 	add.w	r8, r8, #1
 8004bba:	68e3      	ldr	r3, [r4, #12]
 8004bbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004bbe:	1a5b      	subs	r3, r3, r1
 8004bc0:	4543      	cmp	r3, r8
 8004bc2:	dcf0      	bgt.n	8004ba6 <_printf_float+0x42e>
 8004bc4:	e6fd      	b.n	80049c2 <_printf_float+0x24a>
 8004bc6:	f04f 0800 	mov.w	r8, #0
 8004bca:	f104 0919 	add.w	r9, r4, #25
 8004bce:	e7f4      	b.n	8004bba <_printf_float+0x442>

08004bd0 <_printf_common>:
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	4699      	mov	r9, r3
 8004bd8:	688a      	ldr	r2, [r1, #8]
 8004bda:	690b      	ldr	r3, [r1, #16]
 8004bdc:	4607      	mov	r7, r0
 8004bde:	4293      	cmp	r3, r2
 8004be0:	bfb8      	it	lt
 8004be2:	4613      	movlt	r3, r2
 8004be4:	6033      	str	r3, [r6, #0]
 8004be6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bea:	460c      	mov	r4, r1
 8004bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bf0:	b10a      	cbz	r2, 8004bf6 <_printf_common+0x26>
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	6033      	str	r3, [r6, #0]
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	0699      	lsls	r1, r3, #26
 8004bfa:	bf42      	ittt	mi
 8004bfc:	6833      	ldrmi	r3, [r6, #0]
 8004bfe:	3302      	addmi	r3, #2
 8004c00:	6033      	strmi	r3, [r6, #0]
 8004c02:	6825      	ldr	r5, [r4, #0]
 8004c04:	f015 0506 	ands.w	r5, r5, #6
 8004c08:	d106      	bne.n	8004c18 <_printf_common+0x48>
 8004c0a:	f104 0a19 	add.w	sl, r4, #25
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	6832      	ldr	r2, [r6, #0]
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	dc28      	bgt.n	8004c6a <_printf_common+0x9a>
 8004c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c1c:	1e13      	subs	r3, r2, #0
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	bf18      	it	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	0692      	lsls	r2, r2, #26
 8004c26:	d42d      	bmi.n	8004c84 <_printf_common+0xb4>
 8004c28:	4649      	mov	r1, r9
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c30:	47c0      	blx	r8
 8004c32:	3001      	adds	r0, #1
 8004c34:	d020      	beq.n	8004c78 <_printf_common+0xa8>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	68e5      	ldr	r5, [r4, #12]
 8004c3a:	f003 0306 	and.w	r3, r3, #6
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	bf18      	it	ne
 8004c42:	2500      	movne	r5, #0
 8004c44:	6832      	ldr	r2, [r6, #0]
 8004c46:	f04f 0600 	mov.w	r6, #0
 8004c4a:	68a3      	ldr	r3, [r4, #8]
 8004c4c:	bf08      	it	eq
 8004c4e:	1aad      	subeq	r5, r5, r2
 8004c50:	6922      	ldr	r2, [r4, #16]
 8004c52:	bf08      	it	eq
 8004c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	bfc4      	itt	gt
 8004c5c:	1a9b      	subgt	r3, r3, r2
 8004c5e:	18ed      	addgt	r5, r5, r3
 8004c60:	341a      	adds	r4, #26
 8004c62:	42b5      	cmp	r5, r6
 8004c64:	d11a      	bne.n	8004c9c <_printf_common+0xcc>
 8004c66:	2000      	movs	r0, #0
 8004c68:	e008      	b.n	8004c7c <_printf_common+0xac>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	4649      	mov	r1, r9
 8004c70:	4638      	mov	r0, r7
 8004c72:	47c0      	blx	r8
 8004c74:	3001      	adds	r0, #1
 8004c76:	d103      	bne.n	8004c80 <_printf_common+0xb0>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c80:	3501      	adds	r5, #1
 8004c82:	e7c4      	b.n	8004c0e <_printf_common+0x3e>
 8004c84:	2030      	movs	r0, #48	; 0x30
 8004c86:	18e1      	adds	r1, r4, r3
 8004c88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c92:	4422      	add	r2, r4
 8004c94:	3302      	adds	r3, #2
 8004c96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c9a:	e7c5      	b.n	8004c28 <_printf_common+0x58>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	47c0      	blx	r8
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d0e6      	beq.n	8004c78 <_printf_common+0xa8>
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7d9      	b.n	8004c62 <_printf_common+0x92>
	...

08004cb0 <_printf_i>:
 8004cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	7e27      	ldrb	r7, [r4, #24]
 8004cb8:	4691      	mov	r9, r2
 8004cba:	2f78      	cmp	r7, #120	; 0x78
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	469a      	mov	sl, r3
 8004cc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cc6:	d807      	bhi.n	8004cd8 <_printf_i+0x28>
 8004cc8:	2f62      	cmp	r7, #98	; 0x62
 8004cca:	d80a      	bhi.n	8004ce2 <_printf_i+0x32>
 8004ccc:	2f00      	cmp	r7, #0
 8004cce:	f000 80d9 	beq.w	8004e84 <_printf_i+0x1d4>
 8004cd2:	2f58      	cmp	r7, #88	; 0x58
 8004cd4:	f000 80a4 	beq.w	8004e20 <_printf_i+0x170>
 8004cd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ce0:	e03a      	b.n	8004d58 <_printf_i+0xa8>
 8004ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ce6:	2b15      	cmp	r3, #21
 8004ce8:	d8f6      	bhi.n	8004cd8 <_printf_i+0x28>
 8004cea:	a001      	add	r0, pc, #4	; (adr r0, 8004cf0 <_printf_i+0x40>)
 8004cec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cf0:	08004d49 	.word	0x08004d49
 8004cf4:	08004d5d 	.word	0x08004d5d
 8004cf8:	08004cd9 	.word	0x08004cd9
 8004cfc:	08004cd9 	.word	0x08004cd9
 8004d00:	08004cd9 	.word	0x08004cd9
 8004d04:	08004cd9 	.word	0x08004cd9
 8004d08:	08004d5d 	.word	0x08004d5d
 8004d0c:	08004cd9 	.word	0x08004cd9
 8004d10:	08004cd9 	.word	0x08004cd9
 8004d14:	08004cd9 	.word	0x08004cd9
 8004d18:	08004cd9 	.word	0x08004cd9
 8004d1c:	08004e6b 	.word	0x08004e6b
 8004d20:	08004d8d 	.word	0x08004d8d
 8004d24:	08004e4d 	.word	0x08004e4d
 8004d28:	08004cd9 	.word	0x08004cd9
 8004d2c:	08004cd9 	.word	0x08004cd9
 8004d30:	08004e8d 	.word	0x08004e8d
 8004d34:	08004cd9 	.word	0x08004cd9
 8004d38:	08004d8d 	.word	0x08004d8d
 8004d3c:	08004cd9 	.word	0x08004cd9
 8004d40:	08004cd9 	.word	0x08004cd9
 8004d44:	08004e55 	.word	0x08004e55
 8004d48:	680b      	ldr	r3, [r1, #0]
 8004d4a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d4e:	1d1a      	adds	r2, r3, #4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	600a      	str	r2, [r1, #0]
 8004d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0a4      	b.n	8004ea6 <_printf_i+0x1f6>
 8004d5c:	6825      	ldr	r5, [r4, #0]
 8004d5e:	6808      	ldr	r0, [r1, #0]
 8004d60:	062e      	lsls	r6, r5, #24
 8004d62:	f100 0304 	add.w	r3, r0, #4
 8004d66:	d50a      	bpl.n	8004d7e <_printf_i+0xce>
 8004d68:	6805      	ldr	r5, [r0, #0]
 8004d6a:	600b      	str	r3, [r1, #0]
 8004d6c:	2d00      	cmp	r5, #0
 8004d6e:	da03      	bge.n	8004d78 <_printf_i+0xc8>
 8004d70:	232d      	movs	r3, #45	; 0x2d
 8004d72:	426d      	negs	r5, r5
 8004d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d78:	230a      	movs	r3, #10
 8004d7a:	485e      	ldr	r0, [pc, #376]	; (8004ef4 <_printf_i+0x244>)
 8004d7c:	e019      	b.n	8004db2 <_printf_i+0x102>
 8004d7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d82:	6805      	ldr	r5, [r0, #0]
 8004d84:	600b      	str	r3, [r1, #0]
 8004d86:	bf18      	it	ne
 8004d88:	b22d      	sxthne	r5, r5
 8004d8a:	e7ef      	b.n	8004d6c <_printf_i+0xbc>
 8004d8c:	680b      	ldr	r3, [r1, #0]
 8004d8e:	6825      	ldr	r5, [r4, #0]
 8004d90:	1d18      	adds	r0, r3, #4
 8004d92:	6008      	str	r0, [r1, #0]
 8004d94:	0628      	lsls	r0, r5, #24
 8004d96:	d501      	bpl.n	8004d9c <_printf_i+0xec>
 8004d98:	681d      	ldr	r5, [r3, #0]
 8004d9a:	e002      	b.n	8004da2 <_printf_i+0xf2>
 8004d9c:	0669      	lsls	r1, r5, #25
 8004d9e:	d5fb      	bpl.n	8004d98 <_printf_i+0xe8>
 8004da0:	881d      	ldrh	r5, [r3, #0]
 8004da2:	2f6f      	cmp	r7, #111	; 0x6f
 8004da4:	bf0c      	ite	eq
 8004da6:	2308      	moveq	r3, #8
 8004da8:	230a      	movne	r3, #10
 8004daa:	4852      	ldr	r0, [pc, #328]	; (8004ef4 <_printf_i+0x244>)
 8004dac:	2100      	movs	r1, #0
 8004dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004db2:	6866      	ldr	r6, [r4, #4]
 8004db4:	2e00      	cmp	r6, #0
 8004db6:	bfa8      	it	ge
 8004db8:	6821      	ldrge	r1, [r4, #0]
 8004dba:	60a6      	str	r6, [r4, #8]
 8004dbc:	bfa4      	itt	ge
 8004dbe:	f021 0104 	bicge.w	r1, r1, #4
 8004dc2:	6021      	strge	r1, [r4, #0]
 8004dc4:	b90d      	cbnz	r5, 8004dca <_printf_i+0x11a>
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	d04d      	beq.n	8004e66 <_printf_i+0x1b6>
 8004dca:	4616      	mov	r6, r2
 8004dcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dd0:	fb03 5711 	mls	r7, r3, r1, r5
 8004dd4:	5dc7      	ldrb	r7, [r0, r7]
 8004dd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dda:	462f      	mov	r7, r5
 8004ddc:	42bb      	cmp	r3, r7
 8004dde:	460d      	mov	r5, r1
 8004de0:	d9f4      	bls.n	8004dcc <_printf_i+0x11c>
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d10b      	bne.n	8004dfe <_printf_i+0x14e>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	07df      	lsls	r7, r3, #31
 8004dea:	d508      	bpl.n	8004dfe <_printf_i+0x14e>
 8004dec:	6923      	ldr	r3, [r4, #16]
 8004dee:	6861      	ldr	r1, [r4, #4]
 8004df0:	4299      	cmp	r1, r3
 8004df2:	bfde      	ittt	le
 8004df4:	2330      	movle	r3, #48	; 0x30
 8004df6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dfe:	1b92      	subs	r2, r2, r6
 8004e00:	6122      	str	r2, [r4, #16]
 8004e02:	464b      	mov	r3, r9
 8004e04:	4621      	mov	r1, r4
 8004e06:	4640      	mov	r0, r8
 8004e08:	f8cd a000 	str.w	sl, [sp]
 8004e0c:	aa03      	add	r2, sp, #12
 8004e0e:	f7ff fedf 	bl	8004bd0 <_printf_common>
 8004e12:	3001      	adds	r0, #1
 8004e14:	d14c      	bne.n	8004eb0 <_printf_i+0x200>
 8004e16:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1a:	b004      	add	sp, #16
 8004e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e20:	4834      	ldr	r0, [pc, #208]	; (8004ef4 <_printf_i+0x244>)
 8004e22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e26:	680e      	ldr	r6, [r1, #0]
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e2e:	061f      	lsls	r7, r3, #24
 8004e30:	600e      	str	r6, [r1, #0]
 8004e32:	d514      	bpl.n	8004e5e <_printf_i+0x1ae>
 8004e34:	07d9      	lsls	r1, r3, #31
 8004e36:	bf44      	itt	mi
 8004e38:	f043 0320 	orrmi.w	r3, r3, #32
 8004e3c:	6023      	strmi	r3, [r4, #0]
 8004e3e:	b91d      	cbnz	r5, 8004e48 <_printf_i+0x198>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	f023 0320 	bic.w	r3, r3, #32
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	2310      	movs	r3, #16
 8004e4a:	e7af      	b.n	8004dac <_printf_i+0xfc>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	f043 0320 	orr.w	r3, r3, #32
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	2378      	movs	r3, #120	; 0x78
 8004e56:	4828      	ldr	r0, [pc, #160]	; (8004ef8 <_printf_i+0x248>)
 8004e58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e5c:	e7e3      	b.n	8004e26 <_printf_i+0x176>
 8004e5e:	065e      	lsls	r6, r3, #25
 8004e60:	bf48      	it	mi
 8004e62:	b2ad      	uxthmi	r5, r5
 8004e64:	e7e6      	b.n	8004e34 <_printf_i+0x184>
 8004e66:	4616      	mov	r6, r2
 8004e68:	e7bb      	b.n	8004de2 <_printf_i+0x132>
 8004e6a:	680b      	ldr	r3, [r1, #0]
 8004e6c:	6826      	ldr	r6, [r4, #0]
 8004e6e:	1d1d      	adds	r5, r3, #4
 8004e70:	6960      	ldr	r0, [r4, #20]
 8004e72:	600d      	str	r5, [r1, #0]
 8004e74:	0635      	lsls	r5, r6, #24
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	d501      	bpl.n	8004e7e <_printf_i+0x1ce>
 8004e7a:	6018      	str	r0, [r3, #0]
 8004e7c:	e002      	b.n	8004e84 <_printf_i+0x1d4>
 8004e7e:	0671      	lsls	r1, r6, #25
 8004e80:	d5fb      	bpl.n	8004e7a <_printf_i+0x1ca>
 8004e82:	8018      	strh	r0, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	4616      	mov	r6, r2
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	e7ba      	b.n	8004e02 <_printf_i+0x152>
 8004e8c:	680b      	ldr	r3, [r1, #0]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	600a      	str	r2, [r1, #0]
 8004e92:	681e      	ldr	r6, [r3, #0]
 8004e94:	2100      	movs	r1, #0
 8004e96:	4630      	mov	r0, r6
 8004e98:	6862      	ldr	r2, [r4, #4]
 8004e9a:	f002 fb0b 	bl	80074b4 <memchr>
 8004e9e:	b108      	cbz	r0, 8004ea4 <_printf_i+0x1f4>
 8004ea0:	1b80      	subs	r0, r0, r6
 8004ea2:	6060      	str	r0, [r4, #4]
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eae:	e7a8      	b.n	8004e02 <_printf_i+0x152>
 8004eb0:	4632      	mov	r2, r6
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	47d0      	blx	sl
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d0ab      	beq.n	8004e16 <_printf_i+0x166>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	079b      	lsls	r3, r3, #30
 8004ec2:	d413      	bmi.n	8004eec <_printf_i+0x23c>
 8004ec4:	68e0      	ldr	r0, [r4, #12]
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	4298      	cmp	r0, r3
 8004eca:	bfb8      	it	lt
 8004ecc:	4618      	movlt	r0, r3
 8004ece:	e7a4      	b.n	8004e1a <_printf_i+0x16a>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	4632      	mov	r2, r6
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	47d0      	blx	sl
 8004eda:	3001      	adds	r0, #1
 8004edc:	d09b      	beq.n	8004e16 <_printf_i+0x166>
 8004ede:	3501      	adds	r5, #1
 8004ee0:	68e3      	ldr	r3, [r4, #12]
 8004ee2:	9903      	ldr	r1, [sp, #12]
 8004ee4:	1a5b      	subs	r3, r3, r1
 8004ee6:	42ab      	cmp	r3, r5
 8004ee8:	dcf2      	bgt.n	8004ed0 <_printf_i+0x220>
 8004eea:	e7eb      	b.n	8004ec4 <_printf_i+0x214>
 8004eec:	2500      	movs	r5, #0
 8004eee:	f104 0619 	add.w	r6, r4, #25
 8004ef2:	e7f5      	b.n	8004ee0 <_printf_i+0x230>
 8004ef4:	08008ea6 	.word	0x08008ea6
 8004ef8:	08008eb7 	.word	0x08008eb7

08004efc <_scanf_float>:
 8004efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f00:	b087      	sub	sp, #28
 8004f02:	9303      	str	r3, [sp, #12]
 8004f04:	688b      	ldr	r3, [r1, #8]
 8004f06:	4617      	mov	r7, r2
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004f0e:	bf85      	ittet	hi
 8004f10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004f14:	195b      	addhi	r3, r3, r5
 8004f16:	2300      	movls	r3, #0
 8004f18:	9302      	strhi	r3, [sp, #8]
 8004f1a:	bf88      	it	hi
 8004f1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004f20:	468b      	mov	fp, r1
 8004f22:	f04f 0500 	mov.w	r5, #0
 8004f26:	bf8c      	ite	hi
 8004f28:	608b      	strhi	r3, [r1, #8]
 8004f2a:	9302      	strls	r3, [sp, #8]
 8004f2c:	680b      	ldr	r3, [r1, #0]
 8004f2e:	4680      	mov	r8, r0
 8004f30:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004f34:	f84b 3b1c 	str.w	r3, [fp], #28
 8004f38:	460c      	mov	r4, r1
 8004f3a:	465e      	mov	r6, fp
 8004f3c:	46aa      	mov	sl, r5
 8004f3e:	46a9      	mov	r9, r5
 8004f40:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004f44:	9501      	str	r5, [sp, #4]
 8004f46:	68a2      	ldr	r2, [r4, #8]
 8004f48:	b152      	cbz	r2, 8004f60 <_scanf_float+0x64>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b4e      	cmp	r3, #78	; 0x4e
 8004f50:	d864      	bhi.n	800501c <_scanf_float+0x120>
 8004f52:	2b40      	cmp	r3, #64	; 0x40
 8004f54:	d83c      	bhi.n	8004fd0 <_scanf_float+0xd4>
 8004f56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004f5a:	b2c8      	uxtb	r0, r1
 8004f5c:	280e      	cmp	r0, #14
 8004f5e:	d93a      	bls.n	8004fd6 <_scanf_float+0xda>
 8004f60:	f1b9 0f00 	cmp.w	r9, #0
 8004f64:	d003      	beq.n	8004f6e <_scanf_float+0x72>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f72:	f1ba 0f01 	cmp.w	sl, #1
 8004f76:	f200 8113 	bhi.w	80051a0 <_scanf_float+0x2a4>
 8004f7a:	455e      	cmp	r6, fp
 8004f7c:	f200 8105 	bhi.w	800518a <_scanf_float+0x28e>
 8004f80:	2501      	movs	r5, #1
 8004f82:	4628      	mov	r0, r5
 8004f84:	b007      	add	sp, #28
 8004f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004f8e:	2a0d      	cmp	r2, #13
 8004f90:	d8e6      	bhi.n	8004f60 <_scanf_float+0x64>
 8004f92:	a101      	add	r1, pc, #4	; (adr r1, 8004f98 <_scanf_float+0x9c>)
 8004f94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f98:	080050d7 	.word	0x080050d7
 8004f9c:	08004f61 	.word	0x08004f61
 8004fa0:	08004f61 	.word	0x08004f61
 8004fa4:	08004f61 	.word	0x08004f61
 8004fa8:	08005137 	.word	0x08005137
 8004fac:	0800510f 	.word	0x0800510f
 8004fb0:	08004f61 	.word	0x08004f61
 8004fb4:	08004f61 	.word	0x08004f61
 8004fb8:	080050e5 	.word	0x080050e5
 8004fbc:	08004f61 	.word	0x08004f61
 8004fc0:	08004f61 	.word	0x08004f61
 8004fc4:	08004f61 	.word	0x08004f61
 8004fc8:	08004f61 	.word	0x08004f61
 8004fcc:	0800509d 	.word	0x0800509d
 8004fd0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004fd4:	e7db      	b.n	8004f8e <_scanf_float+0x92>
 8004fd6:	290e      	cmp	r1, #14
 8004fd8:	d8c2      	bhi.n	8004f60 <_scanf_float+0x64>
 8004fda:	a001      	add	r0, pc, #4	; (adr r0, 8004fe0 <_scanf_float+0xe4>)
 8004fdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004fe0:	0800508f 	.word	0x0800508f
 8004fe4:	08004f61 	.word	0x08004f61
 8004fe8:	0800508f 	.word	0x0800508f
 8004fec:	08005123 	.word	0x08005123
 8004ff0:	08004f61 	.word	0x08004f61
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	08005079 	.word	0x08005079
 8004ffc:	08005079 	.word	0x08005079
 8005000:	08005079 	.word	0x08005079
 8005004:	08005079 	.word	0x08005079
 8005008:	08005079 	.word	0x08005079
 800500c:	08005079 	.word	0x08005079
 8005010:	08005079 	.word	0x08005079
 8005014:	08005079 	.word	0x08005079
 8005018:	08005079 	.word	0x08005079
 800501c:	2b6e      	cmp	r3, #110	; 0x6e
 800501e:	d809      	bhi.n	8005034 <_scanf_float+0x138>
 8005020:	2b60      	cmp	r3, #96	; 0x60
 8005022:	d8b2      	bhi.n	8004f8a <_scanf_float+0x8e>
 8005024:	2b54      	cmp	r3, #84	; 0x54
 8005026:	d077      	beq.n	8005118 <_scanf_float+0x21c>
 8005028:	2b59      	cmp	r3, #89	; 0x59
 800502a:	d199      	bne.n	8004f60 <_scanf_float+0x64>
 800502c:	2d07      	cmp	r5, #7
 800502e:	d197      	bne.n	8004f60 <_scanf_float+0x64>
 8005030:	2508      	movs	r5, #8
 8005032:	e029      	b.n	8005088 <_scanf_float+0x18c>
 8005034:	2b74      	cmp	r3, #116	; 0x74
 8005036:	d06f      	beq.n	8005118 <_scanf_float+0x21c>
 8005038:	2b79      	cmp	r3, #121	; 0x79
 800503a:	e7f6      	b.n	800502a <_scanf_float+0x12e>
 800503c:	6821      	ldr	r1, [r4, #0]
 800503e:	05c8      	lsls	r0, r1, #23
 8005040:	d51a      	bpl.n	8005078 <_scanf_float+0x17c>
 8005042:	9b02      	ldr	r3, [sp, #8]
 8005044:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005048:	6021      	str	r1, [r4, #0]
 800504a:	f109 0901 	add.w	r9, r9, #1
 800504e:	b11b      	cbz	r3, 8005058 <_scanf_float+0x15c>
 8005050:	3b01      	subs	r3, #1
 8005052:	3201      	adds	r2, #1
 8005054:	9302      	str	r3, [sp, #8]
 8005056:	60a2      	str	r2, [r4, #8]
 8005058:	68a3      	ldr	r3, [r4, #8]
 800505a:	3b01      	subs	r3, #1
 800505c:	60a3      	str	r3, [r4, #8]
 800505e:	6923      	ldr	r3, [r4, #16]
 8005060:	3301      	adds	r3, #1
 8005062:	6123      	str	r3, [r4, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3b01      	subs	r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	607b      	str	r3, [r7, #4]
 800506c:	f340 8084 	ble.w	8005178 <_scanf_float+0x27c>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	3301      	adds	r3, #1
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	e766      	b.n	8004f46 <_scanf_float+0x4a>
 8005078:	eb1a 0f05 	cmn.w	sl, r5
 800507c:	f47f af70 	bne.w	8004f60 <_scanf_float+0x64>
 8005080:	6822      	ldr	r2, [r4, #0]
 8005082:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005086:	6022      	str	r2, [r4, #0]
 8005088:	f806 3b01 	strb.w	r3, [r6], #1
 800508c:	e7e4      	b.n	8005058 <_scanf_float+0x15c>
 800508e:	6822      	ldr	r2, [r4, #0]
 8005090:	0610      	lsls	r0, r2, #24
 8005092:	f57f af65 	bpl.w	8004f60 <_scanf_float+0x64>
 8005096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800509a:	e7f4      	b.n	8005086 <_scanf_float+0x18a>
 800509c:	f1ba 0f00 	cmp.w	sl, #0
 80050a0:	d10e      	bne.n	80050c0 <_scanf_float+0x1c4>
 80050a2:	f1b9 0f00 	cmp.w	r9, #0
 80050a6:	d10e      	bne.n	80050c6 <_scanf_float+0x1ca>
 80050a8:	6822      	ldr	r2, [r4, #0]
 80050aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80050ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80050b2:	d108      	bne.n	80050c6 <_scanf_float+0x1ca>
 80050b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80050b8:	f04f 0a01 	mov.w	sl, #1
 80050bc:	6022      	str	r2, [r4, #0]
 80050be:	e7e3      	b.n	8005088 <_scanf_float+0x18c>
 80050c0:	f1ba 0f02 	cmp.w	sl, #2
 80050c4:	d055      	beq.n	8005172 <_scanf_float+0x276>
 80050c6:	2d01      	cmp	r5, #1
 80050c8:	d002      	beq.n	80050d0 <_scanf_float+0x1d4>
 80050ca:	2d04      	cmp	r5, #4
 80050cc:	f47f af48 	bne.w	8004f60 <_scanf_float+0x64>
 80050d0:	3501      	adds	r5, #1
 80050d2:	b2ed      	uxtb	r5, r5
 80050d4:	e7d8      	b.n	8005088 <_scanf_float+0x18c>
 80050d6:	f1ba 0f01 	cmp.w	sl, #1
 80050da:	f47f af41 	bne.w	8004f60 <_scanf_float+0x64>
 80050de:	f04f 0a02 	mov.w	sl, #2
 80050e2:	e7d1      	b.n	8005088 <_scanf_float+0x18c>
 80050e4:	b97d      	cbnz	r5, 8005106 <_scanf_float+0x20a>
 80050e6:	f1b9 0f00 	cmp.w	r9, #0
 80050ea:	f47f af3c 	bne.w	8004f66 <_scanf_float+0x6a>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80050f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80050f8:	f47f af39 	bne.w	8004f6e <_scanf_float+0x72>
 80050fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005100:	2501      	movs	r5, #1
 8005102:	6022      	str	r2, [r4, #0]
 8005104:	e7c0      	b.n	8005088 <_scanf_float+0x18c>
 8005106:	2d03      	cmp	r5, #3
 8005108:	d0e2      	beq.n	80050d0 <_scanf_float+0x1d4>
 800510a:	2d05      	cmp	r5, #5
 800510c:	e7de      	b.n	80050cc <_scanf_float+0x1d0>
 800510e:	2d02      	cmp	r5, #2
 8005110:	f47f af26 	bne.w	8004f60 <_scanf_float+0x64>
 8005114:	2503      	movs	r5, #3
 8005116:	e7b7      	b.n	8005088 <_scanf_float+0x18c>
 8005118:	2d06      	cmp	r5, #6
 800511a:	f47f af21 	bne.w	8004f60 <_scanf_float+0x64>
 800511e:	2507      	movs	r5, #7
 8005120:	e7b2      	b.n	8005088 <_scanf_float+0x18c>
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	0591      	lsls	r1, r2, #22
 8005126:	f57f af1b 	bpl.w	8004f60 <_scanf_float+0x64>
 800512a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800512e:	6022      	str	r2, [r4, #0]
 8005130:	f8cd 9004 	str.w	r9, [sp, #4]
 8005134:	e7a8      	b.n	8005088 <_scanf_float+0x18c>
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800513c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005140:	d006      	beq.n	8005150 <_scanf_float+0x254>
 8005142:	0550      	lsls	r0, r2, #21
 8005144:	f57f af0c 	bpl.w	8004f60 <_scanf_float+0x64>
 8005148:	f1b9 0f00 	cmp.w	r9, #0
 800514c:	f43f af0f 	beq.w	8004f6e <_scanf_float+0x72>
 8005150:	0591      	lsls	r1, r2, #22
 8005152:	bf58      	it	pl
 8005154:	9901      	ldrpl	r1, [sp, #4]
 8005156:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800515a:	bf58      	it	pl
 800515c:	eba9 0101 	subpl.w	r1, r9, r1
 8005160:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005164:	f04f 0900 	mov.w	r9, #0
 8005168:	bf58      	it	pl
 800516a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800516e:	6022      	str	r2, [r4, #0]
 8005170:	e78a      	b.n	8005088 <_scanf_float+0x18c>
 8005172:	f04f 0a03 	mov.w	sl, #3
 8005176:	e787      	b.n	8005088 <_scanf_float+0x18c>
 8005178:	4639      	mov	r1, r7
 800517a:	4640      	mov	r0, r8
 800517c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005180:	4798      	blx	r3
 8005182:	2800      	cmp	r0, #0
 8005184:	f43f aedf 	beq.w	8004f46 <_scanf_float+0x4a>
 8005188:	e6ea      	b.n	8004f60 <_scanf_float+0x64>
 800518a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800518e:	463a      	mov	r2, r7
 8005190:	4640      	mov	r0, r8
 8005192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005196:	4798      	blx	r3
 8005198:	6923      	ldr	r3, [r4, #16]
 800519a:	3b01      	subs	r3, #1
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	e6ec      	b.n	8004f7a <_scanf_float+0x7e>
 80051a0:	1e6b      	subs	r3, r5, #1
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d825      	bhi.n	80051f2 <_scanf_float+0x2f6>
 80051a6:	2d02      	cmp	r5, #2
 80051a8:	d836      	bhi.n	8005218 <_scanf_float+0x31c>
 80051aa:	455e      	cmp	r6, fp
 80051ac:	f67f aee8 	bls.w	8004f80 <_scanf_float+0x84>
 80051b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051b4:	463a      	mov	r2, r7
 80051b6:	4640      	mov	r0, r8
 80051b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051bc:	4798      	blx	r3
 80051be:	6923      	ldr	r3, [r4, #16]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	6123      	str	r3, [r4, #16]
 80051c4:	e7f1      	b.n	80051aa <_scanf_float+0x2ae>
 80051c6:	9802      	ldr	r0, [sp, #8]
 80051c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80051d0:	463a      	mov	r2, r7
 80051d2:	9002      	str	r0, [sp, #8]
 80051d4:	4640      	mov	r0, r8
 80051d6:	4798      	blx	r3
 80051d8:	6923      	ldr	r3, [r4, #16]
 80051da:	3b01      	subs	r3, #1
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051e2:	fa5f fa8a 	uxtb.w	sl, sl
 80051e6:	f1ba 0f02 	cmp.w	sl, #2
 80051ea:	d1ec      	bne.n	80051c6 <_scanf_float+0x2ca>
 80051ec:	3d03      	subs	r5, #3
 80051ee:	b2ed      	uxtb	r5, r5
 80051f0:	1b76      	subs	r6, r6, r5
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	05da      	lsls	r2, r3, #23
 80051f6:	d52f      	bpl.n	8005258 <_scanf_float+0x35c>
 80051f8:	055b      	lsls	r3, r3, #21
 80051fa:	d510      	bpl.n	800521e <_scanf_float+0x322>
 80051fc:	455e      	cmp	r6, fp
 80051fe:	f67f aebf 	bls.w	8004f80 <_scanf_float+0x84>
 8005202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005206:	463a      	mov	r2, r7
 8005208:	4640      	mov	r0, r8
 800520a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800520e:	4798      	blx	r3
 8005210:	6923      	ldr	r3, [r4, #16]
 8005212:	3b01      	subs	r3, #1
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	e7f1      	b.n	80051fc <_scanf_float+0x300>
 8005218:	46aa      	mov	sl, r5
 800521a:	9602      	str	r6, [sp, #8]
 800521c:	e7df      	b.n	80051de <_scanf_float+0x2e2>
 800521e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005222:	6923      	ldr	r3, [r4, #16]
 8005224:	2965      	cmp	r1, #101	; 0x65
 8005226:	f103 33ff 	add.w	r3, r3, #4294967295
 800522a:	f106 35ff 	add.w	r5, r6, #4294967295
 800522e:	6123      	str	r3, [r4, #16]
 8005230:	d00c      	beq.n	800524c <_scanf_float+0x350>
 8005232:	2945      	cmp	r1, #69	; 0x45
 8005234:	d00a      	beq.n	800524c <_scanf_float+0x350>
 8005236:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800523a:	463a      	mov	r2, r7
 800523c:	4640      	mov	r0, r8
 800523e:	4798      	blx	r3
 8005240:	6923      	ldr	r3, [r4, #16]
 8005242:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005246:	3b01      	subs	r3, #1
 8005248:	1eb5      	subs	r5, r6, #2
 800524a:	6123      	str	r3, [r4, #16]
 800524c:	463a      	mov	r2, r7
 800524e:	4640      	mov	r0, r8
 8005250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005254:	4798      	blx	r3
 8005256:	462e      	mov	r6, r5
 8005258:	6825      	ldr	r5, [r4, #0]
 800525a:	f015 0510 	ands.w	r5, r5, #16
 800525e:	d159      	bne.n	8005314 <_scanf_float+0x418>
 8005260:	7035      	strb	r5, [r6, #0]
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526c:	d11c      	bne.n	80052a8 <_scanf_float+0x3ac>
 800526e:	9b01      	ldr	r3, [sp, #4]
 8005270:	454b      	cmp	r3, r9
 8005272:	eba3 0209 	sub.w	r2, r3, r9
 8005276:	d124      	bne.n	80052c2 <_scanf_float+0x3c6>
 8005278:	2200      	movs	r2, #0
 800527a:	4659      	mov	r1, fp
 800527c:	4640      	mov	r0, r8
 800527e:	f000 fe8b 	bl	8005f98 <_strtod_r>
 8005282:	f8d4 c000 	ldr.w	ip, [r4]
 8005286:	9b03      	ldr	r3, [sp, #12]
 8005288:	f01c 0f02 	tst.w	ip, #2
 800528c:	4606      	mov	r6, r0
 800528e:	460f      	mov	r7, r1
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	d021      	beq.n	80052d8 <_scanf_float+0x3dc>
 8005294:	9903      	ldr	r1, [sp, #12]
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	600a      	str	r2, [r1, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	e9c3 6700 	strd	r6, r7, [r3]
 80052a0:	68e3      	ldr	r3, [r4, #12]
 80052a2:	3301      	adds	r3, #1
 80052a4:	60e3      	str	r3, [r4, #12]
 80052a6:	e66c      	b.n	8004f82 <_scanf_float+0x86>
 80052a8:	9b04      	ldr	r3, [sp, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0e4      	beq.n	8005278 <_scanf_float+0x37c>
 80052ae:	9905      	ldr	r1, [sp, #20]
 80052b0:	230a      	movs	r3, #10
 80052b2:	462a      	mov	r2, r5
 80052b4:	4640      	mov	r0, r8
 80052b6:	3101      	adds	r1, #1
 80052b8:	f000 fefa 	bl	80060b0 <_strtol_r>
 80052bc:	9b04      	ldr	r3, [sp, #16]
 80052be:	9e05      	ldr	r6, [sp, #20]
 80052c0:	1ac2      	subs	r2, r0, r3
 80052c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80052c6:	429e      	cmp	r6, r3
 80052c8:	bf28      	it	cs
 80052ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80052ce:	4630      	mov	r0, r6
 80052d0:	4911      	ldr	r1, [pc, #68]	; (8005318 <_scanf_float+0x41c>)
 80052d2:	f000 f829 	bl	8005328 <siprintf>
 80052d6:	e7cf      	b.n	8005278 <_scanf_float+0x37c>
 80052d8:	f01c 0f04 	tst.w	ip, #4
 80052dc:	f103 0e04 	add.w	lr, r3, #4
 80052e0:	d003      	beq.n	80052ea <_scanf_float+0x3ee>
 80052e2:	9903      	ldr	r1, [sp, #12]
 80052e4:	f8c1 e000 	str.w	lr, [r1]
 80052e8:	e7d7      	b.n	800529a <_scanf_float+0x39e>
 80052ea:	9a03      	ldr	r2, [sp, #12]
 80052ec:	f8c2 e000 	str.w	lr, [r2]
 80052f0:	f8d3 8000 	ldr.w	r8, [r3]
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	f7fb fb88 	bl	8000a0c <__aeabi_dcmpun>
 80052fc:	b128      	cbz	r0, 800530a <_scanf_float+0x40e>
 80052fe:	4807      	ldr	r0, [pc, #28]	; (800531c <_scanf_float+0x420>)
 8005300:	f000 f80e 	bl	8005320 <nanf>
 8005304:	f8c8 0000 	str.w	r0, [r8]
 8005308:	e7ca      	b.n	80052a0 <_scanf_float+0x3a4>
 800530a:	4630      	mov	r0, r6
 800530c:	4639      	mov	r1, r7
 800530e:	f7fb fbdb 	bl	8000ac8 <__aeabi_d2f>
 8005312:	e7f7      	b.n	8005304 <_scanf_float+0x408>
 8005314:	2500      	movs	r5, #0
 8005316:	e634      	b.n	8004f82 <_scanf_float+0x86>
 8005318:	08008ec8 	.word	0x08008ec8
 800531c:	080092e0 	.word	0x080092e0

08005320 <nanf>:
 8005320:	4800      	ldr	r0, [pc, #0]	; (8005324 <nanf+0x4>)
 8005322:	4770      	bx	lr
 8005324:	7fc00000 	.word	0x7fc00000

08005328 <siprintf>:
 8005328:	b40e      	push	{r1, r2, r3}
 800532a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800532e:	b500      	push	{lr}
 8005330:	b09c      	sub	sp, #112	; 0x70
 8005332:	ab1d      	add	r3, sp, #116	; 0x74
 8005334:	9002      	str	r0, [sp, #8]
 8005336:	9006      	str	r0, [sp, #24]
 8005338:	9107      	str	r1, [sp, #28]
 800533a:	9104      	str	r1, [sp, #16]
 800533c:	4808      	ldr	r0, [pc, #32]	; (8005360 <siprintf+0x38>)
 800533e:	4909      	ldr	r1, [pc, #36]	; (8005364 <siprintf+0x3c>)
 8005340:	f853 2b04 	ldr.w	r2, [r3], #4
 8005344:	9105      	str	r1, [sp, #20]
 8005346:	6800      	ldr	r0, [r0, #0]
 8005348:	a902      	add	r1, sp, #8
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	f002 fe96 	bl	800807c <_svfiprintf_r>
 8005350:	2200      	movs	r2, #0
 8005352:	9b02      	ldr	r3, [sp, #8]
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	b01c      	add	sp, #112	; 0x70
 8005358:	f85d eb04 	ldr.w	lr, [sp], #4
 800535c:	b003      	add	sp, #12
 800535e:	4770      	bx	lr
 8005360:	2000000c 	.word	0x2000000c
 8005364:	ffff0208 	.word	0xffff0208

08005368 <sulp>:
 8005368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536c:	460f      	mov	r7, r1
 800536e:	4690      	mov	r8, r2
 8005370:	f002 fc2c 	bl	8007bcc <__ulp>
 8005374:	4604      	mov	r4, r0
 8005376:	460d      	mov	r5, r1
 8005378:	f1b8 0f00 	cmp.w	r8, #0
 800537c:	d011      	beq.n	80053a2 <sulp+0x3a>
 800537e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005382:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005386:	2b00      	cmp	r3, #0
 8005388:	dd0b      	ble.n	80053a2 <sulp+0x3a>
 800538a:	2400      	movs	r4, #0
 800538c:	051b      	lsls	r3, r3, #20
 800538e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005392:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005396:	4622      	mov	r2, r4
 8005398:	462b      	mov	r3, r5
 800539a:	f7fb f89d 	bl	80004d8 <__aeabi_dmul>
 800539e:	4604      	mov	r4, r0
 80053a0:	460d      	mov	r5, r1
 80053a2:	4620      	mov	r0, r4
 80053a4:	4629      	mov	r1, r5
 80053a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053aa:	0000      	movs	r0, r0
 80053ac:	0000      	movs	r0, r0
	...

080053b0 <_strtod_l>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	469b      	mov	fp, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	b0a1      	sub	sp, #132	; 0x84
 80053ba:	931c      	str	r3, [sp, #112]	; 0x70
 80053bc:	4ba1      	ldr	r3, [pc, #644]	; (8005644 <_strtod_l+0x294>)
 80053be:	4682      	mov	sl, r0
 80053c0:	681f      	ldr	r7, [r3, #0]
 80053c2:	460e      	mov	r6, r1
 80053c4:	4638      	mov	r0, r7
 80053c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80053c8:	f7fa fec2 	bl	8000150 <strlen>
 80053cc:	f04f 0800 	mov.w	r8, #0
 80053d0:	4604      	mov	r4, r0
 80053d2:	f04f 0900 	mov.w	r9, #0
 80053d6:	961b      	str	r6, [sp, #108]	; 0x6c
 80053d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053da:	781a      	ldrb	r2, [r3, #0]
 80053dc:	2a2b      	cmp	r2, #43	; 0x2b
 80053de:	d04c      	beq.n	800547a <_strtod_l+0xca>
 80053e0:	d83a      	bhi.n	8005458 <_strtod_l+0xa8>
 80053e2:	2a0d      	cmp	r2, #13
 80053e4:	d833      	bhi.n	800544e <_strtod_l+0x9e>
 80053e6:	2a08      	cmp	r2, #8
 80053e8:	d833      	bhi.n	8005452 <_strtod_l+0xa2>
 80053ea:	2a00      	cmp	r2, #0
 80053ec:	d03d      	beq.n	800546a <_strtod_l+0xba>
 80053ee:	2300      	movs	r3, #0
 80053f0:	930c      	str	r3, [sp, #48]	; 0x30
 80053f2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80053f4:	782b      	ldrb	r3, [r5, #0]
 80053f6:	2b30      	cmp	r3, #48	; 0x30
 80053f8:	f040 80af 	bne.w	800555a <_strtod_l+0x1aa>
 80053fc:	786b      	ldrb	r3, [r5, #1]
 80053fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005402:	2b58      	cmp	r3, #88	; 0x58
 8005404:	d16c      	bne.n	80054e0 <_strtod_l+0x130>
 8005406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005408:	4650      	mov	r0, sl
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	ab1c      	add	r3, sp, #112	; 0x70
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	4a8d      	ldr	r2, [pc, #564]	; (8005648 <_strtod_l+0x298>)
 8005412:	f8cd b008 	str.w	fp, [sp, #8]
 8005416:	ab1d      	add	r3, sp, #116	; 0x74
 8005418:	a91b      	add	r1, sp, #108	; 0x6c
 800541a:	f001 fd2f 	bl	8006e7c <__gethex>
 800541e:	f010 0607 	ands.w	r6, r0, #7
 8005422:	4604      	mov	r4, r0
 8005424:	d005      	beq.n	8005432 <_strtod_l+0x82>
 8005426:	2e06      	cmp	r6, #6
 8005428:	d129      	bne.n	800547e <_strtod_l+0xce>
 800542a:	2300      	movs	r3, #0
 800542c:	3501      	adds	r5, #1
 800542e:	951b      	str	r5, [sp, #108]	; 0x6c
 8005430:	930c      	str	r3, [sp, #48]	; 0x30
 8005432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005434:	2b00      	cmp	r3, #0
 8005436:	f040 8596 	bne.w	8005f66 <_strtod_l+0xbb6>
 800543a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800543c:	b1d3      	cbz	r3, 8005474 <_strtod_l+0xc4>
 800543e:	4642      	mov	r2, r8
 8005440:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005444:	4610      	mov	r0, r2
 8005446:	4619      	mov	r1, r3
 8005448:	b021      	add	sp, #132	; 0x84
 800544a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544e:	2a20      	cmp	r2, #32
 8005450:	d1cd      	bne.n	80053ee <_strtod_l+0x3e>
 8005452:	3301      	adds	r3, #1
 8005454:	931b      	str	r3, [sp, #108]	; 0x6c
 8005456:	e7bf      	b.n	80053d8 <_strtod_l+0x28>
 8005458:	2a2d      	cmp	r2, #45	; 0x2d
 800545a:	d1c8      	bne.n	80053ee <_strtod_l+0x3e>
 800545c:	2201      	movs	r2, #1
 800545e:	920c      	str	r2, [sp, #48]	; 0x30
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	921b      	str	r2, [sp, #108]	; 0x6c
 8005464:	785b      	ldrb	r3, [r3, #1]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1c3      	bne.n	80053f2 <_strtod_l+0x42>
 800546a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800546c:	961b      	str	r6, [sp, #108]	; 0x6c
 800546e:	2b00      	cmp	r3, #0
 8005470:	f040 8577 	bne.w	8005f62 <_strtod_l+0xbb2>
 8005474:	4642      	mov	r2, r8
 8005476:	464b      	mov	r3, r9
 8005478:	e7e4      	b.n	8005444 <_strtod_l+0x94>
 800547a:	2200      	movs	r2, #0
 800547c:	e7ef      	b.n	800545e <_strtod_l+0xae>
 800547e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005480:	b13a      	cbz	r2, 8005492 <_strtod_l+0xe2>
 8005482:	2135      	movs	r1, #53	; 0x35
 8005484:	a81e      	add	r0, sp, #120	; 0x78
 8005486:	f002 fca5 	bl	8007dd4 <__copybits>
 800548a:	4650      	mov	r0, sl
 800548c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800548e:	f002 f86d 	bl	800756c <_Bfree>
 8005492:	3e01      	subs	r6, #1
 8005494:	2e05      	cmp	r6, #5
 8005496:	d807      	bhi.n	80054a8 <_strtod_l+0xf8>
 8005498:	e8df f006 	tbb	[pc, r6]
 800549c:	1d180b0e 	.word	0x1d180b0e
 80054a0:	030e      	.short	0x030e
 80054a2:	f04f 0900 	mov.w	r9, #0
 80054a6:	46c8      	mov	r8, r9
 80054a8:	0721      	lsls	r1, r4, #28
 80054aa:	d5c2      	bpl.n	8005432 <_strtod_l+0x82>
 80054ac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80054b0:	e7bf      	b.n	8005432 <_strtod_l+0x82>
 80054b2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80054b6:	e7f7      	b.n	80054a8 <_strtod_l+0xf8>
 80054b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80054ba:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80054be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80054c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80054c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80054ca:	e7ed      	b.n	80054a8 <_strtod_l+0xf8>
 80054cc:	f04f 0800 	mov.w	r8, #0
 80054d0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800564c <_strtod_l+0x29c>
 80054d4:	e7e8      	b.n	80054a8 <_strtod_l+0xf8>
 80054d6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80054da:	f04f 38ff 	mov.w	r8, #4294967295
 80054de:	e7e3      	b.n	80054a8 <_strtod_l+0xf8>
 80054e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	921b      	str	r2, [sp, #108]	; 0x6c
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	2b30      	cmp	r3, #48	; 0x30
 80054ea:	d0f9      	beq.n	80054e0 <_strtod_l+0x130>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0a0      	beq.n	8005432 <_strtod_l+0x82>
 80054f0:	2301      	movs	r3, #1
 80054f2:	9307      	str	r3, [sp, #28]
 80054f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054f6:	220a      	movs	r2, #10
 80054f8:	9308      	str	r3, [sp, #32]
 80054fa:	2300      	movs	r3, #0
 80054fc:	469b      	mov	fp, r3
 80054fe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005502:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005504:	7805      	ldrb	r5, [r0, #0]
 8005506:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800550a:	b2d9      	uxtb	r1, r3
 800550c:	2909      	cmp	r1, #9
 800550e:	d926      	bls.n	800555e <_strtod_l+0x1ae>
 8005510:	4622      	mov	r2, r4
 8005512:	4639      	mov	r1, r7
 8005514:	f002 fec8 	bl	80082a8 <strncmp>
 8005518:	2800      	cmp	r0, #0
 800551a:	d032      	beq.n	8005582 <_strtod_l+0x1d2>
 800551c:	2000      	movs	r0, #0
 800551e:	462b      	mov	r3, r5
 8005520:	465c      	mov	r4, fp
 8005522:	4602      	mov	r2, r0
 8005524:	9004      	str	r0, [sp, #16]
 8005526:	2b65      	cmp	r3, #101	; 0x65
 8005528:	d001      	beq.n	800552e <_strtod_l+0x17e>
 800552a:	2b45      	cmp	r3, #69	; 0x45
 800552c:	d113      	bne.n	8005556 <_strtod_l+0x1a6>
 800552e:	b91c      	cbnz	r4, 8005538 <_strtod_l+0x188>
 8005530:	9b07      	ldr	r3, [sp, #28]
 8005532:	4303      	orrs	r3, r0
 8005534:	d099      	beq.n	800546a <_strtod_l+0xba>
 8005536:	2400      	movs	r4, #0
 8005538:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800553a:	1c73      	adds	r3, r6, #1
 800553c:	931b      	str	r3, [sp, #108]	; 0x6c
 800553e:	7873      	ldrb	r3, [r6, #1]
 8005540:	2b2b      	cmp	r3, #43	; 0x2b
 8005542:	d078      	beq.n	8005636 <_strtod_l+0x286>
 8005544:	2b2d      	cmp	r3, #45	; 0x2d
 8005546:	d07b      	beq.n	8005640 <_strtod_l+0x290>
 8005548:	2700      	movs	r7, #0
 800554a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800554e:	2909      	cmp	r1, #9
 8005550:	f240 8082 	bls.w	8005658 <_strtod_l+0x2a8>
 8005554:	961b      	str	r6, [sp, #108]	; 0x6c
 8005556:	2500      	movs	r5, #0
 8005558:	e09e      	b.n	8005698 <_strtod_l+0x2e8>
 800555a:	2300      	movs	r3, #0
 800555c:	e7c9      	b.n	80054f2 <_strtod_l+0x142>
 800555e:	f1bb 0f08 	cmp.w	fp, #8
 8005562:	bfd5      	itete	le
 8005564:	9906      	ldrle	r1, [sp, #24]
 8005566:	9905      	ldrgt	r1, [sp, #20]
 8005568:	fb02 3301 	mlale	r3, r2, r1, r3
 800556c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005570:	f100 0001 	add.w	r0, r0, #1
 8005574:	bfd4      	ite	le
 8005576:	9306      	strle	r3, [sp, #24]
 8005578:	9305      	strgt	r3, [sp, #20]
 800557a:	f10b 0b01 	add.w	fp, fp, #1
 800557e:	901b      	str	r0, [sp, #108]	; 0x6c
 8005580:	e7bf      	b.n	8005502 <_strtod_l+0x152>
 8005582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005584:	191a      	adds	r2, r3, r4
 8005586:	921b      	str	r2, [sp, #108]	; 0x6c
 8005588:	5d1b      	ldrb	r3, [r3, r4]
 800558a:	f1bb 0f00 	cmp.w	fp, #0
 800558e:	d036      	beq.n	80055fe <_strtod_l+0x24e>
 8005590:	465c      	mov	r4, fp
 8005592:	9004      	str	r0, [sp, #16]
 8005594:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005598:	2a09      	cmp	r2, #9
 800559a:	d912      	bls.n	80055c2 <_strtod_l+0x212>
 800559c:	2201      	movs	r2, #1
 800559e:	e7c2      	b.n	8005526 <_strtod_l+0x176>
 80055a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055a2:	3001      	adds	r0, #1
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	921b      	str	r2, [sp, #108]	; 0x6c
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	2b30      	cmp	r3, #48	; 0x30
 80055ac:	d0f8      	beq.n	80055a0 <_strtod_l+0x1f0>
 80055ae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80055b2:	2a08      	cmp	r2, #8
 80055b4:	f200 84dc 	bhi.w	8005f70 <_strtod_l+0xbc0>
 80055b8:	9004      	str	r0, [sp, #16]
 80055ba:	2000      	movs	r0, #0
 80055bc:	4604      	mov	r4, r0
 80055be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80055c0:	9208      	str	r2, [sp, #32]
 80055c2:	3b30      	subs	r3, #48	; 0x30
 80055c4:	f100 0201 	add.w	r2, r0, #1
 80055c8:	d013      	beq.n	80055f2 <_strtod_l+0x242>
 80055ca:	9904      	ldr	r1, [sp, #16]
 80055cc:	1905      	adds	r5, r0, r4
 80055ce:	4411      	add	r1, r2
 80055d0:	9104      	str	r1, [sp, #16]
 80055d2:	4622      	mov	r2, r4
 80055d4:	210a      	movs	r1, #10
 80055d6:	42aa      	cmp	r2, r5
 80055d8:	d113      	bne.n	8005602 <_strtod_l+0x252>
 80055da:	1822      	adds	r2, r4, r0
 80055dc:	2a08      	cmp	r2, #8
 80055de:	f104 0401 	add.w	r4, r4, #1
 80055e2:	4404      	add	r4, r0
 80055e4:	dc1b      	bgt.n	800561e <_strtod_l+0x26e>
 80055e6:	220a      	movs	r2, #10
 80055e8:	9906      	ldr	r1, [sp, #24]
 80055ea:	fb02 3301 	mla	r3, r2, r1, r3
 80055ee:	9306      	str	r3, [sp, #24]
 80055f0:	2200      	movs	r2, #0
 80055f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055f4:	4610      	mov	r0, r2
 80055f6:	1c59      	adds	r1, r3, #1
 80055f8:	911b      	str	r1, [sp, #108]	; 0x6c
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	e7ca      	b.n	8005594 <_strtod_l+0x1e4>
 80055fe:	4658      	mov	r0, fp
 8005600:	e7d3      	b.n	80055aa <_strtod_l+0x1fa>
 8005602:	2a08      	cmp	r2, #8
 8005604:	dc04      	bgt.n	8005610 <_strtod_l+0x260>
 8005606:	9f06      	ldr	r7, [sp, #24]
 8005608:	434f      	muls	r7, r1
 800560a:	9706      	str	r7, [sp, #24]
 800560c:	3201      	adds	r2, #1
 800560e:	e7e2      	b.n	80055d6 <_strtod_l+0x226>
 8005610:	1c57      	adds	r7, r2, #1
 8005612:	2f10      	cmp	r7, #16
 8005614:	bfde      	ittt	le
 8005616:	9f05      	ldrle	r7, [sp, #20]
 8005618:	434f      	mulle	r7, r1
 800561a:	9705      	strle	r7, [sp, #20]
 800561c:	e7f6      	b.n	800560c <_strtod_l+0x25c>
 800561e:	2c10      	cmp	r4, #16
 8005620:	bfdf      	itttt	le
 8005622:	220a      	movle	r2, #10
 8005624:	9905      	ldrle	r1, [sp, #20]
 8005626:	fb02 3301 	mlale	r3, r2, r1, r3
 800562a:	9305      	strle	r3, [sp, #20]
 800562c:	e7e0      	b.n	80055f0 <_strtod_l+0x240>
 800562e:	2300      	movs	r3, #0
 8005630:	2201      	movs	r2, #1
 8005632:	9304      	str	r3, [sp, #16]
 8005634:	e77c      	b.n	8005530 <_strtod_l+0x180>
 8005636:	2700      	movs	r7, #0
 8005638:	1cb3      	adds	r3, r6, #2
 800563a:	931b      	str	r3, [sp, #108]	; 0x6c
 800563c:	78b3      	ldrb	r3, [r6, #2]
 800563e:	e784      	b.n	800554a <_strtod_l+0x19a>
 8005640:	2701      	movs	r7, #1
 8005642:	e7f9      	b.n	8005638 <_strtod_l+0x288>
 8005644:	08009120 	.word	0x08009120
 8005648:	08008ed0 	.word	0x08008ed0
 800564c:	7ff00000 	.word	0x7ff00000
 8005650:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	911b      	str	r1, [sp, #108]	; 0x6c
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b30      	cmp	r3, #48	; 0x30
 800565a:	d0f9      	beq.n	8005650 <_strtod_l+0x2a0>
 800565c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005660:	2908      	cmp	r1, #8
 8005662:	f63f af78 	bhi.w	8005556 <_strtod_l+0x1a6>
 8005666:	f04f 0e0a 	mov.w	lr, #10
 800566a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800566e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005670:	9309      	str	r3, [sp, #36]	; 0x24
 8005672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005674:	1c59      	adds	r1, r3, #1
 8005676:	911b      	str	r1, [sp, #108]	; 0x6c
 8005678:	785b      	ldrb	r3, [r3, #1]
 800567a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800567e:	2d09      	cmp	r5, #9
 8005680:	d935      	bls.n	80056ee <_strtod_l+0x33e>
 8005682:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005684:	1b49      	subs	r1, r1, r5
 8005686:	2908      	cmp	r1, #8
 8005688:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800568c:	dc02      	bgt.n	8005694 <_strtod_l+0x2e4>
 800568e:	4565      	cmp	r5, ip
 8005690:	bfa8      	it	ge
 8005692:	4665      	movge	r5, ip
 8005694:	b107      	cbz	r7, 8005698 <_strtod_l+0x2e8>
 8005696:	426d      	negs	r5, r5
 8005698:	2c00      	cmp	r4, #0
 800569a:	d14c      	bne.n	8005736 <_strtod_l+0x386>
 800569c:	9907      	ldr	r1, [sp, #28]
 800569e:	4301      	orrs	r1, r0
 80056a0:	f47f aec7 	bne.w	8005432 <_strtod_l+0x82>
 80056a4:	2a00      	cmp	r2, #0
 80056a6:	f47f aee0 	bne.w	800546a <_strtod_l+0xba>
 80056aa:	2b69      	cmp	r3, #105	; 0x69
 80056ac:	d026      	beq.n	80056fc <_strtod_l+0x34c>
 80056ae:	dc23      	bgt.n	80056f8 <_strtod_l+0x348>
 80056b0:	2b49      	cmp	r3, #73	; 0x49
 80056b2:	d023      	beq.n	80056fc <_strtod_l+0x34c>
 80056b4:	2b4e      	cmp	r3, #78	; 0x4e
 80056b6:	f47f aed8 	bne.w	800546a <_strtod_l+0xba>
 80056ba:	499c      	ldr	r1, [pc, #624]	; (800592c <_strtod_l+0x57c>)
 80056bc:	a81b      	add	r0, sp, #108	; 0x6c
 80056be:	f001 fe2b 	bl	8007318 <__match>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	f43f aed1 	beq.w	800546a <_strtod_l+0xba>
 80056c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b28      	cmp	r3, #40	; 0x28
 80056ce:	d12c      	bne.n	800572a <_strtod_l+0x37a>
 80056d0:	4997      	ldr	r1, [pc, #604]	; (8005930 <_strtod_l+0x580>)
 80056d2:	aa1e      	add	r2, sp, #120	; 0x78
 80056d4:	a81b      	add	r0, sp, #108	; 0x6c
 80056d6:	f001 fe33 	bl	8007340 <__hexnan>
 80056da:	2805      	cmp	r0, #5
 80056dc:	d125      	bne.n	800572a <_strtod_l+0x37a>
 80056de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056e0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80056e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80056e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80056ec:	e6a1      	b.n	8005432 <_strtod_l+0x82>
 80056ee:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80056f2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80056f6:	e7bc      	b.n	8005672 <_strtod_l+0x2c2>
 80056f8:	2b6e      	cmp	r3, #110	; 0x6e
 80056fa:	e7dc      	b.n	80056b6 <_strtod_l+0x306>
 80056fc:	498d      	ldr	r1, [pc, #564]	; (8005934 <_strtod_l+0x584>)
 80056fe:	a81b      	add	r0, sp, #108	; 0x6c
 8005700:	f001 fe0a 	bl	8007318 <__match>
 8005704:	2800      	cmp	r0, #0
 8005706:	f43f aeb0 	beq.w	800546a <_strtod_l+0xba>
 800570a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800570c:	498a      	ldr	r1, [pc, #552]	; (8005938 <_strtod_l+0x588>)
 800570e:	3b01      	subs	r3, #1
 8005710:	a81b      	add	r0, sp, #108	; 0x6c
 8005712:	931b      	str	r3, [sp, #108]	; 0x6c
 8005714:	f001 fe00 	bl	8007318 <__match>
 8005718:	b910      	cbnz	r0, 8005720 <_strtod_l+0x370>
 800571a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800571c:	3301      	adds	r3, #1
 800571e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005720:	f04f 0800 	mov.w	r8, #0
 8005724:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005948 <_strtod_l+0x598>
 8005728:	e683      	b.n	8005432 <_strtod_l+0x82>
 800572a:	4884      	ldr	r0, [pc, #528]	; (800593c <_strtod_l+0x58c>)
 800572c:	f002 fda6 	bl	800827c <nan>
 8005730:	4680      	mov	r8, r0
 8005732:	4689      	mov	r9, r1
 8005734:	e67d      	b.n	8005432 <_strtod_l+0x82>
 8005736:	9b04      	ldr	r3, [sp, #16]
 8005738:	f1bb 0f00 	cmp.w	fp, #0
 800573c:	bf08      	it	eq
 800573e:	46a3      	moveq	fp, r4
 8005740:	1aeb      	subs	r3, r5, r3
 8005742:	2c10      	cmp	r4, #16
 8005744:	9806      	ldr	r0, [sp, #24]
 8005746:	4626      	mov	r6, r4
 8005748:	9307      	str	r3, [sp, #28]
 800574a:	bfa8      	it	ge
 800574c:	2610      	movge	r6, #16
 800574e:	f7fa fe49 	bl	80003e4 <__aeabi_ui2d>
 8005752:	2c09      	cmp	r4, #9
 8005754:	4680      	mov	r8, r0
 8005756:	4689      	mov	r9, r1
 8005758:	dd13      	ble.n	8005782 <_strtod_l+0x3d2>
 800575a:	4b79      	ldr	r3, [pc, #484]	; (8005940 <_strtod_l+0x590>)
 800575c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005760:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005764:	f7fa feb8 	bl	80004d8 <__aeabi_dmul>
 8005768:	4680      	mov	r8, r0
 800576a:	9805      	ldr	r0, [sp, #20]
 800576c:	4689      	mov	r9, r1
 800576e:	f7fa fe39 	bl	80003e4 <__aeabi_ui2d>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4640      	mov	r0, r8
 8005778:	4649      	mov	r1, r9
 800577a:	f7fa fcf7 	bl	800016c <__adddf3>
 800577e:	4680      	mov	r8, r0
 8005780:	4689      	mov	r9, r1
 8005782:	2c0f      	cmp	r4, #15
 8005784:	dc36      	bgt.n	80057f4 <_strtod_l+0x444>
 8005786:	9b07      	ldr	r3, [sp, #28]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f43f ae52 	beq.w	8005432 <_strtod_l+0x82>
 800578e:	dd22      	ble.n	80057d6 <_strtod_l+0x426>
 8005790:	2b16      	cmp	r3, #22
 8005792:	dc09      	bgt.n	80057a8 <_strtod_l+0x3f8>
 8005794:	4c6a      	ldr	r4, [pc, #424]	; (8005940 <_strtod_l+0x590>)
 8005796:	4642      	mov	r2, r8
 8005798:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800579c:	464b      	mov	r3, r9
 800579e:	e9d4 0100 	ldrd	r0, r1, [r4]
 80057a2:	f7fa fe99 	bl	80004d8 <__aeabi_dmul>
 80057a6:	e7c3      	b.n	8005730 <_strtod_l+0x380>
 80057a8:	9a07      	ldr	r2, [sp, #28]
 80057aa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80057ae:	4293      	cmp	r3, r2
 80057b0:	db20      	blt.n	80057f4 <_strtod_l+0x444>
 80057b2:	4d63      	ldr	r5, [pc, #396]	; (8005940 <_strtod_l+0x590>)
 80057b4:	f1c4 040f 	rsb	r4, r4, #15
 80057b8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80057bc:	4642      	mov	r2, r8
 80057be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057c2:	464b      	mov	r3, r9
 80057c4:	f7fa fe88 	bl	80004d8 <__aeabi_dmul>
 80057c8:	9b07      	ldr	r3, [sp, #28]
 80057ca:	1b1c      	subs	r4, r3, r4
 80057cc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80057d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057d4:	e7e5      	b.n	80057a2 <_strtod_l+0x3f2>
 80057d6:	9b07      	ldr	r3, [sp, #28]
 80057d8:	3316      	adds	r3, #22
 80057da:	db0b      	blt.n	80057f4 <_strtod_l+0x444>
 80057dc:	9b04      	ldr	r3, [sp, #16]
 80057de:	4a58      	ldr	r2, [pc, #352]	; (8005940 <_strtod_l+0x590>)
 80057e0:	1b5d      	subs	r5, r3, r5
 80057e2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80057e6:	4640      	mov	r0, r8
 80057e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057ec:	4649      	mov	r1, r9
 80057ee:	f7fa ff9d 	bl	800072c <__aeabi_ddiv>
 80057f2:	e79d      	b.n	8005730 <_strtod_l+0x380>
 80057f4:	9b07      	ldr	r3, [sp, #28]
 80057f6:	1ba6      	subs	r6, r4, r6
 80057f8:	441e      	add	r6, r3
 80057fa:	2e00      	cmp	r6, #0
 80057fc:	dd71      	ble.n	80058e2 <_strtod_l+0x532>
 80057fe:	f016 030f 	ands.w	r3, r6, #15
 8005802:	d00a      	beq.n	800581a <_strtod_l+0x46a>
 8005804:	494e      	ldr	r1, [pc, #312]	; (8005940 <_strtod_l+0x590>)
 8005806:	4642      	mov	r2, r8
 8005808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800580c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005810:	464b      	mov	r3, r9
 8005812:	f7fa fe61 	bl	80004d8 <__aeabi_dmul>
 8005816:	4680      	mov	r8, r0
 8005818:	4689      	mov	r9, r1
 800581a:	f036 060f 	bics.w	r6, r6, #15
 800581e:	d050      	beq.n	80058c2 <_strtod_l+0x512>
 8005820:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005824:	dd27      	ble.n	8005876 <_strtod_l+0x4c6>
 8005826:	f04f 0b00 	mov.w	fp, #0
 800582a:	f8cd b010 	str.w	fp, [sp, #16]
 800582e:	f8cd b020 	str.w	fp, [sp, #32]
 8005832:	f8cd b018 	str.w	fp, [sp, #24]
 8005836:	2322      	movs	r3, #34	; 0x22
 8005838:	f04f 0800 	mov.w	r8, #0
 800583c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005948 <_strtod_l+0x598>
 8005840:	f8ca 3000 	str.w	r3, [sl]
 8005844:	9b08      	ldr	r3, [sp, #32]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f43f adf3 	beq.w	8005432 <_strtod_l+0x82>
 800584c:	4650      	mov	r0, sl
 800584e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005850:	f001 fe8c 	bl	800756c <_Bfree>
 8005854:	4650      	mov	r0, sl
 8005856:	9906      	ldr	r1, [sp, #24]
 8005858:	f001 fe88 	bl	800756c <_Bfree>
 800585c:	4650      	mov	r0, sl
 800585e:	9904      	ldr	r1, [sp, #16]
 8005860:	f001 fe84 	bl	800756c <_Bfree>
 8005864:	4650      	mov	r0, sl
 8005866:	9908      	ldr	r1, [sp, #32]
 8005868:	f001 fe80 	bl	800756c <_Bfree>
 800586c:	4659      	mov	r1, fp
 800586e:	4650      	mov	r0, sl
 8005870:	f001 fe7c 	bl	800756c <_Bfree>
 8005874:	e5dd      	b.n	8005432 <_strtod_l+0x82>
 8005876:	2300      	movs	r3, #0
 8005878:	4640      	mov	r0, r8
 800587a:	4649      	mov	r1, r9
 800587c:	461f      	mov	r7, r3
 800587e:	1136      	asrs	r6, r6, #4
 8005880:	2e01      	cmp	r6, #1
 8005882:	dc21      	bgt.n	80058c8 <_strtod_l+0x518>
 8005884:	b10b      	cbz	r3, 800588a <_strtod_l+0x4da>
 8005886:	4680      	mov	r8, r0
 8005888:	4689      	mov	r9, r1
 800588a:	4b2e      	ldr	r3, [pc, #184]	; (8005944 <_strtod_l+0x594>)
 800588c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005890:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005894:	4642      	mov	r2, r8
 8005896:	e9d7 0100 	ldrd	r0, r1, [r7]
 800589a:	464b      	mov	r3, r9
 800589c:	f7fa fe1c 	bl	80004d8 <__aeabi_dmul>
 80058a0:	4b29      	ldr	r3, [pc, #164]	; (8005948 <_strtod_l+0x598>)
 80058a2:	460a      	mov	r2, r1
 80058a4:	400b      	ands	r3, r1
 80058a6:	4929      	ldr	r1, [pc, #164]	; (800594c <_strtod_l+0x59c>)
 80058a8:	4680      	mov	r8, r0
 80058aa:	428b      	cmp	r3, r1
 80058ac:	d8bb      	bhi.n	8005826 <_strtod_l+0x476>
 80058ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80058b2:	428b      	cmp	r3, r1
 80058b4:	bf86      	itte	hi
 80058b6:	f04f 38ff 	movhi.w	r8, #4294967295
 80058ba:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005950 <_strtod_l+0x5a0>
 80058be:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80058c2:	2300      	movs	r3, #0
 80058c4:	9305      	str	r3, [sp, #20]
 80058c6:	e07e      	b.n	80059c6 <_strtod_l+0x616>
 80058c8:	07f2      	lsls	r2, r6, #31
 80058ca:	d507      	bpl.n	80058dc <_strtod_l+0x52c>
 80058cc:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <_strtod_l+0x594>)
 80058ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa fdff 	bl	80004d8 <__aeabi_dmul>
 80058da:	2301      	movs	r3, #1
 80058dc:	3701      	adds	r7, #1
 80058de:	1076      	asrs	r6, r6, #1
 80058e0:	e7ce      	b.n	8005880 <_strtod_l+0x4d0>
 80058e2:	d0ee      	beq.n	80058c2 <_strtod_l+0x512>
 80058e4:	4276      	negs	r6, r6
 80058e6:	f016 020f 	ands.w	r2, r6, #15
 80058ea:	d00a      	beq.n	8005902 <_strtod_l+0x552>
 80058ec:	4b14      	ldr	r3, [pc, #80]	; (8005940 <_strtod_l+0x590>)
 80058ee:	4640      	mov	r0, r8
 80058f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058f4:	4649      	mov	r1, r9
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f7fa ff17 	bl	800072c <__aeabi_ddiv>
 80058fe:	4680      	mov	r8, r0
 8005900:	4689      	mov	r9, r1
 8005902:	1136      	asrs	r6, r6, #4
 8005904:	d0dd      	beq.n	80058c2 <_strtod_l+0x512>
 8005906:	2e1f      	cmp	r6, #31
 8005908:	dd24      	ble.n	8005954 <_strtod_l+0x5a4>
 800590a:	f04f 0b00 	mov.w	fp, #0
 800590e:	f8cd b010 	str.w	fp, [sp, #16]
 8005912:	f8cd b020 	str.w	fp, [sp, #32]
 8005916:	f8cd b018 	str.w	fp, [sp, #24]
 800591a:	2322      	movs	r3, #34	; 0x22
 800591c:	f04f 0800 	mov.w	r8, #0
 8005920:	f04f 0900 	mov.w	r9, #0
 8005924:	f8ca 3000 	str.w	r3, [sl]
 8005928:	e78c      	b.n	8005844 <_strtod_l+0x494>
 800592a:	bf00      	nop
 800592c:	08008ea1 	.word	0x08008ea1
 8005930:	08008ee4 	.word	0x08008ee4
 8005934:	08008e99 	.word	0x08008e99
 8005938:	08009024 	.word	0x08009024
 800593c:	080092e0 	.word	0x080092e0
 8005940:	080091c0 	.word	0x080091c0
 8005944:	08009198 	.word	0x08009198
 8005948:	7ff00000 	.word	0x7ff00000
 800594c:	7ca00000 	.word	0x7ca00000
 8005950:	7fefffff 	.word	0x7fefffff
 8005954:	f016 0310 	ands.w	r3, r6, #16
 8005958:	bf18      	it	ne
 800595a:	236a      	movne	r3, #106	; 0x6a
 800595c:	4640      	mov	r0, r8
 800595e:	9305      	str	r3, [sp, #20]
 8005960:	4649      	mov	r1, r9
 8005962:	2300      	movs	r3, #0
 8005964:	4fb2      	ldr	r7, [pc, #712]	; (8005c30 <_strtod_l+0x880>)
 8005966:	07f2      	lsls	r2, r6, #31
 8005968:	d504      	bpl.n	8005974 <_strtod_l+0x5c4>
 800596a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800596e:	f7fa fdb3 	bl	80004d8 <__aeabi_dmul>
 8005972:	2301      	movs	r3, #1
 8005974:	1076      	asrs	r6, r6, #1
 8005976:	f107 0708 	add.w	r7, r7, #8
 800597a:	d1f4      	bne.n	8005966 <_strtod_l+0x5b6>
 800597c:	b10b      	cbz	r3, 8005982 <_strtod_l+0x5d2>
 800597e:	4680      	mov	r8, r0
 8005980:	4689      	mov	r9, r1
 8005982:	9b05      	ldr	r3, [sp, #20]
 8005984:	b1bb      	cbz	r3, 80059b6 <_strtod_l+0x606>
 8005986:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800598a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800598e:	2b00      	cmp	r3, #0
 8005990:	4649      	mov	r1, r9
 8005992:	dd10      	ble.n	80059b6 <_strtod_l+0x606>
 8005994:	2b1f      	cmp	r3, #31
 8005996:	f340 812b 	ble.w	8005bf0 <_strtod_l+0x840>
 800599a:	2b34      	cmp	r3, #52	; 0x34
 800599c:	bfd8      	it	le
 800599e:	f04f 32ff 	movle.w	r2, #4294967295
 80059a2:	f04f 0800 	mov.w	r8, #0
 80059a6:	bfcf      	iteee	gt
 80059a8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80059ac:	3b20      	suble	r3, #32
 80059ae:	fa02 f303 	lslle.w	r3, r2, r3
 80059b2:	ea03 0901 	andle.w	r9, r3, r1
 80059b6:	2200      	movs	r2, #0
 80059b8:	2300      	movs	r3, #0
 80059ba:	4640      	mov	r0, r8
 80059bc:	4649      	mov	r1, r9
 80059be:	f7fa fff3 	bl	80009a8 <__aeabi_dcmpeq>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d1a1      	bne.n	800590a <_strtod_l+0x55a>
 80059c6:	9b06      	ldr	r3, [sp, #24]
 80059c8:	465a      	mov	r2, fp
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	4650      	mov	r0, sl
 80059ce:	4623      	mov	r3, r4
 80059d0:	9908      	ldr	r1, [sp, #32]
 80059d2:	f001 fe37 	bl	8007644 <__s2b>
 80059d6:	9008      	str	r0, [sp, #32]
 80059d8:	2800      	cmp	r0, #0
 80059da:	f43f af24 	beq.w	8005826 <_strtod_l+0x476>
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	f04f 0b00 	mov.w	fp, #0
 80059e4:	1b5d      	subs	r5, r3, r5
 80059e6:	9b07      	ldr	r3, [sp, #28]
 80059e8:	f8cd b010 	str.w	fp, [sp, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bfb4      	ite	lt
 80059f0:	462b      	movlt	r3, r5
 80059f2:	2300      	movge	r3, #0
 80059f4:	930e      	str	r3, [sp, #56]	; 0x38
 80059f6:	9b07      	ldr	r3, [sp, #28]
 80059f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80059fc:	9316      	str	r3, [sp, #88]	; 0x58
 80059fe:	9b08      	ldr	r3, [sp, #32]
 8005a00:	4650      	mov	r0, sl
 8005a02:	6859      	ldr	r1, [r3, #4]
 8005a04:	f001 fd72 	bl	80074ec <_Balloc>
 8005a08:	9006      	str	r0, [sp, #24]
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	f43f af13 	beq.w	8005836 <_strtod_l+0x486>
 8005a10:	9b08      	ldr	r3, [sp, #32]
 8005a12:	300c      	adds	r0, #12
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	f103 010c 	add.w	r1, r3, #12
 8005a1a:	3202      	adds	r2, #2
 8005a1c:	0092      	lsls	r2, r2, #2
 8005a1e:	f001 fd57 	bl	80074d0 <memcpy>
 8005a22:	ab1e      	add	r3, sp, #120	; 0x78
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	ab1d      	add	r3, sp, #116	; 0x74
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	4642      	mov	r2, r8
 8005a2c:	464b      	mov	r3, r9
 8005a2e:	4650      	mov	r0, sl
 8005a30:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8005a34:	f002 f944 	bl	8007cc0 <__d2b>
 8005a38:	901c      	str	r0, [sp, #112]	; 0x70
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	f43f aefb 	beq.w	8005836 <_strtod_l+0x486>
 8005a40:	2101      	movs	r1, #1
 8005a42:	4650      	mov	r0, sl
 8005a44:	f001 fe96 	bl	8007774 <__i2b>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	9004      	str	r0, [sp, #16]
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	f43f aef2 	beq.w	8005836 <_strtod_l+0x486>
 8005a52:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005a54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	bfab      	itete	ge
 8005a5a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005a5c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005a5e:	18ee      	addge	r6, r5, r3
 8005a60:	1b5c      	sublt	r4, r3, r5
 8005a62:	9b05      	ldr	r3, [sp, #20]
 8005a64:	bfa8      	it	ge
 8005a66:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005a68:	eba5 0503 	sub.w	r5, r5, r3
 8005a6c:	4415      	add	r5, r2
 8005a6e:	4b71      	ldr	r3, [pc, #452]	; (8005c34 <_strtod_l+0x884>)
 8005a70:	f105 35ff 	add.w	r5, r5, #4294967295
 8005a74:	bfb8      	it	lt
 8005a76:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005a78:	429d      	cmp	r5, r3
 8005a7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005a7e:	f280 80c9 	bge.w	8005c14 <_strtod_l+0x864>
 8005a82:	1b5b      	subs	r3, r3, r5
 8005a84:	2b1f      	cmp	r3, #31
 8005a86:	f04f 0701 	mov.w	r7, #1
 8005a8a:	eba2 0203 	sub.w	r2, r2, r3
 8005a8e:	f300 80b6 	bgt.w	8005bfe <_strtod_l+0x84e>
 8005a92:	2500      	movs	r5, #0
 8005a94:	fa07 f303 	lsl.w	r3, r7, r3
 8005a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a9a:	18b7      	adds	r7, r6, r2
 8005a9c:	9b05      	ldr	r3, [sp, #20]
 8005a9e:	42be      	cmp	r6, r7
 8005aa0:	4414      	add	r4, r2
 8005aa2:	441c      	add	r4, r3
 8005aa4:	4633      	mov	r3, r6
 8005aa6:	bfa8      	it	ge
 8005aa8:	463b      	movge	r3, r7
 8005aaa:	42a3      	cmp	r3, r4
 8005aac:	bfa8      	it	ge
 8005aae:	4623      	movge	r3, r4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfc2      	ittt	gt
 8005ab4:	1aff      	subgt	r7, r7, r3
 8005ab6:	1ae4      	subgt	r4, r4, r3
 8005ab8:	1af6      	subgt	r6, r6, r3
 8005aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dd17      	ble.n	8005af0 <_strtod_l+0x740>
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4650      	mov	r0, sl
 8005ac4:	9904      	ldr	r1, [sp, #16]
 8005ac6:	f001 ff0f 	bl	80078e8 <__pow5mult>
 8005aca:	9004      	str	r0, [sp, #16]
 8005acc:	2800      	cmp	r0, #0
 8005ace:	f43f aeb2 	beq.w	8005836 <_strtod_l+0x486>
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005ad6:	4650      	mov	r0, sl
 8005ad8:	f001 fe62 	bl	80077a0 <__multiply>
 8005adc:	9009      	str	r0, [sp, #36]	; 0x24
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f43f aea9 	beq.w	8005836 <_strtod_l+0x486>
 8005ae4:	4650      	mov	r0, sl
 8005ae6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ae8:	f001 fd40 	bl	800756c <_Bfree>
 8005aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aee:	931c      	str	r3, [sp, #112]	; 0x70
 8005af0:	2f00      	cmp	r7, #0
 8005af2:	f300 8093 	bgt.w	8005c1c <_strtod_l+0x86c>
 8005af6:	9b07      	ldr	r3, [sp, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	dd08      	ble.n	8005b0e <_strtod_l+0x75e>
 8005afc:	4650      	mov	r0, sl
 8005afe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b00:	9906      	ldr	r1, [sp, #24]
 8005b02:	f001 fef1 	bl	80078e8 <__pow5mult>
 8005b06:	9006      	str	r0, [sp, #24]
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	f43f ae94 	beq.w	8005836 <_strtod_l+0x486>
 8005b0e:	2c00      	cmp	r4, #0
 8005b10:	dd08      	ble.n	8005b24 <_strtod_l+0x774>
 8005b12:	4622      	mov	r2, r4
 8005b14:	4650      	mov	r0, sl
 8005b16:	9906      	ldr	r1, [sp, #24]
 8005b18:	f001 ff40 	bl	800799c <__lshift>
 8005b1c:	9006      	str	r0, [sp, #24]
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	f43f ae89 	beq.w	8005836 <_strtod_l+0x486>
 8005b24:	2e00      	cmp	r6, #0
 8005b26:	dd08      	ble.n	8005b3a <_strtod_l+0x78a>
 8005b28:	4632      	mov	r2, r6
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	9904      	ldr	r1, [sp, #16]
 8005b2e:	f001 ff35 	bl	800799c <__lshift>
 8005b32:	9004      	str	r0, [sp, #16]
 8005b34:	2800      	cmp	r0, #0
 8005b36:	f43f ae7e 	beq.w	8005836 <_strtod_l+0x486>
 8005b3a:	4650      	mov	r0, sl
 8005b3c:	9a06      	ldr	r2, [sp, #24]
 8005b3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b40:	f001 ffb4 	bl	8007aac <__mdiff>
 8005b44:	4683      	mov	fp, r0
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f43f ae75 	beq.w	8005836 <_strtod_l+0x486>
 8005b4c:	2400      	movs	r4, #0
 8005b4e:	68c3      	ldr	r3, [r0, #12]
 8005b50:	9904      	ldr	r1, [sp, #16]
 8005b52:	60c4      	str	r4, [r0, #12]
 8005b54:	930d      	str	r3, [sp, #52]	; 0x34
 8005b56:	f001 ff8d 	bl	8007a74 <__mcmp>
 8005b5a:	42a0      	cmp	r0, r4
 8005b5c:	da70      	bge.n	8005c40 <_strtod_l+0x890>
 8005b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b60:	ea53 0308 	orrs.w	r3, r3, r8
 8005b64:	f040 8096 	bne.w	8005c94 <_strtod_l+0x8e4>
 8005b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f040 8091 	bne.w	8005c94 <_strtod_l+0x8e4>
 8005b72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b76:	0d1b      	lsrs	r3, r3, #20
 8005b78:	051b      	lsls	r3, r3, #20
 8005b7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005b7e:	f240 8089 	bls.w	8005c94 <_strtod_l+0x8e4>
 8005b82:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005b86:	b923      	cbnz	r3, 8005b92 <_strtod_l+0x7e2>
 8005b88:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	f340 8081 	ble.w	8005c94 <_strtod_l+0x8e4>
 8005b92:	4659      	mov	r1, fp
 8005b94:	2201      	movs	r2, #1
 8005b96:	4650      	mov	r0, sl
 8005b98:	f001 ff00 	bl	800799c <__lshift>
 8005b9c:	9904      	ldr	r1, [sp, #16]
 8005b9e:	4683      	mov	fp, r0
 8005ba0:	f001 ff68 	bl	8007a74 <__mcmp>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	dd75      	ble.n	8005c94 <_strtod_l+0x8e4>
 8005ba8:	9905      	ldr	r1, [sp, #20]
 8005baa:	464b      	mov	r3, r9
 8005bac:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <_strtod_l+0x888>)
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	f000 8091 	beq.w	8005cd6 <_strtod_l+0x926>
 8005bb4:	ea02 0109 	and.w	r1, r2, r9
 8005bb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005bbc:	f300 808b 	bgt.w	8005cd6 <_strtod_l+0x926>
 8005bc0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005bc4:	f77f aea9 	ble.w	800591a <_strtod_l+0x56a>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4a1c      	ldr	r2, [pc, #112]	; (8005c3c <_strtod_l+0x88c>)
 8005bcc:	4640      	mov	r0, r8
 8005bce:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005bd8:	f7fa fc7e 	bl	80004d8 <__aeabi_dmul>
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4303      	orrs	r3, r0
 8005be0:	bf08      	it	eq
 8005be2:	2322      	moveq	r3, #34	; 0x22
 8005be4:	4680      	mov	r8, r0
 8005be6:	4689      	mov	r9, r1
 8005be8:	bf08      	it	eq
 8005bea:	f8ca 3000 	streq.w	r3, [sl]
 8005bee:	e62d      	b.n	800584c <_strtod_l+0x49c>
 8005bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	ea03 0808 	and.w	r8, r3, r8
 8005bfc:	e6db      	b.n	80059b6 <_strtod_l+0x606>
 8005bfe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005c02:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005c06:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005c0a:	35e2      	adds	r5, #226	; 0xe2
 8005c0c:	fa07 f505 	lsl.w	r5, r7, r5
 8005c10:	970f      	str	r7, [sp, #60]	; 0x3c
 8005c12:	e742      	b.n	8005a9a <_strtod_l+0x6ea>
 8005c14:	2301      	movs	r3, #1
 8005c16:	2500      	movs	r5, #0
 8005c18:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c1a:	e73e      	b.n	8005a9a <_strtod_l+0x6ea>
 8005c1c:	463a      	mov	r2, r7
 8005c1e:	4650      	mov	r0, sl
 8005c20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c22:	f001 febb 	bl	800799c <__lshift>
 8005c26:	901c      	str	r0, [sp, #112]	; 0x70
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	f47f af64 	bne.w	8005af6 <_strtod_l+0x746>
 8005c2e:	e602      	b.n	8005836 <_strtod_l+0x486>
 8005c30:	08008ef8 	.word	0x08008ef8
 8005c34:	fffffc02 	.word	0xfffffc02
 8005c38:	7ff00000 	.word	0x7ff00000
 8005c3c:	39500000 	.word	0x39500000
 8005c40:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005c44:	d166      	bne.n	8005d14 <_strtod_l+0x964>
 8005c46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c4c:	b35a      	cbz	r2, 8005ca6 <_strtod_l+0x8f6>
 8005c4e:	4a9c      	ldr	r2, [pc, #624]	; (8005ec0 <_strtod_l+0xb10>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d12c      	bne.n	8005cae <_strtod_l+0x8fe>
 8005c54:	9b05      	ldr	r3, [sp, #20]
 8005c56:	4640      	mov	r0, r8
 8005c58:	b303      	cbz	r3, 8005c9c <_strtod_l+0x8ec>
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	4a99      	ldr	r2, [pc, #612]	; (8005ec4 <_strtod_l+0xb14>)
 8005c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8005c62:	401a      	ands	r2, r3
 8005c64:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005c68:	d81b      	bhi.n	8005ca2 <_strtod_l+0x8f2>
 8005c6a:	0d12      	lsrs	r2, r2, #20
 8005c6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005c70:	fa01 f303 	lsl.w	r3, r1, r3
 8005c74:	4298      	cmp	r0, r3
 8005c76:	d11a      	bne.n	8005cae <_strtod_l+0x8fe>
 8005c78:	4b93      	ldr	r3, [pc, #588]	; (8005ec8 <_strtod_l+0xb18>)
 8005c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d102      	bne.n	8005c86 <_strtod_l+0x8d6>
 8005c80:	3001      	adds	r0, #1
 8005c82:	f43f add8 	beq.w	8005836 <_strtod_l+0x486>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	4b8e      	ldr	r3, [pc, #568]	; (8005ec4 <_strtod_l+0xb14>)
 8005c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c8e:	401a      	ands	r2, r3
 8005c90:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005c94:	9b05      	ldr	r3, [sp, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d196      	bne.n	8005bc8 <_strtod_l+0x818>
 8005c9a:	e5d7      	b.n	800584c <_strtod_l+0x49c>
 8005c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca0:	e7e8      	b.n	8005c74 <_strtod_l+0x8c4>
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	e7e6      	b.n	8005c74 <_strtod_l+0x8c4>
 8005ca6:	ea53 0308 	orrs.w	r3, r3, r8
 8005caa:	f43f af7d 	beq.w	8005ba8 <_strtod_l+0x7f8>
 8005cae:	b1e5      	cbz	r5, 8005cea <_strtod_l+0x93a>
 8005cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb2:	421d      	tst	r5, r3
 8005cb4:	d0ee      	beq.n	8005c94 <_strtod_l+0x8e4>
 8005cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	9a05      	ldr	r2, [sp, #20]
 8005cbe:	b1c3      	cbz	r3, 8005cf2 <_strtod_l+0x942>
 8005cc0:	f7ff fb52 	bl	8005368 <sulp>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ccc:	f7fa fa4e 	bl	800016c <__adddf3>
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	4689      	mov	r9, r1
 8005cd4:	e7de      	b.n	8005c94 <_strtod_l+0x8e4>
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005cdc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005ce0:	f04f 38ff 	mov.w	r8, #4294967295
 8005ce4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005ce8:	e7d4      	b.n	8005c94 <_strtod_l+0x8e4>
 8005cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cec:	ea13 0f08 	tst.w	r3, r8
 8005cf0:	e7e0      	b.n	8005cb4 <_strtod_l+0x904>
 8005cf2:	f7ff fb39 	bl	8005368 <sulp>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cfe:	f7fa fa33 	bl	8000168 <__aeabi_dsub>
 8005d02:	2200      	movs	r2, #0
 8005d04:	2300      	movs	r3, #0
 8005d06:	4680      	mov	r8, r0
 8005d08:	4689      	mov	r9, r1
 8005d0a:	f7fa fe4d 	bl	80009a8 <__aeabi_dcmpeq>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d0c0      	beq.n	8005c94 <_strtod_l+0x8e4>
 8005d12:	e602      	b.n	800591a <_strtod_l+0x56a>
 8005d14:	4658      	mov	r0, fp
 8005d16:	9904      	ldr	r1, [sp, #16]
 8005d18:	f002 f82e 	bl	8007d78 <__ratio>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d22:	4606      	mov	r6, r0
 8005d24:	460f      	mov	r7, r1
 8005d26:	f7fa fe53 	bl	80009d0 <__aeabi_dcmple>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d075      	beq.n	8005e1a <_strtod_l+0xa6a>
 8005d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d047      	beq.n	8005dc4 <_strtod_l+0xa14>
 8005d34:	2600      	movs	r6, #0
 8005d36:	4f65      	ldr	r7, [pc, #404]	; (8005ecc <_strtod_l+0xb1c>)
 8005d38:	4d64      	ldr	r5, [pc, #400]	; (8005ecc <_strtod_l+0xb1c>)
 8005d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d40:	0d1b      	lsrs	r3, r3, #20
 8005d42:	051b      	lsls	r3, r3, #20
 8005d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d48:	4b61      	ldr	r3, [pc, #388]	; (8005ed0 <_strtod_l+0xb20>)
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	f040 80c8 	bne.w	8005ee0 <_strtod_l+0xb30>
 8005d50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d54:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005d60:	4649      	mov	r1, r9
 8005d62:	f001 ff33 	bl	8007bcc <__ulp>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	f7fa fbb3 	bl	80004d8 <__aeabi_dmul>
 8005d72:	4642      	mov	r2, r8
 8005d74:	464b      	mov	r3, r9
 8005d76:	f7fa f9f9 	bl	800016c <__adddf3>
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4951      	ldr	r1, [pc, #324]	; (8005ec4 <_strtod_l+0xb14>)
 8005d7e:	4a55      	ldr	r2, [pc, #340]	; (8005ed4 <_strtod_l+0xb24>)
 8005d80:	4019      	ands	r1, r3
 8005d82:	4291      	cmp	r1, r2
 8005d84:	4680      	mov	r8, r0
 8005d86:	d95e      	bls.n	8005e46 <_strtod_l+0xa96>
 8005d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d8a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d103      	bne.n	8005d9a <_strtod_l+0x9ea>
 8005d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d94:	3301      	adds	r3, #1
 8005d96:	f43f ad4e 	beq.w	8005836 <_strtod_l+0x486>
 8005d9a:	f04f 38ff 	mov.w	r8, #4294967295
 8005d9e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005ec8 <_strtod_l+0xb18>
 8005da2:	4650      	mov	r0, sl
 8005da4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005da6:	f001 fbe1 	bl	800756c <_Bfree>
 8005daa:	4650      	mov	r0, sl
 8005dac:	9906      	ldr	r1, [sp, #24]
 8005dae:	f001 fbdd 	bl	800756c <_Bfree>
 8005db2:	4650      	mov	r0, sl
 8005db4:	9904      	ldr	r1, [sp, #16]
 8005db6:	f001 fbd9 	bl	800756c <_Bfree>
 8005dba:	4659      	mov	r1, fp
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	f001 fbd5 	bl	800756c <_Bfree>
 8005dc2:	e61c      	b.n	80059fe <_strtod_l+0x64e>
 8005dc4:	f1b8 0f00 	cmp.w	r8, #0
 8005dc8:	d119      	bne.n	8005dfe <_strtod_l+0xa4e>
 8005dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dd0:	b9e3      	cbnz	r3, 8005e0c <_strtod_l+0xa5c>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	4b3c      	ldr	r3, [pc, #240]	; (8005ecc <_strtod_l+0xb1c>)
 8005dda:	f7fa fdef 	bl	80009bc <__aeabi_dcmplt>
 8005dde:	b9c8      	cbnz	r0, 8005e14 <_strtod_l+0xa64>
 8005de0:	2200      	movs	r2, #0
 8005de2:	4630      	mov	r0, r6
 8005de4:	4639      	mov	r1, r7
 8005de6:	4b3c      	ldr	r3, [pc, #240]	; (8005ed8 <_strtod_l+0xb28>)
 8005de8:	f7fa fb76 	bl	80004d8 <__aeabi_dmul>
 8005dec:	4604      	mov	r4, r0
 8005dee:	460d      	mov	r5, r1
 8005df0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005df4:	9418      	str	r4, [sp, #96]	; 0x60
 8005df6:	9319      	str	r3, [sp, #100]	; 0x64
 8005df8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005dfc:	e79d      	b.n	8005d3a <_strtod_l+0x98a>
 8005dfe:	f1b8 0f01 	cmp.w	r8, #1
 8005e02:	d103      	bne.n	8005e0c <_strtod_l+0xa5c>
 8005e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f43f ad87 	beq.w	800591a <_strtod_l+0x56a>
 8005e0c:	2600      	movs	r6, #0
 8005e0e:	2400      	movs	r4, #0
 8005e10:	4f32      	ldr	r7, [pc, #200]	; (8005edc <_strtod_l+0xb2c>)
 8005e12:	e791      	b.n	8005d38 <_strtod_l+0x988>
 8005e14:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005e16:	4d30      	ldr	r5, [pc, #192]	; (8005ed8 <_strtod_l+0xb28>)
 8005e18:	e7ea      	b.n	8005df0 <_strtod_l+0xa40>
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <_strtod_l+0xb28>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4630      	mov	r0, r6
 8005e20:	4639      	mov	r1, r7
 8005e22:	f7fa fb59 	bl	80004d8 <__aeabi_dmul>
 8005e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e28:	4604      	mov	r4, r0
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	b933      	cbnz	r3, 8005e3c <_strtod_l+0xa8c>
 8005e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e32:	9010      	str	r0, [sp, #64]	; 0x40
 8005e34:	9311      	str	r3, [sp, #68]	; 0x44
 8005e36:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005e3a:	e77e      	b.n	8005d3a <_strtod_l+0x98a>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005e44:	e7f7      	b.n	8005e36 <_strtod_l+0xa86>
 8005e46:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005e4a:	9b05      	ldr	r3, [sp, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1a8      	bne.n	8005da2 <_strtod_l+0x9f2>
 8005e50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e56:	0d1b      	lsrs	r3, r3, #20
 8005e58:	051b      	lsls	r3, r3, #20
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d1a1      	bne.n	8005da2 <_strtod_l+0x9f2>
 8005e5e:	4620      	mov	r0, r4
 8005e60:	4629      	mov	r1, r5
 8005e62:	f7fa fe99 	bl	8000b98 <__aeabi_d2lz>
 8005e66:	f7fa fb09 	bl	800047c <__aeabi_l2d>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4620      	mov	r0, r4
 8005e70:	4629      	mov	r1, r5
 8005e72:	f7fa f979 	bl	8000168 <__aeabi_dsub>
 8005e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e7c:	ea43 0308 	orr.w	r3, r3, r8
 8005e80:	4313      	orrs	r3, r2
 8005e82:	4604      	mov	r4, r0
 8005e84:	460d      	mov	r5, r1
 8005e86:	d066      	beq.n	8005f56 <_strtod_l+0xba6>
 8005e88:	a309      	add	r3, pc, #36	; (adr r3, 8005eb0 <_strtod_l+0xb00>)
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f7fa fd95 	bl	80009bc <__aeabi_dcmplt>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f47f acda 	bne.w	800584c <_strtod_l+0x49c>
 8005e98:	a307      	add	r3, pc, #28	; (adr r3, 8005eb8 <_strtod_l+0xb08>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	f7fa fda9 	bl	80009f8 <__aeabi_dcmpgt>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f43f af7b 	beq.w	8005da2 <_strtod_l+0x9f2>
 8005eac:	e4ce      	b.n	800584c <_strtod_l+0x49c>
 8005eae:	bf00      	nop
 8005eb0:	94a03595 	.word	0x94a03595
 8005eb4:	3fdfffff 	.word	0x3fdfffff
 8005eb8:	35afe535 	.word	0x35afe535
 8005ebc:	3fe00000 	.word	0x3fe00000
 8005ec0:	000fffff 	.word	0x000fffff
 8005ec4:	7ff00000 	.word	0x7ff00000
 8005ec8:	7fefffff 	.word	0x7fefffff
 8005ecc:	3ff00000 	.word	0x3ff00000
 8005ed0:	7fe00000 	.word	0x7fe00000
 8005ed4:	7c9fffff 	.word	0x7c9fffff
 8005ed8:	3fe00000 	.word	0x3fe00000
 8005edc:	bff00000 	.word	0xbff00000
 8005ee0:	9b05      	ldr	r3, [sp, #20]
 8005ee2:	b313      	cbz	r3, 8005f2a <_strtod_l+0xb7a>
 8005ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ee6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005eea:	d81e      	bhi.n	8005f2a <_strtod_l+0xb7a>
 8005eec:	a326      	add	r3, pc, #152	; (adr r3, 8005f88 <_strtod_l+0xbd8>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f7fa fd6b 	bl	80009d0 <__aeabi_dcmple>
 8005efa:	b190      	cbz	r0, 8005f22 <_strtod_l+0xb72>
 8005efc:	4629      	mov	r1, r5
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7fa fdc2 	bl	8000a88 <__aeabi_d2uiz>
 8005f04:	2801      	cmp	r0, #1
 8005f06:	bf38      	it	cc
 8005f08:	2001      	movcc	r0, #1
 8005f0a:	f7fa fa6b 	bl	80003e4 <__aeabi_ui2d>
 8005f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f10:	4604      	mov	r4, r0
 8005f12:	460d      	mov	r5, r1
 8005f14:	b9d3      	cbnz	r3, 8005f4c <_strtod_l+0xb9c>
 8005f16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f1a:	9012      	str	r0, [sp, #72]	; 0x48
 8005f1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f1e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005f22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f24:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005f28:	1a9f      	subs	r7, r3, r2
 8005f2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f2e:	f001 fe4d 	bl	8007bcc <__ulp>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4630      	mov	r0, r6
 8005f38:	4639      	mov	r1, r7
 8005f3a:	f7fa facd 	bl	80004d8 <__aeabi_dmul>
 8005f3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f42:	f7fa f913 	bl	800016c <__adddf3>
 8005f46:	4680      	mov	r8, r0
 8005f48:	4689      	mov	r9, r1
 8005f4a:	e77e      	b.n	8005e4a <_strtod_l+0xa9a>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005f54:	e7e3      	b.n	8005f1e <_strtod_l+0xb6e>
 8005f56:	a30e      	add	r3, pc, #56	; (adr r3, 8005f90 <_strtod_l+0xbe0>)
 8005f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5c:	f7fa fd2e 	bl	80009bc <__aeabi_dcmplt>
 8005f60:	e7a1      	b.n	8005ea6 <_strtod_l+0xaf6>
 8005f62:	2300      	movs	r3, #0
 8005f64:	930c      	str	r3, [sp, #48]	; 0x30
 8005f66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	f7ff ba65 	b.w	800543a <_strtod_l+0x8a>
 8005f70:	2b65      	cmp	r3, #101	; 0x65
 8005f72:	f43f ab5c 	beq.w	800562e <_strtod_l+0x27e>
 8005f76:	2b45      	cmp	r3, #69	; 0x45
 8005f78:	f43f ab59 	beq.w	800562e <_strtod_l+0x27e>
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f7ff bb8d 	b.w	800569c <_strtod_l+0x2ec>
 8005f82:	bf00      	nop
 8005f84:	f3af 8000 	nop.w
 8005f88:	ffc00000 	.word	0xffc00000
 8005f8c:	41dfffff 	.word	0x41dfffff
 8005f90:	94a03595 	.word	0x94a03595
 8005f94:	3fcfffff 	.word	0x3fcfffff

08005f98 <_strtod_r>:
 8005f98:	4b01      	ldr	r3, [pc, #4]	; (8005fa0 <_strtod_r+0x8>)
 8005f9a:	f7ff ba09 	b.w	80053b0 <_strtod_l>
 8005f9e:	bf00      	nop
 8005fa0:	20000074 	.word	0x20000074

08005fa4 <_strtol_l.isra.0>:
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005faa:	4686      	mov	lr, r0
 8005fac:	d001      	beq.n	8005fb2 <_strtol_l.isra.0+0xe>
 8005fae:	2b24      	cmp	r3, #36	; 0x24
 8005fb0:	d906      	bls.n	8005fc0 <_strtol_l.isra.0+0x1c>
 8005fb2:	f7fe fb11 	bl	80045d8 <__errno>
 8005fb6:	2316      	movs	r3, #22
 8005fb8:	6003      	str	r3, [r0, #0]
 8005fba:	2000      	movs	r0, #0
 8005fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc0:	468c      	mov	ip, r1
 8005fc2:	4e3a      	ldr	r6, [pc, #232]	; (80060ac <_strtol_l.isra.0+0x108>)
 8005fc4:	4660      	mov	r0, ip
 8005fc6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005fca:	5da5      	ldrb	r5, [r4, r6]
 8005fcc:	f015 0508 	ands.w	r5, r5, #8
 8005fd0:	d1f8      	bne.n	8005fc4 <_strtol_l.isra.0+0x20>
 8005fd2:	2c2d      	cmp	r4, #45	; 0x2d
 8005fd4:	d133      	bne.n	800603e <_strtol_l.isra.0+0x9a>
 8005fd6:	f04f 0801 	mov.w	r8, #1
 8005fda:	f89c 4000 	ldrb.w	r4, [ip]
 8005fde:	f100 0c02 	add.w	ip, r0, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d05d      	beq.n	80060a2 <_strtol_l.isra.0+0xfe>
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d10c      	bne.n	8006004 <_strtol_l.isra.0+0x60>
 8005fea:	2c30      	cmp	r4, #48	; 0x30
 8005fec:	d10a      	bne.n	8006004 <_strtol_l.isra.0+0x60>
 8005fee:	f89c 0000 	ldrb.w	r0, [ip]
 8005ff2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005ff6:	2858      	cmp	r0, #88	; 0x58
 8005ff8:	d14e      	bne.n	8006098 <_strtol_l.isra.0+0xf4>
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006000:	f10c 0c02 	add.w	ip, ip, #2
 8006004:	2500      	movs	r5, #0
 8006006:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800600a:	3f01      	subs	r7, #1
 800600c:	fbb7 f9f3 	udiv	r9, r7, r3
 8006010:	4628      	mov	r0, r5
 8006012:	fb03 7a19 	mls	sl, r3, r9, r7
 8006016:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800601a:	2e09      	cmp	r6, #9
 800601c:	d818      	bhi.n	8006050 <_strtol_l.isra.0+0xac>
 800601e:	4634      	mov	r4, r6
 8006020:	42a3      	cmp	r3, r4
 8006022:	dd24      	ble.n	800606e <_strtol_l.isra.0+0xca>
 8006024:	2d00      	cmp	r5, #0
 8006026:	db1f      	blt.n	8006068 <_strtol_l.isra.0+0xc4>
 8006028:	4581      	cmp	r9, r0
 800602a:	d31d      	bcc.n	8006068 <_strtol_l.isra.0+0xc4>
 800602c:	d101      	bne.n	8006032 <_strtol_l.isra.0+0x8e>
 800602e:	45a2      	cmp	sl, r4
 8006030:	db1a      	blt.n	8006068 <_strtol_l.isra.0+0xc4>
 8006032:	2501      	movs	r5, #1
 8006034:	fb00 4003 	mla	r0, r0, r3, r4
 8006038:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800603c:	e7eb      	b.n	8006016 <_strtol_l.isra.0+0x72>
 800603e:	2c2b      	cmp	r4, #43	; 0x2b
 8006040:	bf08      	it	eq
 8006042:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006046:	46a8      	mov	r8, r5
 8006048:	bf08      	it	eq
 800604a:	f100 0c02 	addeq.w	ip, r0, #2
 800604e:	e7c8      	b.n	8005fe2 <_strtol_l.isra.0+0x3e>
 8006050:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006054:	2e19      	cmp	r6, #25
 8006056:	d801      	bhi.n	800605c <_strtol_l.isra.0+0xb8>
 8006058:	3c37      	subs	r4, #55	; 0x37
 800605a:	e7e1      	b.n	8006020 <_strtol_l.isra.0+0x7c>
 800605c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006060:	2e19      	cmp	r6, #25
 8006062:	d804      	bhi.n	800606e <_strtol_l.isra.0+0xca>
 8006064:	3c57      	subs	r4, #87	; 0x57
 8006066:	e7db      	b.n	8006020 <_strtol_l.isra.0+0x7c>
 8006068:	f04f 35ff 	mov.w	r5, #4294967295
 800606c:	e7e4      	b.n	8006038 <_strtol_l.isra.0+0x94>
 800606e:	2d00      	cmp	r5, #0
 8006070:	da08      	bge.n	8006084 <_strtol_l.isra.0+0xe0>
 8006072:	2322      	movs	r3, #34	; 0x22
 8006074:	4638      	mov	r0, r7
 8006076:	f8ce 3000 	str.w	r3, [lr]
 800607a:	2a00      	cmp	r2, #0
 800607c:	d09e      	beq.n	8005fbc <_strtol_l.isra.0+0x18>
 800607e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006082:	e007      	b.n	8006094 <_strtol_l.isra.0+0xf0>
 8006084:	f1b8 0f00 	cmp.w	r8, #0
 8006088:	d000      	beq.n	800608c <_strtol_l.isra.0+0xe8>
 800608a:	4240      	negs	r0, r0
 800608c:	2a00      	cmp	r2, #0
 800608e:	d095      	beq.n	8005fbc <_strtol_l.isra.0+0x18>
 8006090:	2d00      	cmp	r5, #0
 8006092:	d1f4      	bne.n	800607e <_strtol_l.isra.0+0xda>
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	e791      	b.n	8005fbc <_strtol_l.isra.0+0x18>
 8006098:	2430      	movs	r4, #48	; 0x30
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1b2      	bne.n	8006004 <_strtol_l.isra.0+0x60>
 800609e:	2308      	movs	r3, #8
 80060a0:	e7b0      	b.n	8006004 <_strtol_l.isra.0+0x60>
 80060a2:	2c30      	cmp	r4, #48	; 0x30
 80060a4:	d0a3      	beq.n	8005fee <_strtol_l.isra.0+0x4a>
 80060a6:	230a      	movs	r3, #10
 80060a8:	e7ac      	b.n	8006004 <_strtol_l.isra.0+0x60>
 80060aa:	bf00      	nop
 80060ac:	08008f21 	.word	0x08008f21

080060b0 <_strtol_r>:
 80060b0:	f7ff bf78 	b.w	8005fa4 <_strtol_l.isra.0>

080060b4 <quorem>:
 80060b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b8:	6903      	ldr	r3, [r0, #16]
 80060ba:	690c      	ldr	r4, [r1, #16]
 80060bc:	4607      	mov	r7, r0
 80060be:	42a3      	cmp	r3, r4
 80060c0:	f2c0 8083 	blt.w	80061ca <quorem+0x116>
 80060c4:	3c01      	subs	r4, #1
 80060c6:	f100 0514 	add.w	r5, r0, #20
 80060ca:	f101 0814 	add.w	r8, r1, #20
 80060ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060dc:	3301      	adds	r3, #1
 80060de:	429a      	cmp	r2, r3
 80060e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80060e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80060e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060ec:	d332      	bcc.n	8006154 <quorem+0xa0>
 80060ee:	f04f 0e00 	mov.w	lr, #0
 80060f2:	4640      	mov	r0, r8
 80060f4:	46ac      	mov	ip, r5
 80060f6:	46f2      	mov	sl, lr
 80060f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80060fc:	b293      	uxth	r3, r2
 80060fe:	fb06 e303 	mla	r3, r6, r3, lr
 8006102:	0c12      	lsrs	r2, r2, #16
 8006104:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006108:	fb06 e202 	mla	r2, r6, r2, lr
 800610c:	b29b      	uxth	r3, r3
 800610e:	ebaa 0303 	sub.w	r3, sl, r3
 8006112:	f8dc a000 	ldr.w	sl, [ip]
 8006116:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800611a:	fa1f fa8a 	uxth.w	sl, sl
 800611e:	4453      	add	r3, sl
 8006120:	fa1f fa82 	uxth.w	sl, r2
 8006124:	f8dc 2000 	ldr.w	r2, [ip]
 8006128:	4581      	cmp	r9, r0
 800612a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800612e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006138:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800613c:	f84c 3b04 	str.w	r3, [ip], #4
 8006140:	d2da      	bcs.n	80060f8 <quorem+0x44>
 8006142:	f855 300b 	ldr.w	r3, [r5, fp]
 8006146:	b92b      	cbnz	r3, 8006154 <quorem+0xa0>
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	3b04      	subs	r3, #4
 800614c:	429d      	cmp	r5, r3
 800614e:	461a      	mov	r2, r3
 8006150:	d32f      	bcc.n	80061b2 <quorem+0xfe>
 8006152:	613c      	str	r4, [r7, #16]
 8006154:	4638      	mov	r0, r7
 8006156:	f001 fc8d 	bl	8007a74 <__mcmp>
 800615a:	2800      	cmp	r0, #0
 800615c:	db25      	blt.n	80061aa <quorem+0xf6>
 800615e:	4628      	mov	r0, r5
 8006160:	f04f 0c00 	mov.w	ip, #0
 8006164:	3601      	adds	r6, #1
 8006166:	f858 1b04 	ldr.w	r1, [r8], #4
 800616a:	f8d0 e000 	ldr.w	lr, [r0]
 800616e:	b28b      	uxth	r3, r1
 8006170:	ebac 0303 	sub.w	r3, ip, r3
 8006174:	fa1f f28e 	uxth.w	r2, lr
 8006178:	4413      	add	r3, r2
 800617a:	0c0a      	lsrs	r2, r1, #16
 800617c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006180:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006184:	b29b      	uxth	r3, r3
 8006186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800618a:	45c1      	cmp	r9, r8
 800618c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006190:	f840 3b04 	str.w	r3, [r0], #4
 8006194:	d2e7      	bcs.n	8006166 <quorem+0xb2>
 8006196:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800619a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800619e:	b922      	cbnz	r2, 80061aa <quorem+0xf6>
 80061a0:	3b04      	subs	r3, #4
 80061a2:	429d      	cmp	r5, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	d30a      	bcc.n	80061be <quorem+0x10a>
 80061a8:	613c      	str	r4, [r7, #16]
 80061aa:	4630      	mov	r0, r6
 80061ac:	b003      	add	sp, #12
 80061ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	3b04      	subs	r3, #4
 80061b6:	2a00      	cmp	r2, #0
 80061b8:	d1cb      	bne.n	8006152 <quorem+0x9e>
 80061ba:	3c01      	subs	r4, #1
 80061bc:	e7c6      	b.n	800614c <quorem+0x98>
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	3b04      	subs	r3, #4
 80061c2:	2a00      	cmp	r2, #0
 80061c4:	d1f0      	bne.n	80061a8 <quorem+0xf4>
 80061c6:	3c01      	subs	r4, #1
 80061c8:	e7eb      	b.n	80061a2 <quorem+0xee>
 80061ca:	2000      	movs	r0, #0
 80061cc:	e7ee      	b.n	80061ac <quorem+0xf8>
	...

080061d0 <_dtoa_r>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	4616      	mov	r6, r2
 80061d6:	461f      	mov	r7, r3
 80061d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80061da:	b099      	sub	sp, #100	; 0x64
 80061dc:	4605      	mov	r5, r0
 80061de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80061e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80061e6:	b974      	cbnz	r4, 8006206 <_dtoa_r+0x36>
 80061e8:	2010      	movs	r0, #16
 80061ea:	f001 f949 	bl	8007480 <malloc>
 80061ee:	4602      	mov	r2, r0
 80061f0:	6268      	str	r0, [r5, #36]	; 0x24
 80061f2:	b920      	cbnz	r0, 80061fe <_dtoa_r+0x2e>
 80061f4:	21ea      	movs	r1, #234	; 0xea
 80061f6:	4bae      	ldr	r3, [pc, #696]	; (80064b0 <_dtoa_r+0x2e0>)
 80061f8:	48ae      	ldr	r0, [pc, #696]	; (80064b4 <_dtoa_r+0x2e4>)
 80061fa:	f002 f875 	bl	80082e8 <__assert_func>
 80061fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006202:	6004      	str	r4, [r0, #0]
 8006204:	60c4      	str	r4, [r0, #12]
 8006206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006208:	6819      	ldr	r1, [r3, #0]
 800620a:	b151      	cbz	r1, 8006222 <_dtoa_r+0x52>
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	2301      	movs	r3, #1
 8006210:	4093      	lsls	r3, r2
 8006212:	604a      	str	r2, [r1, #4]
 8006214:	608b      	str	r3, [r1, #8]
 8006216:	4628      	mov	r0, r5
 8006218:	f001 f9a8 	bl	800756c <_Bfree>
 800621c:	2200      	movs	r2, #0
 800621e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	1e3b      	subs	r3, r7, #0
 8006224:	bfaf      	iteee	ge
 8006226:	2300      	movge	r3, #0
 8006228:	2201      	movlt	r2, #1
 800622a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800622e:	9305      	strlt	r3, [sp, #20]
 8006230:	bfa8      	it	ge
 8006232:	f8c8 3000 	strge.w	r3, [r8]
 8006236:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800623a:	4b9f      	ldr	r3, [pc, #636]	; (80064b8 <_dtoa_r+0x2e8>)
 800623c:	bfb8      	it	lt
 800623e:	f8c8 2000 	strlt.w	r2, [r8]
 8006242:	ea33 0309 	bics.w	r3, r3, r9
 8006246:	d119      	bne.n	800627c <_dtoa_r+0xac>
 8006248:	f242 730f 	movw	r3, #9999	; 0x270f
 800624c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006254:	4333      	orrs	r3, r6
 8006256:	f000 8580 	beq.w	8006d5a <_dtoa_r+0xb8a>
 800625a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800625c:	b953      	cbnz	r3, 8006274 <_dtoa_r+0xa4>
 800625e:	4b97      	ldr	r3, [pc, #604]	; (80064bc <_dtoa_r+0x2ec>)
 8006260:	e022      	b.n	80062a8 <_dtoa_r+0xd8>
 8006262:	4b97      	ldr	r3, [pc, #604]	; (80064c0 <_dtoa_r+0x2f0>)
 8006264:	9308      	str	r3, [sp, #32]
 8006266:	3308      	adds	r3, #8
 8006268:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	9808      	ldr	r0, [sp, #32]
 800626e:	b019      	add	sp, #100	; 0x64
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006274:	4b91      	ldr	r3, [pc, #580]	; (80064bc <_dtoa_r+0x2ec>)
 8006276:	9308      	str	r3, [sp, #32]
 8006278:	3303      	adds	r3, #3
 800627a:	e7f5      	b.n	8006268 <_dtoa_r+0x98>
 800627c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006280:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006288:	2200      	movs	r2, #0
 800628a:	2300      	movs	r3, #0
 800628c:	f7fa fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8006290:	4680      	mov	r8, r0
 8006292:	b158      	cbz	r0, 80062ac <_dtoa_r+0xdc>
 8006294:	2301      	movs	r3, #1
 8006296:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8559 	beq.w	8006d54 <_dtoa_r+0xb84>
 80062a2:	4888      	ldr	r0, [pc, #544]	; (80064c4 <_dtoa_r+0x2f4>)
 80062a4:	6018      	str	r0, [r3, #0]
 80062a6:	1e43      	subs	r3, r0, #1
 80062a8:	9308      	str	r3, [sp, #32]
 80062aa:	e7df      	b.n	800626c <_dtoa_r+0x9c>
 80062ac:	ab16      	add	r3, sp, #88	; 0x58
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	ab17      	add	r3, sp, #92	; 0x5c
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	4628      	mov	r0, r5
 80062b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062ba:	f001 fd01 	bl	8007cc0 <__d2b>
 80062be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80062c2:	4682      	mov	sl, r0
 80062c4:	2c00      	cmp	r4, #0
 80062c6:	d07e      	beq.n	80063c6 <_dtoa_r+0x1f6>
 80062c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80062d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80062da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80062de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80062e2:	2200      	movs	r2, #0
 80062e4:	4b78      	ldr	r3, [pc, #480]	; (80064c8 <_dtoa_r+0x2f8>)
 80062e6:	f7f9 ff3f 	bl	8000168 <__aeabi_dsub>
 80062ea:	a36b      	add	r3, pc, #428	; (adr r3, 8006498 <_dtoa_r+0x2c8>)
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	f7fa f8f2 	bl	80004d8 <__aeabi_dmul>
 80062f4:	a36a      	add	r3, pc, #424	; (adr r3, 80064a0 <_dtoa_r+0x2d0>)
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	f7f9 ff37 	bl	800016c <__adddf3>
 80062fe:	4606      	mov	r6, r0
 8006300:	4620      	mov	r0, r4
 8006302:	460f      	mov	r7, r1
 8006304:	f7fa f87e 	bl	8000404 <__aeabi_i2d>
 8006308:	a367      	add	r3, pc, #412	; (adr r3, 80064a8 <_dtoa_r+0x2d8>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7fa f8e3 	bl	80004d8 <__aeabi_dmul>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4630      	mov	r0, r6
 8006318:	4639      	mov	r1, r7
 800631a:	f7f9 ff27 	bl	800016c <__adddf3>
 800631e:	4606      	mov	r6, r0
 8006320:	460f      	mov	r7, r1
 8006322:	f7fa fb89 	bl	8000a38 <__aeabi_d2iz>
 8006326:	2200      	movs	r2, #0
 8006328:	4681      	mov	r9, r0
 800632a:	2300      	movs	r3, #0
 800632c:	4630      	mov	r0, r6
 800632e:	4639      	mov	r1, r7
 8006330:	f7fa fb44 	bl	80009bc <__aeabi_dcmplt>
 8006334:	b148      	cbz	r0, 800634a <_dtoa_r+0x17a>
 8006336:	4648      	mov	r0, r9
 8006338:	f7fa f864 	bl	8000404 <__aeabi_i2d>
 800633c:	4632      	mov	r2, r6
 800633e:	463b      	mov	r3, r7
 8006340:	f7fa fb32 	bl	80009a8 <__aeabi_dcmpeq>
 8006344:	b908      	cbnz	r0, 800634a <_dtoa_r+0x17a>
 8006346:	f109 39ff 	add.w	r9, r9, #4294967295
 800634a:	f1b9 0f16 	cmp.w	r9, #22
 800634e:	d857      	bhi.n	8006400 <_dtoa_r+0x230>
 8006350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006354:	4b5d      	ldr	r3, [pc, #372]	; (80064cc <_dtoa_r+0x2fc>)
 8006356:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f7fa fb2d 	bl	80009bc <__aeabi_dcmplt>
 8006362:	2800      	cmp	r0, #0
 8006364:	d04e      	beq.n	8006404 <_dtoa_r+0x234>
 8006366:	2300      	movs	r3, #0
 8006368:	f109 39ff 	add.w	r9, r9, #4294967295
 800636c:	930f      	str	r3, [sp, #60]	; 0x3c
 800636e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006370:	1b1c      	subs	r4, r3, r4
 8006372:	1e63      	subs	r3, r4, #1
 8006374:	9309      	str	r3, [sp, #36]	; 0x24
 8006376:	bf49      	itett	mi
 8006378:	f1c4 0301 	rsbmi	r3, r4, #1
 800637c:	2300      	movpl	r3, #0
 800637e:	9306      	strmi	r3, [sp, #24]
 8006380:	2300      	movmi	r3, #0
 8006382:	bf54      	ite	pl
 8006384:	9306      	strpl	r3, [sp, #24]
 8006386:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006388:	f1b9 0f00 	cmp.w	r9, #0
 800638c:	db3c      	blt.n	8006408 <_dtoa_r+0x238>
 800638e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006390:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006394:	444b      	add	r3, r9
 8006396:	9309      	str	r3, [sp, #36]	; 0x24
 8006398:	2300      	movs	r3, #0
 800639a:	930a      	str	r3, [sp, #40]	; 0x28
 800639c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800639e:	2b09      	cmp	r3, #9
 80063a0:	d86c      	bhi.n	800647c <_dtoa_r+0x2ac>
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	bfc4      	itt	gt
 80063a6:	3b04      	subgt	r3, #4
 80063a8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80063aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063ac:	bfc8      	it	gt
 80063ae:	2400      	movgt	r4, #0
 80063b0:	f1a3 0302 	sub.w	r3, r3, #2
 80063b4:	bfd8      	it	le
 80063b6:	2401      	movle	r4, #1
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	f200 808b 	bhi.w	80064d4 <_dtoa_r+0x304>
 80063be:	e8df f003 	tbb	[pc, r3]
 80063c2:	4f2d      	.short	0x4f2d
 80063c4:	5b4d      	.short	0x5b4d
 80063c6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80063ca:	441c      	add	r4, r3
 80063cc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	bfc3      	ittte	gt
 80063d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80063d8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80063dc:	fa09 f303 	lslgt.w	r3, r9, r3
 80063e0:	f1c3 0320 	rsble	r3, r3, #32
 80063e4:	bfc6      	itte	gt
 80063e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80063ea:	4318      	orrgt	r0, r3
 80063ec:	fa06 f003 	lslle.w	r0, r6, r3
 80063f0:	f7f9 fff8 	bl	80003e4 <__aeabi_ui2d>
 80063f4:	2301      	movs	r3, #1
 80063f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80063fa:	3c01      	subs	r4, #1
 80063fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80063fe:	e770      	b.n	80062e2 <_dtoa_r+0x112>
 8006400:	2301      	movs	r3, #1
 8006402:	e7b3      	b.n	800636c <_dtoa_r+0x19c>
 8006404:	900f      	str	r0, [sp, #60]	; 0x3c
 8006406:	e7b2      	b.n	800636e <_dtoa_r+0x19e>
 8006408:	9b06      	ldr	r3, [sp, #24]
 800640a:	eba3 0309 	sub.w	r3, r3, r9
 800640e:	9306      	str	r3, [sp, #24]
 8006410:	f1c9 0300 	rsb	r3, r9, #0
 8006414:	930a      	str	r3, [sp, #40]	; 0x28
 8006416:	2300      	movs	r3, #0
 8006418:	930e      	str	r3, [sp, #56]	; 0x38
 800641a:	e7bf      	b.n	800639c <_dtoa_r+0x1cc>
 800641c:	2300      	movs	r3, #0
 800641e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006420:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006422:	2b00      	cmp	r3, #0
 8006424:	dc59      	bgt.n	80064da <_dtoa_r+0x30a>
 8006426:	f04f 0b01 	mov.w	fp, #1
 800642a:	465b      	mov	r3, fp
 800642c:	f8cd b008 	str.w	fp, [sp, #8]
 8006430:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006434:	2200      	movs	r2, #0
 8006436:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006438:	6042      	str	r2, [r0, #4]
 800643a:	2204      	movs	r2, #4
 800643c:	f102 0614 	add.w	r6, r2, #20
 8006440:	429e      	cmp	r6, r3
 8006442:	6841      	ldr	r1, [r0, #4]
 8006444:	d94f      	bls.n	80064e6 <_dtoa_r+0x316>
 8006446:	4628      	mov	r0, r5
 8006448:	f001 f850 	bl	80074ec <_Balloc>
 800644c:	9008      	str	r0, [sp, #32]
 800644e:	2800      	cmp	r0, #0
 8006450:	d14d      	bne.n	80064ee <_dtoa_r+0x31e>
 8006452:	4602      	mov	r2, r0
 8006454:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006458:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <_dtoa_r+0x300>)
 800645a:	e6cd      	b.n	80061f8 <_dtoa_r+0x28>
 800645c:	2301      	movs	r3, #1
 800645e:	e7de      	b.n	800641e <_dtoa_r+0x24e>
 8006460:	2300      	movs	r3, #0
 8006462:	930b      	str	r3, [sp, #44]	; 0x2c
 8006464:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006466:	eb09 0b03 	add.w	fp, r9, r3
 800646a:	f10b 0301 	add.w	r3, fp, #1
 800646e:	2b01      	cmp	r3, #1
 8006470:	9302      	str	r3, [sp, #8]
 8006472:	bfb8      	it	lt
 8006474:	2301      	movlt	r3, #1
 8006476:	e7dd      	b.n	8006434 <_dtoa_r+0x264>
 8006478:	2301      	movs	r3, #1
 800647a:	e7f2      	b.n	8006462 <_dtoa_r+0x292>
 800647c:	2401      	movs	r4, #1
 800647e:	2300      	movs	r3, #0
 8006480:	940b      	str	r4, [sp, #44]	; 0x2c
 8006482:	9322      	str	r3, [sp, #136]	; 0x88
 8006484:	f04f 3bff 	mov.w	fp, #4294967295
 8006488:	2200      	movs	r2, #0
 800648a:	2312      	movs	r3, #18
 800648c:	f8cd b008 	str.w	fp, [sp, #8]
 8006490:	9223      	str	r2, [sp, #140]	; 0x8c
 8006492:	e7cf      	b.n	8006434 <_dtoa_r+0x264>
 8006494:	f3af 8000 	nop.w
 8006498:	636f4361 	.word	0x636f4361
 800649c:	3fd287a7 	.word	0x3fd287a7
 80064a0:	8b60c8b3 	.word	0x8b60c8b3
 80064a4:	3fc68a28 	.word	0x3fc68a28
 80064a8:	509f79fb 	.word	0x509f79fb
 80064ac:	3fd34413 	.word	0x3fd34413
 80064b0:	0800902e 	.word	0x0800902e
 80064b4:	08009045 	.word	0x08009045
 80064b8:	7ff00000 	.word	0x7ff00000
 80064bc:	0800902a 	.word	0x0800902a
 80064c0:	08009021 	.word	0x08009021
 80064c4:	08008ea5 	.word	0x08008ea5
 80064c8:	3ff80000 	.word	0x3ff80000
 80064cc:	080091c0 	.word	0x080091c0
 80064d0:	080090a4 	.word	0x080090a4
 80064d4:	2301      	movs	r3, #1
 80064d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80064d8:	e7d4      	b.n	8006484 <_dtoa_r+0x2b4>
 80064da:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80064de:	465b      	mov	r3, fp
 80064e0:	f8cd b008 	str.w	fp, [sp, #8]
 80064e4:	e7a6      	b.n	8006434 <_dtoa_r+0x264>
 80064e6:	3101      	adds	r1, #1
 80064e8:	6041      	str	r1, [r0, #4]
 80064ea:	0052      	lsls	r2, r2, #1
 80064ec:	e7a6      	b.n	800643c <_dtoa_r+0x26c>
 80064ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064f0:	9a08      	ldr	r2, [sp, #32]
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	9b02      	ldr	r3, [sp, #8]
 80064f6:	2b0e      	cmp	r3, #14
 80064f8:	f200 80a8 	bhi.w	800664c <_dtoa_r+0x47c>
 80064fc:	2c00      	cmp	r4, #0
 80064fe:	f000 80a5 	beq.w	800664c <_dtoa_r+0x47c>
 8006502:	f1b9 0f00 	cmp.w	r9, #0
 8006506:	dd34      	ble.n	8006572 <_dtoa_r+0x3a2>
 8006508:	4a9a      	ldr	r2, [pc, #616]	; (8006774 <_dtoa_r+0x5a4>)
 800650a:	f009 030f 	and.w	r3, r9, #15
 800650e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006512:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006516:	e9d3 3400 	ldrd	r3, r4, [r3]
 800651a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800651e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006522:	d016      	beq.n	8006552 <_dtoa_r+0x382>
 8006524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006528:	4b93      	ldr	r3, [pc, #588]	; (8006778 <_dtoa_r+0x5a8>)
 800652a:	2703      	movs	r7, #3
 800652c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006530:	f7fa f8fc 	bl	800072c <__aeabi_ddiv>
 8006534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006538:	f004 040f 	and.w	r4, r4, #15
 800653c:	4e8e      	ldr	r6, [pc, #568]	; (8006778 <_dtoa_r+0x5a8>)
 800653e:	b954      	cbnz	r4, 8006556 <_dtoa_r+0x386>
 8006540:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006548:	f7fa f8f0 	bl	800072c <__aeabi_ddiv>
 800654c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006550:	e029      	b.n	80065a6 <_dtoa_r+0x3d6>
 8006552:	2702      	movs	r7, #2
 8006554:	e7f2      	b.n	800653c <_dtoa_r+0x36c>
 8006556:	07e1      	lsls	r1, r4, #31
 8006558:	d508      	bpl.n	800656c <_dtoa_r+0x39c>
 800655a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800655e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006562:	f7f9 ffb9 	bl	80004d8 <__aeabi_dmul>
 8006566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800656a:	3701      	adds	r7, #1
 800656c:	1064      	asrs	r4, r4, #1
 800656e:	3608      	adds	r6, #8
 8006570:	e7e5      	b.n	800653e <_dtoa_r+0x36e>
 8006572:	f000 80a5 	beq.w	80066c0 <_dtoa_r+0x4f0>
 8006576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800657a:	f1c9 0400 	rsb	r4, r9, #0
 800657e:	4b7d      	ldr	r3, [pc, #500]	; (8006774 <_dtoa_r+0x5a4>)
 8006580:	f004 020f 	and.w	r2, r4, #15
 8006584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f7f9 ffa4 	bl	80004d8 <__aeabi_dmul>
 8006590:	2702      	movs	r7, #2
 8006592:	2300      	movs	r3, #0
 8006594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006598:	4e77      	ldr	r6, [pc, #476]	; (8006778 <_dtoa_r+0x5a8>)
 800659a:	1124      	asrs	r4, r4, #4
 800659c:	2c00      	cmp	r4, #0
 800659e:	f040 8084 	bne.w	80066aa <_dtoa_r+0x4da>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1d2      	bne.n	800654c <_dtoa_r+0x37c>
 80065a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 808b 	beq.w	80066c4 <_dtoa_r+0x4f4>
 80065ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80065b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80065b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ba:	2200      	movs	r2, #0
 80065bc:	4b6f      	ldr	r3, [pc, #444]	; (800677c <_dtoa_r+0x5ac>)
 80065be:	f7fa f9fd 	bl	80009bc <__aeabi_dcmplt>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d07e      	beq.n	80066c4 <_dtoa_r+0x4f4>
 80065c6:	9b02      	ldr	r3, [sp, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d07b      	beq.n	80066c4 <_dtoa_r+0x4f4>
 80065cc:	f1bb 0f00 	cmp.w	fp, #0
 80065d0:	dd38      	ble.n	8006644 <_dtoa_r+0x474>
 80065d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065d6:	2200      	movs	r2, #0
 80065d8:	4b69      	ldr	r3, [pc, #420]	; (8006780 <_dtoa_r+0x5b0>)
 80065da:	f7f9 ff7d 	bl	80004d8 <__aeabi_dmul>
 80065de:	465c      	mov	r4, fp
 80065e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065e4:	f109 38ff 	add.w	r8, r9, #4294967295
 80065e8:	3701      	adds	r7, #1
 80065ea:	4638      	mov	r0, r7
 80065ec:	f7f9 ff0a 	bl	8000404 <__aeabi_i2d>
 80065f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f4:	f7f9 ff70 	bl	80004d8 <__aeabi_dmul>
 80065f8:	2200      	movs	r2, #0
 80065fa:	4b62      	ldr	r3, [pc, #392]	; (8006784 <_dtoa_r+0x5b4>)
 80065fc:	f7f9 fdb6 	bl	800016c <__adddf3>
 8006600:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006604:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006608:	9611      	str	r6, [sp, #68]	; 0x44
 800660a:	2c00      	cmp	r4, #0
 800660c:	d15d      	bne.n	80066ca <_dtoa_r+0x4fa>
 800660e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006612:	2200      	movs	r2, #0
 8006614:	4b5c      	ldr	r3, [pc, #368]	; (8006788 <_dtoa_r+0x5b8>)
 8006616:	f7f9 fda7 	bl	8000168 <__aeabi_dsub>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006622:	4633      	mov	r3, r6
 8006624:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006626:	f7fa f9e7 	bl	80009f8 <__aeabi_dcmpgt>
 800662a:	2800      	cmp	r0, #0
 800662c:	f040 829e 	bne.w	8006b6c <_dtoa_r+0x99c>
 8006630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006636:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800663a:	f7fa f9bf 	bl	80009bc <__aeabi_dcmplt>
 800663e:	2800      	cmp	r0, #0
 8006640:	f040 8292 	bne.w	8006b68 <_dtoa_r+0x998>
 8006644:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006648:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800664c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800664e:	2b00      	cmp	r3, #0
 8006650:	f2c0 8153 	blt.w	80068fa <_dtoa_r+0x72a>
 8006654:	f1b9 0f0e 	cmp.w	r9, #14
 8006658:	f300 814f 	bgt.w	80068fa <_dtoa_r+0x72a>
 800665c:	4b45      	ldr	r3, [pc, #276]	; (8006774 <_dtoa_r+0x5a4>)
 800665e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006662:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006666:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800666a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800666c:	2b00      	cmp	r3, #0
 800666e:	f280 80db 	bge.w	8006828 <_dtoa_r+0x658>
 8006672:	9b02      	ldr	r3, [sp, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f300 80d7 	bgt.w	8006828 <_dtoa_r+0x658>
 800667a:	f040 8274 	bne.w	8006b66 <_dtoa_r+0x996>
 800667e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006682:	2200      	movs	r2, #0
 8006684:	4b40      	ldr	r3, [pc, #256]	; (8006788 <_dtoa_r+0x5b8>)
 8006686:	f7f9 ff27 	bl	80004d8 <__aeabi_dmul>
 800668a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800668e:	f7fa f9a9 	bl	80009e4 <__aeabi_dcmpge>
 8006692:	9c02      	ldr	r4, [sp, #8]
 8006694:	4626      	mov	r6, r4
 8006696:	2800      	cmp	r0, #0
 8006698:	f040 824a 	bne.w	8006b30 <_dtoa_r+0x960>
 800669c:	2331      	movs	r3, #49	; 0x31
 800669e:	9f08      	ldr	r7, [sp, #32]
 80066a0:	f109 0901 	add.w	r9, r9, #1
 80066a4:	f807 3b01 	strb.w	r3, [r7], #1
 80066a8:	e246      	b.n	8006b38 <_dtoa_r+0x968>
 80066aa:	07e2      	lsls	r2, r4, #31
 80066ac:	d505      	bpl.n	80066ba <_dtoa_r+0x4ea>
 80066ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066b2:	f7f9 ff11 	bl	80004d8 <__aeabi_dmul>
 80066b6:	2301      	movs	r3, #1
 80066b8:	3701      	adds	r7, #1
 80066ba:	1064      	asrs	r4, r4, #1
 80066bc:	3608      	adds	r6, #8
 80066be:	e76d      	b.n	800659c <_dtoa_r+0x3cc>
 80066c0:	2702      	movs	r7, #2
 80066c2:	e770      	b.n	80065a6 <_dtoa_r+0x3d6>
 80066c4:	46c8      	mov	r8, r9
 80066c6:	9c02      	ldr	r4, [sp, #8]
 80066c8:	e78f      	b.n	80065ea <_dtoa_r+0x41a>
 80066ca:	9908      	ldr	r1, [sp, #32]
 80066cc:	4b29      	ldr	r3, [pc, #164]	; (8006774 <_dtoa_r+0x5a4>)
 80066ce:	4421      	add	r1, r4
 80066d0:	9112      	str	r1, [sp, #72]	; 0x48
 80066d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80066dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066e0:	2900      	cmp	r1, #0
 80066e2:	d055      	beq.n	8006790 <_dtoa_r+0x5c0>
 80066e4:	2000      	movs	r0, #0
 80066e6:	4929      	ldr	r1, [pc, #164]	; (800678c <_dtoa_r+0x5bc>)
 80066e8:	f7fa f820 	bl	800072c <__aeabi_ddiv>
 80066ec:	463b      	mov	r3, r7
 80066ee:	4632      	mov	r2, r6
 80066f0:	f7f9 fd3a 	bl	8000168 <__aeabi_dsub>
 80066f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066f8:	9f08      	ldr	r7, [sp, #32]
 80066fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066fe:	f7fa f99b 	bl	8000a38 <__aeabi_d2iz>
 8006702:	4604      	mov	r4, r0
 8006704:	f7f9 fe7e 	bl	8000404 <__aeabi_i2d>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006710:	f7f9 fd2a 	bl	8000168 <__aeabi_dsub>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	3430      	adds	r4, #48	; 0x30
 800671a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800671e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006722:	f807 4b01 	strb.w	r4, [r7], #1
 8006726:	f7fa f949 	bl	80009bc <__aeabi_dcmplt>
 800672a:	2800      	cmp	r0, #0
 800672c:	d174      	bne.n	8006818 <_dtoa_r+0x648>
 800672e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006732:	2000      	movs	r0, #0
 8006734:	4911      	ldr	r1, [pc, #68]	; (800677c <_dtoa_r+0x5ac>)
 8006736:	f7f9 fd17 	bl	8000168 <__aeabi_dsub>
 800673a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800673e:	f7fa f93d 	bl	80009bc <__aeabi_dcmplt>
 8006742:	2800      	cmp	r0, #0
 8006744:	f040 80b6 	bne.w	80068b4 <_dtoa_r+0x6e4>
 8006748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800674a:	429f      	cmp	r7, r3
 800674c:	f43f af7a 	beq.w	8006644 <_dtoa_r+0x474>
 8006750:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006754:	2200      	movs	r2, #0
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <_dtoa_r+0x5b0>)
 8006758:	f7f9 febe 	bl	80004d8 <__aeabi_dmul>
 800675c:	2200      	movs	r2, #0
 800675e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <_dtoa_r+0x5b0>)
 8006768:	f7f9 feb6 	bl	80004d8 <__aeabi_dmul>
 800676c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006770:	e7c3      	b.n	80066fa <_dtoa_r+0x52a>
 8006772:	bf00      	nop
 8006774:	080091c0 	.word	0x080091c0
 8006778:	08009198 	.word	0x08009198
 800677c:	3ff00000 	.word	0x3ff00000
 8006780:	40240000 	.word	0x40240000
 8006784:	401c0000 	.word	0x401c0000
 8006788:	40140000 	.word	0x40140000
 800678c:	3fe00000 	.word	0x3fe00000
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7f9 fea0 	bl	80004d8 <__aeabi_dmul>
 8006798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800679a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800679e:	9c08      	ldr	r4, [sp, #32]
 80067a0:	9314      	str	r3, [sp, #80]	; 0x50
 80067a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a6:	f7fa f947 	bl	8000a38 <__aeabi_d2iz>
 80067aa:	9015      	str	r0, [sp, #84]	; 0x54
 80067ac:	f7f9 fe2a 	bl	8000404 <__aeabi_i2d>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b8:	f7f9 fcd6 	bl	8000168 <__aeabi_dsub>
 80067bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067be:	4606      	mov	r6, r0
 80067c0:	3330      	adds	r3, #48	; 0x30
 80067c2:	f804 3b01 	strb.w	r3, [r4], #1
 80067c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067c8:	460f      	mov	r7, r1
 80067ca:	429c      	cmp	r4, r3
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	d124      	bne.n	800681c <_dtoa_r+0x64c>
 80067d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067d6:	4bb3      	ldr	r3, [pc, #716]	; (8006aa4 <_dtoa_r+0x8d4>)
 80067d8:	f7f9 fcc8 	bl	800016c <__adddf3>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7fa f908 	bl	80009f8 <__aeabi_dcmpgt>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d162      	bne.n	80068b2 <_dtoa_r+0x6e2>
 80067ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067f0:	2000      	movs	r0, #0
 80067f2:	49ac      	ldr	r1, [pc, #688]	; (8006aa4 <_dtoa_r+0x8d4>)
 80067f4:	f7f9 fcb8 	bl	8000168 <__aeabi_dsub>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4630      	mov	r0, r6
 80067fe:	4639      	mov	r1, r7
 8006800:	f7fa f8dc 	bl	80009bc <__aeabi_dcmplt>
 8006804:	2800      	cmp	r0, #0
 8006806:	f43f af1d 	beq.w	8006644 <_dtoa_r+0x474>
 800680a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800680c:	1e7b      	subs	r3, r7, #1
 800680e:	9314      	str	r3, [sp, #80]	; 0x50
 8006810:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006814:	2b30      	cmp	r3, #48	; 0x30
 8006816:	d0f8      	beq.n	800680a <_dtoa_r+0x63a>
 8006818:	46c1      	mov	r9, r8
 800681a:	e03a      	b.n	8006892 <_dtoa_r+0x6c2>
 800681c:	4ba2      	ldr	r3, [pc, #648]	; (8006aa8 <_dtoa_r+0x8d8>)
 800681e:	f7f9 fe5b 	bl	80004d8 <__aeabi_dmul>
 8006822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006826:	e7bc      	b.n	80067a2 <_dtoa_r+0x5d2>
 8006828:	9f08      	ldr	r7, [sp, #32]
 800682a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800682e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006832:	f7f9 ff7b 	bl	800072c <__aeabi_ddiv>
 8006836:	f7fa f8ff 	bl	8000a38 <__aeabi_d2iz>
 800683a:	4604      	mov	r4, r0
 800683c:	f7f9 fde2 	bl	8000404 <__aeabi_i2d>
 8006840:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006844:	f7f9 fe48 	bl	80004d8 <__aeabi_dmul>
 8006848:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800684c:	460b      	mov	r3, r1
 800684e:	4602      	mov	r2, r0
 8006850:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006854:	f7f9 fc88 	bl	8000168 <__aeabi_dsub>
 8006858:	f807 6b01 	strb.w	r6, [r7], #1
 800685c:	9e08      	ldr	r6, [sp, #32]
 800685e:	9b02      	ldr	r3, [sp, #8]
 8006860:	1bbe      	subs	r6, r7, r6
 8006862:	42b3      	cmp	r3, r6
 8006864:	d13a      	bne.n	80068dc <_dtoa_r+0x70c>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	f7f9 fc7f 	bl	800016c <__adddf3>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006876:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800687a:	f7fa f8bd 	bl	80009f8 <__aeabi_dcmpgt>
 800687e:	bb58      	cbnz	r0, 80068d8 <_dtoa_r+0x708>
 8006880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006888:	f7fa f88e 	bl	80009a8 <__aeabi_dcmpeq>
 800688c:	b108      	cbz	r0, 8006892 <_dtoa_r+0x6c2>
 800688e:	07e1      	lsls	r1, r4, #31
 8006890:	d422      	bmi.n	80068d8 <_dtoa_r+0x708>
 8006892:	4628      	mov	r0, r5
 8006894:	4651      	mov	r1, sl
 8006896:	f000 fe69 	bl	800756c <_Bfree>
 800689a:	2300      	movs	r3, #0
 800689c:	703b      	strb	r3, [r7, #0]
 800689e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80068a0:	f109 0001 	add.w	r0, r9, #1
 80068a4:	6018      	str	r0, [r3, #0]
 80068a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f43f acdf 	beq.w	800626c <_dtoa_r+0x9c>
 80068ae:	601f      	str	r7, [r3, #0]
 80068b0:	e4dc      	b.n	800626c <_dtoa_r+0x9c>
 80068b2:	4627      	mov	r7, r4
 80068b4:	463b      	mov	r3, r7
 80068b6:	461f      	mov	r7, r3
 80068b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068bc:	2a39      	cmp	r2, #57	; 0x39
 80068be:	d107      	bne.n	80068d0 <_dtoa_r+0x700>
 80068c0:	9a08      	ldr	r2, [sp, #32]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d1f7      	bne.n	80068b6 <_dtoa_r+0x6e6>
 80068c6:	2230      	movs	r2, #48	; 0x30
 80068c8:	9908      	ldr	r1, [sp, #32]
 80068ca:	f108 0801 	add.w	r8, r8, #1
 80068ce:	700a      	strb	r2, [r1, #0]
 80068d0:	781a      	ldrb	r2, [r3, #0]
 80068d2:	3201      	adds	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	e79f      	b.n	8006818 <_dtoa_r+0x648>
 80068d8:	46c8      	mov	r8, r9
 80068da:	e7eb      	b.n	80068b4 <_dtoa_r+0x6e4>
 80068dc:	2200      	movs	r2, #0
 80068de:	4b72      	ldr	r3, [pc, #456]	; (8006aa8 <_dtoa_r+0x8d8>)
 80068e0:	f7f9 fdfa 	bl	80004d8 <__aeabi_dmul>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068ec:	2200      	movs	r2, #0
 80068ee:	2300      	movs	r3, #0
 80068f0:	f7fa f85a 	bl	80009a8 <__aeabi_dcmpeq>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d098      	beq.n	800682a <_dtoa_r+0x65a>
 80068f8:	e7cb      	b.n	8006892 <_dtoa_r+0x6c2>
 80068fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068fc:	2a00      	cmp	r2, #0
 80068fe:	f000 80cd 	beq.w	8006a9c <_dtoa_r+0x8cc>
 8006902:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006904:	2a01      	cmp	r2, #1
 8006906:	f300 80af 	bgt.w	8006a68 <_dtoa_r+0x898>
 800690a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800690c:	2a00      	cmp	r2, #0
 800690e:	f000 80a7 	beq.w	8006a60 <_dtoa_r+0x890>
 8006912:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006916:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006918:	9f06      	ldr	r7, [sp, #24]
 800691a:	9a06      	ldr	r2, [sp, #24]
 800691c:	2101      	movs	r1, #1
 800691e:	441a      	add	r2, r3
 8006920:	9206      	str	r2, [sp, #24]
 8006922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006924:	4628      	mov	r0, r5
 8006926:	441a      	add	r2, r3
 8006928:	9209      	str	r2, [sp, #36]	; 0x24
 800692a:	f000 ff23 	bl	8007774 <__i2b>
 800692e:	4606      	mov	r6, r0
 8006930:	2f00      	cmp	r7, #0
 8006932:	dd0c      	ble.n	800694e <_dtoa_r+0x77e>
 8006934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	dd09      	ble.n	800694e <_dtoa_r+0x77e>
 800693a:	42bb      	cmp	r3, r7
 800693c:	bfa8      	it	ge
 800693e:	463b      	movge	r3, r7
 8006940:	9a06      	ldr	r2, [sp, #24]
 8006942:	1aff      	subs	r7, r7, r3
 8006944:	1ad2      	subs	r2, r2, r3
 8006946:	9206      	str	r2, [sp, #24]
 8006948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	9309      	str	r3, [sp, #36]	; 0x24
 800694e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006950:	b1f3      	cbz	r3, 8006990 <_dtoa_r+0x7c0>
 8006952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 80a9 	beq.w	8006aac <_dtoa_r+0x8dc>
 800695a:	2c00      	cmp	r4, #0
 800695c:	dd10      	ble.n	8006980 <_dtoa_r+0x7b0>
 800695e:	4631      	mov	r1, r6
 8006960:	4622      	mov	r2, r4
 8006962:	4628      	mov	r0, r5
 8006964:	f000 ffc0 	bl	80078e8 <__pow5mult>
 8006968:	4652      	mov	r2, sl
 800696a:	4601      	mov	r1, r0
 800696c:	4606      	mov	r6, r0
 800696e:	4628      	mov	r0, r5
 8006970:	f000 ff16 	bl	80077a0 <__multiply>
 8006974:	4680      	mov	r8, r0
 8006976:	4651      	mov	r1, sl
 8006978:	4628      	mov	r0, r5
 800697a:	f000 fdf7 	bl	800756c <_Bfree>
 800697e:	46c2      	mov	sl, r8
 8006980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006982:	1b1a      	subs	r2, r3, r4
 8006984:	d004      	beq.n	8006990 <_dtoa_r+0x7c0>
 8006986:	4651      	mov	r1, sl
 8006988:	4628      	mov	r0, r5
 800698a:	f000 ffad 	bl	80078e8 <__pow5mult>
 800698e:	4682      	mov	sl, r0
 8006990:	2101      	movs	r1, #1
 8006992:	4628      	mov	r0, r5
 8006994:	f000 feee 	bl	8007774 <__i2b>
 8006998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800699a:	4604      	mov	r4, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	f340 8087 	ble.w	8006ab0 <_dtoa_r+0x8e0>
 80069a2:	461a      	mov	r2, r3
 80069a4:	4601      	mov	r1, r0
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 ff9e 	bl	80078e8 <__pow5mult>
 80069ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069ae:	4604      	mov	r4, r0
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	f340 8080 	ble.w	8006ab6 <_dtoa_r+0x8e6>
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069c0:	6918      	ldr	r0, [r3, #16]
 80069c2:	f000 fe89 	bl	80076d8 <__hi0bits>
 80069c6:	f1c0 0020 	rsb	r0, r0, #32
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	4418      	add	r0, r3
 80069ce:	f010 001f 	ands.w	r0, r0, #31
 80069d2:	f000 8092 	beq.w	8006afa <_dtoa_r+0x92a>
 80069d6:	f1c0 0320 	rsb	r3, r0, #32
 80069da:	2b04      	cmp	r3, #4
 80069dc:	f340 808a 	ble.w	8006af4 <_dtoa_r+0x924>
 80069e0:	f1c0 001c 	rsb	r0, r0, #28
 80069e4:	9b06      	ldr	r3, [sp, #24]
 80069e6:	4407      	add	r7, r0
 80069e8:	4403      	add	r3, r0
 80069ea:	9306      	str	r3, [sp, #24]
 80069ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ee:	4403      	add	r3, r0
 80069f0:	9309      	str	r3, [sp, #36]	; 0x24
 80069f2:	9b06      	ldr	r3, [sp, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd05      	ble.n	8006a04 <_dtoa_r+0x834>
 80069f8:	4651      	mov	r1, sl
 80069fa:	461a      	mov	r2, r3
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 ffcd 	bl	800799c <__lshift>
 8006a02:	4682      	mov	sl, r0
 8006a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dd05      	ble.n	8006a16 <_dtoa_r+0x846>
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 ffc4 	bl	800799c <__lshift>
 8006a14:	4604      	mov	r4, r0
 8006a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d070      	beq.n	8006afe <_dtoa_r+0x92e>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4650      	mov	r0, sl
 8006a20:	f001 f828 	bl	8007a74 <__mcmp>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	da6a      	bge.n	8006afe <_dtoa_r+0x92e>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4651      	mov	r1, sl
 8006a2c:	220a      	movs	r2, #10
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f000 fdbe 	bl	80075b0 <__multadd>
 8006a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a36:	4682      	mov	sl, r0
 8006a38:	f109 39ff 	add.w	r9, r9, #4294967295
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8193 	beq.w	8006d68 <_dtoa_r+0xb98>
 8006a42:	4631      	mov	r1, r6
 8006a44:	2300      	movs	r3, #0
 8006a46:	220a      	movs	r2, #10
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f000 fdb1 	bl	80075b0 <__multadd>
 8006a4e:	f1bb 0f00 	cmp.w	fp, #0
 8006a52:	4606      	mov	r6, r0
 8006a54:	f300 8093 	bgt.w	8006b7e <_dtoa_r+0x9ae>
 8006a58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	dc57      	bgt.n	8006b0e <_dtoa_r+0x93e>
 8006a5e:	e08e      	b.n	8006b7e <_dtoa_r+0x9ae>
 8006a60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a66:	e756      	b.n	8006916 <_dtoa_r+0x746>
 8006a68:	9b02      	ldr	r3, [sp, #8]
 8006a6a:	1e5c      	subs	r4, r3, #1
 8006a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6e:	42a3      	cmp	r3, r4
 8006a70:	bfb7      	itett	lt
 8006a72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a74:	1b1c      	subge	r4, r3, r4
 8006a76:	1ae2      	sublt	r2, r4, r3
 8006a78:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006a7a:	bfbe      	ittt	lt
 8006a7c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006a7e:	189b      	addlt	r3, r3, r2
 8006a80:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006a82:	9b02      	ldr	r3, [sp, #8]
 8006a84:	bfb8      	it	lt
 8006a86:	2400      	movlt	r4, #0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bfbb      	ittet	lt
 8006a8c:	9b06      	ldrlt	r3, [sp, #24]
 8006a8e:	9a02      	ldrlt	r2, [sp, #8]
 8006a90:	9f06      	ldrge	r7, [sp, #24]
 8006a92:	1a9f      	sublt	r7, r3, r2
 8006a94:	bfac      	ite	ge
 8006a96:	9b02      	ldrge	r3, [sp, #8]
 8006a98:	2300      	movlt	r3, #0
 8006a9a:	e73e      	b.n	800691a <_dtoa_r+0x74a>
 8006a9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a9e:	9f06      	ldr	r7, [sp, #24]
 8006aa0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006aa2:	e745      	b.n	8006930 <_dtoa_r+0x760>
 8006aa4:	3fe00000 	.word	0x3fe00000
 8006aa8:	40240000 	.word	0x40240000
 8006aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aae:	e76a      	b.n	8006986 <_dtoa_r+0x7b6>
 8006ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	dc19      	bgt.n	8006aea <_dtoa_r+0x91a>
 8006ab6:	9b04      	ldr	r3, [sp, #16]
 8006ab8:	b9bb      	cbnz	r3, 8006aea <_dtoa_r+0x91a>
 8006aba:	9b05      	ldr	r3, [sp, #20]
 8006abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ac0:	b99b      	cbnz	r3, 8006aea <_dtoa_r+0x91a>
 8006ac2:	9b05      	ldr	r3, [sp, #20]
 8006ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ac8:	0d1b      	lsrs	r3, r3, #20
 8006aca:	051b      	lsls	r3, r3, #20
 8006acc:	b183      	cbz	r3, 8006af0 <_dtoa_r+0x920>
 8006ace:	f04f 0801 	mov.w	r8, #1
 8006ad2:	9b06      	ldr	r3, [sp, #24]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	9306      	str	r3, [sp, #24]
 8006ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ada:	3301      	adds	r3, #1
 8006adc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f47f af6a 	bne.w	80069ba <_dtoa_r+0x7ea>
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	e76f      	b.n	80069ca <_dtoa_r+0x7fa>
 8006aea:	f04f 0800 	mov.w	r8, #0
 8006aee:	e7f6      	b.n	8006ade <_dtoa_r+0x90e>
 8006af0:	4698      	mov	r8, r3
 8006af2:	e7f4      	b.n	8006ade <_dtoa_r+0x90e>
 8006af4:	f43f af7d 	beq.w	80069f2 <_dtoa_r+0x822>
 8006af8:	4618      	mov	r0, r3
 8006afa:	301c      	adds	r0, #28
 8006afc:	e772      	b.n	80069e4 <_dtoa_r+0x814>
 8006afe:	9b02      	ldr	r3, [sp, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc36      	bgt.n	8006b72 <_dtoa_r+0x9a2>
 8006b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	dd33      	ble.n	8006b72 <_dtoa_r+0x9a2>
 8006b0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006b0e:	f1bb 0f00 	cmp.w	fp, #0
 8006b12:	d10d      	bne.n	8006b30 <_dtoa_r+0x960>
 8006b14:	4621      	mov	r1, r4
 8006b16:	465b      	mov	r3, fp
 8006b18:	2205      	movs	r2, #5
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f000 fd48 	bl	80075b0 <__multadd>
 8006b20:	4601      	mov	r1, r0
 8006b22:	4604      	mov	r4, r0
 8006b24:	4650      	mov	r0, sl
 8006b26:	f000 ffa5 	bl	8007a74 <__mcmp>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	f73f adb6 	bgt.w	800669c <_dtoa_r+0x4cc>
 8006b30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b32:	9f08      	ldr	r7, [sp, #32]
 8006b34:	ea6f 0903 	mvn.w	r9, r3
 8006b38:	f04f 0800 	mov.w	r8, #0
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f000 fd14 	bl	800756c <_Bfree>
 8006b44:	2e00      	cmp	r6, #0
 8006b46:	f43f aea4 	beq.w	8006892 <_dtoa_r+0x6c2>
 8006b4a:	f1b8 0f00 	cmp.w	r8, #0
 8006b4e:	d005      	beq.n	8006b5c <_dtoa_r+0x98c>
 8006b50:	45b0      	cmp	r8, r6
 8006b52:	d003      	beq.n	8006b5c <_dtoa_r+0x98c>
 8006b54:	4641      	mov	r1, r8
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 fd08 	bl	800756c <_Bfree>
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 fd04 	bl	800756c <_Bfree>
 8006b64:	e695      	b.n	8006892 <_dtoa_r+0x6c2>
 8006b66:	2400      	movs	r4, #0
 8006b68:	4626      	mov	r6, r4
 8006b6a:	e7e1      	b.n	8006b30 <_dtoa_r+0x960>
 8006b6c:	46c1      	mov	r9, r8
 8006b6e:	4626      	mov	r6, r4
 8006b70:	e594      	b.n	800669c <_dtoa_r+0x4cc>
 8006b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b74:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80fc 	beq.w	8006d76 <_dtoa_r+0xba6>
 8006b7e:	2f00      	cmp	r7, #0
 8006b80:	dd05      	ble.n	8006b8e <_dtoa_r+0x9be>
 8006b82:	4631      	mov	r1, r6
 8006b84:	463a      	mov	r2, r7
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 ff08 	bl	800799c <__lshift>
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	f1b8 0f00 	cmp.w	r8, #0
 8006b92:	d05c      	beq.n	8006c4e <_dtoa_r+0xa7e>
 8006b94:	4628      	mov	r0, r5
 8006b96:	6871      	ldr	r1, [r6, #4]
 8006b98:	f000 fca8 	bl	80074ec <_Balloc>
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	b928      	cbnz	r0, 8006bac <_dtoa_r+0x9dc>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ba6:	4b7e      	ldr	r3, [pc, #504]	; (8006da0 <_dtoa_r+0xbd0>)
 8006ba8:	f7ff bb26 	b.w	80061f8 <_dtoa_r+0x28>
 8006bac:	6932      	ldr	r2, [r6, #16]
 8006bae:	f106 010c 	add.w	r1, r6, #12
 8006bb2:	3202      	adds	r2, #2
 8006bb4:	0092      	lsls	r2, r2, #2
 8006bb6:	300c      	adds	r0, #12
 8006bb8:	f000 fc8a 	bl	80074d0 <memcpy>
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 feeb 	bl	800799c <__lshift>
 8006bc6:	46b0      	mov	r8, r6
 8006bc8:	4606      	mov	r6, r0
 8006bca:	9b08      	ldr	r3, [sp, #32]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	9302      	str	r3, [sp, #8]
 8006bd0:	9b08      	ldr	r3, [sp, #32]
 8006bd2:	445b      	add	r3, fp
 8006bd4:	930a      	str	r3, [sp, #40]	; 0x28
 8006bd6:	9b04      	ldr	r3, [sp, #16]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bde:	9b02      	ldr	r3, [sp, #8]
 8006be0:	4621      	mov	r1, r4
 8006be2:	4650      	mov	r0, sl
 8006be4:	f103 3bff 	add.w	fp, r3, #4294967295
 8006be8:	f7ff fa64 	bl	80060b4 <quorem>
 8006bec:	4603      	mov	r3, r0
 8006bee:	4641      	mov	r1, r8
 8006bf0:	3330      	adds	r3, #48	; 0x30
 8006bf2:	9004      	str	r0, [sp, #16]
 8006bf4:	4650      	mov	r0, sl
 8006bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bf8:	f000 ff3c 	bl	8007a74 <__mcmp>
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	9006      	str	r0, [sp, #24]
 8006c00:	4621      	mov	r1, r4
 8006c02:	4628      	mov	r0, r5
 8006c04:	f000 ff52 	bl	8007aac <__mdiff>
 8006c08:	68c2      	ldr	r2, [r0, #12]
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c0e:	bb02      	cbnz	r2, 8006c52 <_dtoa_r+0xa82>
 8006c10:	4601      	mov	r1, r0
 8006c12:	4650      	mov	r0, sl
 8006c14:	f000 ff2e 	bl	8007a74 <__mcmp>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	4628      	mov	r0, r5
 8006c20:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006c24:	f000 fca2 	bl	800756c <_Bfree>
 8006c28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c2c:	9f02      	ldr	r7, [sp, #8]
 8006c2e:	ea43 0102 	orr.w	r1, r3, r2
 8006c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c34:	430b      	orrs	r3, r1
 8006c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c38:	d10d      	bne.n	8006c56 <_dtoa_r+0xa86>
 8006c3a:	2b39      	cmp	r3, #57	; 0x39
 8006c3c:	d027      	beq.n	8006c8e <_dtoa_r+0xabe>
 8006c3e:	9a06      	ldr	r2, [sp, #24]
 8006c40:	2a00      	cmp	r2, #0
 8006c42:	dd01      	ble.n	8006c48 <_dtoa_r+0xa78>
 8006c44:	9b04      	ldr	r3, [sp, #16]
 8006c46:	3331      	adds	r3, #49	; 0x31
 8006c48:	f88b 3000 	strb.w	r3, [fp]
 8006c4c:	e776      	b.n	8006b3c <_dtoa_r+0x96c>
 8006c4e:	4630      	mov	r0, r6
 8006c50:	e7b9      	b.n	8006bc6 <_dtoa_r+0x9f6>
 8006c52:	2201      	movs	r2, #1
 8006c54:	e7e2      	b.n	8006c1c <_dtoa_r+0xa4c>
 8006c56:	9906      	ldr	r1, [sp, #24]
 8006c58:	2900      	cmp	r1, #0
 8006c5a:	db04      	blt.n	8006c66 <_dtoa_r+0xa96>
 8006c5c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006c5e:	4301      	orrs	r1, r0
 8006c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c62:	4301      	orrs	r1, r0
 8006c64:	d120      	bne.n	8006ca8 <_dtoa_r+0xad8>
 8006c66:	2a00      	cmp	r2, #0
 8006c68:	ddee      	ble.n	8006c48 <_dtoa_r+0xa78>
 8006c6a:	4651      	mov	r1, sl
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	4628      	mov	r0, r5
 8006c70:	9302      	str	r3, [sp, #8]
 8006c72:	f000 fe93 	bl	800799c <__lshift>
 8006c76:	4621      	mov	r1, r4
 8006c78:	4682      	mov	sl, r0
 8006c7a:	f000 fefb 	bl	8007a74 <__mcmp>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	9b02      	ldr	r3, [sp, #8]
 8006c82:	dc02      	bgt.n	8006c8a <_dtoa_r+0xaba>
 8006c84:	d1e0      	bne.n	8006c48 <_dtoa_r+0xa78>
 8006c86:	07da      	lsls	r2, r3, #31
 8006c88:	d5de      	bpl.n	8006c48 <_dtoa_r+0xa78>
 8006c8a:	2b39      	cmp	r3, #57	; 0x39
 8006c8c:	d1da      	bne.n	8006c44 <_dtoa_r+0xa74>
 8006c8e:	2339      	movs	r3, #57	; 0x39
 8006c90:	f88b 3000 	strb.w	r3, [fp]
 8006c94:	463b      	mov	r3, r7
 8006c96:	461f      	mov	r7, r3
 8006c98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	2a39      	cmp	r2, #57	; 0x39
 8006ca0:	d050      	beq.n	8006d44 <_dtoa_r+0xb74>
 8006ca2:	3201      	adds	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	e749      	b.n	8006b3c <_dtoa_r+0x96c>
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	dd03      	ble.n	8006cb4 <_dtoa_r+0xae4>
 8006cac:	2b39      	cmp	r3, #57	; 0x39
 8006cae:	d0ee      	beq.n	8006c8e <_dtoa_r+0xabe>
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	e7c9      	b.n	8006c48 <_dtoa_r+0xa78>
 8006cb4:	9a02      	ldr	r2, [sp, #8]
 8006cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006cbc:	428a      	cmp	r2, r1
 8006cbe:	d02a      	beq.n	8006d16 <_dtoa_r+0xb46>
 8006cc0:	4651      	mov	r1, sl
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f000 fc72 	bl	80075b0 <__multadd>
 8006ccc:	45b0      	cmp	r8, r6
 8006cce:	4682      	mov	sl, r0
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	f04f 020a 	mov.w	r2, #10
 8006cd8:	4641      	mov	r1, r8
 8006cda:	4628      	mov	r0, r5
 8006cdc:	d107      	bne.n	8006cee <_dtoa_r+0xb1e>
 8006cde:	f000 fc67 	bl	80075b0 <__multadd>
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	9b02      	ldr	r3, [sp, #8]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	9302      	str	r3, [sp, #8]
 8006cec:	e777      	b.n	8006bde <_dtoa_r+0xa0e>
 8006cee:	f000 fc5f 	bl	80075b0 <__multadd>
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4680      	mov	r8, r0
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	220a      	movs	r2, #10
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f000 fc58 	bl	80075b0 <__multadd>
 8006d00:	4606      	mov	r6, r0
 8006d02:	e7f0      	b.n	8006ce6 <_dtoa_r+0xb16>
 8006d04:	f1bb 0f00 	cmp.w	fp, #0
 8006d08:	bfcc      	ite	gt
 8006d0a:	465f      	movgt	r7, fp
 8006d0c:	2701      	movle	r7, #1
 8006d0e:	f04f 0800 	mov.w	r8, #0
 8006d12:	9a08      	ldr	r2, [sp, #32]
 8006d14:	4417      	add	r7, r2
 8006d16:	4651      	mov	r1, sl
 8006d18:	2201      	movs	r2, #1
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	9302      	str	r3, [sp, #8]
 8006d1e:	f000 fe3d 	bl	800799c <__lshift>
 8006d22:	4621      	mov	r1, r4
 8006d24:	4682      	mov	sl, r0
 8006d26:	f000 fea5 	bl	8007a74 <__mcmp>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	dcb2      	bgt.n	8006c94 <_dtoa_r+0xac4>
 8006d2e:	d102      	bne.n	8006d36 <_dtoa_r+0xb66>
 8006d30:	9b02      	ldr	r3, [sp, #8]
 8006d32:	07db      	lsls	r3, r3, #31
 8006d34:	d4ae      	bmi.n	8006c94 <_dtoa_r+0xac4>
 8006d36:	463b      	mov	r3, r7
 8006d38:	461f      	mov	r7, r3
 8006d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d3e:	2a30      	cmp	r2, #48	; 0x30
 8006d40:	d0fa      	beq.n	8006d38 <_dtoa_r+0xb68>
 8006d42:	e6fb      	b.n	8006b3c <_dtoa_r+0x96c>
 8006d44:	9a08      	ldr	r2, [sp, #32]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d1a5      	bne.n	8006c96 <_dtoa_r+0xac6>
 8006d4a:	2331      	movs	r3, #49	; 0x31
 8006d4c:	f109 0901 	add.w	r9, r9, #1
 8006d50:	7013      	strb	r3, [r2, #0]
 8006d52:	e6f3      	b.n	8006b3c <_dtoa_r+0x96c>
 8006d54:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <_dtoa_r+0xbd4>)
 8006d56:	f7ff baa7 	b.w	80062a8 <_dtoa_r+0xd8>
 8006d5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f47f aa80 	bne.w	8006262 <_dtoa_r+0x92>
 8006d62:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <_dtoa_r+0xbd8>)
 8006d64:	f7ff baa0 	b.w	80062a8 <_dtoa_r+0xd8>
 8006d68:	f1bb 0f00 	cmp.w	fp, #0
 8006d6c:	dc03      	bgt.n	8006d76 <_dtoa_r+0xba6>
 8006d6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	f73f aecc 	bgt.w	8006b0e <_dtoa_r+0x93e>
 8006d76:	9f08      	ldr	r7, [sp, #32]
 8006d78:	4621      	mov	r1, r4
 8006d7a:	4650      	mov	r0, sl
 8006d7c:	f7ff f99a 	bl	80060b4 <quorem>
 8006d80:	9a08      	ldr	r2, [sp, #32]
 8006d82:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d86:	f807 3b01 	strb.w	r3, [r7], #1
 8006d8a:	1aba      	subs	r2, r7, r2
 8006d8c:	4593      	cmp	fp, r2
 8006d8e:	ddb9      	ble.n	8006d04 <_dtoa_r+0xb34>
 8006d90:	4651      	mov	r1, sl
 8006d92:	2300      	movs	r3, #0
 8006d94:	220a      	movs	r2, #10
 8006d96:	4628      	mov	r0, r5
 8006d98:	f000 fc0a 	bl	80075b0 <__multadd>
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	e7eb      	b.n	8006d78 <_dtoa_r+0xba8>
 8006da0:	080090a4 	.word	0x080090a4
 8006da4:	08008ea4 	.word	0x08008ea4
 8006da8:	08009021 	.word	0x08009021

08006dac <rshift>:
 8006dac:	6903      	ldr	r3, [r0, #16]
 8006dae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006db2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006db6:	f100 0414 	add.w	r4, r0, #20
 8006dba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006dbe:	dd46      	ble.n	8006e4e <rshift+0xa2>
 8006dc0:	f011 011f 	ands.w	r1, r1, #31
 8006dc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006dc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006dcc:	d10c      	bne.n	8006de8 <rshift+0x3c>
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f100 0710 	add.w	r7, r0, #16
 8006dd4:	42b1      	cmp	r1, r6
 8006dd6:	d335      	bcc.n	8006e44 <rshift+0x98>
 8006dd8:	1a9b      	subs	r3, r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	1eea      	subs	r2, r5, #3
 8006dde:	4296      	cmp	r6, r2
 8006de0:	bf38      	it	cc
 8006de2:	2300      	movcc	r3, #0
 8006de4:	4423      	add	r3, r4
 8006de6:	e015      	b.n	8006e14 <rshift+0x68>
 8006de8:	46a1      	mov	r9, r4
 8006dea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006dee:	f1c1 0820 	rsb	r8, r1, #32
 8006df2:	40cf      	lsrs	r7, r1
 8006df4:	f105 0e04 	add.w	lr, r5, #4
 8006df8:	4576      	cmp	r6, lr
 8006dfa:	46f4      	mov	ip, lr
 8006dfc:	d816      	bhi.n	8006e2c <rshift+0x80>
 8006dfe:	1a9b      	subs	r3, r3, r2
 8006e00:	009a      	lsls	r2, r3, #2
 8006e02:	3a04      	subs	r2, #4
 8006e04:	3501      	adds	r5, #1
 8006e06:	42ae      	cmp	r6, r5
 8006e08:	bf38      	it	cc
 8006e0a:	2200      	movcc	r2, #0
 8006e0c:	18a3      	adds	r3, r4, r2
 8006e0e:	50a7      	str	r7, [r4, r2]
 8006e10:	b107      	cbz	r7, 8006e14 <rshift+0x68>
 8006e12:	3304      	adds	r3, #4
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	eba3 0204 	sub.w	r2, r3, r4
 8006e1a:	bf08      	it	eq
 8006e1c:	2300      	moveq	r3, #0
 8006e1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e22:	6102      	str	r2, [r0, #16]
 8006e24:	bf08      	it	eq
 8006e26:	6143      	streq	r3, [r0, #20]
 8006e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e2c:	f8dc c000 	ldr.w	ip, [ip]
 8006e30:	fa0c fc08 	lsl.w	ip, ip, r8
 8006e34:	ea4c 0707 	orr.w	r7, ip, r7
 8006e38:	f849 7b04 	str.w	r7, [r9], #4
 8006e3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e40:	40cf      	lsrs	r7, r1
 8006e42:	e7d9      	b.n	8006df8 <rshift+0x4c>
 8006e44:	f851 cb04 	ldr.w	ip, [r1], #4
 8006e48:	f847 cf04 	str.w	ip, [r7, #4]!
 8006e4c:	e7c2      	b.n	8006dd4 <rshift+0x28>
 8006e4e:	4623      	mov	r3, r4
 8006e50:	e7e0      	b.n	8006e14 <rshift+0x68>

08006e52 <__hexdig_fun>:
 8006e52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006e56:	2b09      	cmp	r3, #9
 8006e58:	d802      	bhi.n	8006e60 <__hexdig_fun+0xe>
 8006e5a:	3820      	subs	r0, #32
 8006e5c:	b2c0      	uxtb	r0, r0
 8006e5e:	4770      	bx	lr
 8006e60:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006e64:	2b05      	cmp	r3, #5
 8006e66:	d801      	bhi.n	8006e6c <__hexdig_fun+0x1a>
 8006e68:	3847      	subs	r0, #71	; 0x47
 8006e6a:	e7f7      	b.n	8006e5c <__hexdig_fun+0xa>
 8006e6c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006e70:	2b05      	cmp	r3, #5
 8006e72:	d801      	bhi.n	8006e78 <__hexdig_fun+0x26>
 8006e74:	3827      	subs	r0, #39	; 0x27
 8006e76:	e7f1      	b.n	8006e5c <__hexdig_fun+0xa>
 8006e78:	2000      	movs	r0, #0
 8006e7a:	4770      	bx	lr

08006e7c <__gethex>:
 8006e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	b08b      	sub	sp, #44	; 0x2c
 8006e82:	9306      	str	r3, [sp, #24]
 8006e84:	4bb9      	ldr	r3, [pc, #740]	; (800716c <__gethex+0x2f0>)
 8006e86:	9002      	str	r0, [sp, #8]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	468b      	mov	fp, r1
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	4690      	mov	r8, r2
 8006e90:	9303      	str	r3, [sp, #12]
 8006e92:	f7f9 f95d 	bl	8000150 <strlen>
 8006e96:	4682      	mov	sl, r0
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	f8db 2000 	ldr.w	r2, [fp]
 8006e9e:	4403      	add	r3, r0
 8006ea0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006ea4:	9307      	str	r3, [sp, #28]
 8006ea6:	1c93      	adds	r3, r2, #2
 8006ea8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006eac:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006eb0:	32fe      	adds	r2, #254	; 0xfe
 8006eb2:	18d1      	adds	r1, r2, r3
 8006eb4:	461f      	mov	r7, r3
 8006eb6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006eba:	9101      	str	r1, [sp, #4]
 8006ebc:	2830      	cmp	r0, #48	; 0x30
 8006ebe:	d0f8      	beq.n	8006eb2 <__gethex+0x36>
 8006ec0:	f7ff ffc7 	bl	8006e52 <__hexdig_fun>
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d13a      	bne.n	8006f40 <__gethex+0xc4>
 8006eca:	4652      	mov	r2, sl
 8006ecc:	4638      	mov	r0, r7
 8006ece:	9903      	ldr	r1, [sp, #12]
 8006ed0:	f001 f9ea 	bl	80082a8 <strncmp>
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d166      	bne.n	8006fa8 <__gethex+0x12c>
 8006eda:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006ede:	eb07 060a 	add.w	r6, r7, sl
 8006ee2:	f7ff ffb6 	bl	8006e52 <__hexdig_fun>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d060      	beq.n	8006fac <__gethex+0x130>
 8006eea:	4633      	mov	r3, r6
 8006eec:	7818      	ldrb	r0, [r3, #0]
 8006eee:	461f      	mov	r7, r3
 8006ef0:	2830      	cmp	r0, #48	; 0x30
 8006ef2:	f103 0301 	add.w	r3, r3, #1
 8006ef6:	d0f9      	beq.n	8006eec <__gethex+0x70>
 8006ef8:	f7ff ffab 	bl	8006e52 <__hexdig_fun>
 8006efc:	2301      	movs	r3, #1
 8006efe:	fab0 f480 	clz	r4, r0
 8006f02:	4635      	mov	r5, r6
 8006f04:	0964      	lsrs	r4, r4, #5
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	463a      	mov	r2, r7
 8006f0a:	4616      	mov	r6, r2
 8006f0c:	7830      	ldrb	r0, [r6, #0]
 8006f0e:	3201      	adds	r2, #1
 8006f10:	f7ff ff9f 	bl	8006e52 <__hexdig_fun>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d1f8      	bne.n	8006f0a <__gethex+0x8e>
 8006f18:	4652      	mov	r2, sl
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	9903      	ldr	r1, [sp, #12]
 8006f1e:	f001 f9c3 	bl	80082a8 <strncmp>
 8006f22:	b980      	cbnz	r0, 8006f46 <__gethex+0xca>
 8006f24:	b94d      	cbnz	r5, 8006f3a <__gethex+0xbe>
 8006f26:	eb06 050a 	add.w	r5, r6, sl
 8006f2a:	462a      	mov	r2, r5
 8006f2c:	4616      	mov	r6, r2
 8006f2e:	7830      	ldrb	r0, [r6, #0]
 8006f30:	3201      	adds	r2, #1
 8006f32:	f7ff ff8e 	bl	8006e52 <__hexdig_fun>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d1f8      	bne.n	8006f2c <__gethex+0xb0>
 8006f3a:	1bad      	subs	r5, r5, r6
 8006f3c:	00ad      	lsls	r5, r5, #2
 8006f3e:	e004      	b.n	8006f4a <__gethex+0xce>
 8006f40:	2400      	movs	r4, #0
 8006f42:	4625      	mov	r5, r4
 8006f44:	e7e0      	b.n	8006f08 <__gethex+0x8c>
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	d1f7      	bne.n	8006f3a <__gethex+0xbe>
 8006f4a:	7833      	ldrb	r3, [r6, #0]
 8006f4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f50:	2b50      	cmp	r3, #80	; 0x50
 8006f52:	d139      	bne.n	8006fc8 <__gethex+0x14c>
 8006f54:	7873      	ldrb	r3, [r6, #1]
 8006f56:	2b2b      	cmp	r3, #43	; 0x2b
 8006f58:	d02a      	beq.n	8006fb0 <__gethex+0x134>
 8006f5a:	2b2d      	cmp	r3, #45	; 0x2d
 8006f5c:	d02c      	beq.n	8006fb8 <__gethex+0x13c>
 8006f5e:	f04f 0900 	mov.w	r9, #0
 8006f62:	1c71      	adds	r1, r6, #1
 8006f64:	7808      	ldrb	r0, [r1, #0]
 8006f66:	f7ff ff74 	bl	8006e52 <__hexdig_fun>
 8006f6a:	1e43      	subs	r3, r0, #1
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b18      	cmp	r3, #24
 8006f70:	d82a      	bhi.n	8006fc8 <__gethex+0x14c>
 8006f72:	f1a0 0210 	sub.w	r2, r0, #16
 8006f76:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f7a:	f7ff ff6a 	bl	8006e52 <__hexdig_fun>
 8006f7e:	1e43      	subs	r3, r0, #1
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b18      	cmp	r3, #24
 8006f84:	d91b      	bls.n	8006fbe <__gethex+0x142>
 8006f86:	f1b9 0f00 	cmp.w	r9, #0
 8006f8a:	d000      	beq.n	8006f8e <__gethex+0x112>
 8006f8c:	4252      	negs	r2, r2
 8006f8e:	4415      	add	r5, r2
 8006f90:	f8cb 1000 	str.w	r1, [fp]
 8006f94:	b1d4      	cbz	r4, 8006fcc <__gethex+0x150>
 8006f96:	9b01      	ldr	r3, [sp, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bf14      	ite	ne
 8006f9c:	2700      	movne	r7, #0
 8006f9e:	2706      	moveq	r7, #6
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	b00b      	add	sp, #44	; 0x2c
 8006fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa8:	463e      	mov	r6, r7
 8006faa:	4625      	mov	r5, r4
 8006fac:	2401      	movs	r4, #1
 8006fae:	e7cc      	b.n	8006f4a <__gethex+0xce>
 8006fb0:	f04f 0900 	mov.w	r9, #0
 8006fb4:	1cb1      	adds	r1, r6, #2
 8006fb6:	e7d5      	b.n	8006f64 <__gethex+0xe8>
 8006fb8:	f04f 0901 	mov.w	r9, #1
 8006fbc:	e7fa      	b.n	8006fb4 <__gethex+0x138>
 8006fbe:	230a      	movs	r3, #10
 8006fc0:	fb03 0202 	mla	r2, r3, r2, r0
 8006fc4:	3a10      	subs	r2, #16
 8006fc6:	e7d6      	b.n	8006f76 <__gethex+0xfa>
 8006fc8:	4631      	mov	r1, r6
 8006fca:	e7e1      	b.n	8006f90 <__gethex+0x114>
 8006fcc:	4621      	mov	r1, r4
 8006fce:	1bf3      	subs	r3, r6, r7
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	2b07      	cmp	r3, #7
 8006fd4:	dc0a      	bgt.n	8006fec <__gethex+0x170>
 8006fd6:	9802      	ldr	r0, [sp, #8]
 8006fd8:	f000 fa88 	bl	80074ec <_Balloc>
 8006fdc:	4604      	mov	r4, r0
 8006fde:	b940      	cbnz	r0, 8006ff2 <__gethex+0x176>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	21de      	movs	r1, #222	; 0xde
 8006fe4:	4b62      	ldr	r3, [pc, #392]	; (8007170 <__gethex+0x2f4>)
 8006fe6:	4863      	ldr	r0, [pc, #396]	; (8007174 <__gethex+0x2f8>)
 8006fe8:	f001 f97e 	bl	80082e8 <__assert_func>
 8006fec:	3101      	adds	r1, #1
 8006fee:	105b      	asrs	r3, r3, #1
 8006ff0:	e7ef      	b.n	8006fd2 <__gethex+0x156>
 8006ff2:	f04f 0b00 	mov.w	fp, #0
 8006ff6:	f100 0914 	add.w	r9, r0, #20
 8006ffa:	f1ca 0301 	rsb	r3, sl, #1
 8006ffe:	f8cd 9010 	str.w	r9, [sp, #16]
 8007002:	f8cd b004 	str.w	fp, [sp, #4]
 8007006:	9308      	str	r3, [sp, #32]
 8007008:	42b7      	cmp	r7, r6
 800700a:	d33f      	bcc.n	800708c <__gethex+0x210>
 800700c:	9f04      	ldr	r7, [sp, #16]
 800700e:	9b01      	ldr	r3, [sp, #4]
 8007010:	f847 3b04 	str.w	r3, [r7], #4
 8007014:	eba7 0709 	sub.w	r7, r7, r9
 8007018:	10bf      	asrs	r7, r7, #2
 800701a:	6127      	str	r7, [r4, #16]
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fb5b 	bl	80076d8 <__hi0bits>
 8007022:	017f      	lsls	r7, r7, #5
 8007024:	f8d8 6000 	ldr.w	r6, [r8]
 8007028:	1a3f      	subs	r7, r7, r0
 800702a:	42b7      	cmp	r7, r6
 800702c:	dd62      	ble.n	80070f4 <__gethex+0x278>
 800702e:	1bbf      	subs	r7, r7, r6
 8007030:	4639      	mov	r1, r7
 8007032:	4620      	mov	r0, r4
 8007034:	f000 fef1 	bl	8007e1a <__any_on>
 8007038:	4682      	mov	sl, r0
 800703a:	b1a8      	cbz	r0, 8007068 <__gethex+0x1ec>
 800703c:	f04f 0a01 	mov.w	sl, #1
 8007040:	1e7b      	subs	r3, r7, #1
 8007042:	1159      	asrs	r1, r3, #5
 8007044:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007048:	f003 021f 	and.w	r2, r3, #31
 800704c:	fa0a f202 	lsl.w	r2, sl, r2
 8007050:	420a      	tst	r2, r1
 8007052:	d009      	beq.n	8007068 <__gethex+0x1ec>
 8007054:	4553      	cmp	r3, sl
 8007056:	dd05      	ble.n	8007064 <__gethex+0x1e8>
 8007058:	4620      	mov	r0, r4
 800705a:	1eb9      	subs	r1, r7, #2
 800705c:	f000 fedd 	bl	8007e1a <__any_on>
 8007060:	2800      	cmp	r0, #0
 8007062:	d144      	bne.n	80070ee <__gethex+0x272>
 8007064:	f04f 0a02 	mov.w	sl, #2
 8007068:	4639      	mov	r1, r7
 800706a:	4620      	mov	r0, r4
 800706c:	f7ff fe9e 	bl	8006dac <rshift>
 8007070:	443d      	add	r5, r7
 8007072:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007076:	42ab      	cmp	r3, r5
 8007078:	da4a      	bge.n	8007110 <__gethex+0x294>
 800707a:	4621      	mov	r1, r4
 800707c:	9802      	ldr	r0, [sp, #8]
 800707e:	f000 fa75 	bl	800756c <_Bfree>
 8007082:	2300      	movs	r3, #0
 8007084:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007086:	27a3      	movs	r7, #163	; 0xa3
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	e789      	b.n	8006fa0 <__gethex+0x124>
 800708c:	1e73      	subs	r3, r6, #1
 800708e:	9a07      	ldr	r2, [sp, #28]
 8007090:	9305      	str	r3, [sp, #20]
 8007092:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007096:	4293      	cmp	r3, r2
 8007098:	d019      	beq.n	80070ce <__gethex+0x252>
 800709a:	f1bb 0f20 	cmp.w	fp, #32
 800709e:	d107      	bne.n	80070b0 <__gethex+0x234>
 80070a0:	9b04      	ldr	r3, [sp, #16]
 80070a2:	9a01      	ldr	r2, [sp, #4]
 80070a4:	f843 2b04 	str.w	r2, [r3], #4
 80070a8:	9304      	str	r3, [sp, #16]
 80070aa:	2300      	movs	r3, #0
 80070ac:	469b      	mov	fp, r3
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80070b4:	f7ff fecd 	bl	8006e52 <__hexdig_fun>
 80070b8:	9b01      	ldr	r3, [sp, #4]
 80070ba:	f000 000f 	and.w	r0, r0, #15
 80070be:	fa00 f00b 	lsl.w	r0, r0, fp
 80070c2:	4303      	orrs	r3, r0
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	f10b 0b04 	add.w	fp, fp, #4
 80070ca:	9b05      	ldr	r3, [sp, #20]
 80070cc:	e00d      	b.n	80070ea <__gethex+0x26e>
 80070ce:	9b05      	ldr	r3, [sp, #20]
 80070d0:	9a08      	ldr	r2, [sp, #32]
 80070d2:	4413      	add	r3, r2
 80070d4:	42bb      	cmp	r3, r7
 80070d6:	d3e0      	bcc.n	800709a <__gethex+0x21e>
 80070d8:	4618      	mov	r0, r3
 80070da:	4652      	mov	r2, sl
 80070dc:	9903      	ldr	r1, [sp, #12]
 80070de:	9309      	str	r3, [sp, #36]	; 0x24
 80070e0:	f001 f8e2 	bl	80082a8 <strncmp>
 80070e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d1d7      	bne.n	800709a <__gethex+0x21e>
 80070ea:	461e      	mov	r6, r3
 80070ec:	e78c      	b.n	8007008 <__gethex+0x18c>
 80070ee:	f04f 0a03 	mov.w	sl, #3
 80070f2:	e7b9      	b.n	8007068 <__gethex+0x1ec>
 80070f4:	da09      	bge.n	800710a <__gethex+0x28e>
 80070f6:	1bf7      	subs	r7, r6, r7
 80070f8:	4621      	mov	r1, r4
 80070fa:	463a      	mov	r2, r7
 80070fc:	9802      	ldr	r0, [sp, #8]
 80070fe:	f000 fc4d 	bl	800799c <__lshift>
 8007102:	4604      	mov	r4, r0
 8007104:	1bed      	subs	r5, r5, r7
 8007106:	f100 0914 	add.w	r9, r0, #20
 800710a:	f04f 0a00 	mov.w	sl, #0
 800710e:	e7b0      	b.n	8007072 <__gethex+0x1f6>
 8007110:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007114:	42a8      	cmp	r0, r5
 8007116:	dd71      	ble.n	80071fc <__gethex+0x380>
 8007118:	1b45      	subs	r5, r0, r5
 800711a:	42ae      	cmp	r6, r5
 800711c:	dc34      	bgt.n	8007188 <__gethex+0x30c>
 800711e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d028      	beq.n	8007178 <__gethex+0x2fc>
 8007126:	2b03      	cmp	r3, #3
 8007128:	d02a      	beq.n	8007180 <__gethex+0x304>
 800712a:	2b01      	cmp	r3, #1
 800712c:	d115      	bne.n	800715a <__gethex+0x2de>
 800712e:	42ae      	cmp	r6, r5
 8007130:	d113      	bne.n	800715a <__gethex+0x2de>
 8007132:	2e01      	cmp	r6, #1
 8007134:	d10b      	bne.n	800714e <__gethex+0x2d2>
 8007136:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800713a:	9a06      	ldr	r2, [sp, #24]
 800713c:	2762      	movs	r7, #98	; 0x62
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	2301      	movs	r3, #1
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	f8c9 3000 	str.w	r3, [r9]
 8007148:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800714a:	601c      	str	r4, [r3, #0]
 800714c:	e728      	b.n	8006fa0 <__gethex+0x124>
 800714e:	4620      	mov	r0, r4
 8007150:	1e71      	subs	r1, r6, #1
 8007152:	f000 fe62 	bl	8007e1a <__any_on>
 8007156:	2800      	cmp	r0, #0
 8007158:	d1ed      	bne.n	8007136 <__gethex+0x2ba>
 800715a:	4621      	mov	r1, r4
 800715c:	9802      	ldr	r0, [sp, #8]
 800715e:	f000 fa05 	bl	800756c <_Bfree>
 8007162:	2300      	movs	r3, #0
 8007164:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007166:	2750      	movs	r7, #80	; 0x50
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e719      	b.n	8006fa0 <__gethex+0x124>
 800716c:	08009120 	.word	0x08009120
 8007170:	080090a4 	.word	0x080090a4
 8007174:	080090b5 	.word	0x080090b5
 8007178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1ed      	bne.n	800715a <__gethex+0x2de>
 800717e:	e7da      	b.n	8007136 <__gethex+0x2ba>
 8007180:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1d7      	bne.n	8007136 <__gethex+0x2ba>
 8007186:	e7e8      	b.n	800715a <__gethex+0x2de>
 8007188:	1e6f      	subs	r7, r5, #1
 800718a:	f1ba 0f00 	cmp.w	sl, #0
 800718e:	d132      	bne.n	80071f6 <__gethex+0x37a>
 8007190:	b127      	cbz	r7, 800719c <__gethex+0x320>
 8007192:	4639      	mov	r1, r7
 8007194:	4620      	mov	r0, r4
 8007196:	f000 fe40 	bl	8007e1a <__any_on>
 800719a:	4682      	mov	sl, r0
 800719c:	2101      	movs	r1, #1
 800719e:	117b      	asrs	r3, r7, #5
 80071a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80071a4:	f007 071f 	and.w	r7, r7, #31
 80071a8:	fa01 f707 	lsl.w	r7, r1, r7
 80071ac:	421f      	tst	r7, r3
 80071ae:	f04f 0702 	mov.w	r7, #2
 80071b2:	4629      	mov	r1, r5
 80071b4:	4620      	mov	r0, r4
 80071b6:	bf18      	it	ne
 80071b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80071bc:	1b76      	subs	r6, r6, r5
 80071be:	f7ff fdf5 	bl	8006dac <rshift>
 80071c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80071c6:	f1ba 0f00 	cmp.w	sl, #0
 80071ca:	d048      	beq.n	800725e <__gethex+0x3e2>
 80071cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d015      	beq.n	8007200 <__gethex+0x384>
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d017      	beq.n	8007208 <__gethex+0x38c>
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d109      	bne.n	80071f0 <__gethex+0x374>
 80071dc:	f01a 0f02 	tst.w	sl, #2
 80071e0:	d006      	beq.n	80071f0 <__gethex+0x374>
 80071e2:	f8d9 0000 	ldr.w	r0, [r9]
 80071e6:	ea4a 0a00 	orr.w	sl, sl, r0
 80071ea:	f01a 0f01 	tst.w	sl, #1
 80071ee:	d10e      	bne.n	800720e <__gethex+0x392>
 80071f0:	f047 0710 	orr.w	r7, r7, #16
 80071f4:	e033      	b.n	800725e <__gethex+0x3e2>
 80071f6:	f04f 0a01 	mov.w	sl, #1
 80071fa:	e7cf      	b.n	800719c <__gethex+0x320>
 80071fc:	2701      	movs	r7, #1
 80071fe:	e7e2      	b.n	80071c6 <__gethex+0x34a>
 8007200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007202:	f1c3 0301 	rsb	r3, r3, #1
 8007206:	9315      	str	r3, [sp, #84]	; 0x54
 8007208:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0f0      	beq.n	80071f0 <__gethex+0x374>
 800720e:	f04f 0c00 	mov.w	ip, #0
 8007212:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007216:	f104 0314 	add.w	r3, r4, #20
 800721a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800721e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007222:	4618      	mov	r0, r3
 8007224:	f853 2b04 	ldr.w	r2, [r3], #4
 8007228:	f1b2 3fff 	cmp.w	r2, #4294967295
 800722c:	d01c      	beq.n	8007268 <__gethex+0x3ec>
 800722e:	3201      	adds	r2, #1
 8007230:	6002      	str	r2, [r0, #0]
 8007232:	2f02      	cmp	r7, #2
 8007234:	f104 0314 	add.w	r3, r4, #20
 8007238:	d13d      	bne.n	80072b6 <__gethex+0x43a>
 800723a:	f8d8 2000 	ldr.w	r2, [r8]
 800723e:	3a01      	subs	r2, #1
 8007240:	42b2      	cmp	r2, r6
 8007242:	d10a      	bne.n	800725a <__gethex+0x3de>
 8007244:	2201      	movs	r2, #1
 8007246:	1171      	asrs	r1, r6, #5
 8007248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800724c:	f006 061f 	and.w	r6, r6, #31
 8007250:	fa02 f606 	lsl.w	r6, r2, r6
 8007254:	421e      	tst	r6, r3
 8007256:	bf18      	it	ne
 8007258:	4617      	movne	r7, r2
 800725a:	f047 0720 	orr.w	r7, r7, #32
 800725e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007260:	601c      	str	r4, [r3, #0]
 8007262:	9b06      	ldr	r3, [sp, #24]
 8007264:	601d      	str	r5, [r3, #0]
 8007266:	e69b      	b.n	8006fa0 <__gethex+0x124>
 8007268:	4299      	cmp	r1, r3
 800726a:	f843 cc04 	str.w	ip, [r3, #-4]
 800726e:	d8d8      	bhi.n	8007222 <__gethex+0x3a6>
 8007270:	68a3      	ldr	r3, [r4, #8]
 8007272:	459b      	cmp	fp, r3
 8007274:	db17      	blt.n	80072a6 <__gethex+0x42a>
 8007276:	6861      	ldr	r1, [r4, #4]
 8007278:	9802      	ldr	r0, [sp, #8]
 800727a:	3101      	adds	r1, #1
 800727c:	f000 f936 	bl	80074ec <_Balloc>
 8007280:	4681      	mov	r9, r0
 8007282:	b918      	cbnz	r0, 800728c <__gethex+0x410>
 8007284:	4602      	mov	r2, r0
 8007286:	2184      	movs	r1, #132	; 0x84
 8007288:	4b19      	ldr	r3, [pc, #100]	; (80072f0 <__gethex+0x474>)
 800728a:	e6ac      	b.n	8006fe6 <__gethex+0x16a>
 800728c:	6922      	ldr	r2, [r4, #16]
 800728e:	f104 010c 	add.w	r1, r4, #12
 8007292:	3202      	adds	r2, #2
 8007294:	0092      	lsls	r2, r2, #2
 8007296:	300c      	adds	r0, #12
 8007298:	f000 f91a 	bl	80074d0 <memcpy>
 800729c:	4621      	mov	r1, r4
 800729e:	9802      	ldr	r0, [sp, #8]
 80072a0:	f000 f964 	bl	800756c <_Bfree>
 80072a4:	464c      	mov	r4, r9
 80072a6:	6923      	ldr	r3, [r4, #16]
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	6122      	str	r2, [r4, #16]
 80072ac:	2201      	movs	r2, #1
 80072ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072b2:	615a      	str	r2, [r3, #20]
 80072b4:	e7bd      	b.n	8007232 <__gethex+0x3b6>
 80072b6:	6922      	ldr	r2, [r4, #16]
 80072b8:	455a      	cmp	r2, fp
 80072ba:	dd0b      	ble.n	80072d4 <__gethex+0x458>
 80072bc:	2101      	movs	r1, #1
 80072be:	4620      	mov	r0, r4
 80072c0:	f7ff fd74 	bl	8006dac <rshift>
 80072c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072c8:	3501      	adds	r5, #1
 80072ca:	42ab      	cmp	r3, r5
 80072cc:	f6ff aed5 	blt.w	800707a <__gethex+0x1fe>
 80072d0:	2701      	movs	r7, #1
 80072d2:	e7c2      	b.n	800725a <__gethex+0x3de>
 80072d4:	f016 061f 	ands.w	r6, r6, #31
 80072d8:	d0fa      	beq.n	80072d0 <__gethex+0x454>
 80072da:	449a      	add	sl, r3
 80072dc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80072e0:	f000 f9fa 	bl	80076d8 <__hi0bits>
 80072e4:	f1c6 0620 	rsb	r6, r6, #32
 80072e8:	42b0      	cmp	r0, r6
 80072ea:	dbe7      	blt.n	80072bc <__gethex+0x440>
 80072ec:	e7f0      	b.n	80072d0 <__gethex+0x454>
 80072ee:	bf00      	nop
 80072f0:	080090a4 	.word	0x080090a4

080072f4 <L_shift>:
 80072f4:	f1c2 0208 	rsb	r2, r2, #8
 80072f8:	0092      	lsls	r2, r2, #2
 80072fa:	b570      	push	{r4, r5, r6, lr}
 80072fc:	f1c2 0620 	rsb	r6, r2, #32
 8007300:	6843      	ldr	r3, [r0, #4]
 8007302:	6804      	ldr	r4, [r0, #0]
 8007304:	fa03 f506 	lsl.w	r5, r3, r6
 8007308:	432c      	orrs	r4, r5
 800730a:	40d3      	lsrs	r3, r2
 800730c:	6004      	str	r4, [r0, #0]
 800730e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007312:	4288      	cmp	r0, r1
 8007314:	d3f4      	bcc.n	8007300 <L_shift+0xc>
 8007316:	bd70      	pop	{r4, r5, r6, pc}

08007318 <__match>:
 8007318:	b530      	push	{r4, r5, lr}
 800731a:	6803      	ldr	r3, [r0, #0]
 800731c:	3301      	adds	r3, #1
 800731e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007322:	b914      	cbnz	r4, 800732a <__match+0x12>
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	2001      	movs	r0, #1
 8007328:	bd30      	pop	{r4, r5, pc}
 800732a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800732e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007332:	2d19      	cmp	r5, #25
 8007334:	bf98      	it	ls
 8007336:	3220      	addls	r2, #32
 8007338:	42a2      	cmp	r2, r4
 800733a:	d0f0      	beq.n	800731e <__match+0x6>
 800733c:	2000      	movs	r0, #0
 800733e:	e7f3      	b.n	8007328 <__match+0x10>

08007340 <__hexnan>:
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	2500      	movs	r5, #0
 8007346:	680b      	ldr	r3, [r1, #0]
 8007348:	4682      	mov	sl, r0
 800734a:	115e      	asrs	r6, r3, #5
 800734c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007350:	f013 031f 	ands.w	r3, r3, #31
 8007354:	bf18      	it	ne
 8007356:	3604      	addne	r6, #4
 8007358:	1f37      	subs	r7, r6, #4
 800735a:	4690      	mov	r8, r2
 800735c:	46b9      	mov	r9, r7
 800735e:	463c      	mov	r4, r7
 8007360:	46ab      	mov	fp, r5
 8007362:	b087      	sub	sp, #28
 8007364:	6801      	ldr	r1, [r0, #0]
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	f846 5c04 	str.w	r5, [r6, #-4]
 800736c:	9502      	str	r5, [sp, #8]
 800736e:	784a      	ldrb	r2, [r1, #1]
 8007370:	1c4b      	adds	r3, r1, #1
 8007372:	9303      	str	r3, [sp, #12]
 8007374:	b342      	cbz	r2, 80073c8 <__hexnan+0x88>
 8007376:	4610      	mov	r0, r2
 8007378:	9105      	str	r1, [sp, #20]
 800737a:	9204      	str	r2, [sp, #16]
 800737c:	f7ff fd69 	bl	8006e52 <__hexdig_fun>
 8007380:	2800      	cmp	r0, #0
 8007382:	d14f      	bne.n	8007424 <__hexnan+0xe4>
 8007384:	9a04      	ldr	r2, [sp, #16]
 8007386:	9905      	ldr	r1, [sp, #20]
 8007388:	2a20      	cmp	r2, #32
 800738a:	d818      	bhi.n	80073be <__hexnan+0x7e>
 800738c:	9b02      	ldr	r3, [sp, #8]
 800738e:	459b      	cmp	fp, r3
 8007390:	dd13      	ble.n	80073ba <__hexnan+0x7a>
 8007392:	454c      	cmp	r4, r9
 8007394:	d206      	bcs.n	80073a4 <__hexnan+0x64>
 8007396:	2d07      	cmp	r5, #7
 8007398:	dc04      	bgt.n	80073a4 <__hexnan+0x64>
 800739a:	462a      	mov	r2, r5
 800739c:	4649      	mov	r1, r9
 800739e:	4620      	mov	r0, r4
 80073a0:	f7ff ffa8 	bl	80072f4 <L_shift>
 80073a4:	4544      	cmp	r4, r8
 80073a6:	d950      	bls.n	800744a <__hexnan+0x10a>
 80073a8:	2300      	movs	r3, #0
 80073aa:	f1a4 0904 	sub.w	r9, r4, #4
 80073ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80073b2:	461d      	mov	r5, r3
 80073b4:	464c      	mov	r4, r9
 80073b6:	f8cd b008 	str.w	fp, [sp, #8]
 80073ba:	9903      	ldr	r1, [sp, #12]
 80073bc:	e7d7      	b.n	800736e <__hexnan+0x2e>
 80073be:	2a29      	cmp	r2, #41	; 0x29
 80073c0:	d156      	bne.n	8007470 <__hexnan+0x130>
 80073c2:	3102      	adds	r1, #2
 80073c4:	f8ca 1000 	str.w	r1, [sl]
 80073c8:	f1bb 0f00 	cmp.w	fp, #0
 80073cc:	d050      	beq.n	8007470 <__hexnan+0x130>
 80073ce:	454c      	cmp	r4, r9
 80073d0:	d206      	bcs.n	80073e0 <__hexnan+0xa0>
 80073d2:	2d07      	cmp	r5, #7
 80073d4:	dc04      	bgt.n	80073e0 <__hexnan+0xa0>
 80073d6:	462a      	mov	r2, r5
 80073d8:	4649      	mov	r1, r9
 80073da:	4620      	mov	r0, r4
 80073dc:	f7ff ff8a 	bl	80072f4 <L_shift>
 80073e0:	4544      	cmp	r4, r8
 80073e2:	d934      	bls.n	800744e <__hexnan+0x10e>
 80073e4:	4623      	mov	r3, r4
 80073e6:	f1a8 0204 	sub.w	r2, r8, #4
 80073ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80073ee:	429f      	cmp	r7, r3
 80073f0:	f842 1f04 	str.w	r1, [r2, #4]!
 80073f4:	d2f9      	bcs.n	80073ea <__hexnan+0xaa>
 80073f6:	1b3b      	subs	r3, r7, r4
 80073f8:	f023 0303 	bic.w	r3, r3, #3
 80073fc:	3304      	adds	r3, #4
 80073fe:	3401      	adds	r4, #1
 8007400:	3e03      	subs	r6, #3
 8007402:	42b4      	cmp	r4, r6
 8007404:	bf88      	it	hi
 8007406:	2304      	movhi	r3, #4
 8007408:	2200      	movs	r2, #0
 800740a:	4443      	add	r3, r8
 800740c:	f843 2b04 	str.w	r2, [r3], #4
 8007410:	429f      	cmp	r7, r3
 8007412:	d2fb      	bcs.n	800740c <__hexnan+0xcc>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	b91b      	cbnz	r3, 8007420 <__hexnan+0xe0>
 8007418:	4547      	cmp	r7, r8
 800741a:	d127      	bne.n	800746c <__hexnan+0x12c>
 800741c:	2301      	movs	r3, #1
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	2005      	movs	r0, #5
 8007422:	e026      	b.n	8007472 <__hexnan+0x132>
 8007424:	3501      	adds	r5, #1
 8007426:	2d08      	cmp	r5, #8
 8007428:	f10b 0b01 	add.w	fp, fp, #1
 800742c:	dd06      	ble.n	800743c <__hexnan+0xfc>
 800742e:	4544      	cmp	r4, r8
 8007430:	d9c3      	bls.n	80073ba <__hexnan+0x7a>
 8007432:	2300      	movs	r3, #0
 8007434:	2501      	movs	r5, #1
 8007436:	f844 3c04 	str.w	r3, [r4, #-4]
 800743a:	3c04      	subs	r4, #4
 800743c:	6822      	ldr	r2, [r4, #0]
 800743e:	f000 000f 	and.w	r0, r0, #15
 8007442:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007446:	6022      	str	r2, [r4, #0]
 8007448:	e7b7      	b.n	80073ba <__hexnan+0x7a>
 800744a:	2508      	movs	r5, #8
 800744c:	e7b5      	b.n	80073ba <__hexnan+0x7a>
 800744e:	9b01      	ldr	r3, [sp, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0df      	beq.n	8007414 <__hexnan+0xd4>
 8007454:	f04f 32ff 	mov.w	r2, #4294967295
 8007458:	f1c3 0320 	rsb	r3, r3, #32
 800745c:	fa22 f303 	lsr.w	r3, r2, r3
 8007460:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007464:	401a      	ands	r2, r3
 8007466:	f846 2c04 	str.w	r2, [r6, #-4]
 800746a:	e7d3      	b.n	8007414 <__hexnan+0xd4>
 800746c:	3f04      	subs	r7, #4
 800746e:	e7d1      	b.n	8007414 <__hexnan+0xd4>
 8007470:	2004      	movs	r0, #4
 8007472:	b007      	add	sp, #28
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007478 <_localeconv_r>:
 8007478:	4800      	ldr	r0, [pc, #0]	; (800747c <_localeconv_r+0x4>)
 800747a:	4770      	bx	lr
 800747c:	20000164 	.word	0x20000164

08007480 <malloc>:
 8007480:	4b02      	ldr	r3, [pc, #8]	; (800748c <malloc+0xc>)
 8007482:	4601      	mov	r1, r0
 8007484:	6818      	ldr	r0, [r3, #0]
 8007486:	f000 bd43 	b.w	8007f10 <_malloc_r>
 800748a:	bf00      	nop
 800748c:	2000000c 	.word	0x2000000c

08007490 <__ascii_mbtowc>:
 8007490:	b082      	sub	sp, #8
 8007492:	b901      	cbnz	r1, 8007496 <__ascii_mbtowc+0x6>
 8007494:	a901      	add	r1, sp, #4
 8007496:	b142      	cbz	r2, 80074aa <__ascii_mbtowc+0x1a>
 8007498:	b14b      	cbz	r3, 80074ae <__ascii_mbtowc+0x1e>
 800749a:	7813      	ldrb	r3, [r2, #0]
 800749c:	600b      	str	r3, [r1, #0]
 800749e:	7812      	ldrb	r2, [r2, #0]
 80074a0:	1e10      	subs	r0, r2, #0
 80074a2:	bf18      	it	ne
 80074a4:	2001      	movne	r0, #1
 80074a6:	b002      	add	sp, #8
 80074a8:	4770      	bx	lr
 80074aa:	4610      	mov	r0, r2
 80074ac:	e7fb      	b.n	80074a6 <__ascii_mbtowc+0x16>
 80074ae:	f06f 0001 	mvn.w	r0, #1
 80074b2:	e7f8      	b.n	80074a6 <__ascii_mbtowc+0x16>

080074b4 <memchr>:
 80074b4:	4603      	mov	r3, r0
 80074b6:	b510      	push	{r4, lr}
 80074b8:	b2c9      	uxtb	r1, r1
 80074ba:	4402      	add	r2, r0
 80074bc:	4293      	cmp	r3, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	d101      	bne.n	80074c6 <memchr+0x12>
 80074c2:	2000      	movs	r0, #0
 80074c4:	e003      	b.n	80074ce <memchr+0x1a>
 80074c6:	7804      	ldrb	r4, [r0, #0]
 80074c8:	3301      	adds	r3, #1
 80074ca:	428c      	cmp	r4, r1
 80074cc:	d1f6      	bne.n	80074bc <memchr+0x8>
 80074ce:	bd10      	pop	{r4, pc}

080074d0 <memcpy>:
 80074d0:	440a      	add	r2, r1
 80074d2:	4291      	cmp	r1, r2
 80074d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80074d8:	d100      	bne.n	80074dc <memcpy+0xc>
 80074da:	4770      	bx	lr
 80074dc:	b510      	push	{r4, lr}
 80074de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e2:	4291      	cmp	r1, r2
 80074e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074e8:	d1f9      	bne.n	80074de <memcpy+0xe>
 80074ea:	bd10      	pop	{r4, pc}

080074ec <_Balloc>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074f0:	4604      	mov	r4, r0
 80074f2:	460d      	mov	r5, r1
 80074f4:	b976      	cbnz	r6, 8007514 <_Balloc+0x28>
 80074f6:	2010      	movs	r0, #16
 80074f8:	f7ff ffc2 	bl	8007480 <malloc>
 80074fc:	4602      	mov	r2, r0
 80074fe:	6260      	str	r0, [r4, #36]	; 0x24
 8007500:	b920      	cbnz	r0, 800750c <_Balloc+0x20>
 8007502:	2166      	movs	r1, #102	; 0x66
 8007504:	4b17      	ldr	r3, [pc, #92]	; (8007564 <_Balloc+0x78>)
 8007506:	4818      	ldr	r0, [pc, #96]	; (8007568 <_Balloc+0x7c>)
 8007508:	f000 feee 	bl	80082e8 <__assert_func>
 800750c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007510:	6006      	str	r6, [r0, #0]
 8007512:	60c6      	str	r6, [r0, #12]
 8007514:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007516:	68f3      	ldr	r3, [r6, #12]
 8007518:	b183      	cbz	r3, 800753c <_Balloc+0x50>
 800751a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007522:	b9b8      	cbnz	r0, 8007554 <_Balloc+0x68>
 8007524:	2101      	movs	r1, #1
 8007526:	fa01 f605 	lsl.w	r6, r1, r5
 800752a:	1d72      	adds	r2, r6, #5
 800752c:	4620      	mov	r0, r4
 800752e:	0092      	lsls	r2, r2, #2
 8007530:	f000 fc94 	bl	8007e5c <_calloc_r>
 8007534:	b160      	cbz	r0, 8007550 <_Balloc+0x64>
 8007536:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800753a:	e00e      	b.n	800755a <_Balloc+0x6e>
 800753c:	2221      	movs	r2, #33	; 0x21
 800753e:	2104      	movs	r1, #4
 8007540:	4620      	mov	r0, r4
 8007542:	f000 fc8b 	bl	8007e5c <_calloc_r>
 8007546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007548:	60f0      	str	r0, [r6, #12]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e4      	bne.n	800751a <_Balloc+0x2e>
 8007550:	2000      	movs	r0, #0
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	6802      	ldr	r2, [r0, #0]
 8007556:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800755a:	2300      	movs	r3, #0
 800755c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007560:	e7f7      	b.n	8007552 <_Balloc+0x66>
 8007562:	bf00      	nop
 8007564:	0800902e 	.word	0x0800902e
 8007568:	08009134 	.word	0x08009134

0800756c <_Bfree>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007570:	4605      	mov	r5, r0
 8007572:	460c      	mov	r4, r1
 8007574:	b976      	cbnz	r6, 8007594 <_Bfree+0x28>
 8007576:	2010      	movs	r0, #16
 8007578:	f7ff ff82 	bl	8007480 <malloc>
 800757c:	4602      	mov	r2, r0
 800757e:	6268      	str	r0, [r5, #36]	; 0x24
 8007580:	b920      	cbnz	r0, 800758c <_Bfree+0x20>
 8007582:	218a      	movs	r1, #138	; 0x8a
 8007584:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <_Bfree+0x3c>)
 8007586:	4809      	ldr	r0, [pc, #36]	; (80075ac <_Bfree+0x40>)
 8007588:	f000 feae 	bl	80082e8 <__assert_func>
 800758c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007590:	6006      	str	r6, [r0, #0]
 8007592:	60c6      	str	r6, [r0, #12]
 8007594:	b13c      	cbz	r4, 80075a6 <_Bfree+0x3a>
 8007596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007598:	6862      	ldr	r2, [r4, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075a0:	6021      	str	r1, [r4, #0]
 80075a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075a6:	bd70      	pop	{r4, r5, r6, pc}
 80075a8:	0800902e 	.word	0x0800902e
 80075ac:	08009134 	.word	0x08009134

080075b0 <__multadd>:
 80075b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b4:	4698      	mov	r8, r3
 80075b6:	460c      	mov	r4, r1
 80075b8:	2300      	movs	r3, #0
 80075ba:	690e      	ldr	r6, [r1, #16]
 80075bc:	4607      	mov	r7, r0
 80075be:	f101 0014 	add.w	r0, r1, #20
 80075c2:	6805      	ldr	r5, [r0, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	b2a9      	uxth	r1, r5
 80075c8:	fb02 8101 	mla	r1, r2, r1, r8
 80075cc:	0c2d      	lsrs	r5, r5, #16
 80075ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80075d2:	fb02 c505 	mla	r5, r2, r5, ip
 80075d6:	b289      	uxth	r1, r1
 80075d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80075dc:	429e      	cmp	r6, r3
 80075de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80075e2:	f840 1b04 	str.w	r1, [r0], #4
 80075e6:	dcec      	bgt.n	80075c2 <__multadd+0x12>
 80075e8:	f1b8 0f00 	cmp.w	r8, #0
 80075ec:	d022      	beq.n	8007634 <__multadd+0x84>
 80075ee:	68a3      	ldr	r3, [r4, #8]
 80075f0:	42b3      	cmp	r3, r6
 80075f2:	dc19      	bgt.n	8007628 <__multadd+0x78>
 80075f4:	6861      	ldr	r1, [r4, #4]
 80075f6:	4638      	mov	r0, r7
 80075f8:	3101      	adds	r1, #1
 80075fa:	f7ff ff77 	bl	80074ec <_Balloc>
 80075fe:	4605      	mov	r5, r0
 8007600:	b928      	cbnz	r0, 800760e <__multadd+0x5e>
 8007602:	4602      	mov	r2, r0
 8007604:	21b5      	movs	r1, #181	; 0xb5
 8007606:	4b0d      	ldr	r3, [pc, #52]	; (800763c <__multadd+0x8c>)
 8007608:	480d      	ldr	r0, [pc, #52]	; (8007640 <__multadd+0x90>)
 800760a:	f000 fe6d 	bl	80082e8 <__assert_func>
 800760e:	6922      	ldr	r2, [r4, #16]
 8007610:	f104 010c 	add.w	r1, r4, #12
 8007614:	3202      	adds	r2, #2
 8007616:	0092      	lsls	r2, r2, #2
 8007618:	300c      	adds	r0, #12
 800761a:	f7ff ff59 	bl	80074d0 <memcpy>
 800761e:	4621      	mov	r1, r4
 8007620:	4638      	mov	r0, r7
 8007622:	f7ff ffa3 	bl	800756c <_Bfree>
 8007626:	462c      	mov	r4, r5
 8007628:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800762c:	3601      	adds	r6, #1
 800762e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007632:	6126      	str	r6, [r4, #16]
 8007634:	4620      	mov	r0, r4
 8007636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800763a:	bf00      	nop
 800763c:	080090a4 	.word	0x080090a4
 8007640:	08009134 	.word	0x08009134

08007644 <__s2b>:
 8007644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007648:	4615      	mov	r5, r2
 800764a:	2209      	movs	r2, #9
 800764c:	461f      	mov	r7, r3
 800764e:	3308      	adds	r3, #8
 8007650:	460c      	mov	r4, r1
 8007652:	fb93 f3f2 	sdiv	r3, r3, r2
 8007656:	4606      	mov	r6, r0
 8007658:	2201      	movs	r2, #1
 800765a:	2100      	movs	r1, #0
 800765c:	429a      	cmp	r2, r3
 800765e:	db09      	blt.n	8007674 <__s2b+0x30>
 8007660:	4630      	mov	r0, r6
 8007662:	f7ff ff43 	bl	80074ec <_Balloc>
 8007666:	b940      	cbnz	r0, 800767a <__s2b+0x36>
 8007668:	4602      	mov	r2, r0
 800766a:	21ce      	movs	r1, #206	; 0xce
 800766c:	4b18      	ldr	r3, [pc, #96]	; (80076d0 <__s2b+0x8c>)
 800766e:	4819      	ldr	r0, [pc, #100]	; (80076d4 <__s2b+0x90>)
 8007670:	f000 fe3a 	bl	80082e8 <__assert_func>
 8007674:	0052      	lsls	r2, r2, #1
 8007676:	3101      	adds	r1, #1
 8007678:	e7f0      	b.n	800765c <__s2b+0x18>
 800767a:	9b08      	ldr	r3, [sp, #32]
 800767c:	2d09      	cmp	r5, #9
 800767e:	6143      	str	r3, [r0, #20]
 8007680:	f04f 0301 	mov.w	r3, #1
 8007684:	6103      	str	r3, [r0, #16]
 8007686:	dd16      	ble.n	80076b6 <__s2b+0x72>
 8007688:	f104 0909 	add.w	r9, r4, #9
 800768c:	46c8      	mov	r8, r9
 800768e:	442c      	add	r4, r5
 8007690:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007694:	4601      	mov	r1, r0
 8007696:	220a      	movs	r2, #10
 8007698:	4630      	mov	r0, r6
 800769a:	3b30      	subs	r3, #48	; 0x30
 800769c:	f7ff ff88 	bl	80075b0 <__multadd>
 80076a0:	45a0      	cmp	r8, r4
 80076a2:	d1f5      	bne.n	8007690 <__s2b+0x4c>
 80076a4:	f1a5 0408 	sub.w	r4, r5, #8
 80076a8:	444c      	add	r4, r9
 80076aa:	1b2d      	subs	r5, r5, r4
 80076ac:	1963      	adds	r3, r4, r5
 80076ae:	42bb      	cmp	r3, r7
 80076b0:	db04      	blt.n	80076bc <__s2b+0x78>
 80076b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b6:	2509      	movs	r5, #9
 80076b8:	340a      	adds	r4, #10
 80076ba:	e7f6      	b.n	80076aa <__s2b+0x66>
 80076bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076c0:	4601      	mov	r1, r0
 80076c2:	220a      	movs	r2, #10
 80076c4:	4630      	mov	r0, r6
 80076c6:	3b30      	subs	r3, #48	; 0x30
 80076c8:	f7ff ff72 	bl	80075b0 <__multadd>
 80076cc:	e7ee      	b.n	80076ac <__s2b+0x68>
 80076ce:	bf00      	nop
 80076d0:	080090a4 	.word	0x080090a4
 80076d4:	08009134 	.word	0x08009134

080076d8 <__hi0bits>:
 80076d8:	0c02      	lsrs	r2, r0, #16
 80076da:	0412      	lsls	r2, r2, #16
 80076dc:	4603      	mov	r3, r0
 80076de:	b9ca      	cbnz	r2, 8007714 <__hi0bits+0x3c>
 80076e0:	0403      	lsls	r3, r0, #16
 80076e2:	2010      	movs	r0, #16
 80076e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80076e8:	bf04      	itt	eq
 80076ea:	021b      	lsleq	r3, r3, #8
 80076ec:	3008      	addeq	r0, #8
 80076ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80076f2:	bf04      	itt	eq
 80076f4:	011b      	lsleq	r3, r3, #4
 80076f6:	3004      	addeq	r0, #4
 80076f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80076fc:	bf04      	itt	eq
 80076fe:	009b      	lsleq	r3, r3, #2
 8007700:	3002      	addeq	r0, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	db05      	blt.n	8007712 <__hi0bits+0x3a>
 8007706:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800770a:	f100 0001 	add.w	r0, r0, #1
 800770e:	bf08      	it	eq
 8007710:	2020      	moveq	r0, #32
 8007712:	4770      	bx	lr
 8007714:	2000      	movs	r0, #0
 8007716:	e7e5      	b.n	80076e4 <__hi0bits+0xc>

08007718 <__lo0bits>:
 8007718:	6803      	ldr	r3, [r0, #0]
 800771a:	4602      	mov	r2, r0
 800771c:	f013 0007 	ands.w	r0, r3, #7
 8007720:	d00b      	beq.n	800773a <__lo0bits+0x22>
 8007722:	07d9      	lsls	r1, r3, #31
 8007724:	d422      	bmi.n	800776c <__lo0bits+0x54>
 8007726:	0798      	lsls	r0, r3, #30
 8007728:	bf49      	itett	mi
 800772a:	085b      	lsrmi	r3, r3, #1
 800772c:	089b      	lsrpl	r3, r3, #2
 800772e:	2001      	movmi	r0, #1
 8007730:	6013      	strmi	r3, [r2, #0]
 8007732:	bf5c      	itt	pl
 8007734:	2002      	movpl	r0, #2
 8007736:	6013      	strpl	r3, [r2, #0]
 8007738:	4770      	bx	lr
 800773a:	b299      	uxth	r1, r3
 800773c:	b909      	cbnz	r1, 8007742 <__lo0bits+0x2a>
 800773e:	2010      	movs	r0, #16
 8007740:	0c1b      	lsrs	r3, r3, #16
 8007742:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007746:	bf04      	itt	eq
 8007748:	0a1b      	lsreq	r3, r3, #8
 800774a:	3008      	addeq	r0, #8
 800774c:	0719      	lsls	r1, r3, #28
 800774e:	bf04      	itt	eq
 8007750:	091b      	lsreq	r3, r3, #4
 8007752:	3004      	addeq	r0, #4
 8007754:	0799      	lsls	r1, r3, #30
 8007756:	bf04      	itt	eq
 8007758:	089b      	lsreq	r3, r3, #2
 800775a:	3002      	addeq	r0, #2
 800775c:	07d9      	lsls	r1, r3, #31
 800775e:	d403      	bmi.n	8007768 <__lo0bits+0x50>
 8007760:	085b      	lsrs	r3, r3, #1
 8007762:	f100 0001 	add.w	r0, r0, #1
 8007766:	d003      	beq.n	8007770 <__lo0bits+0x58>
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	4770      	bx	lr
 800776c:	2000      	movs	r0, #0
 800776e:	4770      	bx	lr
 8007770:	2020      	movs	r0, #32
 8007772:	4770      	bx	lr

08007774 <__i2b>:
 8007774:	b510      	push	{r4, lr}
 8007776:	460c      	mov	r4, r1
 8007778:	2101      	movs	r1, #1
 800777a:	f7ff feb7 	bl	80074ec <_Balloc>
 800777e:	4602      	mov	r2, r0
 8007780:	b928      	cbnz	r0, 800778e <__i2b+0x1a>
 8007782:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007786:	4b04      	ldr	r3, [pc, #16]	; (8007798 <__i2b+0x24>)
 8007788:	4804      	ldr	r0, [pc, #16]	; (800779c <__i2b+0x28>)
 800778a:	f000 fdad 	bl	80082e8 <__assert_func>
 800778e:	2301      	movs	r3, #1
 8007790:	6144      	str	r4, [r0, #20]
 8007792:	6103      	str	r3, [r0, #16]
 8007794:	bd10      	pop	{r4, pc}
 8007796:	bf00      	nop
 8007798:	080090a4 	.word	0x080090a4
 800779c:	08009134 	.word	0x08009134

080077a0 <__multiply>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	4614      	mov	r4, r2
 80077a6:	690a      	ldr	r2, [r1, #16]
 80077a8:	6923      	ldr	r3, [r4, #16]
 80077aa:	460d      	mov	r5, r1
 80077ac:	429a      	cmp	r2, r3
 80077ae:	bfbe      	ittt	lt
 80077b0:	460b      	movlt	r3, r1
 80077b2:	4625      	movlt	r5, r4
 80077b4:	461c      	movlt	r4, r3
 80077b6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80077ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80077be:	68ab      	ldr	r3, [r5, #8]
 80077c0:	6869      	ldr	r1, [r5, #4]
 80077c2:	eb0a 0709 	add.w	r7, sl, r9
 80077c6:	42bb      	cmp	r3, r7
 80077c8:	b085      	sub	sp, #20
 80077ca:	bfb8      	it	lt
 80077cc:	3101      	addlt	r1, #1
 80077ce:	f7ff fe8d 	bl	80074ec <_Balloc>
 80077d2:	b930      	cbnz	r0, 80077e2 <__multiply+0x42>
 80077d4:	4602      	mov	r2, r0
 80077d6:	f240 115d 	movw	r1, #349	; 0x15d
 80077da:	4b41      	ldr	r3, [pc, #260]	; (80078e0 <__multiply+0x140>)
 80077dc:	4841      	ldr	r0, [pc, #260]	; (80078e4 <__multiply+0x144>)
 80077de:	f000 fd83 	bl	80082e8 <__assert_func>
 80077e2:	f100 0614 	add.w	r6, r0, #20
 80077e6:	4633      	mov	r3, r6
 80077e8:	2200      	movs	r2, #0
 80077ea:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80077ee:	4543      	cmp	r3, r8
 80077f0:	d31e      	bcc.n	8007830 <__multiply+0x90>
 80077f2:	f105 0c14 	add.w	ip, r5, #20
 80077f6:	f104 0314 	add.w	r3, r4, #20
 80077fa:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80077fe:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007802:	9202      	str	r2, [sp, #8]
 8007804:	ebac 0205 	sub.w	r2, ip, r5
 8007808:	3a15      	subs	r2, #21
 800780a:	f022 0203 	bic.w	r2, r2, #3
 800780e:	3204      	adds	r2, #4
 8007810:	f105 0115 	add.w	r1, r5, #21
 8007814:	458c      	cmp	ip, r1
 8007816:	bf38      	it	cc
 8007818:	2204      	movcc	r2, #4
 800781a:	9201      	str	r2, [sp, #4]
 800781c:	9a02      	ldr	r2, [sp, #8]
 800781e:	9303      	str	r3, [sp, #12]
 8007820:	429a      	cmp	r2, r3
 8007822:	d808      	bhi.n	8007836 <__multiply+0x96>
 8007824:	2f00      	cmp	r7, #0
 8007826:	dc55      	bgt.n	80078d4 <__multiply+0x134>
 8007828:	6107      	str	r7, [r0, #16]
 800782a:	b005      	add	sp, #20
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	f843 2b04 	str.w	r2, [r3], #4
 8007834:	e7db      	b.n	80077ee <__multiply+0x4e>
 8007836:	f8b3 a000 	ldrh.w	sl, [r3]
 800783a:	f1ba 0f00 	cmp.w	sl, #0
 800783e:	d020      	beq.n	8007882 <__multiply+0xe2>
 8007840:	46b1      	mov	r9, r6
 8007842:	2200      	movs	r2, #0
 8007844:	f105 0e14 	add.w	lr, r5, #20
 8007848:	f85e 4b04 	ldr.w	r4, [lr], #4
 800784c:	f8d9 b000 	ldr.w	fp, [r9]
 8007850:	b2a1      	uxth	r1, r4
 8007852:	fa1f fb8b 	uxth.w	fp, fp
 8007856:	fb0a b101 	mla	r1, sl, r1, fp
 800785a:	4411      	add	r1, r2
 800785c:	f8d9 2000 	ldr.w	r2, [r9]
 8007860:	0c24      	lsrs	r4, r4, #16
 8007862:	0c12      	lsrs	r2, r2, #16
 8007864:	fb0a 2404 	mla	r4, sl, r4, r2
 8007868:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800786c:	b289      	uxth	r1, r1
 800786e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007872:	45f4      	cmp	ip, lr
 8007874:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007878:	f849 1b04 	str.w	r1, [r9], #4
 800787c:	d8e4      	bhi.n	8007848 <__multiply+0xa8>
 800787e:	9901      	ldr	r1, [sp, #4]
 8007880:	5072      	str	r2, [r6, r1]
 8007882:	9a03      	ldr	r2, [sp, #12]
 8007884:	3304      	adds	r3, #4
 8007886:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800788a:	f1b9 0f00 	cmp.w	r9, #0
 800788e:	d01f      	beq.n	80078d0 <__multiply+0x130>
 8007890:	46b6      	mov	lr, r6
 8007892:	f04f 0a00 	mov.w	sl, #0
 8007896:	6834      	ldr	r4, [r6, #0]
 8007898:	f105 0114 	add.w	r1, r5, #20
 800789c:	880a      	ldrh	r2, [r1, #0]
 800789e:	f8be b002 	ldrh.w	fp, [lr, #2]
 80078a2:	b2a4      	uxth	r4, r4
 80078a4:	fb09 b202 	mla	r2, r9, r2, fp
 80078a8:	4492      	add	sl, r2
 80078aa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80078ae:	f84e 4b04 	str.w	r4, [lr], #4
 80078b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80078b6:	f8be 2000 	ldrh.w	r2, [lr]
 80078ba:	0c24      	lsrs	r4, r4, #16
 80078bc:	fb09 2404 	mla	r4, r9, r4, r2
 80078c0:	458c      	cmp	ip, r1
 80078c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80078c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078ca:	d8e7      	bhi.n	800789c <__multiply+0xfc>
 80078cc:	9a01      	ldr	r2, [sp, #4]
 80078ce:	50b4      	str	r4, [r6, r2]
 80078d0:	3604      	adds	r6, #4
 80078d2:	e7a3      	b.n	800781c <__multiply+0x7c>
 80078d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1a5      	bne.n	8007828 <__multiply+0x88>
 80078dc:	3f01      	subs	r7, #1
 80078de:	e7a1      	b.n	8007824 <__multiply+0x84>
 80078e0:	080090a4 	.word	0x080090a4
 80078e4:	08009134 	.word	0x08009134

080078e8 <__pow5mult>:
 80078e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ec:	4615      	mov	r5, r2
 80078ee:	f012 0203 	ands.w	r2, r2, #3
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	d007      	beq.n	8007908 <__pow5mult+0x20>
 80078f8:	4c25      	ldr	r4, [pc, #148]	; (8007990 <__pow5mult+0xa8>)
 80078fa:	3a01      	subs	r2, #1
 80078fc:	2300      	movs	r3, #0
 80078fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007902:	f7ff fe55 	bl	80075b0 <__multadd>
 8007906:	4607      	mov	r7, r0
 8007908:	10ad      	asrs	r5, r5, #2
 800790a:	d03d      	beq.n	8007988 <__pow5mult+0xa0>
 800790c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800790e:	b97c      	cbnz	r4, 8007930 <__pow5mult+0x48>
 8007910:	2010      	movs	r0, #16
 8007912:	f7ff fdb5 	bl	8007480 <malloc>
 8007916:	4602      	mov	r2, r0
 8007918:	6270      	str	r0, [r6, #36]	; 0x24
 800791a:	b928      	cbnz	r0, 8007928 <__pow5mult+0x40>
 800791c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007920:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <__pow5mult+0xac>)
 8007922:	481d      	ldr	r0, [pc, #116]	; (8007998 <__pow5mult+0xb0>)
 8007924:	f000 fce0 	bl	80082e8 <__assert_func>
 8007928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800792c:	6004      	str	r4, [r0, #0]
 800792e:	60c4      	str	r4, [r0, #12]
 8007930:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007938:	b94c      	cbnz	r4, 800794e <__pow5mult+0x66>
 800793a:	f240 2171 	movw	r1, #625	; 0x271
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff ff18 	bl	8007774 <__i2b>
 8007944:	2300      	movs	r3, #0
 8007946:	4604      	mov	r4, r0
 8007948:	f8c8 0008 	str.w	r0, [r8, #8]
 800794c:	6003      	str	r3, [r0, #0]
 800794e:	f04f 0900 	mov.w	r9, #0
 8007952:	07eb      	lsls	r3, r5, #31
 8007954:	d50a      	bpl.n	800796c <__pow5mult+0x84>
 8007956:	4639      	mov	r1, r7
 8007958:	4622      	mov	r2, r4
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff ff20 	bl	80077a0 <__multiply>
 8007960:	4680      	mov	r8, r0
 8007962:	4639      	mov	r1, r7
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff fe01 	bl	800756c <_Bfree>
 800796a:	4647      	mov	r7, r8
 800796c:	106d      	asrs	r5, r5, #1
 800796e:	d00b      	beq.n	8007988 <__pow5mult+0xa0>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	b938      	cbnz	r0, 8007984 <__pow5mult+0x9c>
 8007974:	4622      	mov	r2, r4
 8007976:	4621      	mov	r1, r4
 8007978:	4630      	mov	r0, r6
 800797a:	f7ff ff11 	bl	80077a0 <__multiply>
 800797e:	6020      	str	r0, [r4, #0]
 8007980:	f8c0 9000 	str.w	r9, [r0]
 8007984:	4604      	mov	r4, r0
 8007986:	e7e4      	b.n	8007952 <__pow5mult+0x6a>
 8007988:	4638      	mov	r0, r7
 800798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798e:	bf00      	nop
 8007990:	08009288 	.word	0x08009288
 8007994:	0800902e 	.word	0x0800902e
 8007998:	08009134 	.word	0x08009134

0800799c <__lshift>:
 800799c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	460c      	mov	r4, r1
 80079a2:	4607      	mov	r7, r0
 80079a4:	4691      	mov	r9, r2
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	6849      	ldr	r1, [r1, #4]
 80079aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079b4:	f108 0601 	add.w	r6, r8, #1
 80079b8:	42b3      	cmp	r3, r6
 80079ba:	db0b      	blt.n	80079d4 <__lshift+0x38>
 80079bc:	4638      	mov	r0, r7
 80079be:	f7ff fd95 	bl	80074ec <_Balloc>
 80079c2:	4605      	mov	r5, r0
 80079c4:	b948      	cbnz	r0, 80079da <__lshift+0x3e>
 80079c6:	4602      	mov	r2, r0
 80079c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079cc:	4b27      	ldr	r3, [pc, #156]	; (8007a6c <__lshift+0xd0>)
 80079ce:	4828      	ldr	r0, [pc, #160]	; (8007a70 <__lshift+0xd4>)
 80079d0:	f000 fc8a 	bl	80082e8 <__assert_func>
 80079d4:	3101      	adds	r1, #1
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	e7ee      	b.n	80079b8 <__lshift+0x1c>
 80079da:	2300      	movs	r3, #0
 80079dc:	f100 0114 	add.w	r1, r0, #20
 80079e0:	f100 0210 	add.w	r2, r0, #16
 80079e4:	4618      	mov	r0, r3
 80079e6:	4553      	cmp	r3, sl
 80079e8:	db33      	blt.n	8007a52 <__lshift+0xb6>
 80079ea:	6920      	ldr	r0, [r4, #16]
 80079ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079f0:	f104 0314 	add.w	r3, r4, #20
 80079f4:	f019 091f 	ands.w	r9, r9, #31
 80079f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a00:	d02b      	beq.n	8007a5a <__lshift+0xbe>
 8007a02:	468a      	mov	sl, r1
 8007a04:	2200      	movs	r2, #0
 8007a06:	f1c9 0e20 	rsb	lr, r9, #32
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007a10:	4302      	orrs	r2, r0
 8007a12:	f84a 2b04 	str.w	r2, [sl], #4
 8007a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a1a:	459c      	cmp	ip, r3
 8007a1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a20:	d8f3      	bhi.n	8007a0a <__lshift+0x6e>
 8007a22:	ebac 0304 	sub.w	r3, ip, r4
 8007a26:	3b15      	subs	r3, #21
 8007a28:	f023 0303 	bic.w	r3, r3, #3
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	f104 0015 	add.w	r0, r4, #21
 8007a32:	4584      	cmp	ip, r0
 8007a34:	bf38      	it	cc
 8007a36:	2304      	movcc	r3, #4
 8007a38:	50ca      	str	r2, [r1, r3]
 8007a3a:	b10a      	cbz	r2, 8007a40 <__lshift+0xa4>
 8007a3c:	f108 0602 	add.w	r6, r8, #2
 8007a40:	3e01      	subs	r6, #1
 8007a42:	4638      	mov	r0, r7
 8007a44:	4621      	mov	r1, r4
 8007a46:	612e      	str	r6, [r5, #16]
 8007a48:	f7ff fd90 	bl	800756c <_Bfree>
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a56:	3301      	adds	r3, #1
 8007a58:	e7c5      	b.n	80079e6 <__lshift+0x4a>
 8007a5a:	3904      	subs	r1, #4
 8007a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a60:	459c      	cmp	ip, r3
 8007a62:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a66:	d8f9      	bhi.n	8007a5c <__lshift+0xc0>
 8007a68:	e7ea      	b.n	8007a40 <__lshift+0xa4>
 8007a6a:	bf00      	nop
 8007a6c:	080090a4 	.word	0x080090a4
 8007a70:	08009134 	.word	0x08009134

08007a74 <__mcmp>:
 8007a74:	4603      	mov	r3, r0
 8007a76:	690a      	ldr	r2, [r1, #16]
 8007a78:	6900      	ldr	r0, [r0, #16]
 8007a7a:	b530      	push	{r4, r5, lr}
 8007a7c:	1a80      	subs	r0, r0, r2
 8007a7e:	d10d      	bne.n	8007a9c <__mcmp+0x28>
 8007a80:	3314      	adds	r3, #20
 8007a82:	3114      	adds	r1, #20
 8007a84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a94:	4295      	cmp	r5, r2
 8007a96:	d002      	beq.n	8007a9e <__mcmp+0x2a>
 8007a98:	d304      	bcc.n	8007aa4 <__mcmp+0x30>
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	bd30      	pop	{r4, r5, pc}
 8007a9e:	42a3      	cmp	r3, r4
 8007aa0:	d3f4      	bcc.n	8007a8c <__mcmp+0x18>
 8007aa2:	e7fb      	b.n	8007a9c <__mcmp+0x28>
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa8:	e7f8      	b.n	8007a9c <__mcmp+0x28>
	...

08007aac <__mdiff>:
 8007aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4692      	mov	sl, r2
 8007aba:	f7ff ffdb 	bl	8007a74 <__mcmp>
 8007abe:	1e05      	subs	r5, r0, #0
 8007ac0:	d111      	bne.n	8007ae6 <__mdiff+0x3a>
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	f7ff fd11 	bl	80074ec <_Balloc>
 8007aca:	4602      	mov	r2, r0
 8007acc:	b928      	cbnz	r0, 8007ada <__mdiff+0x2e>
 8007ace:	f240 2132 	movw	r1, #562	; 0x232
 8007ad2:	4b3c      	ldr	r3, [pc, #240]	; (8007bc4 <__mdiff+0x118>)
 8007ad4:	483c      	ldr	r0, [pc, #240]	; (8007bc8 <__mdiff+0x11c>)
 8007ad6:	f000 fc07 	bl	80082e8 <__assert_func>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae6:	bfa4      	itt	ge
 8007ae8:	4653      	movge	r3, sl
 8007aea:	46a2      	movge	sl, r4
 8007aec:	4630      	mov	r0, r6
 8007aee:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007af2:	bfa6      	itte	ge
 8007af4:	461c      	movge	r4, r3
 8007af6:	2500      	movge	r5, #0
 8007af8:	2501      	movlt	r5, #1
 8007afa:	f7ff fcf7 	bl	80074ec <_Balloc>
 8007afe:	4602      	mov	r2, r0
 8007b00:	b918      	cbnz	r0, 8007b0a <__mdiff+0x5e>
 8007b02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b06:	4b2f      	ldr	r3, [pc, #188]	; (8007bc4 <__mdiff+0x118>)
 8007b08:	e7e4      	b.n	8007ad4 <__mdiff+0x28>
 8007b0a:	f100 0814 	add.w	r8, r0, #20
 8007b0e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007b12:	60c5      	str	r5, [r0, #12]
 8007b14:	f04f 0c00 	mov.w	ip, #0
 8007b18:	f10a 0514 	add.w	r5, sl, #20
 8007b1c:	f10a 0010 	add.w	r0, sl, #16
 8007b20:	46c2      	mov	sl, r8
 8007b22:	6926      	ldr	r6, [r4, #16]
 8007b24:	f104 0914 	add.w	r9, r4, #20
 8007b28:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007b2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b30:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007b34:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b38:	fa1f f18b 	uxth.w	r1, fp
 8007b3c:	4461      	add	r1, ip
 8007b3e:	fa1f fc83 	uxth.w	ip, r3
 8007b42:	0c1b      	lsrs	r3, r3, #16
 8007b44:	eba1 010c 	sub.w	r1, r1, ip
 8007b48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b4c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b50:	b289      	uxth	r1, r1
 8007b52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007b56:	454e      	cmp	r6, r9
 8007b58:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007b5c:	f84a 3b04 	str.w	r3, [sl], #4
 8007b60:	d8e6      	bhi.n	8007b30 <__mdiff+0x84>
 8007b62:	1b33      	subs	r3, r6, r4
 8007b64:	3b15      	subs	r3, #21
 8007b66:	f023 0303 	bic.w	r3, r3, #3
 8007b6a:	3415      	adds	r4, #21
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	42a6      	cmp	r6, r4
 8007b70:	bf38      	it	cc
 8007b72:	2304      	movcc	r3, #4
 8007b74:	441d      	add	r5, r3
 8007b76:	4443      	add	r3, r8
 8007b78:	461e      	mov	r6, r3
 8007b7a:	462c      	mov	r4, r5
 8007b7c:	4574      	cmp	r4, lr
 8007b7e:	d30e      	bcc.n	8007b9e <__mdiff+0xf2>
 8007b80:	f10e 0103 	add.w	r1, lr, #3
 8007b84:	1b49      	subs	r1, r1, r5
 8007b86:	f021 0103 	bic.w	r1, r1, #3
 8007b8a:	3d03      	subs	r5, #3
 8007b8c:	45ae      	cmp	lr, r5
 8007b8e:	bf38      	it	cc
 8007b90:	2100      	movcc	r1, #0
 8007b92:	4419      	add	r1, r3
 8007b94:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007b98:	b18b      	cbz	r3, 8007bbe <__mdiff+0x112>
 8007b9a:	6117      	str	r7, [r2, #16]
 8007b9c:	e7a0      	b.n	8007ae0 <__mdiff+0x34>
 8007b9e:	f854 8b04 	ldr.w	r8, [r4], #4
 8007ba2:	fa1f f188 	uxth.w	r1, r8
 8007ba6:	4461      	add	r1, ip
 8007ba8:	1408      	asrs	r0, r1, #16
 8007baa:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007bae:	b289      	uxth	r1, r1
 8007bb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007bb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bb8:	f846 1b04 	str.w	r1, [r6], #4
 8007bbc:	e7de      	b.n	8007b7c <__mdiff+0xd0>
 8007bbe:	3f01      	subs	r7, #1
 8007bc0:	e7e8      	b.n	8007b94 <__mdiff+0xe8>
 8007bc2:	bf00      	nop
 8007bc4:	080090a4 	.word	0x080090a4
 8007bc8:	08009134 	.word	0x08009134

08007bcc <__ulp>:
 8007bcc:	4b11      	ldr	r3, [pc, #68]	; (8007c14 <__ulp+0x48>)
 8007bce:	400b      	ands	r3, r1
 8007bd0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd02      	ble.n	8007bde <__ulp+0x12>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4770      	bx	lr
 8007bde:	425b      	negs	r3, r3
 8007be0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007be4:	f04f 0000 	mov.w	r0, #0
 8007be8:	f04f 0100 	mov.w	r1, #0
 8007bec:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007bf0:	da04      	bge.n	8007bfc <__ulp+0x30>
 8007bf2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007bf6:	fa43 f102 	asr.w	r1, r3, r2
 8007bfa:	4770      	bx	lr
 8007bfc:	f1a2 0314 	sub.w	r3, r2, #20
 8007c00:	2b1e      	cmp	r3, #30
 8007c02:	bfd6      	itet	le
 8007c04:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007c08:	2301      	movgt	r3, #1
 8007c0a:	fa22 f303 	lsrle.w	r3, r2, r3
 8007c0e:	4618      	mov	r0, r3
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	7ff00000 	.word	0x7ff00000

08007c18 <__b2d>:
 8007c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c1c:	6907      	ldr	r7, [r0, #16]
 8007c1e:	f100 0914 	add.w	r9, r0, #20
 8007c22:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007c26:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007c2a:	f1a7 0804 	sub.w	r8, r7, #4
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7ff fd52 	bl	80076d8 <__hi0bits>
 8007c34:	f1c0 0320 	rsb	r3, r0, #32
 8007c38:	280a      	cmp	r0, #10
 8007c3a:	600b      	str	r3, [r1, #0]
 8007c3c:	491f      	ldr	r1, [pc, #124]	; (8007cbc <__b2d+0xa4>)
 8007c3e:	dc17      	bgt.n	8007c70 <__b2d+0x58>
 8007c40:	45c1      	cmp	r9, r8
 8007c42:	bf28      	it	cs
 8007c44:	2200      	movcs	r2, #0
 8007c46:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c4a:	fa26 f30c 	lsr.w	r3, r6, ip
 8007c4e:	bf38      	it	cc
 8007c50:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007c54:	ea43 0501 	orr.w	r5, r3, r1
 8007c58:	f100 0315 	add.w	r3, r0, #21
 8007c5c:	fa06 f303 	lsl.w	r3, r6, r3
 8007c60:	fa22 f20c 	lsr.w	r2, r2, ip
 8007c64:	ea43 0402 	orr.w	r4, r3, r2
 8007c68:	4620      	mov	r0, r4
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c70:	45c1      	cmp	r9, r8
 8007c72:	bf2e      	itee	cs
 8007c74:	2200      	movcs	r2, #0
 8007c76:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007c7a:	f1a7 0808 	subcc.w	r8, r7, #8
 8007c7e:	f1b0 030b 	subs.w	r3, r0, #11
 8007c82:	d016      	beq.n	8007cb2 <__b2d+0x9a>
 8007c84:	f1c3 0720 	rsb	r7, r3, #32
 8007c88:	fa22 f107 	lsr.w	r1, r2, r7
 8007c8c:	45c8      	cmp	r8, r9
 8007c8e:	fa06 f603 	lsl.w	r6, r6, r3
 8007c92:	ea46 0601 	orr.w	r6, r6, r1
 8007c96:	bf94      	ite	ls
 8007c98:	2100      	movls	r1, #0
 8007c9a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007c9e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007ca2:	fa02 f003 	lsl.w	r0, r2, r3
 8007ca6:	40f9      	lsrs	r1, r7
 8007ca8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007cac:	ea40 0401 	orr.w	r4, r0, r1
 8007cb0:	e7da      	b.n	8007c68 <__b2d+0x50>
 8007cb2:	4614      	mov	r4, r2
 8007cb4:	ea46 0501 	orr.w	r5, r6, r1
 8007cb8:	e7d6      	b.n	8007c68 <__b2d+0x50>
 8007cba:	bf00      	nop
 8007cbc:	3ff00000 	.word	0x3ff00000

08007cc0 <__d2b>:
 8007cc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007cca:	4690      	mov	r8, r2
 8007ccc:	461d      	mov	r5, r3
 8007cce:	f7ff fc0d 	bl	80074ec <_Balloc>
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	b930      	cbnz	r0, 8007ce4 <__d2b+0x24>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	f240 310a 	movw	r1, #778	; 0x30a
 8007cdc:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <__d2b+0xb0>)
 8007cde:	4825      	ldr	r0, [pc, #148]	; (8007d74 <__d2b+0xb4>)
 8007ce0:	f000 fb02 	bl	80082e8 <__assert_func>
 8007ce4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007ce8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007cec:	bb2d      	cbnz	r5, 8007d3a <__d2b+0x7a>
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	f1b8 0300 	subs.w	r3, r8, #0
 8007cf4:	d026      	beq.n	8007d44 <__d2b+0x84>
 8007cf6:	4668      	mov	r0, sp
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	f7ff fd0d 	bl	8007718 <__lo0bits>
 8007cfe:	9900      	ldr	r1, [sp, #0]
 8007d00:	b1f0      	cbz	r0, 8007d40 <__d2b+0x80>
 8007d02:	9a01      	ldr	r2, [sp, #4]
 8007d04:	f1c0 0320 	rsb	r3, r0, #32
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	40c2      	lsrs	r2, r0
 8007d10:	6163      	str	r3, [r4, #20]
 8007d12:	9201      	str	r2, [sp, #4]
 8007d14:	9b01      	ldr	r3, [sp, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	bf14      	ite	ne
 8007d1a:	2102      	movne	r1, #2
 8007d1c:	2101      	moveq	r1, #1
 8007d1e:	61a3      	str	r3, [r4, #24]
 8007d20:	6121      	str	r1, [r4, #16]
 8007d22:	b1c5      	cbz	r5, 8007d56 <__d2b+0x96>
 8007d24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d28:	4405      	add	r5, r0
 8007d2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d2e:	603d      	str	r5, [r7, #0]
 8007d30:	6030      	str	r0, [r6, #0]
 8007d32:	4620      	mov	r0, r4
 8007d34:	b002      	add	sp, #8
 8007d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d3e:	e7d6      	b.n	8007cee <__d2b+0x2e>
 8007d40:	6161      	str	r1, [r4, #20]
 8007d42:	e7e7      	b.n	8007d14 <__d2b+0x54>
 8007d44:	a801      	add	r0, sp, #4
 8007d46:	f7ff fce7 	bl	8007718 <__lo0bits>
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	9b01      	ldr	r3, [sp, #4]
 8007d4e:	6121      	str	r1, [r4, #16]
 8007d50:	6163      	str	r3, [r4, #20]
 8007d52:	3020      	adds	r0, #32
 8007d54:	e7e5      	b.n	8007d22 <__d2b+0x62>
 8007d56:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007d5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d5e:	6038      	str	r0, [r7, #0]
 8007d60:	6918      	ldr	r0, [r3, #16]
 8007d62:	f7ff fcb9 	bl	80076d8 <__hi0bits>
 8007d66:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007d6a:	6031      	str	r1, [r6, #0]
 8007d6c:	e7e1      	b.n	8007d32 <__d2b+0x72>
 8007d6e:	bf00      	nop
 8007d70:	080090a4 	.word	0x080090a4
 8007d74:	08009134 	.word	0x08009134

08007d78 <__ratio>:
 8007d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	4688      	mov	r8, r1
 8007d7e:	4669      	mov	r1, sp
 8007d80:	4681      	mov	r9, r0
 8007d82:	f7ff ff49 	bl	8007c18 <__b2d>
 8007d86:	460f      	mov	r7, r1
 8007d88:	4604      	mov	r4, r0
 8007d8a:	460d      	mov	r5, r1
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	a901      	add	r1, sp, #4
 8007d90:	f7ff ff42 	bl	8007c18 <__b2d>
 8007d94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d98:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d9c:	468b      	mov	fp, r1
 8007d9e:	eba3 0c02 	sub.w	ip, r3, r2
 8007da2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bfd5      	itete	le
 8007db0:	460a      	movle	r2, r1
 8007db2:	462a      	movgt	r2, r5
 8007db4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007db8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007dbc:	bfd8      	it	le
 8007dbe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007dc2:	465b      	mov	r3, fp
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f7f8 fcaf 	bl	800072c <__aeabi_ddiv>
 8007dce:	b003      	add	sp, #12
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dd4 <__copybits>:
 8007dd4:	3901      	subs	r1, #1
 8007dd6:	b570      	push	{r4, r5, r6, lr}
 8007dd8:	1149      	asrs	r1, r1, #5
 8007dda:	6914      	ldr	r4, [r2, #16]
 8007ddc:	3101      	adds	r1, #1
 8007dde:	f102 0314 	add.w	r3, r2, #20
 8007de2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007de6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007dea:	1f05      	subs	r5, r0, #4
 8007dec:	42a3      	cmp	r3, r4
 8007dee:	d30c      	bcc.n	8007e0a <__copybits+0x36>
 8007df0:	1aa3      	subs	r3, r4, r2
 8007df2:	3b11      	subs	r3, #17
 8007df4:	f023 0303 	bic.w	r3, r3, #3
 8007df8:	3211      	adds	r2, #17
 8007dfa:	42a2      	cmp	r2, r4
 8007dfc:	bf88      	it	hi
 8007dfe:	2300      	movhi	r3, #0
 8007e00:	4418      	add	r0, r3
 8007e02:	2300      	movs	r3, #0
 8007e04:	4288      	cmp	r0, r1
 8007e06:	d305      	bcc.n	8007e14 <__copybits+0x40>
 8007e08:	bd70      	pop	{r4, r5, r6, pc}
 8007e0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e12:	e7eb      	b.n	8007dec <__copybits+0x18>
 8007e14:	f840 3b04 	str.w	r3, [r0], #4
 8007e18:	e7f4      	b.n	8007e04 <__copybits+0x30>

08007e1a <__any_on>:
 8007e1a:	f100 0214 	add.w	r2, r0, #20
 8007e1e:	6900      	ldr	r0, [r0, #16]
 8007e20:	114b      	asrs	r3, r1, #5
 8007e22:	4298      	cmp	r0, r3
 8007e24:	b510      	push	{r4, lr}
 8007e26:	db11      	blt.n	8007e4c <__any_on+0x32>
 8007e28:	dd0a      	ble.n	8007e40 <__any_on+0x26>
 8007e2a:	f011 011f 	ands.w	r1, r1, #31
 8007e2e:	d007      	beq.n	8007e40 <__any_on+0x26>
 8007e30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e34:	fa24 f001 	lsr.w	r0, r4, r1
 8007e38:	fa00 f101 	lsl.w	r1, r0, r1
 8007e3c:	428c      	cmp	r4, r1
 8007e3e:	d10b      	bne.n	8007e58 <__any_on+0x3e>
 8007e40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d803      	bhi.n	8007e50 <__any_on+0x36>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	bd10      	pop	{r4, pc}
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	e7f7      	b.n	8007e40 <__any_on+0x26>
 8007e50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d0f5      	beq.n	8007e44 <__any_on+0x2a>
 8007e58:	2001      	movs	r0, #1
 8007e5a:	e7f6      	b.n	8007e4a <__any_on+0x30>

08007e5c <_calloc_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	fb02 f501 	mul.w	r5, r2, r1
 8007e62:	4629      	mov	r1, r5
 8007e64:	f000 f854 	bl	8007f10 <_malloc_r>
 8007e68:	4604      	mov	r4, r0
 8007e6a:	b118      	cbz	r0, 8007e74 <_calloc_r+0x18>
 8007e6c:	462a      	mov	r2, r5
 8007e6e:	2100      	movs	r1, #0
 8007e70:	f7fc fbdc 	bl	800462c <memset>
 8007e74:	4620      	mov	r0, r4
 8007e76:	bd38      	pop	{r3, r4, r5, pc}

08007e78 <_free_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	d043      	beq.n	8007f08 <_free_r+0x90>
 8007e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e84:	1f0c      	subs	r4, r1, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bfb8      	it	lt
 8007e8a:	18e4      	addlt	r4, r4, r3
 8007e8c:	f000 fa76 	bl	800837c <__malloc_lock>
 8007e90:	4a1e      	ldr	r2, [pc, #120]	; (8007f0c <_free_r+0x94>)
 8007e92:	6813      	ldr	r3, [r2, #0]
 8007e94:	4610      	mov	r0, r2
 8007e96:	b933      	cbnz	r3, 8007ea6 <_free_r+0x2e>
 8007e98:	6063      	str	r3, [r4, #4]
 8007e9a:	6014      	str	r4, [r2, #0]
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea2:	f000 ba71 	b.w	8008388 <__malloc_unlock>
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	d90a      	bls.n	8007ec0 <_free_r+0x48>
 8007eaa:	6821      	ldr	r1, [r4, #0]
 8007eac:	1862      	adds	r2, r4, r1
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	bf01      	itttt	eq
 8007eb2:	681a      	ldreq	r2, [r3, #0]
 8007eb4:	685b      	ldreq	r3, [r3, #4]
 8007eb6:	1852      	addeq	r2, r2, r1
 8007eb8:	6022      	streq	r2, [r4, #0]
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	6004      	str	r4, [r0, #0]
 8007ebe:	e7ed      	b.n	8007e9c <_free_r+0x24>
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	b10b      	cbz	r3, 8007eca <_free_r+0x52>
 8007ec6:	42a3      	cmp	r3, r4
 8007ec8:	d9fa      	bls.n	8007ec0 <_free_r+0x48>
 8007eca:	6811      	ldr	r1, [r2, #0]
 8007ecc:	1850      	adds	r0, r2, r1
 8007ece:	42a0      	cmp	r0, r4
 8007ed0:	d10b      	bne.n	8007eea <_free_r+0x72>
 8007ed2:	6820      	ldr	r0, [r4, #0]
 8007ed4:	4401      	add	r1, r0
 8007ed6:	1850      	adds	r0, r2, r1
 8007ed8:	4283      	cmp	r3, r0
 8007eda:	6011      	str	r1, [r2, #0]
 8007edc:	d1de      	bne.n	8007e9c <_free_r+0x24>
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	4401      	add	r1, r0
 8007ee4:	6011      	str	r1, [r2, #0]
 8007ee6:	6053      	str	r3, [r2, #4]
 8007ee8:	e7d8      	b.n	8007e9c <_free_r+0x24>
 8007eea:	d902      	bls.n	8007ef2 <_free_r+0x7a>
 8007eec:	230c      	movs	r3, #12
 8007eee:	602b      	str	r3, [r5, #0]
 8007ef0:	e7d4      	b.n	8007e9c <_free_r+0x24>
 8007ef2:	6820      	ldr	r0, [r4, #0]
 8007ef4:	1821      	adds	r1, r4, r0
 8007ef6:	428b      	cmp	r3, r1
 8007ef8:	bf01      	itttt	eq
 8007efa:	6819      	ldreq	r1, [r3, #0]
 8007efc:	685b      	ldreq	r3, [r3, #4]
 8007efe:	1809      	addeq	r1, r1, r0
 8007f00:	6021      	streq	r1, [r4, #0]
 8007f02:	6063      	str	r3, [r4, #4]
 8007f04:	6054      	str	r4, [r2, #4]
 8007f06:	e7c9      	b.n	8007e9c <_free_r+0x24>
 8007f08:	bd38      	pop	{r3, r4, r5, pc}
 8007f0a:	bf00      	nop
 8007f0c:	2000025c 	.word	0x2000025c

08007f10 <_malloc_r>:
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	1ccd      	adds	r5, r1, #3
 8007f14:	f025 0503 	bic.w	r5, r5, #3
 8007f18:	3508      	adds	r5, #8
 8007f1a:	2d0c      	cmp	r5, #12
 8007f1c:	bf38      	it	cc
 8007f1e:	250c      	movcc	r5, #12
 8007f20:	2d00      	cmp	r5, #0
 8007f22:	4606      	mov	r6, r0
 8007f24:	db01      	blt.n	8007f2a <_malloc_r+0x1a>
 8007f26:	42a9      	cmp	r1, r5
 8007f28:	d903      	bls.n	8007f32 <_malloc_r+0x22>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	6033      	str	r3, [r6, #0]
 8007f2e:	2000      	movs	r0, #0
 8007f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f32:	f000 fa23 	bl	800837c <__malloc_lock>
 8007f36:	4921      	ldr	r1, [pc, #132]	; (8007fbc <_malloc_r+0xac>)
 8007f38:	680a      	ldr	r2, [r1, #0]
 8007f3a:	4614      	mov	r4, r2
 8007f3c:	b99c      	cbnz	r4, 8007f66 <_malloc_r+0x56>
 8007f3e:	4f20      	ldr	r7, [pc, #128]	; (8007fc0 <_malloc_r+0xb0>)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	b923      	cbnz	r3, 8007f4e <_malloc_r+0x3e>
 8007f44:	4621      	mov	r1, r4
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 f99e 	bl	8008288 <_sbrk_r>
 8007f4c:	6038      	str	r0, [r7, #0]
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4630      	mov	r0, r6
 8007f52:	f000 f999 	bl	8008288 <_sbrk_r>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d123      	bne.n	8007fa2 <_malloc_r+0x92>
 8007f5a:	230c      	movs	r3, #12
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	6033      	str	r3, [r6, #0]
 8007f60:	f000 fa12 	bl	8008388 <__malloc_unlock>
 8007f64:	e7e3      	b.n	8007f2e <_malloc_r+0x1e>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	1b5b      	subs	r3, r3, r5
 8007f6a:	d417      	bmi.n	8007f9c <_malloc_r+0x8c>
 8007f6c:	2b0b      	cmp	r3, #11
 8007f6e:	d903      	bls.n	8007f78 <_malloc_r+0x68>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	441c      	add	r4, r3
 8007f74:	6025      	str	r5, [r4, #0]
 8007f76:	e004      	b.n	8007f82 <_malloc_r+0x72>
 8007f78:	6863      	ldr	r3, [r4, #4]
 8007f7a:	42a2      	cmp	r2, r4
 8007f7c:	bf0c      	ite	eq
 8007f7e:	600b      	streq	r3, [r1, #0]
 8007f80:	6053      	strne	r3, [r2, #4]
 8007f82:	4630      	mov	r0, r6
 8007f84:	f000 fa00 	bl	8008388 <__malloc_unlock>
 8007f88:	f104 000b 	add.w	r0, r4, #11
 8007f8c:	1d23      	adds	r3, r4, #4
 8007f8e:	f020 0007 	bic.w	r0, r0, #7
 8007f92:	1ac2      	subs	r2, r0, r3
 8007f94:	d0cc      	beq.n	8007f30 <_malloc_r+0x20>
 8007f96:	1a1b      	subs	r3, r3, r0
 8007f98:	50a3      	str	r3, [r4, r2]
 8007f9a:	e7c9      	b.n	8007f30 <_malloc_r+0x20>
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	6864      	ldr	r4, [r4, #4]
 8007fa0:	e7cc      	b.n	8007f3c <_malloc_r+0x2c>
 8007fa2:	1cc4      	adds	r4, r0, #3
 8007fa4:	f024 0403 	bic.w	r4, r4, #3
 8007fa8:	42a0      	cmp	r0, r4
 8007faa:	d0e3      	beq.n	8007f74 <_malloc_r+0x64>
 8007fac:	1a21      	subs	r1, r4, r0
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f000 f96a 	bl	8008288 <_sbrk_r>
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d1dd      	bne.n	8007f74 <_malloc_r+0x64>
 8007fb8:	e7cf      	b.n	8007f5a <_malloc_r+0x4a>
 8007fba:	bf00      	nop
 8007fbc:	2000025c 	.word	0x2000025c
 8007fc0:	20000260 	.word	0x20000260

08007fc4 <__ssputs_r>:
 8007fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc8:	688e      	ldr	r6, [r1, #8]
 8007fca:	4682      	mov	sl, r0
 8007fcc:	429e      	cmp	r6, r3
 8007fce:	460c      	mov	r4, r1
 8007fd0:	4690      	mov	r8, r2
 8007fd2:	461f      	mov	r7, r3
 8007fd4:	d838      	bhi.n	8008048 <__ssputs_r+0x84>
 8007fd6:	898a      	ldrh	r2, [r1, #12]
 8007fd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fdc:	d032      	beq.n	8008044 <__ssputs_r+0x80>
 8007fde:	6825      	ldr	r5, [r4, #0]
 8007fe0:	6909      	ldr	r1, [r1, #16]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	eba5 0901 	sub.w	r9, r5, r1
 8007fe8:	6965      	ldr	r5, [r4, #20]
 8007fea:	444b      	add	r3, r9
 8007fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ff4:	106d      	asrs	r5, r5, #1
 8007ff6:	429d      	cmp	r5, r3
 8007ff8:	bf38      	it	cc
 8007ffa:	461d      	movcc	r5, r3
 8007ffc:	0553      	lsls	r3, r2, #21
 8007ffe:	d531      	bpl.n	8008064 <__ssputs_r+0xa0>
 8008000:	4629      	mov	r1, r5
 8008002:	f7ff ff85 	bl	8007f10 <_malloc_r>
 8008006:	4606      	mov	r6, r0
 8008008:	b950      	cbnz	r0, 8008020 <__ssputs_r+0x5c>
 800800a:	230c      	movs	r3, #12
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	f8ca 3000 	str.w	r3, [sl]
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800801a:	81a3      	strh	r3, [r4, #12]
 800801c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008020:	464a      	mov	r2, r9
 8008022:	6921      	ldr	r1, [r4, #16]
 8008024:	f7ff fa54 	bl	80074d0 <memcpy>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800802e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	6126      	str	r6, [r4, #16]
 8008036:	444e      	add	r6, r9
 8008038:	6026      	str	r6, [r4, #0]
 800803a:	463e      	mov	r6, r7
 800803c:	6165      	str	r5, [r4, #20]
 800803e:	eba5 0509 	sub.w	r5, r5, r9
 8008042:	60a5      	str	r5, [r4, #8]
 8008044:	42be      	cmp	r6, r7
 8008046:	d900      	bls.n	800804a <__ssputs_r+0x86>
 8008048:	463e      	mov	r6, r7
 800804a:	4632      	mov	r2, r6
 800804c:	4641      	mov	r1, r8
 800804e:	6820      	ldr	r0, [r4, #0]
 8008050:	f000 f97a 	bl	8008348 <memmove>
 8008054:	68a3      	ldr	r3, [r4, #8]
 8008056:	6822      	ldr	r2, [r4, #0]
 8008058:	1b9b      	subs	r3, r3, r6
 800805a:	4432      	add	r2, r6
 800805c:	2000      	movs	r0, #0
 800805e:	60a3      	str	r3, [r4, #8]
 8008060:	6022      	str	r2, [r4, #0]
 8008062:	e7db      	b.n	800801c <__ssputs_r+0x58>
 8008064:	462a      	mov	r2, r5
 8008066:	f000 f995 	bl	8008394 <_realloc_r>
 800806a:	4606      	mov	r6, r0
 800806c:	2800      	cmp	r0, #0
 800806e:	d1e1      	bne.n	8008034 <__ssputs_r+0x70>
 8008070:	4650      	mov	r0, sl
 8008072:	6921      	ldr	r1, [r4, #16]
 8008074:	f7ff ff00 	bl	8007e78 <_free_r>
 8008078:	e7c7      	b.n	800800a <__ssputs_r+0x46>
	...

0800807c <_svfiprintf_r>:
 800807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008080:	4698      	mov	r8, r3
 8008082:	898b      	ldrh	r3, [r1, #12]
 8008084:	4607      	mov	r7, r0
 8008086:	061b      	lsls	r3, r3, #24
 8008088:	460d      	mov	r5, r1
 800808a:	4614      	mov	r4, r2
 800808c:	b09d      	sub	sp, #116	; 0x74
 800808e:	d50e      	bpl.n	80080ae <_svfiprintf_r+0x32>
 8008090:	690b      	ldr	r3, [r1, #16]
 8008092:	b963      	cbnz	r3, 80080ae <_svfiprintf_r+0x32>
 8008094:	2140      	movs	r1, #64	; 0x40
 8008096:	f7ff ff3b 	bl	8007f10 <_malloc_r>
 800809a:	6028      	str	r0, [r5, #0]
 800809c:	6128      	str	r0, [r5, #16]
 800809e:	b920      	cbnz	r0, 80080aa <_svfiprintf_r+0x2e>
 80080a0:	230c      	movs	r3, #12
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	e0d1      	b.n	800824e <_svfiprintf_r+0x1d2>
 80080aa:	2340      	movs	r3, #64	; 0x40
 80080ac:	616b      	str	r3, [r5, #20]
 80080ae:	2300      	movs	r3, #0
 80080b0:	9309      	str	r3, [sp, #36]	; 0x24
 80080b2:	2320      	movs	r3, #32
 80080b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080b8:	2330      	movs	r3, #48	; 0x30
 80080ba:	f04f 0901 	mov.w	r9, #1
 80080be:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008268 <_svfiprintf_r+0x1ec>
 80080c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ca:	4623      	mov	r3, r4
 80080cc:	469a      	mov	sl, r3
 80080ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080d2:	b10a      	cbz	r2, 80080d8 <_svfiprintf_r+0x5c>
 80080d4:	2a25      	cmp	r2, #37	; 0x25
 80080d6:	d1f9      	bne.n	80080cc <_svfiprintf_r+0x50>
 80080d8:	ebba 0b04 	subs.w	fp, sl, r4
 80080dc:	d00b      	beq.n	80080f6 <_svfiprintf_r+0x7a>
 80080de:	465b      	mov	r3, fp
 80080e0:	4622      	mov	r2, r4
 80080e2:	4629      	mov	r1, r5
 80080e4:	4638      	mov	r0, r7
 80080e6:	f7ff ff6d 	bl	8007fc4 <__ssputs_r>
 80080ea:	3001      	adds	r0, #1
 80080ec:	f000 80aa 	beq.w	8008244 <_svfiprintf_r+0x1c8>
 80080f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080f2:	445a      	add	r2, fp
 80080f4:	9209      	str	r2, [sp, #36]	; 0x24
 80080f6:	f89a 3000 	ldrb.w	r3, [sl]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80a2 	beq.w	8008244 <_svfiprintf_r+0x1c8>
 8008100:	2300      	movs	r3, #0
 8008102:	f04f 32ff 	mov.w	r2, #4294967295
 8008106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800810a:	f10a 0a01 	add.w	sl, sl, #1
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008116:	931a      	str	r3, [sp, #104]	; 0x68
 8008118:	4654      	mov	r4, sl
 800811a:	2205      	movs	r2, #5
 800811c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008120:	4851      	ldr	r0, [pc, #324]	; (8008268 <_svfiprintf_r+0x1ec>)
 8008122:	f7ff f9c7 	bl	80074b4 <memchr>
 8008126:	9a04      	ldr	r2, [sp, #16]
 8008128:	b9d8      	cbnz	r0, 8008162 <_svfiprintf_r+0xe6>
 800812a:	06d0      	lsls	r0, r2, #27
 800812c:	bf44      	itt	mi
 800812e:	2320      	movmi	r3, #32
 8008130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008134:	0711      	lsls	r1, r2, #28
 8008136:	bf44      	itt	mi
 8008138:	232b      	movmi	r3, #43	; 0x2b
 800813a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800813e:	f89a 3000 	ldrb.w	r3, [sl]
 8008142:	2b2a      	cmp	r3, #42	; 0x2a
 8008144:	d015      	beq.n	8008172 <_svfiprintf_r+0xf6>
 8008146:	4654      	mov	r4, sl
 8008148:	2000      	movs	r0, #0
 800814a:	f04f 0c0a 	mov.w	ip, #10
 800814e:	9a07      	ldr	r2, [sp, #28]
 8008150:	4621      	mov	r1, r4
 8008152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008156:	3b30      	subs	r3, #48	; 0x30
 8008158:	2b09      	cmp	r3, #9
 800815a:	d94e      	bls.n	80081fa <_svfiprintf_r+0x17e>
 800815c:	b1b0      	cbz	r0, 800818c <_svfiprintf_r+0x110>
 800815e:	9207      	str	r2, [sp, #28]
 8008160:	e014      	b.n	800818c <_svfiprintf_r+0x110>
 8008162:	eba0 0308 	sub.w	r3, r0, r8
 8008166:	fa09 f303 	lsl.w	r3, r9, r3
 800816a:	4313      	orrs	r3, r2
 800816c:	46a2      	mov	sl, r4
 800816e:	9304      	str	r3, [sp, #16]
 8008170:	e7d2      	b.n	8008118 <_svfiprintf_r+0x9c>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	1d19      	adds	r1, r3, #4
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	9103      	str	r1, [sp, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	bfbb      	ittet	lt
 800817e:	425b      	neglt	r3, r3
 8008180:	f042 0202 	orrlt.w	r2, r2, #2
 8008184:	9307      	strge	r3, [sp, #28]
 8008186:	9307      	strlt	r3, [sp, #28]
 8008188:	bfb8      	it	lt
 800818a:	9204      	strlt	r2, [sp, #16]
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	2b2e      	cmp	r3, #46	; 0x2e
 8008190:	d10c      	bne.n	80081ac <_svfiprintf_r+0x130>
 8008192:	7863      	ldrb	r3, [r4, #1]
 8008194:	2b2a      	cmp	r3, #42	; 0x2a
 8008196:	d135      	bne.n	8008204 <_svfiprintf_r+0x188>
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	3402      	adds	r4, #2
 800819c:	1d1a      	adds	r2, r3, #4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	9203      	str	r2, [sp, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bfb8      	it	lt
 80081a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80081aa:	9305      	str	r3, [sp, #20]
 80081ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008278 <_svfiprintf_r+0x1fc>
 80081b0:	2203      	movs	r2, #3
 80081b2:	4650      	mov	r0, sl
 80081b4:	7821      	ldrb	r1, [r4, #0]
 80081b6:	f7ff f97d 	bl	80074b4 <memchr>
 80081ba:	b140      	cbz	r0, 80081ce <_svfiprintf_r+0x152>
 80081bc:	2340      	movs	r3, #64	; 0x40
 80081be:	eba0 000a 	sub.w	r0, r0, sl
 80081c2:	fa03 f000 	lsl.w	r0, r3, r0
 80081c6:	9b04      	ldr	r3, [sp, #16]
 80081c8:	3401      	adds	r4, #1
 80081ca:	4303      	orrs	r3, r0
 80081cc:	9304      	str	r3, [sp, #16]
 80081ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d2:	2206      	movs	r2, #6
 80081d4:	4825      	ldr	r0, [pc, #148]	; (800826c <_svfiprintf_r+0x1f0>)
 80081d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081da:	f7ff f96b 	bl	80074b4 <memchr>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d038      	beq.n	8008254 <_svfiprintf_r+0x1d8>
 80081e2:	4b23      	ldr	r3, [pc, #140]	; (8008270 <_svfiprintf_r+0x1f4>)
 80081e4:	bb1b      	cbnz	r3, 800822e <_svfiprintf_r+0x1b2>
 80081e6:	9b03      	ldr	r3, [sp, #12]
 80081e8:	3307      	adds	r3, #7
 80081ea:	f023 0307 	bic.w	r3, r3, #7
 80081ee:	3308      	adds	r3, #8
 80081f0:	9303      	str	r3, [sp, #12]
 80081f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f4:	4433      	add	r3, r6
 80081f6:	9309      	str	r3, [sp, #36]	; 0x24
 80081f8:	e767      	b.n	80080ca <_svfiprintf_r+0x4e>
 80081fa:	460c      	mov	r4, r1
 80081fc:	2001      	movs	r0, #1
 80081fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008202:	e7a5      	b.n	8008150 <_svfiprintf_r+0xd4>
 8008204:	2300      	movs	r3, #0
 8008206:	f04f 0c0a 	mov.w	ip, #10
 800820a:	4619      	mov	r1, r3
 800820c:	3401      	adds	r4, #1
 800820e:	9305      	str	r3, [sp, #20]
 8008210:	4620      	mov	r0, r4
 8008212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008216:	3a30      	subs	r2, #48	; 0x30
 8008218:	2a09      	cmp	r2, #9
 800821a:	d903      	bls.n	8008224 <_svfiprintf_r+0x1a8>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0c5      	beq.n	80081ac <_svfiprintf_r+0x130>
 8008220:	9105      	str	r1, [sp, #20]
 8008222:	e7c3      	b.n	80081ac <_svfiprintf_r+0x130>
 8008224:	4604      	mov	r4, r0
 8008226:	2301      	movs	r3, #1
 8008228:	fb0c 2101 	mla	r1, ip, r1, r2
 800822c:	e7f0      	b.n	8008210 <_svfiprintf_r+0x194>
 800822e:	ab03      	add	r3, sp, #12
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	462a      	mov	r2, r5
 8008234:	4638      	mov	r0, r7
 8008236:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <_svfiprintf_r+0x1f8>)
 8008238:	a904      	add	r1, sp, #16
 800823a:	f7fc fa9d 	bl	8004778 <_printf_float>
 800823e:	1c42      	adds	r2, r0, #1
 8008240:	4606      	mov	r6, r0
 8008242:	d1d6      	bne.n	80081f2 <_svfiprintf_r+0x176>
 8008244:	89ab      	ldrh	r3, [r5, #12]
 8008246:	065b      	lsls	r3, r3, #25
 8008248:	f53f af2c 	bmi.w	80080a4 <_svfiprintf_r+0x28>
 800824c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800824e:	b01d      	add	sp, #116	; 0x74
 8008250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008254:	ab03      	add	r3, sp, #12
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	462a      	mov	r2, r5
 800825a:	4638      	mov	r0, r7
 800825c:	4b05      	ldr	r3, [pc, #20]	; (8008274 <_svfiprintf_r+0x1f8>)
 800825e:	a904      	add	r1, sp, #16
 8008260:	f7fc fd26 	bl	8004cb0 <_printf_i>
 8008264:	e7eb      	b.n	800823e <_svfiprintf_r+0x1c2>
 8008266:	bf00      	nop
 8008268:	08009294 	.word	0x08009294
 800826c:	0800929e 	.word	0x0800929e
 8008270:	08004779 	.word	0x08004779
 8008274:	08007fc5 	.word	0x08007fc5
 8008278:	0800929a 	.word	0x0800929a

0800827c <nan>:
 800827c:	2000      	movs	r0, #0
 800827e:	4901      	ldr	r1, [pc, #4]	; (8008284 <nan+0x8>)
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	7ff80000 	.word	0x7ff80000

08008288 <_sbrk_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	2300      	movs	r3, #0
 800828c:	4d05      	ldr	r5, [pc, #20]	; (80082a4 <_sbrk_r+0x1c>)
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7f9 fbac 	bl	80019f0 <_sbrk>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_sbrk_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_sbrk_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20000840 	.word	0x20000840

080082a8 <strncmp>:
 80082a8:	b510      	push	{r4, lr}
 80082aa:	b16a      	cbz	r2, 80082c8 <strncmp+0x20>
 80082ac:	3901      	subs	r1, #1
 80082ae:	1884      	adds	r4, r0, r2
 80082b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d103      	bne.n	80082c4 <strncmp+0x1c>
 80082bc:	42a0      	cmp	r0, r4
 80082be:	d001      	beq.n	80082c4 <strncmp+0x1c>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1f5      	bne.n	80082b0 <strncmp+0x8>
 80082c4:	1a98      	subs	r0, r3, r2
 80082c6:	bd10      	pop	{r4, pc}
 80082c8:	4610      	mov	r0, r2
 80082ca:	e7fc      	b.n	80082c6 <strncmp+0x1e>

080082cc <__ascii_wctomb>:
 80082cc:	4603      	mov	r3, r0
 80082ce:	4608      	mov	r0, r1
 80082d0:	b141      	cbz	r1, 80082e4 <__ascii_wctomb+0x18>
 80082d2:	2aff      	cmp	r2, #255	; 0xff
 80082d4:	d904      	bls.n	80082e0 <__ascii_wctomb+0x14>
 80082d6:	228a      	movs	r2, #138	; 0x8a
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	4770      	bx	lr
 80082e0:	2001      	movs	r0, #1
 80082e2:	700a      	strb	r2, [r1, #0]
 80082e4:	4770      	bx	lr
	...

080082e8 <__assert_func>:
 80082e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082ea:	4614      	mov	r4, r2
 80082ec:	461a      	mov	r2, r3
 80082ee:	4b09      	ldr	r3, [pc, #36]	; (8008314 <__assert_func+0x2c>)
 80082f0:	4605      	mov	r5, r0
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68d8      	ldr	r0, [r3, #12]
 80082f6:	b14c      	cbz	r4, 800830c <__assert_func+0x24>
 80082f8:	4b07      	ldr	r3, [pc, #28]	; (8008318 <__assert_func+0x30>)
 80082fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082fe:	9100      	str	r1, [sp, #0]
 8008300:	462b      	mov	r3, r5
 8008302:	4906      	ldr	r1, [pc, #24]	; (800831c <__assert_func+0x34>)
 8008304:	f000 f80e 	bl	8008324 <fiprintf>
 8008308:	f000 fa82 	bl	8008810 <abort>
 800830c:	4b04      	ldr	r3, [pc, #16]	; (8008320 <__assert_func+0x38>)
 800830e:	461c      	mov	r4, r3
 8008310:	e7f3      	b.n	80082fa <__assert_func+0x12>
 8008312:	bf00      	nop
 8008314:	2000000c 	.word	0x2000000c
 8008318:	080092a5 	.word	0x080092a5
 800831c:	080092b2 	.word	0x080092b2
 8008320:	080092e0 	.word	0x080092e0

08008324 <fiprintf>:
 8008324:	b40e      	push	{r1, r2, r3}
 8008326:	b503      	push	{r0, r1, lr}
 8008328:	4601      	mov	r1, r0
 800832a:	ab03      	add	r3, sp, #12
 800832c:	4805      	ldr	r0, [pc, #20]	; (8008344 <fiprintf+0x20>)
 800832e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008332:	6800      	ldr	r0, [r0, #0]
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	f000 f87b 	bl	8008430 <_vfiprintf_r>
 800833a:	b002      	add	sp, #8
 800833c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008340:	b003      	add	sp, #12
 8008342:	4770      	bx	lr
 8008344:	2000000c 	.word	0x2000000c

08008348 <memmove>:
 8008348:	4288      	cmp	r0, r1
 800834a:	b510      	push	{r4, lr}
 800834c:	eb01 0402 	add.w	r4, r1, r2
 8008350:	d902      	bls.n	8008358 <memmove+0x10>
 8008352:	4284      	cmp	r4, r0
 8008354:	4623      	mov	r3, r4
 8008356:	d807      	bhi.n	8008368 <memmove+0x20>
 8008358:	1e43      	subs	r3, r0, #1
 800835a:	42a1      	cmp	r1, r4
 800835c:	d008      	beq.n	8008370 <memmove+0x28>
 800835e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008366:	e7f8      	b.n	800835a <memmove+0x12>
 8008368:	4601      	mov	r1, r0
 800836a:	4402      	add	r2, r0
 800836c:	428a      	cmp	r2, r1
 800836e:	d100      	bne.n	8008372 <memmove+0x2a>
 8008370:	bd10      	pop	{r4, pc}
 8008372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800837a:	e7f7      	b.n	800836c <memmove+0x24>

0800837c <__malloc_lock>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__malloc_lock+0x8>)
 800837e:	f000 bc07 	b.w	8008b90 <__retarget_lock_acquire_recursive>
 8008382:	bf00      	nop
 8008384:	20000848 	.word	0x20000848

08008388 <__malloc_unlock>:
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <__malloc_unlock+0x8>)
 800838a:	f000 bc02 	b.w	8008b92 <__retarget_lock_release_recursive>
 800838e:	bf00      	nop
 8008390:	20000848 	.word	0x20000848

08008394 <_realloc_r>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	4607      	mov	r7, r0
 8008398:	4614      	mov	r4, r2
 800839a:	460e      	mov	r6, r1
 800839c:	b921      	cbnz	r1, 80083a8 <_realloc_r+0x14>
 800839e:	4611      	mov	r1, r2
 80083a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083a4:	f7ff bdb4 	b.w	8007f10 <_malloc_r>
 80083a8:	b922      	cbnz	r2, 80083b4 <_realloc_r+0x20>
 80083aa:	f7ff fd65 	bl	8007e78 <_free_r>
 80083ae:	4625      	mov	r5, r4
 80083b0:	4628      	mov	r0, r5
 80083b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b4:	f000 fc52 	bl	8008c5c <_malloc_usable_size_r>
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d20f      	bcs.n	80083dc <_realloc_r+0x48>
 80083bc:	4621      	mov	r1, r4
 80083be:	4638      	mov	r0, r7
 80083c0:	f7ff fda6 	bl	8007f10 <_malloc_r>
 80083c4:	4605      	mov	r5, r0
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d0f2      	beq.n	80083b0 <_realloc_r+0x1c>
 80083ca:	4631      	mov	r1, r6
 80083cc:	4622      	mov	r2, r4
 80083ce:	f7ff f87f 	bl	80074d0 <memcpy>
 80083d2:	4631      	mov	r1, r6
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff fd4f 	bl	8007e78 <_free_r>
 80083da:	e7e9      	b.n	80083b0 <_realloc_r+0x1c>
 80083dc:	4635      	mov	r5, r6
 80083de:	e7e7      	b.n	80083b0 <_realloc_r+0x1c>

080083e0 <__sfputc_r>:
 80083e0:	6893      	ldr	r3, [r2, #8]
 80083e2:	b410      	push	{r4}
 80083e4:	3b01      	subs	r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	6093      	str	r3, [r2, #8]
 80083ea:	da07      	bge.n	80083fc <__sfputc_r+0x1c>
 80083ec:	6994      	ldr	r4, [r2, #24]
 80083ee:	42a3      	cmp	r3, r4
 80083f0:	db01      	blt.n	80083f6 <__sfputc_r+0x16>
 80083f2:	290a      	cmp	r1, #10
 80083f4:	d102      	bne.n	80083fc <__sfputc_r+0x1c>
 80083f6:	bc10      	pop	{r4}
 80083f8:	f000 b94a 	b.w	8008690 <__swbuf_r>
 80083fc:	6813      	ldr	r3, [r2, #0]
 80083fe:	1c58      	adds	r0, r3, #1
 8008400:	6010      	str	r0, [r2, #0]
 8008402:	7019      	strb	r1, [r3, #0]
 8008404:	4608      	mov	r0, r1
 8008406:	bc10      	pop	{r4}
 8008408:	4770      	bx	lr

0800840a <__sfputs_r>:
 800840a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	4614      	mov	r4, r2
 8008412:	18d5      	adds	r5, r2, r3
 8008414:	42ac      	cmp	r4, r5
 8008416:	d101      	bne.n	800841c <__sfputs_r+0x12>
 8008418:	2000      	movs	r0, #0
 800841a:	e007      	b.n	800842c <__sfputs_r+0x22>
 800841c:	463a      	mov	r2, r7
 800841e:	4630      	mov	r0, r6
 8008420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008424:	f7ff ffdc 	bl	80083e0 <__sfputc_r>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d1f3      	bne.n	8008414 <__sfputs_r+0xa>
 800842c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008430 <_vfiprintf_r>:
 8008430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	460d      	mov	r5, r1
 8008436:	4614      	mov	r4, r2
 8008438:	4698      	mov	r8, r3
 800843a:	4606      	mov	r6, r0
 800843c:	b09d      	sub	sp, #116	; 0x74
 800843e:	b118      	cbz	r0, 8008448 <_vfiprintf_r+0x18>
 8008440:	6983      	ldr	r3, [r0, #24]
 8008442:	b90b      	cbnz	r3, 8008448 <_vfiprintf_r+0x18>
 8008444:	f000 fb06 	bl	8008a54 <__sinit>
 8008448:	4b89      	ldr	r3, [pc, #548]	; (8008670 <_vfiprintf_r+0x240>)
 800844a:	429d      	cmp	r5, r3
 800844c:	d11b      	bne.n	8008486 <_vfiprintf_r+0x56>
 800844e:	6875      	ldr	r5, [r6, #4]
 8008450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008452:	07d9      	lsls	r1, r3, #31
 8008454:	d405      	bmi.n	8008462 <_vfiprintf_r+0x32>
 8008456:	89ab      	ldrh	r3, [r5, #12]
 8008458:	059a      	lsls	r2, r3, #22
 800845a:	d402      	bmi.n	8008462 <_vfiprintf_r+0x32>
 800845c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800845e:	f000 fb97 	bl	8008b90 <__retarget_lock_acquire_recursive>
 8008462:	89ab      	ldrh	r3, [r5, #12]
 8008464:	071b      	lsls	r3, r3, #28
 8008466:	d501      	bpl.n	800846c <_vfiprintf_r+0x3c>
 8008468:	692b      	ldr	r3, [r5, #16]
 800846a:	b9eb      	cbnz	r3, 80084a8 <_vfiprintf_r+0x78>
 800846c:	4629      	mov	r1, r5
 800846e:	4630      	mov	r0, r6
 8008470:	f000 f960 	bl	8008734 <__swsetup_r>
 8008474:	b1c0      	cbz	r0, 80084a8 <_vfiprintf_r+0x78>
 8008476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008478:	07dc      	lsls	r4, r3, #31
 800847a:	d50e      	bpl.n	800849a <_vfiprintf_r+0x6a>
 800847c:	f04f 30ff 	mov.w	r0, #4294967295
 8008480:	b01d      	add	sp, #116	; 0x74
 8008482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008486:	4b7b      	ldr	r3, [pc, #492]	; (8008674 <_vfiprintf_r+0x244>)
 8008488:	429d      	cmp	r5, r3
 800848a:	d101      	bne.n	8008490 <_vfiprintf_r+0x60>
 800848c:	68b5      	ldr	r5, [r6, #8]
 800848e:	e7df      	b.n	8008450 <_vfiprintf_r+0x20>
 8008490:	4b79      	ldr	r3, [pc, #484]	; (8008678 <_vfiprintf_r+0x248>)
 8008492:	429d      	cmp	r5, r3
 8008494:	bf08      	it	eq
 8008496:	68f5      	ldreq	r5, [r6, #12]
 8008498:	e7da      	b.n	8008450 <_vfiprintf_r+0x20>
 800849a:	89ab      	ldrh	r3, [r5, #12]
 800849c:	0598      	lsls	r0, r3, #22
 800849e:	d4ed      	bmi.n	800847c <_vfiprintf_r+0x4c>
 80084a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a2:	f000 fb76 	bl	8008b92 <__retarget_lock_release_recursive>
 80084a6:	e7e9      	b.n	800847c <_vfiprintf_r+0x4c>
 80084a8:	2300      	movs	r3, #0
 80084aa:	9309      	str	r3, [sp, #36]	; 0x24
 80084ac:	2320      	movs	r3, #32
 80084ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084b2:	2330      	movs	r3, #48	; 0x30
 80084b4:	f04f 0901 	mov.w	r9, #1
 80084b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80084bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800867c <_vfiprintf_r+0x24c>
 80084c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084c4:	4623      	mov	r3, r4
 80084c6:	469a      	mov	sl, r3
 80084c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084cc:	b10a      	cbz	r2, 80084d2 <_vfiprintf_r+0xa2>
 80084ce:	2a25      	cmp	r2, #37	; 0x25
 80084d0:	d1f9      	bne.n	80084c6 <_vfiprintf_r+0x96>
 80084d2:	ebba 0b04 	subs.w	fp, sl, r4
 80084d6:	d00b      	beq.n	80084f0 <_vfiprintf_r+0xc0>
 80084d8:	465b      	mov	r3, fp
 80084da:	4622      	mov	r2, r4
 80084dc:	4629      	mov	r1, r5
 80084de:	4630      	mov	r0, r6
 80084e0:	f7ff ff93 	bl	800840a <__sfputs_r>
 80084e4:	3001      	adds	r0, #1
 80084e6:	f000 80aa 	beq.w	800863e <_vfiprintf_r+0x20e>
 80084ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ec:	445a      	add	r2, fp
 80084ee:	9209      	str	r2, [sp, #36]	; 0x24
 80084f0:	f89a 3000 	ldrb.w	r3, [sl]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 80a2 	beq.w	800863e <_vfiprintf_r+0x20e>
 80084fa:	2300      	movs	r3, #0
 80084fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008504:	f10a 0a01 	add.w	sl, sl, #1
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	9307      	str	r3, [sp, #28]
 800850c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008510:	931a      	str	r3, [sp, #104]	; 0x68
 8008512:	4654      	mov	r4, sl
 8008514:	2205      	movs	r2, #5
 8008516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800851a:	4858      	ldr	r0, [pc, #352]	; (800867c <_vfiprintf_r+0x24c>)
 800851c:	f7fe ffca 	bl	80074b4 <memchr>
 8008520:	9a04      	ldr	r2, [sp, #16]
 8008522:	b9d8      	cbnz	r0, 800855c <_vfiprintf_r+0x12c>
 8008524:	06d1      	lsls	r1, r2, #27
 8008526:	bf44      	itt	mi
 8008528:	2320      	movmi	r3, #32
 800852a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800852e:	0713      	lsls	r3, r2, #28
 8008530:	bf44      	itt	mi
 8008532:	232b      	movmi	r3, #43	; 0x2b
 8008534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008538:	f89a 3000 	ldrb.w	r3, [sl]
 800853c:	2b2a      	cmp	r3, #42	; 0x2a
 800853e:	d015      	beq.n	800856c <_vfiprintf_r+0x13c>
 8008540:	4654      	mov	r4, sl
 8008542:	2000      	movs	r0, #0
 8008544:	f04f 0c0a 	mov.w	ip, #10
 8008548:	9a07      	ldr	r2, [sp, #28]
 800854a:	4621      	mov	r1, r4
 800854c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008550:	3b30      	subs	r3, #48	; 0x30
 8008552:	2b09      	cmp	r3, #9
 8008554:	d94e      	bls.n	80085f4 <_vfiprintf_r+0x1c4>
 8008556:	b1b0      	cbz	r0, 8008586 <_vfiprintf_r+0x156>
 8008558:	9207      	str	r2, [sp, #28]
 800855a:	e014      	b.n	8008586 <_vfiprintf_r+0x156>
 800855c:	eba0 0308 	sub.w	r3, r0, r8
 8008560:	fa09 f303 	lsl.w	r3, r9, r3
 8008564:	4313      	orrs	r3, r2
 8008566:	46a2      	mov	sl, r4
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	e7d2      	b.n	8008512 <_vfiprintf_r+0xe2>
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	1d19      	adds	r1, r3, #4
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	9103      	str	r1, [sp, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	bfbb      	ittet	lt
 8008578:	425b      	neglt	r3, r3
 800857a:	f042 0202 	orrlt.w	r2, r2, #2
 800857e:	9307      	strge	r3, [sp, #28]
 8008580:	9307      	strlt	r3, [sp, #28]
 8008582:	bfb8      	it	lt
 8008584:	9204      	strlt	r2, [sp, #16]
 8008586:	7823      	ldrb	r3, [r4, #0]
 8008588:	2b2e      	cmp	r3, #46	; 0x2e
 800858a:	d10c      	bne.n	80085a6 <_vfiprintf_r+0x176>
 800858c:	7863      	ldrb	r3, [r4, #1]
 800858e:	2b2a      	cmp	r3, #42	; 0x2a
 8008590:	d135      	bne.n	80085fe <_vfiprintf_r+0x1ce>
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	3402      	adds	r4, #2
 8008596:	1d1a      	adds	r2, r3, #4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	9203      	str	r2, [sp, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	bfb8      	it	lt
 80085a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80085a4:	9305      	str	r3, [sp, #20]
 80085a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800868c <_vfiprintf_r+0x25c>
 80085aa:	2203      	movs	r2, #3
 80085ac:	4650      	mov	r0, sl
 80085ae:	7821      	ldrb	r1, [r4, #0]
 80085b0:	f7fe ff80 	bl	80074b4 <memchr>
 80085b4:	b140      	cbz	r0, 80085c8 <_vfiprintf_r+0x198>
 80085b6:	2340      	movs	r3, #64	; 0x40
 80085b8:	eba0 000a 	sub.w	r0, r0, sl
 80085bc:	fa03 f000 	lsl.w	r0, r3, r0
 80085c0:	9b04      	ldr	r3, [sp, #16]
 80085c2:	3401      	adds	r4, #1
 80085c4:	4303      	orrs	r3, r0
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085cc:	2206      	movs	r2, #6
 80085ce:	482c      	ldr	r0, [pc, #176]	; (8008680 <_vfiprintf_r+0x250>)
 80085d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085d4:	f7fe ff6e 	bl	80074b4 <memchr>
 80085d8:	2800      	cmp	r0, #0
 80085da:	d03f      	beq.n	800865c <_vfiprintf_r+0x22c>
 80085dc:	4b29      	ldr	r3, [pc, #164]	; (8008684 <_vfiprintf_r+0x254>)
 80085de:	bb1b      	cbnz	r3, 8008628 <_vfiprintf_r+0x1f8>
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	3307      	adds	r3, #7
 80085e4:	f023 0307 	bic.w	r3, r3, #7
 80085e8:	3308      	adds	r3, #8
 80085ea:	9303      	str	r3, [sp, #12]
 80085ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ee:	443b      	add	r3, r7
 80085f0:	9309      	str	r3, [sp, #36]	; 0x24
 80085f2:	e767      	b.n	80084c4 <_vfiprintf_r+0x94>
 80085f4:	460c      	mov	r4, r1
 80085f6:	2001      	movs	r0, #1
 80085f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80085fc:	e7a5      	b.n	800854a <_vfiprintf_r+0x11a>
 80085fe:	2300      	movs	r3, #0
 8008600:	f04f 0c0a 	mov.w	ip, #10
 8008604:	4619      	mov	r1, r3
 8008606:	3401      	adds	r4, #1
 8008608:	9305      	str	r3, [sp, #20]
 800860a:	4620      	mov	r0, r4
 800860c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008610:	3a30      	subs	r2, #48	; 0x30
 8008612:	2a09      	cmp	r2, #9
 8008614:	d903      	bls.n	800861e <_vfiprintf_r+0x1ee>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0c5      	beq.n	80085a6 <_vfiprintf_r+0x176>
 800861a:	9105      	str	r1, [sp, #20]
 800861c:	e7c3      	b.n	80085a6 <_vfiprintf_r+0x176>
 800861e:	4604      	mov	r4, r0
 8008620:	2301      	movs	r3, #1
 8008622:	fb0c 2101 	mla	r1, ip, r1, r2
 8008626:	e7f0      	b.n	800860a <_vfiprintf_r+0x1da>
 8008628:	ab03      	add	r3, sp, #12
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	462a      	mov	r2, r5
 800862e:	4630      	mov	r0, r6
 8008630:	4b15      	ldr	r3, [pc, #84]	; (8008688 <_vfiprintf_r+0x258>)
 8008632:	a904      	add	r1, sp, #16
 8008634:	f7fc f8a0 	bl	8004778 <_printf_float>
 8008638:	4607      	mov	r7, r0
 800863a:	1c78      	adds	r0, r7, #1
 800863c:	d1d6      	bne.n	80085ec <_vfiprintf_r+0x1bc>
 800863e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008640:	07d9      	lsls	r1, r3, #31
 8008642:	d405      	bmi.n	8008650 <_vfiprintf_r+0x220>
 8008644:	89ab      	ldrh	r3, [r5, #12]
 8008646:	059a      	lsls	r2, r3, #22
 8008648:	d402      	bmi.n	8008650 <_vfiprintf_r+0x220>
 800864a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800864c:	f000 faa1 	bl	8008b92 <__retarget_lock_release_recursive>
 8008650:	89ab      	ldrh	r3, [r5, #12]
 8008652:	065b      	lsls	r3, r3, #25
 8008654:	f53f af12 	bmi.w	800847c <_vfiprintf_r+0x4c>
 8008658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800865a:	e711      	b.n	8008480 <_vfiprintf_r+0x50>
 800865c:	ab03      	add	r3, sp, #12
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	462a      	mov	r2, r5
 8008662:	4630      	mov	r0, r6
 8008664:	4b08      	ldr	r3, [pc, #32]	; (8008688 <_vfiprintf_r+0x258>)
 8008666:	a904      	add	r1, sp, #16
 8008668:	f7fc fb22 	bl	8004cb0 <_printf_i>
 800866c:	e7e4      	b.n	8008638 <_vfiprintf_r+0x208>
 800866e:	bf00      	nop
 8008670:	08009304 	.word	0x08009304
 8008674:	08009324 	.word	0x08009324
 8008678:	080092e4 	.word	0x080092e4
 800867c:	08009294 	.word	0x08009294
 8008680:	0800929e 	.word	0x0800929e
 8008684:	08004779 	.word	0x08004779
 8008688:	0800840b 	.word	0x0800840b
 800868c:	0800929a 	.word	0x0800929a

08008690 <__swbuf_r>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	460e      	mov	r6, r1
 8008694:	4614      	mov	r4, r2
 8008696:	4605      	mov	r5, r0
 8008698:	b118      	cbz	r0, 80086a2 <__swbuf_r+0x12>
 800869a:	6983      	ldr	r3, [r0, #24]
 800869c:	b90b      	cbnz	r3, 80086a2 <__swbuf_r+0x12>
 800869e:	f000 f9d9 	bl	8008a54 <__sinit>
 80086a2:	4b21      	ldr	r3, [pc, #132]	; (8008728 <__swbuf_r+0x98>)
 80086a4:	429c      	cmp	r4, r3
 80086a6:	d12b      	bne.n	8008700 <__swbuf_r+0x70>
 80086a8:	686c      	ldr	r4, [r5, #4]
 80086aa:	69a3      	ldr	r3, [r4, #24]
 80086ac:	60a3      	str	r3, [r4, #8]
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	071a      	lsls	r2, r3, #28
 80086b2:	d52f      	bpl.n	8008714 <__swbuf_r+0x84>
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	b36b      	cbz	r3, 8008714 <__swbuf_r+0x84>
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	b2f6      	uxtb	r6, r6
 80086be:	1ac0      	subs	r0, r0, r3
 80086c0:	6963      	ldr	r3, [r4, #20]
 80086c2:	4637      	mov	r7, r6
 80086c4:	4283      	cmp	r3, r0
 80086c6:	dc04      	bgt.n	80086d2 <__swbuf_r+0x42>
 80086c8:	4621      	mov	r1, r4
 80086ca:	4628      	mov	r0, r5
 80086cc:	f000 f92e 	bl	800892c <_fflush_r>
 80086d0:	bb30      	cbnz	r0, 8008720 <__swbuf_r+0x90>
 80086d2:	68a3      	ldr	r3, [r4, #8]
 80086d4:	3001      	adds	r0, #1
 80086d6:	3b01      	subs	r3, #1
 80086d8:	60a3      	str	r3, [r4, #8]
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	6022      	str	r2, [r4, #0]
 80086e0:	701e      	strb	r6, [r3, #0]
 80086e2:	6963      	ldr	r3, [r4, #20]
 80086e4:	4283      	cmp	r3, r0
 80086e6:	d004      	beq.n	80086f2 <__swbuf_r+0x62>
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	07db      	lsls	r3, r3, #31
 80086ec:	d506      	bpl.n	80086fc <__swbuf_r+0x6c>
 80086ee:	2e0a      	cmp	r6, #10
 80086f0:	d104      	bne.n	80086fc <__swbuf_r+0x6c>
 80086f2:	4621      	mov	r1, r4
 80086f4:	4628      	mov	r0, r5
 80086f6:	f000 f919 	bl	800892c <_fflush_r>
 80086fa:	b988      	cbnz	r0, 8008720 <__swbuf_r+0x90>
 80086fc:	4638      	mov	r0, r7
 80086fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008700:	4b0a      	ldr	r3, [pc, #40]	; (800872c <__swbuf_r+0x9c>)
 8008702:	429c      	cmp	r4, r3
 8008704:	d101      	bne.n	800870a <__swbuf_r+0x7a>
 8008706:	68ac      	ldr	r4, [r5, #8]
 8008708:	e7cf      	b.n	80086aa <__swbuf_r+0x1a>
 800870a:	4b09      	ldr	r3, [pc, #36]	; (8008730 <__swbuf_r+0xa0>)
 800870c:	429c      	cmp	r4, r3
 800870e:	bf08      	it	eq
 8008710:	68ec      	ldreq	r4, [r5, #12]
 8008712:	e7ca      	b.n	80086aa <__swbuf_r+0x1a>
 8008714:	4621      	mov	r1, r4
 8008716:	4628      	mov	r0, r5
 8008718:	f000 f80c 	bl	8008734 <__swsetup_r>
 800871c:	2800      	cmp	r0, #0
 800871e:	d0cb      	beq.n	80086b8 <__swbuf_r+0x28>
 8008720:	f04f 37ff 	mov.w	r7, #4294967295
 8008724:	e7ea      	b.n	80086fc <__swbuf_r+0x6c>
 8008726:	bf00      	nop
 8008728:	08009304 	.word	0x08009304
 800872c:	08009324 	.word	0x08009324
 8008730:	080092e4 	.word	0x080092e4

08008734 <__swsetup_r>:
 8008734:	4b32      	ldr	r3, [pc, #200]	; (8008800 <__swsetup_r+0xcc>)
 8008736:	b570      	push	{r4, r5, r6, lr}
 8008738:	681d      	ldr	r5, [r3, #0]
 800873a:	4606      	mov	r6, r0
 800873c:	460c      	mov	r4, r1
 800873e:	b125      	cbz	r5, 800874a <__swsetup_r+0x16>
 8008740:	69ab      	ldr	r3, [r5, #24]
 8008742:	b913      	cbnz	r3, 800874a <__swsetup_r+0x16>
 8008744:	4628      	mov	r0, r5
 8008746:	f000 f985 	bl	8008a54 <__sinit>
 800874a:	4b2e      	ldr	r3, [pc, #184]	; (8008804 <__swsetup_r+0xd0>)
 800874c:	429c      	cmp	r4, r3
 800874e:	d10f      	bne.n	8008770 <__swsetup_r+0x3c>
 8008750:	686c      	ldr	r4, [r5, #4]
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008758:	0719      	lsls	r1, r3, #28
 800875a:	d42c      	bmi.n	80087b6 <__swsetup_r+0x82>
 800875c:	06dd      	lsls	r5, r3, #27
 800875e:	d411      	bmi.n	8008784 <__swsetup_r+0x50>
 8008760:	2309      	movs	r3, #9
 8008762:	6033      	str	r3, [r6, #0]
 8008764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008768:	f04f 30ff 	mov.w	r0, #4294967295
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	e03e      	b.n	80087ee <__swsetup_r+0xba>
 8008770:	4b25      	ldr	r3, [pc, #148]	; (8008808 <__swsetup_r+0xd4>)
 8008772:	429c      	cmp	r4, r3
 8008774:	d101      	bne.n	800877a <__swsetup_r+0x46>
 8008776:	68ac      	ldr	r4, [r5, #8]
 8008778:	e7eb      	b.n	8008752 <__swsetup_r+0x1e>
 800877a:	4b24      	ldr	r3, [pc, #144]	; (800880c <__swsetup_r+0xd8>)
 800877c:	429c      	cmp	r4, r3
 800877e:	bf08      	it	eq
 8008780:	68ec      	ldreq	r4, [r5, #12]
 8008782:	e7e6      	b.n	8008752 <__swsetup_r+0x1e>
 8008784:	0758      	lsls	r0, r3, #29
 8008786:	d512      	bpl.n	80087ae <__swsetup_r+0x7a>
 8008788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800878a:	b141      	cbz	r1, 800879e <__swsetup_r+0x6a>
 800878c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008790:	4299      	cmp	r1, r3
 8008792:	d002      	beq.n	800879a <__swsetup_r+0x66>
 8008794:	4630      	mov	r0, r6
 8008796:	f7ff fb6f 	bl	8007e78 <_free_r>
 800879a:	2300      	movs	r3, #0
 800879c:	6363      	str	r3, [r4, #52]	; 0x34
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	2300      	movs	r3, #0
 80087a8:	6063      	str	r3, [r4, #4]
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	f043 0308 	orr.w	r3, r3, #8
 80087b4:	81a3      	strh	r3, [r4, #12]
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	b94b      	cbnz	r3, 80087ce <__swsetup_r+0x9a>
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087c4:	d003      	beq.n	80087ce <__swsetup_r+0x9a>
 80087c6:	4621      	mov	r1, r4
 80087c8:	4630      	mov	r0, r6
 80087ca:	f000 fa07 	bl	8008bdc <__smakebuf_r>
 80087ce:	89a0      	ldrh	r0, [r4, #12]
 80087d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087d4:	f010 0301 	ands.w	r3, r0, #1
 80087d8:	d00a      	beq.n	80087f0 <__swsetup_r+0xbc>
 80087da:	2300      	movs	r3, #0
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	6963      	ldr	r3, [r4, #20]
 80087e0:	425b      	negs	r3, r3
 80087e2:	61a3      	str	r3, [r4, #24]
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	b943      	cbnz	r3, 80087fa <__swsetup_r+0xc6>
 80087e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087ec:	d1ba      	bne.n	8008764 <__swsetup_r+0x30>
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	0781      	lsls	r1, r0, #30
 80087f2:	bf58      	it	pl
 80087f4:	6963      	ldrpl	r3, [r4, #20]
 80087f6:	60a3      	str	r3, [r4, #8]
 80087f8:	e7f4      	b.n	80087e4 <__swsetup_r+0xb0>
 80087fa:	2000      	movs	r0, #0
 80087fc:	e7f7      	b.n	80087ee <__swsetup_r+0xba>
 80087fe:	bf00      	nop
 8008800:	2000000c 	.word	0x2000000c
 8008804:	08009304 	.word	0x08009304
 8008808:	08009324 	.word	0x08009324
 800880c:	080092e4 	.word	0x080092e4

08008810 <abort>:
 8008810:	2006      	movs	r0, #6
 8008812:	b508      	push	{r3, lr}
 8008814:	f000 fa52 	bl	8008cbc <raise>
 8008818:	2001      	movs	r0, #1
 800881a:	f7f9 f876 	bl	800190a <_exit>
	...

08008820 <__sflush_r>:
 8008820:	898a      	ldrh	r2, [r1, #12]
 8008822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008826:	4605      	mov	r5, r0
 8008828:	0710      	lsls	r0, r2, #28
 800882a:	460c      	mov	r4, r1
 800882c:	d458      	bmi.n	80088e0 <__sflush_r+0xc0>
 800882e:	684b      	ldr	r3, [r1, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	dc05      	bgt.n	8008840 <__sflush_r+0x20>
 8008834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008836:	2b00      	cmp	r3, #0
 8008838:	dc02      	bgt.n	8008840 <__sflush_r+0x20>
 800883a:	2000      	movs	r0, #0
 800883c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008842:	2e00      	cmp	r6, #0
 8008844:	d0f9      	beq.n	800883a <__sflush_r+0x1a>
 8008846:	2300      	movs	r3, #0
 8008848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800884c:	682f      	ldr	r7, [r5, #0]
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	d032      	beq.n	80088b8 <__sflush_r+0x98>
 8008852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	075a      	lsls	r2, r3, #29
 8008858:	d505      	bpl.n	8008866 <__sflush_r+0x46>
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	1ac0      	subs	r0, r0, r3
 800885e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008860:	b10b      	cbz	r3, 8008866 <__sflush_r+0x46>
 8008862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008864:	1ac0      	subs	r0, r0, r3
 8008866:	2300      	movs	r3, #0
 8008868:	4602      	mov	r2, r0
 800886a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800886c:	4628      	mov	r0, r5
 800886e:	6a21      	ldr	r1, [r4, #32]
 8008870:	47b0      	blx	r6
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	d106      	bne.n	8008886 <__sflush_r+0x66>
 8008878:	6829      	ldr	r1, [r5, #0]
 800887a:	291d      	cmp	r1, #29
 800887c:	d82c      	bhi.n	80088d8 <__sflush_r+0xb8>
 800887e:	4a2a      	ldr	r2, [pc, #168]	; (8008928 <__sflush_r+0x108>)
 8008880:	40ca      	lsrs	r2, r1
 8008882:	07d6      	lsls	r6, r2, #31
 8008884:	d528      	bpl.n	80088d8 <__sflush_r+0xb8>
 8008886:	2200      	movs	r2, #0
 8008888:	6062      	str	r2, [r4, #4]
 800888a:	6922      	ldr	r2, [r4, #16]
 800888c:	04d9      	lsls	r1, r3, #19
 800888e:	6022      	str	r2, [r4, #0]
 8008890:	d504      	bpl.n	800889c <__sflush_r+0x7c>
 8008892:	1c42      	adds	r2, r0, #1
 8008894:	d101      	bne.n	800889a <__sflush_r+0x7a>
 8008896:	682b      	ldr	r3, [r5, #0]
 8008898:	b903      	cbnz	r3, 800889c <__sflush_r+0x7c>
 800889a:	6560      	str	r0, [r4, #84]	; 0x54
 800889c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800889e:	602f      	str	r7, [r5, #0]
 80088a0:	2900      	cmp	r1, #0
 80088a2:	d0ca      	beq.n	800883a <__sflush_r+0x1a>
 80088a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088a8:	4299      	cmp	r1, r3
 80088aa:	d002      	beq.n	80088b2 <__sflush_r+0x92>
 80088ac:	4628      	mov	r0, r5
 80088ae:	f7ff fae3 	bl	8007e78 <_free_r>
 80088b2:	2000      	movs	r0, #0
 80088b4:	6360      	str	r0, [r4, #52]	; 0x34
 80088b6:	e7c1      	b.n	800883c <__sflush_r+0x1c>
 80088b8:	6a21      	ldr	r1, [r4, #32]
 80088ba:	2301      	movs	r3, #1
 80088bc:	4628      	mov	r0, r5
 80088be:	47b0      	blx	r6
 80088c0:	1c41      	adds	r1, r0, #1
 80088c2:	d1c7      	bne.n	8008854 <__sflush_r+0x34>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0c4      	beq.n	8008854 <__sflush_r+0x34>
 80088ca:	2b1d      	cmp	r3, #29
 80088cc:	d001      	beq.n	80088d2 <__sflush_r+0xb2>
 80088ce:	2b16      	cmp	r3, #22
 80088d0:	d101      	bne.n	80088d6 <__sflush_r+0xb6>
 80088d2:	602f      	str	r7, [r5, #0]
 80088d4:	e7b1      	b.n	800883a <__sflush_r+0x1a>
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088dc:	81a3      	strh	r3, [r4, #12]
 80088de:	e7ad      	b.n	800883c <__sflush_r+0x1c>
 80088e0:	690f      	ldr	r7, [r1, #16]
 80088e2:	2f00      	cmp	r7, #0
 80088e4:	d0a9      	beq.n	800883a <__sflush_r+0x1a>
 80088e6:	0793      	lsls	r3, r2, #30
 80088e8:	bf18      	it	ne
 80088ea:	2300      	movne	r3, #0
 80088ec:	680e      	ldr	r6, [r1, #0]
 80088ee:	bf08      	it	eq
 80088f0:	694b      	ldreq	r3, [r1, #20]
 80088f2:	eba6 0807 	sub.w	r8, r6, r7
 80088f6:	600f      	str	r7, [r1, #0]
 80088f8:	608b      	str	r3, [r1, #8]
 80088fa:	f1b8 0f00 	cmp.w	r8, #0
 80088fe:	dd9c      	ble.n	800883a <__sflush_r+0x1a>
 8008900:	4643      	mov	r3, r8
 8008902:	463a      	mov	r2, r7
 8008904:	4628      	mov	r0, r5
 8008906:	6a21      	ldr	r1, [r4, #32]
 8008908:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800890a:	47b0      	blx	r6
 800890c:	2800      	cmp	r0, #0
 800890e:	dc06      	bgt.n	800891e <__sflush_r+0xfe>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f04f 30ff 	mov.w	r0, #4294967295
 8008916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	e78e      	b.n	800883c <__sflush_r+0x1c>
 800891e:	4407      	add	r7, r0
 8008920:	eba8 0800 	sub.w	r8, r8, r0
 8008924:	e7e9      	b.n	80088fa <__sflush_r+0xda>
 8008926:	bf00      	nop
 8008928:	20400001 	.word	0x20400001

0800892c <_fflush_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	690b      	ldr	r3, [r1, #16]
 8008930:	4605      	mov	r5, r0
 8008932:	460c      	mov	r4, r1
 8008934:	b913      	cbnz	r3, 800893c <_fflush_r+0x10>
 8008936:	2500      	movs	r5, #0
 8008938:	4628      	mov	r0, r5
 800893a:	bd38      	pop	{r3, r4, r5, pc}
 800893c:	b118      	cbz	r0, 8008946 <_fflush_r+0x1a>
 800893e:	6983      	ldr	r3, [r0, #24]
 8008940:	b90b      	cbnz	r3, 8008946 <_fflush_r+0x1a>
 8008942:	f000 f887 	bl	8008a54 <__sinit>
 8008946:	4b14      	ldr	r3, [pc, #80]	; (8008998 <_fflush_r+0x6c>)
 8008948:	429c      	cmp	r4, r3
 800894a:	d11b      	bne.n	8008984 <_fflush_r+0x58>
 800894c:	686c      	ldr	r4, [r5, #4]
 800894e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0ef      	beq.n	8008936 <_fflush_r+0xa>
 8008956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008958:	07d0      	lsls	r0, r2, #31
 800895a:	d404      	bmi.n	8008966 <_fflush_r+0x3a>
 800895c:	0599      	lsls	r1, r3, #22
 800895e:	d402      	bmi.n	8008966 <_fflush_r+0x3a>
 8008960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008962:	f000 f915 	bl	8008b90 <__retarget_lock_acquire_recursive>
 8008966:	4628      	mov	r0, r5
 8008968:	4621      	mov	r1, r4
 800896a:	f7ff ff59 	bl	8008820 <__sflush_r>
 800896e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008970:	4605      	mov	r5, r0
 8008972:	07da      	lsls	r2, r3, #31
 8008974:	d4e0      	bmi.n	8008938 <_fflush_r+0xc>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	059b      	lsls	r3, r3, #22
 800897a:	d4dd      	bmi.n	8008938 <_fflush_r+0xc>
 800897c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800897e:	f000 f908 	bl	8008b92 <__retarget_lock_release_recursive>
 8008982:	e7d9      	b.n	8008938 <_fflush_r+0xc>
 8008984:	4b05      	ldr	r3, [pc, #20]	; (800899c <_fflush_r+0x70>)
 8008986:	429c      	cmp	r4, r3
 8008988:	d101      	bne.n	800898e <_fflush_r+0x62>
 800898a:	68ac      	ldr	r4, [r5, #8]
 800898c:	e7df      	b.n	800894e <_fflush_r+0x22>
 800898e:	4b04      	ldr	r3, [pc, #16]	; (80089a0 <_fflush_r+0x74>)
 8008990:	429c      	cmp	r4, r3
 8008992:	bf08      	it	eq
 8008994:	68ec      	ldreq	r4, [r5, #12]
 8008996:	e7da      	b.n	800894e <_fflush_r+0x22>
 8008998:	08009304 	.word	0x08009304
 800899c:	08009324 	.word	0x08009324
 80089a0:	080092e4 	.word	0x080092e4

080089a4 <std>:
 80089a4:	2300      	movs	r3, #0
 80089a6:	b510      	push	{r4, lr}
 80089a8:	4604      	mov	r4, r0
 80089aa:	e9c0 3300 	strd	r3, r3, [r0]
 80089ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089b2:	6083      	str	r3, [r0, #8]
 80089b4:	8181      	strh	r1, [r0, #12]
 80089b6:	6643      	str	r3, [r0, #100]	; 0x64
 80089b8:	81c2      	strh	r2, [r0, #14]
 80089ba:	6183      	str	r3, [r0, #24]
 80089bc:	4619      	mov	r1, r3
 80089be:	2208      	movs	r2, #8
 80089c0:	305c      	adds	r0, #92	; 0x5c
 80089c2:	f7fb fe33 	bl	800462c <memset>
 80089c6:	4b05      	ldr	r3, [pc, #20]	; (80089dc <std+0x38>)
 80089c8:	6224      	str	r4, [r4, #32]
 80089ca:	6263      	str	r3, [r4, #36]	; 0x24
 80089cc:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <std+0x3c>)
 80089ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80089d0:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <std+0x40>)
 80089d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <std+0x44>)
 80089d6:	6323      	str	r3, [r4, #48]	; 0x30
 80089d8:	bd10      	pop	{r4, pc}
 80089da:	bf00      	nop
 80089dc:	08008cf5 	.word	0x08008cf5
 80089e0:	08008d17 	.word	0x08008d17
 80089e4:	08008d4f 	.word	0x08008d4f
 80089e8:	08008d73 	.word	0x08008d73

080089ec <_cleanup_r>:
 80089ec:	4901      	ldr	r1, [pc, #4]	; (80089f4 <_cleanup_r+0x8>)
 80089ee:	f000 b8af 	b.w	8008b50 <_fwalk_reent>
 80089f2:	bf00      	nop
 80089f4:	0800892d 	.word	0x0800892d

080089f8 <__sfmoreglue>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	2568      	movs	r5, #104	; 0x68
 80089fc:	1e4a      	subs	r2, r1, #1
 80089fe:	4355      	muls	r5, r2
 8008a00:	460e      	mov	r6, r1
 8008a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a06:	f7ff fa83 	bl	8007f10 <_malloc_r>
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	b140      	cbz	r0, 8008a20 <__sfmoreglue+0x28>
 8008a0e:	2100      	movs	r1, #0
 8008a10:	e9c0 1600 	strd	r1, r6, [r0]
 8008a14:	300c      	adds	r0, #12
 8008a16:	60a0      	str	r0, [r4, #8]
 8008a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a1c:	f7fb fe06 	bl	800462c <memset>
 8008a20:	4620      	mov	r0, r4
 8008a22:	bd70      	pop	{r4, r5, r6, pc}

08008a24 <__sfp_lock_acquire>:
 8008a24:	4801      	ldr	r0, [pc, #4]	; (8008a2c <__sfp_lock_acquire+0x8>)
 8008a26:	f000 b8b3 	b.w	8008b90 <__retarget_lock_acquire_recursive>
 8008a2a:	bf00      	nop
 8008a2c:	2000084c 	.word	0x2000084c

08008a30 <__sfp_lock_release>:
 8008a30:	4801      	ldr	r0, [pc, #4]	; (8008a38 <__sfp_lock_release+0x8>)
 8008a32:	f000 b8ae 	b.w	8008b92 <__retarget_lock_release_recursive>
 8008a36:	bf00      	nop
 8008a38:	2000084c 	.word	0x2000084c

08008a3c <__sinit_lock_acquire>:
 8008a3c:	4801      	ldr	r0, [pc, #4]	; (8008a44 <__sinit_lock_acquire+0x8>)
 8008a3e:	f000 b8a7 	b.w	8008b90 <__retarget_lock_acquire_recursive>
 8008a42:	bf00      	nop
 8008a44:	20000847 	.word	0x20000847

08008a48 <__sinit_lock_release>:
 8008a48:	4801      	ldr	r0, [pc, #4]	; (8008a50 <__sinit_lock_release+0x8>)
 8008a4a:	f000 b8a2 	b.w	8008b92 <__retarget_lock_release_recursive>
 8008a4e:	bf00      	nop
 8008a50:	20000847 	.word	0x20000847

08008a54 <__sinit>:
 8008a54:	b510      	push	{r4, lr}
 8008a56:	4604      	mov	r4, r0
 8008a58:	f7ff fff0 	bl	8008a3c <__sinit_lock_acquire>
 8008a5c:	69a3      	ldr	r3, [r4, #24]
 8008a5e:	b11b      	cbz	r3, 8008a68 <__sinit+0x14>
 8008a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a64:	f7ff bff0 	b.w	8008a48 <__sinit_lock_release>
 8008a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8008a6e:	4b13      	ldr	r3, [pc, #76]	; (8008abc <__sinit+0x68>)
 8008a70:	4a13      	ldr	r2, [pc, #76]	; (8008ac0 <__sinit+0x6c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a76:	42a3      	cmp	r3, r4
 8008a78:	bf08      	it	eq
 8008a7a:	2301      	moveq	r3, #1
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	bf08      	it	eq
 8008a80:	61a3      	streq	r3, [r4, #24]
 8008a82:	f000 f81f 	bl	8008ac4 <__sfp>
 8008a86:	6060      	str	r0, [r4, #4]
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 f81b 	bl	8008ac4 <__sfp>
 8008a8e:	60a0      	str	r0, [r4, #8]
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 f817 	bl	8008ac4 <__sfp>
 8008a96:	2200      	movs	r2, #0
 8008a98:	2104      	movs	r1, #4
 8008a9a:	60e0      	str	r0, [r4, #12]
 8008a9c:	6860      	ldr	r0, [r4, #4]
 8008a9e:	f7ff ff81 	bl	80089a4 <std>
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	2109      	movs	r1, #9
 8008aa6:	68a0      	ldr	r0, [r4, #8]
 8008aa8:	f7ff ff7c 	bl	80089a4 <std>
 8008aac:	2202      	movs	r2, #2
 8008aae:	2112      	movs	r1, #18
 8008ab0:	68e0      	ldr	r0, [r4, #12]
 8008ab2:	f7ff ff77 	bl	80089a4 <std>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	61a3      	str	r3, [r4, #24]
 8008aba:	e7d1      	b.n	8008a60 <__sinit+0xc>
 8008abc:	08008e90 	.word	0x08008e90
 8008ac0:	080089ed 	.word	0x080089ed

08008ac4 <__sfp>:
 8008ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	f7ff ffac 	bl	8008a24 <__sfp_lock_acquire>
 8008acc:	4b1e      	ldr	r3, [pc, #120]	; (8008b48 <__sfp+0x84>)
 8008ace:	681e      	ldr	r6, [r3, #0]
 8008ad0:	69b3      	ldr	r3, [r6, #24]
 8008ad2:	b913      	cbnz	r3, 8008ada <__sfp+0x16>
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff ffbd 	bl	8008a54 <__sinit>
 8008ada:	3648      	adds	r6, #72	; 0x48
 8008adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	d503      	bpl.n	8008aec <__sfp+0x28>
 8008ae4:	6833      	ldr	r3, [r6, #0]
 8008ae6:	b30b      	cbz	r3, 8008b2c <__sfp+0x68>
 8008ae8:	6836      	ldr	r6, [r6, #0]
 8008aea:	e7f7      	b.n	8008adc <__sfp+0x18>
 8008aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008af0:	b9d5      	cbnz	r5, 8008b28 <__sfp+0x64>
 8008af2:	4b16      	ldr	r3, [pc, #88]	; (8008b4c <__sfp+0x88>)
 8008af4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008af8:	60e3      	str	r3, [r4, #12]
 8008afa:	6665      	str	r5, [r4, #100]	; 0x64
 8008afc:	f000 f847 	bl	8008b8e <__retarget_lock_init_recursive>
 8008b00:	f7ff ff96 	bl	8008a30 <__sfp_lock_release>
 8008b04:	2208      	movs	r2, #8
 8008b06:	4629      	mov	r1, r5
 8008b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b10:	6025      	str	r5, [r4, #0]
 8008b12:	61a5      	str	r5, [r4, #24]
 8008b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b18:	f7fb fd88 	bl	800462c <memset>
 8008b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b24:	4620      	mov	r0, r4
 8008b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b28:	3468      	adds	r4, #104	; 0x68
 8008b2a:	e7d9      	b.n	8008ae0 <__sfp+0x1c>
 8008b2c:	2104      	movs	r1, #4
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f7ff ff62 	bl	80089f8 <__sfmoreglue>
 8008b34:	4604      	mov	r4, r0
 8008b36:	6030      	str	r0, [r6, #0]
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d1d5      	bne.n	8008ae8 <__sfp+0x24>
 8008b3c:	f7ff ff78 	bl	8008a30 <__sfp_lock_release>
 8008b40:	230c      	movs	r3, #12
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	e7ee      	b.n	8008b24 <__sfp+0x60>
 8008b46:	bf00      	nop
 8008b48:	08008e90 	.word	0x08008e90
 8008b4c:	ffff0001 	.word	0xffff0001

08008b50 <_fwalk_reent>:
 8008b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b54:	4606      	mov	r6, r0
 8008b56:	4688      	mov	r8, r1
 8008b58:	2700      	movs	r7, #0
 8008b5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b62:	f1b9 0901 	subs.w	r9, r9, #1
 8008b66:	d505      	bpl.n	8008b74 <_fwalk_reent+0x24>
 8008b68:	6824      	ldr	r4, [r4, #0]
 8008b6a:	2c00      	cmp	r4, #0
 8008b6c:	d1f7      	bne.n	8008b5e <_fwalk_reent+0xe>
 8008b6e:	4638      	mov	r0, r7
 8008b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b74:	89ab      	ldrh	r3, [r5, #12]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d907      	bls.n	8008b8a <_fwalk_reent+0x3a>
 8008b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	d003      	beq.n	8008b8a <_fwalk_reent+0x3a>
 8008b82:	4629      	mov	r1, r5
 8008b84:	4630      	mov	r0, r6
 8008b86:	47c0      	blx	r8
 8008b88:	4307      	orrs	r7, r0
 8008b8a:	3568      	adds	r5, #104	; 0x68
 8008b8c:	e7e9      	b.n	8008b62 <_fwalk_reent+0x12>

08008b8e <__retarget_lock_init_recursive>:
 8008b8e:	4770      	bx	lr

08008b90 <__retarget_lock_acquire_recursive>:
 8008b90:	4770      	bx	lr

08008b92 <__retarget_lock_release_recursive>:
 8008b92:	4770      	bx	lr

08008b94 <__swhatbuf_r>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	460e      	mov	r6, r1
 8008b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b9c:	4614      	mov	r4, r2
 8008b9e:	2900      	cmp	r1, #0
 8008ba0:	461d      	mov	r5, r3
 8008ba2:	b096      	sub	sp, #88	; 0x58
 8008ba4:	da07      	bge.n	8008bb6 <__swhatbuf_r+0x22>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	602b      	str	r3, [r5, #0]
 8008baa:	89b3      	ldrh	r3, [r6, #12]
 8008bac:	061a      	lsls	r2, r3, #24
 8008bae:	d410      	bmi.n	8008bd2 <__swhatbuf_r+0x3e>
 8008bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bb4:	e00e      	b.n	8008bd4 <__swhatbuf_r+0x40>
 8008bb6:	466a      	mov	r2, sp
 8008bb8:	f000 f902 	bl	8008dc0 <_fstat_r>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	dbf2      	blt.n	8008ba6 <__swhatbuf_r+0x12>
 8008bc0:	9a01      	ldr	r2, [sp, #4]
 8008bc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bca:	425a      	negs	r2, r3
 8008bcc:	415a      	adcs	r2, r3
 8008bce:	602a      	str	r2, [r5, #0]
 8008bd0:	e7ee      	b.n	8008bb0 <__swhatbuf_r+0x1c>
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	b016      	add	sp, #88	; 0x58
 8008bda:	bd70      	pop	{r4, r5, r6, pc}

08008bdc <__smakebuf_r>:
 8008bdc:	898b      	ldrh	r3, [r1, #12]
 8008bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008be0:	079d      	lsls	r5, r3, #30
 8008be2:	4606      	mov	r6, r0
 8008be4:	460c      	mov	r4, r1
 8008be6:	d507      	bpl.n	8008bf8 <__smakebuf_r+0x1c>
 8008be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	6123      	str	r3, [r4, #16]
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	6163      	str	r3, [r4, #20]
 8008bf4:	b002      	add	sp, #8
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
 8008bf8:	466a      	mov	r2, sp
 8008bfa:	ab01      	add	r3, sp, #4
 8008bfc:	f7ff ffca 	bl	8008b94 <__swhatbuf_r>
 8008c00:	9900      	ldr	r1, [sp, #0]
 8008c02:	4605      	mov	r5, r0
 8008c04:	4630      	mov	r0, r6
 8008c06:	f7ff f983 	bl	8007f10 <_malloc_r>
 8008c0a:	b948      	cbnz	r0, 8008c20 <__smakebuf_r+0x44>
 8008c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c10:	059a      	lsls	r2, r3, #22
 8008c12:	d4ef      	bmi.n	8008bf4 <__smakebuf_r+0x18>
 8008c14:	f023 0303 	bic.w	r3, r3, #3
 8008c18:	f043 0302 	orr.w	r3, r3, #2
 8008c1c:	81a3      	strh	r3, [r4, #12]
 8008c1e:	e7e3      	b.n	8008be8 <__smakebuf_r+0xc>
 8008c20:	4b0d      	ldr	r3, [pc, #52]	; (8008c58 <__smakebuf_r+0x7c>)
 8008c22:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	6020      	str	r0, [r4, #0]
 8008c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c2c:	81a3      	strh	r3, [r4, #12]
 8008c2e:	9b00      	ldr	r3, [sp, #0]
 8008c30:	6120      	str	r0, [r4, #16]
 8008c32:	6163      	str	r3, [r4, #20]
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	b15b      	cbz	r3, 8008c50 <__smakebuf_r+0x74>
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c3e:	f000 f8d1 	bl	8008de4 <_isatty_r>
 8008c42:	b128      	cbz	r0, 8008c50 <__smakebuf_r+0x74>
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f023 0303 	bic.w	r3, r3, #3
 8008c4a:	f043 0301 	orr.w	r3, r3, #1
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	89a0      	ldrh	r0, [r4, #12]
 8008c52:	4305      	orrs	r5, r0
 8008c54:	81a5      	strh	r5, [r4, #12]
 8008c56:	e7cd      	b.n	8008bf4 <__smakebuf_r+0x18>
 8008c58:	080089ed 	.word	0x080089ed

08008c5c <_malloc_usable_size_r>:
 8008c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c60:	1f18      	subs	r0, r3, #4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	bfbc      	itt	lt
 8008c66:	580b      	ldrlt	r3, [r1, r0]
 8008c68:	18c0      	addlt	r0, r0, r3
 8008c6a:	4770      	bx	lr

08008c6c <_raise_r>:
 8008c6c:	291f      	cmp	r1, #31
 8008c6e:	b538      	push	{r3, r4, r5, lr}
 8008c70:	4604      	mov	r4, r0
 8008c72:	460d      	mov	r5, r1
 8008c74:	d904      	bls.n	8008c80 <_raise_r+0x14>
 8008c76:	2316      	movs	r3, #22
 8008c78:	6003      	str	r3, [r0, #0]
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c82:	b112      	cbz	r2, 8008c8a <_raise_r+0x1e>
 8008c84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c88:	b94b      	cbnz	r3, 8008c9e <_raise_r+0x32>
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 f830 	bl	8008cf0 <_getpid_r>
 8008c90:	462a      	mov	r2, r5
 8008c92:	4601      	mov	r1, r0
 8008c94:	4620      	mov	r0, r4
 8008c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c9a:	f000 b817 	b.w	8008ccc <_kill_r>
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d00a      	beq.n	8008cb8 <_raise_r+0x4c>
 8008ca2:	1c59      	adds	r1, r3, #1
 8008ca4:	d103      	bne.n	8008cae <_raise_r+0x42>
 8008ca6:	2316      	movs	r3, #22
 8008ca8:	6003      	str	r3, [r0, #0]
 8008caa:	2001      	movs	r0, #1
 8008cac:	e7e7      	b.n	8008c7e <_raise_r+0x12>
 8008cae:	2400      	movs	r4, #0
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cb6:	4798      	blx	r3
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e7e0      	b.n	8008c7e <_raise_r+0x12>

08008cbc <raise>:
 8008cbc:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <raise+0xc>)
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f7ff bfd3 	b.w	8008c6c <_raise_r>
 8008cc6:	bf00      	nop
 8008cc8:	2000000c 	.word	0x2000000c

08008ccc <_kill_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	2300      	movs	r3, #0
 8008cd0:	4d06      	ldr	r5, [pc, #24]	; (8008cec <_kill_r+0x20>)
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	f7f8 fe06 	bl	80018ea <_kill>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	d102      	bne.n	8008ce8 <_kill_r+0x1c>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	b103      	cbz	r3, 8008ce8 <_kill_r+0x1c>
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	bd38      	pop	{r3, r4, r5, pc}
 8008cea:	bf00      	nop
 8008cec:	20000840 	.word	0x20000840

08008cf0 <_getpid_r>:
 8008cf0:	f7f8 bdf4 	b.w	80018dc <_getpid>

08008cf4 <__sread>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfc:	f000 f894 	bl	8008e28 <_read_r>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	bfab      	itete	ge
 8008d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d06:	89a3      	ldrhlt	r3, [r4, #12]
 8008d08:	181b      	addge	r3, r3, r0
 8008d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d0e:	bfac      	ite	ge
 8008d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d12:	81a3      	strhlt	r3, [r4, #12]
 8008d14:	bd10      	pop	{r4, pc}

08008d16 <__swrite>:
 8008d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1a:	461f      	mov	r7, r3
 8008d1c:	898b      	ldrh	r3, [r1, #12]
 8008d1e:	4605      	mov	r5, r0
 8008d20:	05db      	lsls	r3, r3, #23
 8008d22:	460c      	mov	r4, r1
 8008d24:	4616      	mov	r6, r2
 8008d26:	d505      	bpl.n	8008d34 <__swrite+0x1e>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d30:	f000 f868 	bl	8008e04 <_lseek_r>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	4632      	mov	r2, r6
 8008d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d3c:	81a3      	strh	r3, [r4, #12]
 8008d3e:	4628      	mov	r0, r5
 8008d40:	463b      	mov	r3, r7
 8008d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4a:	f000 b817 	b.w	8008d7c <_write_r>

08008d4e <__sseek>:
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	460c      	mov	r4, r1
 8008d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d56:	f000 f855 	bl	8008e04 <_lseek_r>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	bf15      	itete	ne
 8008d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d6a:	81a3      	strheq	r3, [r4, #12]
 8008d6c:	bf18      	it	ne
 8008d6e:	81a3      	strhne	r3, [r4, #12]
 8008d70:	bd10      	pop	{r4, pc}

08008d72 <__sclose>:
 8008d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d76:	f000 b813 	b.w	8008da0 <_close_r>
	...

08008d7c <_write_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	4611      	mov	r1, r2
 8008d84:	2200      	movs	r2, #0
 8008d86:	4d05      	ldr	r5, [pc, #20]	; (8008d9c <_write_r+0x20>)
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f8 fde4 	bl	8001958 <_write>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_write_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_write_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20000840 	.word	0x20000840

08008da0 <_close_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	2300      	movs	r3, #0
 8008da4:	4d05      	ldr	r5, [pc, #20]	; (8008dbc <_close_r+0x1c>)
 8008da6:	4604      	mov	r4, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	f7f8 fdf0 	bl	8001990 <_close>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d102      	bne.n	8008dba <_close_r+0x1a>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	b103      	cbz	r3, 8008dba <_close_r+0x1a>
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	20000840 	.word	0x20000840

08008dc0 <_fstat_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4d06      	ldr	r5, [pc, #24]	; (8008de0 <_fstat_r+0x20>)
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4608      	mov	r0, r1
 8008dca:	4611      	mov	r1, r2
 8008dcc:	602b      	str	r3, [r5, #0]
 8008dce:	f7f8 fdea 	bl	80019a6 <_fstat>
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	d102      	bne.n	8008ddc <_fstat_r+0x1c>
 8008dd6:	682b      	ldr	r3, [r5, #0]
 8008dd8:	b103      	cbz	r3, 8008ddc <_fstat_r+0x1c>
 8008dda:	6023      	str	r3, [r4, #0]
 8008ddc:	bd38      	pop	{r3, r4, r5, pc}
 8008dde:	bf00      	nop
 8008de0:	20000840 	.word	0x20000840

08008de4 <_isatty_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	2300      	movs	r3, #0
 8008de8:	4d05      	ldr	r5, [pc, #20]	; (8008e00 <_isatty_r+0x1c>)
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f8 fde8 	bl	80019c4 <_isatty>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_isatty_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_isatty_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20000840 	.word	0x20000840

08008e04 <_lseek_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4604      	mov	r4, r0
 8008e08:	4608      	mov	r0, r1
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	4d05      	ldr	r5, [pc, #20]	; (8008e24 <_lseek_r+0x20>)
 8008e10:	602a      	str	r2, [r5, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f7f8 fde0 	bl	80019d8 <_lseek>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_lseek_r+0x1e>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_lseek_r+0x1e>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	20000840 	.word	0x20000840

08008e28 <_read_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	4611      	mov	r1, r2
 8008e30:	2200      	movs	r2, #0
 8008e32:	4d05      	ldr	r5, [pc, #20]	; (8008e48 <_read_r+0x20>)
 8008e34:	602a      	str	r2, [r5, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f7f8 fd71 	bl	800191e <_read>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d102      	bne.n	8008e46 <_read_r+0x1e>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b103      	cbz	r3, 8008e46 <_read_r+0x1e>
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	20000840 	.word	0x20000840

08008e4c <_init>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	bf00      	nop
 8008e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e52:	bc08      	pop	{r3}
 8008e54:	469e      	mov	lr, r3
 8008e56:	4770      	bx	lr

08008e58 <_fini>:
 8008e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5a:	bf00      	nop
 8008e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e5e:	bc08      	pop	{r3}
 8008e60:	469e      	mov	lr, r3
 8008e62:	4770      	bx	lr
