
main_LVTN_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000198c  080095e8  080095e8  000195e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af74  0800af74  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800af74  0800af74  0001af74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af7c  0800af7c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af80  0800af80  0001af80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800af84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  200001f0  0800b174  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  0800b174  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ce1  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cdb  00000000  00000000  00035efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00038bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00039e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a452  00000000  00000000  0003af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b76  00000000  00000000  000553aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000915f4  00000000  00000000  0006af20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc514  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062ac  00000000  00000000  000fc568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	080095cc 	.word	0x080095cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	080095cc 	.word	0x080095cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b9a6 	b.w	8000ecc <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f83e 	bl	8000c08 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2lz>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	4605      	mov	r5, r0
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f7ff ff09 	bl	80009bc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x20>
 8000bac:	4628      	mov	r0, r5
 8000bae:	4621      	mov	r1, r4
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fc7f 	bl	80004d8 <__aeabi_dmul>
 8000bda:	f7ff ff55 	bl	8000a88 <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc00 	bl	80003e4 <__aeabi_ui2d>
 8000be4:	2200      	movs	r2, #0
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <__aeabi_d2ulz+0x38>)
 8000be8:	f7ff fc76 	bl	80004d8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fab8 	bl	8000168 <__aeabi_dsub>
 8000bf8:	f7ff ff46 	bl	8000a88 <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	468e      	mov	lr, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f040 8083 	bne.w	8000d20 <__udivmoddi4+0x118>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4617      	mov	r7, r2
 8000c1e:	d947      	bls.n	8000cb0 <__udivmoddi4+0xa8>
 8000c20:	fab2 f382 	clz	r3, r2
 8000c24:	b14b      	cbz	r3, 8000c3a <__udivmoddi4+0x32>
 8000c26:	f1c3 0120 	rsb	r1, r3, #32
 8000c2a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	409f      	lsls	r7, r3
 8000c34:	ea41 0e0e 	orr.w	lr, r1, lr
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3e:	fbbe fcf8 	udiv	ip, lr, r8
 8000c42:	fa1f f987 	uxth.w	r9, r7
 8000c46:	fb08 e21c 	mls	r2, r8, ip, lr
 8000c4a:	fb0c f009 	mul.w	r0, ip, r9
 8000c4e:	0c21      	lsrs	r1, r4, #16
 8000c50:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x66>
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000c5e:	f080 8118 	bcs.w	8000e92 <__udivmoddi4+0x28a>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f240 8115 	bls.w	8000e92 <__udivmoddi4+0x28a>
 8000c68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c6c:	443a      	add	r2, r7
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	fbb2 f0f8 	udiv	r0, r2, r8
 8000c74:	fb08 2210 	mls	r2, r8, r0, r2
 8000c78:	fb00 f109 	mul.w	r1, r0, r9
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c82:	42a1      	cmp	r1, r4
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8c:	f080 8103 	bcs.w	8000e96 <__udivmoddi4+0x28e>
 8000c90:	42a1      	cmp	r1, r4
 8000c92:	f240 8100 	bls.w	8000e96 <__udivmoddi4+0x28e>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	1a64      	subs	r4, r4, r1
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	e9c6 4200 	strd	r4, r2, [r6]
 8000cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xac>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f382 	clz	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d14f      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cbc:	1a8d      	subs	r5, r1, r2
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cc4:	fa1f f882 	uxth.w	r8, r2
 8000cc8:	fbb5 fcfe 	udiv	ip, r5, lr
 8000ccc:	fb0e 551c 	mls	r5, lr, ip, r5
 8000cd0:	fb08 f00c 	mul.w	r0, r8, ip
 8000cd4:	0c22      	lsrs	r2, r4, #16
 8000cd6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000cda:	42a8      	cmp	r0, r5
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0xe6>
 8000cde:	197d      	adds	r5, r7, r5
 8000ce0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0xe4>
 8000ce6:	42a8      	cmp	r0, r5
 8000ce8:	f200 80e9 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000cec:	4694      	mov	ip, r2
 8000cee:	1a2d      	subs	r5, r5, r0
 8000cf0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000cf4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000cf8:	fb08 f800 	mul.w	r8, r8, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d02:	45a0      	cmp	r8, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x10e>
 8000d06:	193c      	adds	r4, r7, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x10c>
 8000d0e:	45a0      	cmp	r8, r4
 8000d10:	f200 80d9 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 0408 	sub.w	r4, r4, r8
 8000d1a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1e:	e7c0      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	f000 80b1 	beq.w	8000e8c <__udivmoddi4+0x284>
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e9c6 0500 	strd	r0, r5, [r6]
 8000d30:	4608      	mov	r0, r1
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d14b      	bne.n	8000dd6 <__udivmoddi4+0x1ce>
 8000d3e:	42ab      	cmp	r3, r5
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b9 	bhi.w	8000eba <__udivmoddi4+0x2b2>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb65 0303 	sbc.w	r3, r5, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	469e      	mov	lr, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0aa      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000d56:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d5a:	e7a7      	b.n	8000cac <__udivmoddi4+0xa4>
 8000d5c:	409f      	lsls	r7, r3
 8000d5e:	f1c3 0220 	rsb	r2, r3, #32
 8000d62:	40d1      	lsrs	r1, r2
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d74:	fa24 f202 	lsr.w	r2, r4, r2
 8000d78:	409d      	lsls	r5, r3
 8000d7a:	fb00 fc08 	mul.w	ip, r0, r8
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	0c15      	lsrs	r5, r2, #16
 8000d82:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d86:	45ac      	cmp	ip, r5
 8000d88:	fa04 f403 	lsl.w	r4, r4, r3
 8000d8c:	d909      	bls.n	8000da2 <__udivmoddi4+0x19a>
 8000d8e:	197d      	adds	r5, r7, r5
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	f080 808f 	bcs.w	8000eb6 <__udivmoddi4+0x2ae>
 8000d98:	45ac      	cmp	ip, r5
 8000d9a:	f240 808c 	bls.w	8000eb6 <__udivmoddi4+0x2ae>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	443d      	add	r5, r7
 8000da2:	eba5 050c 	sub.w	r5, r5, ip
 8000da6:	fbb5 f1fe 	udiv	r1, r5, lr
 8000daa:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000dae:	fb01 f908 	mul.w	r9, r1, r8
 8000db2:	b295      	uxth	r5, r2
 8000db4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000db8:	45a9      	cmp	r9, r5
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	197d      	adds	r5, r7, r5
 8000dbe:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dc2:	d274      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000dc4:	45a9      	cmp	r9, r5
 8000dc6:	d972      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000dc8:	3902      	subs	r1, #2
 8000dca:	443d      	add	r5, r7
 8000dcc:	eba5 0509 	sub.w	r5, r5, r9
 8000dd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd4:	e778      	b.n	8000cc8 <__udivmoddi4+0xc0>
 8000dd6:	f1c1 0720 	rsb	r7, r1, #32
 8000dda:	408b      	lsls	r3, r1
 8000ddc:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de0:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de4:	fa25 f407 	lsr.w	r4, r5, r7
 8000de8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dec:	fbb4 f9fe 	udiv	r9, r4, lr
 8000df0:	fa1f f88c 	uxth.w	r8, ip
 8000df4:	fb0e 4419 	mls	r4, lr, r9, r4
 8000df8:	fa20 f307 	lsr.w	r3, r0, r7
 8000dfc:	fb09 fa08 	mul.w	sl, r9, r8
 8000e00:	408d      	lsls	r5, r1
 8000e02:	431d      	orrs	r5, r3
 8000e04:	0c2b      	lsrs	r3, r5, #16
 8000e06:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e10:	fa00 f301 	lsl.w	r3, r0, r1
 8000e14:	d909      	bls.n	8000e2a <__udivmoddi4+0x222>
 8000e16:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1e:	d248      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e20:	45a2      	cmp	sl, r4
 8000e22:	d946      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e24:	f1a9 0902 	sub.w	r9, r9, #2
 8000e28:	4464      	add	r4, ip
 8000e2a:	eba4 040a 	sub.w	r4, r4, sl
 8000e2e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e32:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e36:	fb00 fa08 	mul.w	sl, r0, r8
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e40:	45a2      	cmp	sl, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x24e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e4c:	d22d      	bcs.n	8000eaa <__udivmoddi4+0x2a2>
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	d92b      	bls.n	8000eaa <__udivmoddi4+0x2a2>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	eba4 040a 	sub.w	r4, r4, sl
 8000e62:	454c      	cmp	r4, r9
 8000e64:	46c6      	mov	lr, r8
 8000e66:	464d      	mov	r5, r9
 8000e68:	d319      	bcc.n	8000e9e <__udivmoddi4+0x296>
 8000e6a:	d016      	beq.n	8000e9a <__udivmoddi4+0x292>
 8000e6c:	b15e      	cbz	r6, 8000e86 <__udivmoddi4+0x27e>
 8000e6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e72:	eb64 0405 	sbc.w	r4, r4, r5
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c6 7400 	strd	r7, r4, [r6]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e70c      	b.n	8000cac <__udivmoddi4+0xa4>
 8000e92:	468c      	mov	ip, r1
 8000e94:	e6eb      	b.n	8000c6e <__udivmoddi4+0x66>
 8000e96:	4610      	mov	r0, r2
 8000e98:	e6ff      	b.n	8000c9a <__udivmoddi4+0x92>
 8000e9a:	4543      	cmp	r3, r8
 8000e9c:	d2e6      	bcs.n	8000e6c <__udivmoddi4+0x264>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb69 050c 	sbc.w	r5, r9, ip
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7e0      	b.n	8000e6c <__udivmoddi4+0x264>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e7d3      	b.n	8000e56 <__udivmoddi4+0x24e>
 8000eae:	4611      	mov	r1, r2
 8000eb0:	e78c      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e7b9      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e773      	b.n	8000da2 <__udivmoddi4+0x19a>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e749      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebe:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec2:	443d      	add	r5, r7
 8000ec4:	e713      	b.n	8000cee <__udivmoddi4+0xe6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	e724      	b.n	8000d16 <__udivmoddi4+0x10e>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f1b      	ldrb	r3, [r3, #28]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	f040 8083 	bne.w	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000ee2:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11a      	bne.n	8000f20 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000eea:	2100      	movs	r1, #0
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f002 fd45 	bl	800397c <HAL_TIM_ReadCapturedValue>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a41      	ldr	r2, [pc, #260]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ef6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 020a 	bic.w	r2, r2, #10
 8000f0c:	621a      	str	r2, [r3, #32]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6a1a      	ldr	r2, [r3, #32]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0202 	orr.w	r2, r2, #2
 8000f1c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000f1e:	e063      	b.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d15f      	bne.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f002 fd26 	bl	800397c <HAL_TIM_ReadCapturedValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a33      	ldr	r2, [pc, #204]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f34:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d907      	bls.n	8000f5a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	4a2b      	ldr	r2, [pc, #172]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e00f      	b.n	8000f7a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d909      	bls.n	8000f7a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f74:	33ff      	adds	r3, #255	; 0xff
 8000f76:	4a23      	ldr	r2, [pc, #140]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f78:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa30 	bl	80003e4 <__aeabi_ui2d>
 8000f84:	a31a      	add	r3, pc, #104	; (adr r3, 8000ff0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff faa5 	bl	80004d8 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9e:	f7ff fbc5 	bl	800072c <__aeabi_ddiv>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fd6d 	bl	8000a88 <__aeabi_d2uiz>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fb4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6a1a      	ldr	r2, [r3, #32]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020a 	bic.w	r2, r2, #10
 8000fca:	621a      	str	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6a12      	ldr	r2, [r2, #32]
 8000fd6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0202 	bic.w	r2, r2, #2
 8000fe6:	60da      	str	r2, [r3, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	b020c49c 	.word	0xb020c49c
 8000ff4:	3fa16872 	.word	0x3fa16872
 8000ff8:	20000218 	.word	0x20000218
 8000ffc:	2000020c 	.word	0x2000020c
 8001000:	20000210 	.word	0x20000210
 8001004:	20000214 	.word	0x20000214
 8001008:	20000219 	.word	0x20000219
 800100c:	2000036c 	.word	0x2000036c

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f000 fd47 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f83b 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 f9e7 	bl	80013f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001022:	f000 f8ab 	bl	800117c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001026:	f000 f8df 	bl	80011e8 <MX_SPI2_Init>
  MX_TIM1_Init();
 800102a:	f000 f913 	bl	8001254 <MX_TIM1_Init>
  MX_I2C1_Init();
 800102e:	f000 f877 	bl	8001120 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001032:	f000 f9b3 	bl	800139c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001036:	f000 f963 	bl	8001300 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  TimerDelay_Init();
 800103a:	f003 fe13 	bl	8004c64 <TimerDelay_Init>
	ST7565_Init();
 800103e:	f003 f917 	bl	8004270 <ST7565_Init>
	HX711_init();
 8001042:	f003 fca5 	bl	8004990 <HX711_init>

	HAL_Delay(100);
 8001046:	2064      	movs	r0, #100	; 0x64
 8001048:	f000 fd90 	bl	8001b6c <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800104c:	2100      	movs	r1, #0
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <main+0x78>)
 8001050:	f002 f92e 	bl	80032b0 <HAL_TIM_IC_Start_IT>
	UImeas_pressure();
 8001054:	f003 fdb2 	bl	8004bbc <UImeas_pressure>
  uint8_t press = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

    press = HX711_getPressure();
 800105c:	f003 fd74 	bl	8004b48 <HX711_getPressure>
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
    sprintf (press_ch, "%d", press);
 8001064:	79fa      	ldrb	r2, [r7, #7]
 8001066:	463b      	mov	r3, r7
 8001068:	4908      	ldr	r1, [pc, #32]	; (800108c <main+0x7c>)
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fd1c 	bl	8005aa8 <siprintf>
    ST7565_Print(44, 1, press_ch, &Font_11x18, 1, BLACK);
 8001070:	463a      	mov	r2, r7
 8001072:	2301      	movs	r3, #1
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	2301      	movs	r3, #1
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <main+0x80>)
 800107c:	2101      	movs	r1, #1
 800107e:	202c      	movs	r0, #44	; 0x2c
 8001080:	f003 fada 	bl	8004638 <ST7565_Print>
    press = HX711_getPressure();
 8001084:	e7ea      	b.n	800105c <main+0x4c>
 8001086:	bf00      	nop
 8001088:	2000036c 	.word	0x2000036c
 800108c:	080095e8 	.word	0x080095e8
 8001090:	20000014 	.word	0x20000014

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b090      	sub	sp, #64	; 0x40
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	2228      	movs	r2, #40	; 0x28
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fe82 	bl	8004dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c8:	2302      	movs	r3, #2
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 f96f 	bl	80023c0 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010e8:	f000 fa14 	bl	8001514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ec:	230f      	movs	r3, #15
 80010ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	2302      	movs	r3, #2
 80010f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2102      	movs	r1, #2
 8001106:	4618      	mov	r0, r3
 8001108:	f001 fbda 	bl	80028c0 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001112:	f000 f9ff 	bl	8001514 <Error_Handler>
  }
}
 8001116:	bf00      	nop
 8001118:	3740      	adds	r7, #64	; 0x40
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_I2C1_Init+0x50>)
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <MX_I2C1_Init+0x54>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_I2C1_Init+0x50>)
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MX_I2C1_Init+0x58>)
 800112e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_I2C1_Init+0x50>)
 800113e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001142:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_I2C1_Init+0x50>)
 800115e:	f000 ffeb 	bl	8002138 <HAL_I2C_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001168:	f000 f9d4 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000314 	.word	0x20000314
 8001174:	40005400 	.word	0x40005400
 8001178:	000186a0 	.word	0x000186a0

0800117c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <MX_SPI1_Init+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001188:	f44f 7282 	mov.w	r2, #260	; 0x104
 800118c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011b0:	2208      	movs	r2, #8
 80011b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011ce:	f001 fd11 	bl	8002bf4 <HAL_SPI_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011d8:	f000 f99c 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200003b4 	.word	0x200003b4
 80011e4:	40013000 	.word	0x40013000

080011e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_SPI2_Init+0x64>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <MX_SPI2_Init+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_SPI2_Init+0x64>)
 80011f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_SPI2_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_SPI2_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_SPI2_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_SPI2_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_SPI2_Init+0x64>)
 8001214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001218:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_SPI2_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_SPI2_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_SPI2_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_SPI2_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_SPI2_Init+0x64>)
 8001234:	220a      	movs	r2, #10
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_SPI2_Init+0x64>)
 800123a:	f001 fcdb 	bl	8002bf4 <HAL_SPI_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001244:	f000 f966 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000274 	.word	0x20000274
 8001250:	40003800 	.word	0x40003800

08001254 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_TIM1_Init+0xa4>)
 8001272:	4a22      	ldr	r2, [pc, #136]	; (80012fc <MX_TIM1_Init+0xa8>)
 8001274:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <MX_TIM1_Init+0xa4>)
 8001278:	2247      	movs	r2, #71	; 0x47
 800127a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_TIM1_Init+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_TIM1_Init+0xa4>)
 8001284:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001288:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_TIM1_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_TIM1_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_TIM1_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <MX_TIM1_Init+0xa4>)
 800129e:	f001 ffb7 	bl	8003210 <HAL_TIM_IC_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012a8:	f000 f934 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	480f      	ldr	r0, [pc, #60]	; (80012f8 <MX_TIM1_Init+0xa4>)
 80012bc:	f002 fdf0 	bl	8003ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012c6:	f000 f925 	bl	8001514 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012ce:	2301      	movs	r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_TIM1_Init+0xa4>)
 80012e2:	f002 f9f3 	bl	80036cc <HAL_TIM_IC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80012ec:	f000 f912 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000036c 	.word	0x2000036c
 80012fc:	40012c00 	.word	0x40012c00

08001300 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_TIM4_Init+0x94>)
 800131e:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <MX_TIM4_Init+0x98>)
 8001320:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_TIM4_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_TIM4_Init+0x94>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_TIM4_Init+0x94>)
 8001330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001334:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_TIM4_Init+0x94>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_TIM4_Init+0x94>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001342:	4814      	ldr	r0, [pc, #80]	; (8001394 <MX_TIM4_Init+0x94>)
 8001344:	f001 feca 	bl	80030dc <HAL_TIM_Base_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800134e:	f000 f8e1 	bl	8001514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4619      	mov	r1, r3
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_TIM4_Init+0x94>)
 8001360:	f002 fa48 	bl	80037f4 <HAL_TIM_ConfigClockSource>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800136a:	f000 f8d3 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	4619      	mov	r1, r3
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <MX_TIM4_Init+0x94>)
 800137c:	f002 fd90 	bl	8003ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001386:	f000 f8c5 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200002cc 	.word	0x200002cc
 8001398:	40000800 	.word	0x40000800

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_USART2_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f002 fdd4 	bl	8003f80 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 f899 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000040c 	.word	0x2000040c
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <MX_GPIO_Init+0x114>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a3e      	ldr	r2, [pc, #248]	; (8001504 <MX_GPIO_Init+0x114>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <MX_GPIO_Init+0x114>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <MX_GPIO_Init+0x114>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a38      	ldr	r2, [pc, #224]	; (8001504 <MX_GPIO_Init+0x114>)
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b36      	ldr	r3, [pc, #216]	; (8001504 <MX_GPIO_Init+0x114>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <MX_GPIO_Init+0x114>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a32      	ldr	r2, [pc, #200]	; (8001504 <MX_GPIO_Init+0x114>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <MX_GPIO_Init+0x114>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <MX_GPIO_Init+0x114>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a2c      	ldr	r2, [pc, #176]	; (8001504 <MX_GPIO_Init+0x114>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <MX_GPIO_Init+0x114>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|Buzzer_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800146a:	4827      	ldr	r0, [pc, #156]	; (8001508 <MX_GPIO_Init+0x118>)
 800146c:	f000 fe4b 	bl	8002106 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|Pump_Pin|GPIO_PIN_10
 8001470:	2200      	movs	r2, #0
 8001472:	f641 6111 	movw	r1, #7697	; 0x1e11
 8001476:	4825      	ldr	r0, [pc, #148]	; (800150c <MX_GPIO_Init+0x11c>)
 8001478:	f000 fe45 	bl	8002106 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|Valve_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8001482:	4823      	ldr	r0, [pc, #140]	; (8001510 <MX_GPIO_Init+0x120>)
 8001484:	f000 fe3f 	bl	8002106 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 Buzzer_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|Buzzer_Pin;
 8001488:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800148c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2302      	movs	r3, #2
 8001498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4619      	mov	r1, r3
 80014a0:	4819      	ldr	r0, [pc, #100]	; (8001508 <MX_GPIO_Init+0x118>)
 80014a2:	f000 fc95 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 Pump_Pin PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|Pump_Pin|GPIO_PIN_10
 80014a6:	f641 6311 	movw	r3, #7697	; 0x1e11
 80014aa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	4813      	ldr	r0, [pc, #76]	; (800150c <MX_GPIO_Init+0x11c>)
 80014c0:	f000 fc86 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 Valve_Pin PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|Valve_Pin|GPIO_PIN_9;
 80014c4:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 80014c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	4619      	mov	r1, r3
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_GPIO_Init+0x120>)
 80014de:	f000 fc77 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_GPIO_Init+0x120>)
 80014f8:	f000 fc6a 	bl	8001dd0 <HAL_GPIO_Init>

}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	40011000 	.word	0x40011000
 800150c:	40010800 	.word	0x40010800
 8001510:	40010c00 	.word	0x40010c00

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 800151c:	e7fe      	b.n	800151c <Error_Handler+0x8>
	...

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_MspInit+0x5c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_MspInit+0x5c>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_MspInit+0x5c>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_MspInit+0x5c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_MspInit+0x5c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_MspInit+0x5c>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_MspInit+0x60>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_MspInit+0x60>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000

08001584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <HAL_I2C_MspInit+0x70>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d123      	bne.n	80015ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_I2C_MspInit+0x74>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <HAL_I2C_MspInit+0x74>)
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_I2C_MspInit+0x74>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015bc:	23c0      	movs	r3, #192	; 0xc0
 80015be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c0:	2312      	movs	r3, #18
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	480b      	ldr	r0, [pc, #44]	; (80015fc <HAL_I2C_MspInit+0x78>)
 80015d0:	f000 fbfe 	bl	8001dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_I2C_MspInit+0x74>)
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_I2C_MspInit+0x74>)
 80015da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015de:	61d3      	str	r3, [r2, #28]
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_I2C_MspInit+0x74>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010c00 	.word	0x40010c00

08001600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0318 	add.w	r3, r7, #24
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a37      	ldr	r2, [pc, #220]	; (80016f8 <HAL_SPI_MspInit+0xf8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d130      	bne.n	8001682 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001620:	4b36      	ldr	r3, [pc, #216]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a35      	ldr	r2, [pc, #212]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 8001626:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a2f      	ldr	r2, [pc, #188]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001650:	23a0      	movs	r3, #160	; 0xa0
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4619      	mov	r1, r3
 8001662:	4827      	ldr	r0, [pc, #156]	; (8001700 <HAL_SPI_MspInit+0x100>)
 8001664:	f000 fbb4 	bl	8001dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001668:	2340      	movs	r3, #64	; 0x40
 800166a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 0318 	add.w	r3, r7, #24
 8001678:	4619      	mov	r1, r3
 800167a:	4821      	ldr	r0, [pc, #132]	; (8001700 <HAL_SPI_MspInit+0x100>)
 800167c:	f000 fba8 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001680:	e036      	b.n	80016f0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <HAL_SPI_MspInit+0x104>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d131      	bne.n	80016f0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 8001692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001696:	61d3      	str	r3, [r2, #28]
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80016bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	4619      	mov	r1, r3
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <HAL_SPI_MspInit+0x108>)
 80016d2:	f000 fb7d 	bl	8001dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	4619      	mov	r1, r3
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <HAL_SPI_MspInit+0x108>)
 80016ec:	f000 fb70 	bl	8001dd0 <HAL_GPIO_Init>
}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40013000 	.word	0x40013000
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010800 	.word	0x40010800
 8001704:	40003800 	.word	0x40003800
 8001708:	40010c00 	.word	0x40010c00

0800170c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <HAL_TIM_IC_MspInit+0x84>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d12c      	bne.n	8001786 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_TIM_IC_MspInit+0x88>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_TIM_IC_MspInit+0x88>)
 8001732:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_TIM_IC_MspInit+0x88>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_TIM_IC_MspInit+0x88>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_TIM_IC_MspInit+0x88>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_TIM_IC_MspInit+0x88>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800175c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4619      	mov	r1, r3
 8001770:	4809      	ldr	r0, [pc, #36]	; (8001798 <HAL_TIM_IC_MspInit+0x8c>)
 8001772:	f000 fb2d 	bl	8001dd0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	201b      	movs	r0, #27
 800177c:	f000 faf1 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001780:	201b      	movs	r0, #27
 8001782:	f000 fb0a 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40012c00 	.word	0x40012c00
 8001794:	40021000 	.word	0x40021000
 8001798:	40010800 	.word	0x40010800

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <HAL_TIM_Base_MspInit+0x34>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10b      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_TIM_Base_MspInit+0x38>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_TIM_Base_MspInit+0x38>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_TIM_Base_MspInit+0x38>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	40000800 	.word	0x40000800
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <HAL_UART_MspInit+0x88>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d12f      	bne.n	8001858 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_UART_MspInit+0x8c>)
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	4a19      	ldr	r2, [pc, #100]	; (8001864 <HAL_UART_MspInit+0x8c>)
 80017fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001802:	61d3      	str	r3, [r2, #28]
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x8c>)
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_UART_MspInit+0x8c>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a13      	ldr	r2, [pc, #76]	; (8001864 <HAL_UART_MspInit+0x8c>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_UART_MspInit+0x8c>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001828:	2304      	movs	r3, #4
 800182a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4619      	mov	r1, r3
 800183a:	480b      	ldr	r0, [pc, #44]	; (8001868 <HAL_UART_MspInit+0x90>)
 800183c:	f000 fac8 	bl	8001dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001840:	2308      	movs	r3, #8
 8001842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_UART_MspInit+0x90>)
 8001854:	f000 fabc 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40004400 	.word	0x40004400
 8001864:	40021000 	.word	0x40021000
 8001868:	40010800 	.word	0x40010800

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b2:	f000 f93f 	bl	8001b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <TIM1_CC_IRQHandler+0x10>)
 80018c2:	f001 fdfb 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000036c 	.word	0x2000036c

080018d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	return 1;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <_kill>:

int _kill(int pid, int sig)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018e8:	f003 fa36 	bl	8004d58 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2216      	movs	r2, #22
 80018f0:	601a      	str	r2, [r3, #0]
	return -1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_exit>:

void _exit (int status)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001906:	f04f 31ff 	mov.w	r1, #4294967295
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffe7 	bl	80018de <_kill>
	while (1) {}		/* Make sure we hang here */
 8001910:	e7fe      	b.n	8001910 <_exit+0x12>

08001912 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e00a      	b.n	800193a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001924:	f3af 8000 	nop.w
 8001928:	4601      	mov	r1, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	60ba      	str	r2, [r7, #8]
 8001930:	b2ca      	uxtb	r2, r1
 8001932:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3301      	adds	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	dbf0      	blt.n	8001924 <_read+0x12>
	}

return len;
 8001942:	687b      	ldr	r3, [r7, #4]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e009      	b.n	8001972 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	60ba      	str	r2, [r7, #8]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbf1      	blt.n	800195e <_write+0x12>
	}
	return len;
 800197a:	687b      	ldr	r3, [r7, #4]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_close>:

int _close(int file)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	return -1;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019aa:	605a      	str	r2, [r3, #4]
	return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <_isatty>:

int _isatty(int file)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
	return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f003 f9a0 	bl	8004d58 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20005000 	.word	0x20005000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	2000021c 	.word	0x2000021c
 8001a4c:	20000860 	.word	0x20000860

08001a50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a5e:	e003      	b.n	8001a68 <LoopCopyDataInit>

08001a60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a66:	3104      	adds	r1, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a68:	480a      	ldr	r0, [pc, #40]	; (8001a94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a70:	d3f6      	bcc.n	8001a60 <CopyDataInit>
  ldr r2, =_sbss
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a74:	e002      	b.n	8001a7c <LoopFillZerobss>

08001a76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a78:	f842 3b04 	str.w	r3, [r2], #4

08001a7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a80:	d3f9      	bcc.n	8001a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a82:	f7ff ffe5 	bl	8001a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a86:	f003 f96d 	bl	8004d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a8a:	f7ff fac1 	bl	8001010 <main>
  bx lr
 8001a8e:	4770      	bx	lr
  ldr r3, =_sidata
 8001a90:	0800af84 	.word	0x0800af84
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a98:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8001a9c:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8001aa0:	20000860 	.word	0x20000860

08001aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC1_2_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_Init+0x28>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_Init+0x28>)
 8001ab2:	f043 0310 	orr.w	r3, r3, #16
 8001ab6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 f947 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 f808 	bl	8001ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac4:	f7ff fd2c 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40022000 	.word	0x40022000

08001ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_InitTick+0x54>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_InitTick+0x58>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f95f 	bl	8001db6 <HAL_SYSTICK_Config>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00e      	b.n	8001b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b0f      	cmp	r3, #15
 8001b06:	d80a      	bhi.n	8001b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f000 f927 	bl	8001d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b14:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <HAL_InitTick+0x5c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e000      	b.n	8001b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_IncTick+0x1c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_IncTick+0x20>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	4a03      	ldr	r2, [pc, #12]	; (8001b54 <HAL_IncTick+0x20>)
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	20000008 	.word	0x20000008
 8001b54:	2000044c 	.word	0x2000044c

08001b58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <HAL_GetTick+0x10>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	2000044c 	.word	0x2000044c

08001b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_GetTick>
 8001b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d005      	beq.n	8001b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_Delay+0x44>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b92:	bf00      	nop
 8001b94:	f7ff ffe0 	bl	8001b58 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d8f7      	bhi.n	8001b94 <HAL_Delay+0x28>
  {
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000008 	.word	0x20000008

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4906      	ldr	r1, [pc, #24]	; (8001c4c <__NVIC_EnableIRQ+0x34>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff90 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff2d 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff42 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff90 	bl	8001ca4 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5f 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff35 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b08b      	sub	sp, #44	; 0x2c
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de2:	e169      	b.n	80020b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de4:	2201      	movs	r2, #1
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 8158 	bne.w	80020b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4a9a      	ldr	r2, [pc, #616]	; (8002070 <HAL_GPIO_Init+0x2a0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d05e      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e0c:	4a98      	ldr	r2, [pc, #608]	; (8002070 <HAL_GPIO_Init+0x2a0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d875      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e12:	4a98      	ldr	r2, [pc, #608]	; (8002074 <HAL_GPIO_Init+0x2a4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d058      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e18:	4a96      	ldr	r2, [pc, #600]	; (8002074 <HAL_GPIO_Init+0x2a4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d86f      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e1e:	4a96      	ldr	r2, [pc, #600]	; (8002078 <HAL_GPIO_Init+0x2a8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d052      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e24:	4a94      	ldr	r2, [pc, #592]	; (8002078 <HAL_GPIO_Init+0x2a8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d869      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e2a:	4a94      	ldr	r2, [pc, #592]	; (800207c <HAL_GPIO_Init+0x2ac>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04c      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e30:	4a92      	ldr	r2, [pc, #584]	; (800207c <HAL_GPIO_Init+0x2ac>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d863      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e36:	4a92      	ldr	r2, [pc, #584]	; (8002080 <HAL_GPIO_Init+0x2b0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d046      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e3c:	4a90      	ldr	r2, [pc, #576]	; (8002080 <HAL_GPIO_Init+0x2b0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d85d      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d82a      	bhi.n	8001e9c <HAL_GPIO_Init+0xcc>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d859      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e4a:	a201      	add	r2, pc, #4	; (adr r2, 8001e50 <HAL_GPIO_Init+0x80>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001ecb 	.word	0x08001ecb
 8001e54:	08001ea5 	.word	0x08001ea5
 8001e58:	08001eb7 	.word	0x08001eb7
 8001e5c:	08001ef9 	.word	0x08001ef9
 8001e60:	08001eff 	.word	0x08001eff
 8001e64:	08001eff 	.word	0x08001eff
 8001e68:	08001eff 	.word	0x08001eff
 8001e6c:	08001eff 	.word	0x08001eff
 8001e70:	08001eff 	.word	0x08001eff
 8001e74:	08001eff 	.word	0x08001eff
 8001e78:	08001eff 	.word	0x08001eff
 8001e7c:	08001eff 	.word	0x08001eff
 8001e80:	08001eff 	.word	0x08001eff
 8001e84:	08001eff 	.word	0x08001eff
 8001e88:	08001eff 	.word	0x08001eff
 8001e8c:	08001eff 	.word	0x08001eff
 8001e90:	08001eff 	.word	0x08001eff
 8001e94:	08001ead 	.word	0x08001ead
 8001e98:	08001ec1 	.word	0x08001ec1
 8001e9c:	4a79      	ldr	r2, [pc, #484]	; (8002084 <HAL_GPIO_Init+0x2b4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea2:	e02c      	b.n	8001efe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e029      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e024      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	3308      	adds	r3, #8
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e01f      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	330c      	adds	r3, #12
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e01a      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e013      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	611a      	str	r2, [r3, #16]
          break;
 8001eea:	e009      	b.n	8001f00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eec:	2308      	movs	r3, #8
 8001eee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	615a      	str	r2, [r3, #20]
          break;
 8001ef6:	e003      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          break;
 8001efe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2bff      	cmp	r3, #255	; 0xff
 8001f04:	d801      	bhi.n	8001f0a <HAL_GPIO_Init+0x13a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	e001      	b.n	8001f0e <HAL_GPIO_Init+0x13e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2bff      	cmp	r3, #255	; 0xff
 8001f14:	d802      	bhi.n	8001f1c <HAL_GPIO_Init+0x14c>
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x152>
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3b08      	subs	r3, #8
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	210f      	movs	r1, #15
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	6a39      	ldr	r1, [r7, #32]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80b1 	beq.w	80020b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f50:	4b4d      	ldr	r3, [pc, #308]	; (8002088 <HAL_GPIO_Init+0x2b8>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	; (8002088 <HAL_GPIO_Init+0x2b8>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_GPIO_Init+0x2b8>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f68:	4a48      	ldr	r2, [pc, #288]	; (800208c <HAL_GPIO_Init+0x2bc>)
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a40      	ldr	r2, [pc, #256]	; (8002090 <HAL_GPIO_Init+0x2c0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <HAL_GPIO_Init+0x1ec>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3f      	ldr	r2, [pc, #252]	; (8002094 <HAL_GPIO_Init+0x2c4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_GPIO_Init+0x1e8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	; (8002098 <HAL_GPIO_Init+0x2c8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <HAL_GPIO_Init+0x1e4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <HAL_GPIO_Init+0x2cc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d101      	bne.n	8001fb0 <HAL_GPIO_Init+0x1e0>
 8001fac:	2303      	movs	r3, #3
 8001fae:	e006      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e004      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e002      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc0:	f002 0203 	and.w	r2, r2, #3
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	4093      	lsls	r3, r2
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fce:	492f      	ldr	r1, [pc, #188]	; (800208c <HAL_GPIO_Init+0x2bc>)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	492c      	ldr	r1, [pc, #176]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	4928      	ldr	r1, [pc, #160]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002000:	4013      	ands	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4922      	ldr	r1, [pc, #136]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	43db      	mvns	r3, r3
 8002026:	491e      	ldr	r1, [pc, #120]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002028:	4013      	ands	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d006      	beq.n	8002046 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	4918      	ldr	r1, [pc, #96]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	608b      	str	r3, [r1, #8]
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	43db      	mvns	r3, r3
 800204e:	4914      	ldr	r1, [pc, #80]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002050:	4013      	ands	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d021      	beq.n	80020a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	490e      	ldr	r1, [pc, #56]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	60cb      	str	r3, [r1, #12]
 800206c:	e021      	b.n	80020b2 <HAL_GPIO_Init+0x2e2>
 800206e:	bf00      	nop
 8002070:	10320000 	.word	0x10320000
 8002074:	10310000 	.word	0x10310000
 8002078:	10220000 	.word	0x10220000
 800207c:	10210000 	.word	0x10210000
 8002080:	10120000 	.word	0x10120000
 8002084:	10110000 	.word	0x10110000
 8002088:	40021000 	.word	0x40021000
 800208c:	40010000 	.word	0x40010000
 8002090:	40010800 	.word	0x40010800
 8002094:	40010c00 	.word	0x40010c00
 8002098:	40011000 	.word	0x40011000
 800209c:	40011400 	.word	0x40011400
 80020a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_GPIO_Init+0x304>)
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	4909      	ldr	r1, [pc, #36]	; (80020d4 <HAL_GPIO_Init+0x304>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	3301      	adds	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	fa22 f303 	lsr.w	r3, r2, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f47f ae8e 	bne.w	8001de4 <HAL_GPIO_Init+0x14>
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	372c      	adds	r7, #44	; 0x2c
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40010400 	.word	0x40010400

080020d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e001      	b.n	80020fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	807b      	strh	r3, [r7, #2]
 8002112:	4613      	mov	r3, r2
 8002114:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002116:	787b      	ldrb	r3, [r7, #1]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211c:	887a      	ldrh	r2, [r7, #2]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002122:	e003      	b.n	800212c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	041a      	lsls	r2, r3, #16
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	611a      	str	r2, [r3, #16]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
	...

08002138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e12b      	b.n	80023a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fa10 	bl	8001584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2224      	movs	r2, #36	; 0x24
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800218a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800219c:	f000 fce4 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 80021a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a81      	ldr	r2, [pc, #516]	; (80023ac <HAL_I2C_Init+0x274>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d807      	bhi.n	80021bc <HAL_I2C_Init+0x84>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4a80      	ldr	r2, [pc, #512]	; (80023b0 <HAL_I2C_Init+0x278>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	bf94      	ite	ls
 80021b4:	2301      	movls	r3, #1
 80021b6:	2300      	movhi	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e006      	b.n	80021ca <HAL_I2C_Init+0x92>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a7d      	ldr	r2, [pc, #500]	; (80023b4 <HAL_I2C_Init+0x27c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	bf94      	ite	ls
 80021c4:	2301      	movls	r3, #1
 80021c6:	2300      	movhi	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0e7      	b.n	80023a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4a78      	ldr	r2, [pc, #480]	; (80023b8 <HAL_I2C_Init+0x280>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9b      	lsrs	r3, r3, #18
 80021dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a6a      	ldr	r2, [pc, #424]	; (80023ac <HAL_I2C_Init+0x274>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d802      	bhi.n	800220c <HAL_I2C_Init+0xd4>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3301      	adds	r3, #1
 800220a:	e009      	b.n	8002220 <HAL_I2C_Init+0xe8>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	4a69      	ldr	r2, [pc, #420]	; (80023bc <HAL_I2C_Init+0x284>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	3301      	adds	r3, #1
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	430b      	orrs	r3, r1
 8002226:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002232:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	495c      	ldr	r1, [pc, #368]	; (80023ac <HAL_I2C_Init+0x274>)
 800223c:	428b      	cmp	r3, r1
 800223e:	d819      	bhi.n	8002274 <HAL_I2C_Init+0x13c>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1e59      	subs	r1, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fbb1 f3f3 	udiv	r3, r1, r3
 800224e:	1c59      	adds	r1, r3, #1
 8002250:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002254:	400b      	ands	r3, r1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_I2C_Init+0x138>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1e59      	subs	r1, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fbb1 f3f3 	udiv	r3, r1, r3
 8002268:	3301      	adds	r3, #1
 800226a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226e:	e051      	b.n	8002314 <HAL_I2C_Init+0x1dc>
 8002270:	2304      	movs	r3, #4
 8002272:	e04f      	b.n	8002314 <HAL_I2C_Init+0x1dc>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d111      	bne.n	80022a0 <HAL_I2C_Init+0x168>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1e58      	subs	r0, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	440b      	add	r3, r1
 800228a:	fbb0 f3f3 	udiv	r3, r0, r3
 800228e:	3301      	adds	r3, #1
 8002290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e012      	b.n	80022c6 <HAL_I2C_Init+0x18e>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1e58      	subs	r0, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	0099      	lsls	r1, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Init+0x196>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e022      	b.n	8002314 <HAL_I2C_Init+0x1dc>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10e      	bne.n	80022f4 <HAL_I2C_Init+0x1bc>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1e58      	subs	r0, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	440b      	add	r3, r1
 80022e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f2:	e00f      	b.n	8002314 <HAL_I2C_Init+0x1dc>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1e58      	subs	r0, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	0099      	lsls	r1, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	fbb0 f3f3 	udiv	r3, r0, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	6809      	ldr	r1, [r1, #0]
 8002318:	4313      	orrs	r3, r2
 800231a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002342:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6911      	ldr	r1, [r2, #16]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68d2      	ldr	r2, [r2, #12]
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	430b      	orrs	r3, r1
 8002356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	000186a0 	.word	0x000186a0
 80023b0:	001e847f 	.word	0x001e847f
 80023b4:	003d08ff 	.word	0x003d08ff
 80023b8:	431bde83 	.word	0x431bde83
 80023bc:	10624dd3 	.word	0x10624dd3

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e26c      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8087 	beq.w	80024ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e0:	4b92      	ldr	r3, [pc, #584]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d00c      	beq.n	8002406 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ec:	4b8f      	ldr	r3, [pc, #572]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d112      	bne.n	800241e <HAL_RCC_OscConfig+0x5e>
 80023f8:	4b8c      	ldr	r3, [pc, #560]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d10b      	bne.n	800241e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002406:	4b89      	ldr	r3, [pc, #548]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d06c      	beq.n	80024ec <HAL_RCC_OscConfig+0x12c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d168      	bne.n	80024ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e246      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x76>
 8002428:	4b80      	ldr	r3, [pc, #512]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a7f      	ldr	r2, [pc, #508]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e02e      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x98>
 800243e:	4b7b      	ldr	r3, [pc, #492]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7a      	ldr	r2, [pc, #488]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b78      	ldr	r3, [pc, #480]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a77      	ldr	r2, [pc, #476]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01d      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0xbc>
 8002462:	4b72      	ldr	r3, [pc, #456]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a71      	ldr	r2, [pc, #452]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b6f      	ldr	r3, [pc, #444]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6e      	ldr	r2, [pc, #440]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 800247c:	4b6b      	ldr	r3, [pc, #428]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6a      	ldr	r2, [pc, #424]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a67      	ldr	r2, [pc, #412]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800248e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002492:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff fb5c 	bl	8001b58 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a4:	f7ff fb58 	bl	8001b58 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e1fa      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b5d      	ldr	r3, [pc, #372]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0xe4>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff fb48 	bl	8001b58 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024cc:	f7ff fb44 	bl	8001b58 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1e6      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x10c>
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fa:	4b4c      	ldr	r3, [pc, #304]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002506:	4b49      	ldr	r3, [pc, #292]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b08      	cmp	r3, #8
 8002510:	d11c      	bne.n	800254c <HAL_RCC_OscConfig+0x18c>
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x176>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1ba      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4939      	ldr	r1, [pc, #228]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	e03a      	b.n	80025c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_RCC_OscConfig+0x270>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7ff fafd 	bl	8001b58 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002562:	f7ff faf9 	bl	8001b58 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e19b      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b2a      	ldr	r3, [pc, #168]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4927      	ldr	r1, [pc, #156]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <HAL_RCC_OscConfig+0x270>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff fadc 	bl	8001b58 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a4:	f7ff fad8 	bl	8001b58 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e17a      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d03a      	beq.n	8002644 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d019      	beq.n	800260a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_RCC_OscConfig+0x274>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7ff fabc 	bl	8001b58 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff fab8 	bl	8001b58 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e15a      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002602:	2001      	movs	r0, #1
 8002604:	f000 fad8 	bl	8002bb8 <RCC_Delay>
 8002608:	e01c      	b.n	8002644 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_OscConfig+0x274>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7ff faa2 	bl	8001b58 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002616:	e00f      	b.n	8002638 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7ff fa9e 	bl	8001b58 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d908      	bls.n	8002638 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e140      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	42420000 	.word	0x42420000
 8002634:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4b9e      	ldr	r3, [pc, #632]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e9      	bne.n	8002618 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a6 	beq.w	800279e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4b97      	ldr	r3, [pc, #604]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10d      	bne.n	800267e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b94      	ldr	r3, [pc, #592]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a93      	ldr	r2, [pc, #588]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	61d3      	str	r3, [r2, #28]
 800266e:	4b91      	ldr	r3, [pc, #580]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b8e      	ldr	r3, [pc, #568]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d118      	bne.n	80026bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268a:	4b8b      	ldr	r3, [pc, #556]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a8a      	ldr	r2, [pc, #552]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7ff fa5f 	bl	8001b58 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7ff fa5b 	bl	8001b58 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b64      	cmp	r3, #100	; 0x64
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0fd      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4b81      	ldr	r3, [pc, #516]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x312>
 80026c4:	4b7b      	ldr	r3, [pc, #492]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4a7a      	ldr	r2, [pc, #488]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6213      	str	r3, [r2, #32]
 80026d0:	e02d      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x334>
 80026da:	4b76      	ldr	r3, [pc, #472]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4a75      	ldr	r2, [pc, #468]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	6213      	str	r3, [r2, #32]
 80026e6:	4b73      	ldr	r3, [pc, #460]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a72      	ldr	r2, [pc, #456]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	f023 0304 	bic.w	r3, r3, #4
 80026f0:	6213      	str	r3, [r2, #32]
 80026f2:	e01c      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d10c      	bne.n	8002716 <HAL_RCC_OscConfig+0x356>
 80026fc:	4b6d      	ldr	r3, [pc, #436]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4a6c      	ldr	r2, [pc, #432]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	6213      	str	r3, [r2, #32]
 8002708:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4a69      	ldr	r2, [pc, #420]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6213      	str	r3, [r2, #32]
 8002714:	e00b      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 8002716:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a66      	ldr	r2, [pc, #408]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	4b64      	ldr	r3, [pc, #400]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a63      	ldr	r2, [pc, #396]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d015      	beq.n	8002762 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002736:	f7ff fa0f 	bl	8001b58 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7ff fa0b 	bl	8001b58 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0ab      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002754:	4b57      	ldr	r3, [pc, #348]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ee      	beq.n	800273e <HAL_RCC_OscConfig+0x37e>
 8002760:	e014      	b.n	800278c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7ff f9f9 	bl	8001b58 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7ff f9f5 	bl	8001b58 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e095      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002780:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ee      	bne.n	800276a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800278c:	7dfb      	ldrb	r3, [r7, #23]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	4b48      	ldr	r3, [pc, #288]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a47      	ldr	r2, [pc, #284]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8081 	beq.w	80028aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d061      	beq.n	8002878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d146      	bne.n	800284a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_RCC_OscConfig+0x4fc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7ff f9c9 	bl	8001b58 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7ff f9c5 	bl	8001b58 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e067      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d108      	bne.n	8002804 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027f2:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	492d      	ldr	r1, [pc, #180]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a19      	ldr	r1, [r3, #32]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	430b      	orrs	r3, r1
 8002816:	4927      	ldr	r1, [pc, #156]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_OscConfig+0x4fc>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7ff f999 	bl	8001b58 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7ff f995 	bl	8001b58 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e037      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x46a>
 8002848:	e02f      	b.n	80028aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_RCC_OscConfig+0x4fc>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff f982 	bl	8001b58 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7ff f97e 	bl	8001b58 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e020      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x498>
 8002876:	e018      	b.n	80028aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e013      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_OscConfig+0x4f4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	429a      	cmp	r2, r3
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40007000 	.word	0x40007000
 80028bc:	42420060 	.word	0x42420060

080028c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0d0      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d910      	bls.n	8002904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 0207 	bic.w	r2, r3, #7
 80028ea:	4965      	ldr	r1, [pc, #404]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0b8      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002926:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800293e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	494d      	ldr	r1, [pc, #308]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d040      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d115      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e073      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06b      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4936      	ldr	r1, [pc, #216]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b0:	f7ff f8d2 	bl	8001b58 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7ff f8ce 	bl	8001b58 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e053      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d210      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	4922      	ldr	r1, [pc, #136]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e032      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4916      	ldr	r1, [pc, #88]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	490e      	ldr	r1, [pc, #56]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4e:	f000 f821 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1cc>)
 8002a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1d0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f830 	bl	8001ad4 <HAL_InitTick>

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08009668 	.word	0x08009668
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	20000004 	.word	0x20000004

08002a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	b490      	push	{r4, r7}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a9c:	1d3c      	adds	r4, r7, #4
 8002a9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa4:	f240 2301 	movw	r3, #513	; 0x201
 8002aa8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d002      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x46>
 8002ad2:	e02d      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad6:	623b      	str	r3, [r7, #32]
      break;
 8002ad8:	e02d      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	0c9b      	lsrs	r3, r3, #18
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	0c5b      	lsrs	r3, r3, #17
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b06:	4413      	add	r3, r2
 8002b08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	4a0e      	ldr	r2, [pc, #56]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b12:	fb02 f203 	mul.w	r2, r2, r3
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e004      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	623b      	str	r3, [r7, #32]
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	6a3b      	ldr	r3, [r7, #32]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc90      	pop	{r4, r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	080095f4 	.word	0x080095f4
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	007a1200 	.word	0x007a1200
 8002b50:	003d0900 	.word	0x003d0900

08002b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	20000000 	.word	0x20000000

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b6c:	f7ff fff2 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08009678 	.word	0x08009678

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b94:	f7ff ffde 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0adb      	lsrs	r3, r3, #11
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08009678 	.word	0x08009678

08002bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <RCC_Delay+0x34>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <RCC_Delay+0x38>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0a5b      	lsrs	r3, r3, #9
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd4:	bf00      	nop
  }
  while (Delay --);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	60fa      	str	r2, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <RCC_Delay+0x1c>
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	10624dd3 	.word	0x10624dd3

08002bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e076      	b.n	8002cf4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c16:	d009      	beq.n	8002c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
 8002c1e:	e005      	b.n	8002c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fcda 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	ea42 0103 	orr.w	r1, r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	0c1a      	lsrs	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f002 0204 	and.w	r2, r2, #4
 8002cd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_SPI_Transmit+0x22>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e126      	b.n	8002f6c <HAL_SPI_Transmit+0x270>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d26:	f7fe ff17 	bl	8001b58 <HAL_GetTick>
 8002d2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d40:	e10b      	b.n	8002f5a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_SPI_Transmit+0x52>
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d52:	e102      	b.n	8002f5a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2203      	movs	r2, #3
 8002d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	88fa      	ldrh	r2, [r7, #6]
 8002d6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9a:	d10f      	bne.n	8002dbc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002daa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b40      	cmp	r3, #64	; 0x40
 8002dc8:	d007      	beq.n	8002dda <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de2:	d14b      	bne.n	8002e7c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_SPI_Transmit+0xf6>
 8002dec:	8afb      	ldrh	r3, [r7, #22]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d13e      	bne.n	8002e70 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	1c9a      	adds	r2, r3, #2
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e16:	e02b      	b.n	8002e70 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d112      	bne.n	8002e4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	881a      	ldrh	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	1c9a      	adds	r2, r3, #2
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e4a:	e011      	b.n	8002e70 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e4c:	f7fe fe84 	bl	8001b58 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d803      	bhi.n	8002e64 <HAL_SPI_Transmit+0x168>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e62:	d102      	bne.n	8002e6a <HAL_SPI_Transmit+0x16e>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e6e:	e074      	b.n	8002f5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ce      	bne.n	8002e18 <HAL_SPI_Transmit+0x11c>
 8002e7a:	e04c      	b.n	8002f16 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_SPI_Transmit+0x18e>
 8002e84:	8afb      	ldrh	r3, [r7, #22]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d140      	bne.n	8002f0c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	330c      	adds	r3, #12
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eb0:	e02c      	b.n	8002f0c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d113      	bne.n	8002ee8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	7812      	ldrb	r2, [r2, #0]
 8002ecc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ee6:	e011      	b.n	8002f0c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ee8:	f7fe fe36 	bl	8001b58 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d803      	bhi.n	8002f00 <HAL_SPI_Transmit+0x204>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d102      	bne.n	8002f06 <HAL_SPI_Transmit+0x20a>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f0a:	e026      	b.n	8002f5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1cd      	bne.n	8002eb2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	6839      	ldr	r1, [r7, #0]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f8c0 	bl	80030a0 <SPI_EndRxTxTransaction>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e000      	b.n	8002f5a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f82:	b2db      	uxtb	r3, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
	...

08002f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fa0:	f7fe fdda 	bl	8001b58 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fb0:	f7fe fdd2 	bl	8001b58 <HAL_GetTick>
 8002fb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	015b      	lsls	r3, r3, #5
 8002fbc:	0d1b      	lsrs	r3, r3, #20
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc6:	e054      	b.n	8003072 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fce:	d050      	beq.n	8003072 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fd0:	f7fe fdc2 	bl	8001b58 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d902      	bls.n	8002fe6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d13d      	bne.n	8003062 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ff4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffe:	d111      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003008:	d004      	beq.n	8003014 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003012:	d107      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003022:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302c:	d10f      	bne.n	800304e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e017      	b.n	8003092 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3b01      	subs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d19b      	bne.n	8002fc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000000 	.word	0x20000000

080030a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2200      	movs	r2, #0
 80030b4:	2180      	movs	r1, #128	; 0x80
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff ff6a 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f043 0220 	orr.w	r2, r3, #32
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e000      	b.n	80030d4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e041      	b.n	8003172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe fb4a 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f000 fc96 	bl	8003a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d001      	beq.n	8003194 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e032      	b.n	80031fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_TIM_Base_Start+0x88>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_TIM_Base_Start+0x48>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ae:	d009      	beq.n	80031c4 <HAL_TIM_Base_Start+0x48>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_TIM_Base_Start+0x8c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIM_Base_Start+0x48>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a13      	ldr	r2, [pc, #76]	; (800320c <HAL_TIM_Base_Start+0x90>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d111      	bne.n	80031e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d010      	beq.n	80031f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e6:	e007      	b.n	80031f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800

08003210 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e041      	b.n	80032a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fe fa68 	bl	800170c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f000 fbfc 	bl	8003a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <HAL_TIM_IC_Start_IT+0x1a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	e013      	b.n	80032f2 <HAL_TIM_IC_Start_IT+0x42>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d104      	bne.n	80032da <HAL_TIM_IC_Start_IT+0x2a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	e00b      	b.n	80032f2 <HAL_TIM_IC_Start_IT+0x42>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d104      	bne.n	80032ea <HAL_TIM_IC_Start_IT+0x3a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e003      	b.n	80032f2 <HAL_TIM_IC_Start_IT+0x42>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <HAL_TIM_IC_Start_IT+0x54>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e013      	b.n	800332c <HAL_TIM_IC_Start_IT+0x7c>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b04      	cmp	r3, #4
 8003308:	d104      	bne.n	8003314 <HAL_TIM_IC_Start_IT+0x64>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e00b      	b.n	800332c <HAL_TIM_IC_Start_IT+0x7c>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b08      	cmp	r3, #8
 8003318:	d104      	bne.n	8003324 <HAL_TIM_IC_Start_IT+0x74>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e003      	b.n	800332c <HAL_TIM_IC_Start_IT+0x7c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332a:	b2db      	uxtb	r3, r3
 800332c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d102      	bne.n	800333a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d001      	beq.n	800333e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e0b3      	b.n	80034a6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <HAL_TIM_IC_Start_IT+0x9e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	e013      	b.n	8003376 <HAL_TIM_IC_Start_IT+0xc6>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d104      	bne.n	800335e <HAL_TIM_IC_Start_IT+0xae>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335c:	e00b      	b.n	8003376 <HAL_TIM_IC_Start_IT+0xc6>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d104      	bne.n	800336e <HAL_TIM_IC_Start_IT+0xbe>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800336c:	e003      	b.n	8003376 <HAL_TIM_IC_Start_IT+0xc6>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <HAL_TIM_IC_Start_IT+0xd6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003384:	e013      	b.n	80033ae <HAL_TIM_IC_Start_IT+0xfe>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b04      	cmp	r3, #4
 800338a:	d104      	bne.n	8003396 <HAL_TIM_IC_Start_IT+0xe6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003394:	e00b      	b.n	80033ae <HAL_TIM_IC_Start_IT+0xfe>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_IC_Start_IT+0xf6>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a4:	e003      	b.n	80033ae <HAL_TIM_IC_Start_IT+0xfe>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d841      	bhi.n	8003438 <HAL_TIM_IC_Start_IT+0x188>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <HAL_TIM_IC_Start_IT+0x10c>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033f1 	.word	0x080033f1
 80033c0:	08003439 	.word	0x08003439
 80033c4:	08003439 	.word	0x08003439
 80033c8:	08003439 	.word	0x08003439
 80033cc:	08003403 	.word	0x08003403
 80033d0:	08003439 	.word	0x08003439
 80033d4:	08003439 	.word	0x08003439
 80033d8:	08003439 	.word	0x08003439
 80033dc:	08003415 	.word	0x08003415
 80033e0:	08003439 	.word	0x08003439
 80033e4:	08003439 	.word	0x08003439
 80033e8:	08003439 	.word	0x08003439
 80033ec:	08003427 	.word	0x08003427
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0202 	orr.w	r2, r2, #2
 80033fe:	60da      	str	r2, [r3, #12]
      break;
 8003400:	e01b      	b.n	800343a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0204 	orr.w	r2, r2, #4
 8003410:	60da      	str	r2, [r3, #12]
      break;
 8003412:	e012      	b.n	800343a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0208 	orr.w	r2, r2, #8
 8003422:	60da      	str	r2, [r3, #12]
      break;
 8003424:	e009      	b.n	800343a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0210 	orr.w	r2, r2, #16
 8003434:	60da      	str	r2, [r3, #12]
      break;
 8003436:	e000      	b.n	800343a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003438:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fd07 	bl	8003e56 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_TIM_IC_Start_IT+0x200>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_IC_Start_IT+0x1c0>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345a:	d009      	beq.n	8003470 <HAL_TIM_IC_Start_IT+0x1c0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <HAL_TIM_IC_Start_IT+0x204>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_IC_Start_IT+0x1c0>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <HAL_TIM_IC_Start_IT+0x208>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d111      	bne.n	8003494 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d010      	beq.n	80034a4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	e007      	b.n	80034a4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800

080034bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0202 	mvn.w	r2, #2
 80034e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fd fce6 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa85 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fa8b 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0204 	mvn.w	r2, #4
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd fcbc 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa5b 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fa61 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0208 	mvn.w	r2, #8
 8003590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2204      	movs	r2, #4
 8003596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fc92 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa31 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fa37 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0210 	mvn.w	r2, #16
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2208      	movs	r2, #8
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fd fc68 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa07 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fa0d 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0201 	mvn.w	r2, #1
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9e2 	bl	8003a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fc81 	bl	8003f6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d107      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9d1 	bl	8003a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d10e      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d107      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0220 	mvn.w	r2, #32
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fc4c 	bl	8003f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e082      	b.n	80037ec <HAL_TIM_IC_ConfigChannel+0x120>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11b      	bne.n	800372c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f000 fa04 	bl	8003b10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 020c 	bic.w	r2, r2, #12
 8003716:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	619a      	str	r2, [r3, #24]
 800372a:	e05a      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b04      	cmp	r3, #4
 8003730:	d11c      	bne.n	800376c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f000 fa6d 	bl	8003c20 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003754:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6999      	ldr	r1, [r3, #24]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	021a      	lsls	r2, r3, #8
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	619a      	str	r2, [r3, #24]
 800376a:	e03a      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b08      	cmp	r3, #8
 8003770:	d11b      	bne.n	80037aa <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f000 fab8 	bl	8003cf6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 020c 	bic.w	r2, r2, #12
 8003794:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69d9      	ldr	r1, [r3, #28]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	61da      	str	r2, [r3, #28]
 80037a8:	e01b      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	6819      	ldr	r1, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f000 fad7 	bl	8003d6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69d9      	ldr	r1, [r3, #28]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	021a      	lsls	r2, r3, #8
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_TIM_ConfigClockSource+0x18>
 8003808:	2302      	movs	r3, #2
 800380a:	e0b3      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x180>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800382a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003832:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003844:	d03e      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0xd0>
 8003846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384a:	f200 8087 	bhi.w	800395c <HAL_TIM_ConfigClockSource+0x168>
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003852:	f000 8085 	beq.w	8003960 <HAL_TIM_ConfigClockSource+0x16c>
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385a:	d87f      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 800385c:	2b70      	cmp	r3, #112	; 0x70
 800385e:	d01a      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xa2>
 8003860:	2b70      	cmp	r3, #112	; 0x70
 8003862:	d87b      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 8003864:	2b60      	cmp	r3, #96	; 0x60
 8003866:	d050      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x116>
 8003868:	2b60      	cmp	r3, #96	; 0x60
 800386a:	d877      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 800386c:	2b50      	cmp	r3, #80	; 0x50
 800386e:	d03c      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0xf6>
 8003870:	2b50      	cmp	r3, #80	; 0x50
 8003872:	d873      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d058      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x136>
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d86f      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 800387c:	2b30      	cmp	r3, #48	; 0x30
 800387e:	d064      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x156>
 8003880:	2b30      	cmp	r3, #48	; 0x30
 8003882:	d86b      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 8003884:	2b20      	cmp	r3, #32
 8003886:	d060      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x156>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d867      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05c      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x156>
 8003890:	2b10      	cmp	r3, #16
 8003892:	d05a      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003894:	e062      	b.n	800395c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6899      	ldr	r1, [r3, #8]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f000 fab7 	bl	8003e18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	609a      	str	r2, [r3, #8]
      break;
 80038c2:	e04e      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6899      	ldr	r1, [r3, #8]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f000 faa0 	bl	8003e18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038e6:	609a      	str	r2, [r3, #8]
      break;
 80038e8:	e03b      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f000 f964 	bl	8003bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2150      	movs	r1, #80	; 0x50
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fa6e 	bl	8003de4 <TIM_ITRx_SetConfig>
      break;
 8003908:	e02b      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	461a      	mov	r2, r3
 8003918:	f000 f9be 	bl	8003c98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2160      	movs	r1, #96	; 0x60
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa5e 	bl	8003de4 <TIM_ITRx_SetConfig>
      break;
 8003928:	e01b      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	461a      	mov	r2, r3
 8003938:	f000 f944 	bl	8003bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fa4e 	bl	8003de4 <TIM_ITRx_SetConfig>
      break;
 8003948:	e00b      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f000 fa45 	bl	8003de4 <TIM_ITRx_SetConfig>
        break;
 800395a:	e002      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800395c:	bf00      	nop
 800395e:	e000      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003960:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	d831      	bhi.n	80039f4 <HAL_TIM_ReadCapturedValue+0x78>
 8003990:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	080039cd 	.word	0x080039cd
 800399c:	080039f5 	.word	0x080039f5
 80039a0:	080039f5 	.word	0x080039f5
 80039a4:	080039f5 	.word	0x080039f5
 80039a8:	080039d7 	.word	0x080039d7
 80039ac:	080039f5 	.word	0x080039f5
 80039b0:	080039f5 	.word	0x080039f5
 80039b4:	080039f5 	.word	0x080039f5
 80039b8:	080039e1 	.word	0x080039e1
 80039bc:	080039f5 	.word	0x080039f5
 80039c0:	080039f5 	.word	0x080039f5
 80039c4:	080039f5 	.word	0x080039f5
 80039c8:	080039eb 	.word	0x080039eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	60fb      	str	r3, [r7, #12]

      break;
 80039d4:	e00f      	b.n	80039f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	60fb      	str	r3, [r7, #12]

      break;
 80039de:	e00a      	b.n	80039f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	60fb      	str	r3, [r7, #12]

      break;
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	60fb      	str	r3, [r7, #12]

      break;
 80039f2:	e000      	b.n	80039f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80039f4:	bf00      	nop
  }

  return tmpreg;
 80039f6:	68fb      	ldr	r3, [r7, #12]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop

08003a04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <TIM_Base_SetConfig+0xb8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <TIM_Base_SetConfig+0x30>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6a:	d007      	beq.n	8003a7c <TIM_Base_SetConfig+0x30>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <TIM_Base_SetConfig+0xbc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0x30>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a25      	ldr	r2, [pc, #148]	; (8003b0c <TIM_Base_SetConfig+0xc0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d108      	bne.n	8003a8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <TIM_Base_SetConfig+0xb8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00b      	beq.n	8003aae <TIM_Base_SetConfig+0x62>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d007      	beq.n	8003aae <TIM_Base_SetConfig+0x62>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <TIM_Base_SetConfig+0xbc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_Base_SetConfig+0x62>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <TIM_Base_SetConfig+0xc0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d108      	bne.n	8003ac0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a07      	ldr	r2, [pc, #28]	; (8003b04 <TIM_Base_SetConfig+0xb8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d103      	bne.n	8003af4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	615a      	str	r2, [r3, #20]
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800

08003b10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <TIM_TI1_SetConfig+0xa8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00b      	beq.n	8003b56 <TIM_TI1_SetConfig+0x46>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b44:	d007      	beq.n	8003b56 <TIM_TI1_SetConfig+0x46>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <TIM_TI1_SetConfig+0xac>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d003      	beq.n	8003b56 <TIM_TI1_SetConfig+0x46>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <TIM_TI1_SetConfig+0xb0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <TIM_TI1_SetConfig+0x4a>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <TIM_TI1_SetConfig+0x4c>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0303 	bic.w	r3, r3, #3
 8003b66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e003      	b.n	8003b7a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f023 030a 	bic.w	r3, r3, #10
 8003b94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f003 030a 	and.w	r3, r3, #10
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800

08003bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f023 0201 	bic.w	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f023 030a 	bic.w	r3, r3, #10
 8003c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f023 0210 	bic.w	r2, r3, #16
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	031b      	lsls	r3, r3, #12
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f023 0210 	bic.w	r2, r3, #16
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	031b      	lsls	r3, r3, #12
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b087      	sub	sp, #28
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003daa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	031b      	lsls	r3, r3, #12
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	031b      	lsls	r3, r3, #12
 8003dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f043 0307 	orr.w	r3, r3, #7
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	609a      	str	r2, [r3, #8]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	021a      	lsls	r2, r3, #8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	609a      	str	r2, [r3, #8]
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b087      	sub	sp, #28
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	2201      	movs	r2, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1a      	ldr	r2, [r3, #32]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	401a      	ands	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e046      	b.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d009      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10c      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800

08003f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e03f      	b.n	8004012 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd fc16 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2224      	movs	r2, #36	; 0x24
 8003fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f829 	bl	800401c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004056:	f023 030c 	bic.w	r3, r3, #12
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	430b      	orrs	r3, r1
 8004062:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <UART_SetConfig+0x114>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d103      	bne.n	800408c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004084:	f7fe fd84 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	e002      	b.n	8004092 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fe fd6c 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004090:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009a      	lsls	r2, r3, #2
 800409c:	441a      	add	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	4a22      	ldr	r2, [pc, #136]	; (8004134 <UART_SetConfig+0x118>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	0119      	lsls	r1, r3, #4
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009a      	lsls	r2, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <UART_SetConfig+0x118>)
 80040ca:	fba3 0302 	umull	r0, r3, r3, r2
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2064      	movs	r0, #100	; 0x64
 80040d2:	fb00 f303 	mul.w	r3, r0, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	3332      	adds	r3, #50	; 0x32
 80040dc:	4a15      	ldr	r2, [pc, #84]	; (8004134 <UART_SetConfig+0x118>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e8:	4419      	add	r1, r3
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009a      	lsls	r2, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <UART_SetConfig+0x118>)
 8004102:	fba3 0302 	umull	r0, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2064      	movs	r0, #100	; 0x64
 800410a:	fb00 f303 	mul.w	r3, r0, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	3332      	adds	r3, #50	; 0x32
 8004114:	4a07      	ldr	r2, [pc, #28]	; (8004134 <UART_SetConfig+0x118>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	f003 020f 	and.w	r2, r3, #15
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	440a      	add	r2, r1
 8004126:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40013800 	.word	0x40013800
 8004134:	51eb851f 	.word	0x51eb851f

08004138 <ST7565_Select>:


uint8_t ST7565_buffer[SCREEN_WIDTH * SCREEN_HEIGHT / 8];
// extern enum {WHITE = 0, BLACK = 1} color_t;

void ST7565_Select(void) {
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <ST7565_Unselect>:
void ST7565_Unselect(void) {
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
					 CS_GPIO_Port->BSRR = CS_Pin;
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <ST7565_Reset>:

void ST7565_Reset( void ){  
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 8004154:	2200      	movs	r2, #0
 8004156:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800415a:	4808      	ldr	r0, [pc, #32]	; (800417c <ST7565_Reset+0x2c>)
 800415c:	f7fd ffd3 	bl	8002106 <HAL_GPIO_WritePin>
 HAL_Delay( 10 ); 
 8004160:	200a      	movs	r0, #10
 8004162:	f7fd fd03 	bl	8001b6c <HAL_Delay>
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 8004166:	2201      	movs	r2, #1
 8004168:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800416c:	4803      	ldr	r0, [pc, #12]	; (800417c <ST7565_Reset+0x2c>)
 800416e:	f7fd ffca 	bl	8002106 <HAL_GPIO_WritePin>
 HAL_Delay( 10 );  
 8004172:	200a      	movs	r0, #10
 8004174:	f7fd fcfa 	bl	8001b6c <HAL_Delay>
}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40010800 	.word	0x40010800

08004180 <ST7565_w_dat>:

void ST7565_w_dat( uint8_t Dat ){  
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
	
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Dat, 1, HAL_MAX_DELAY);
 800418a:	1df9      	adds	r1, r7, #7
 800418c:	f04f 33ff 	mov.w	r3, #4294967295
 8004190:	2201      	movs	r2, #1
 8004192:	4807      	ldr	r0, [pc, #28]	; (80041b0 <ST7565_w_dat+0x30>)
 8004194:	f7fe fdb2 	bl	8002cfc <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 8004198:	bf00      	nop
 800419a:	4805      	ldr	r0, [pc, #20]	; (80041b0 <ST7565_w_dat+0x30>)
 800419c:	f7fe feea 	bl	8002f74 <HAL_SPI_GetState>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d1f9      	bne.n	800419a <ST7565_w_dat+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------
	
}  
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20000274 	.word	0x20000274

080041b4 <ST7565_w_cmd>:

void ST7565_w_cmd( uint8_t Command ){  
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
		
		// pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80041be:	2200      	movs	r2, #0
 80041c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041c4:	480d      	ldr	r0, [pc, #52]	; (80041fc <ST7565_w_cmd+0x48>)
 80041c6:	f7fd ff9e 	bl	8002106 <HAL_GPIO_WritePin>
		 
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Command, 1, HAL_MAX_DELAY);
 80041ca:	1df9      	adds	r1, r7, #7
 80041cc:	f04f 33ff 	mov.w	r3, #4294967295
 80041d0:	2201      	movs	r2, #1
 80041d2:	480b      	ldr	r0, [pc, #44]	; (8004200 <ST7565_w_cmd+0x4c>)
 80041d4:	f7fe fd92 	bl	8002cfc <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 80041d8:	bf00      	nop
 80041da:	4809      	ldr	r0, [pc, #36]	; (8004200 <ST7565_w_cmd+0x4c>)
 80041dc:	f7fe feca 	bl	8002f74 <HAL_SPI_GetState>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d1f9      	bne.n	80041da <ST7565_w_cmd+0x26>
		 
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80041e6:	2201      	movs	r2, #1
 80041e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041ec:	4803      	ldr	r0, [pc, #12]	; (80041fc <ST7565_w_cmd+0x48>)
 80041ee:	f7fd ff8a 	bl	8002106 <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
		
	#endif
	//-----------------------------------------------------------------------------------
	
} 
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40010800 	.word	0x40010800
 8004200:	20000274 	.word	0x20000274

08004204 <ST7565_Display_fill>:

void ST7565_Display_fill( uint8_t fill ){  
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
	
	uint8_t page,column;  
	
	memset( ST7565_buffer, (uint8_t)fill, ( SCREEN_WIDTH * SCREEN_HEIGHT / 8 ) );	// отчистка памяти заполняем массив значением 0x00
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004214:	4619      	mov	r1, r3
 8004216:	4815      	ldr	r0, [pc, #84]	; (800426c <ST7565_Display_fill+0x68>)
 8004218:	f000 fdc8 	bl	8004dac <memset>
	
	ST7565_Select();
 800421c:	f7ff ff8c 	bl	8004138 <ST7565_Select>
	
	for( page=0xB7; page>=0xB0; page-- ){
 8004220:	23b7      	movs	r3, #183	; 0xb7
 8004222:	73fb      	strb	r3, [r7, #15]
 8004224:	e019      	b.n	800425a <ST7565_Display_fill+0x56>
		
		ST7565_w_cmd(page);  //set page address   
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff ffc3 	bl	80041b4 <ST7565_w_cmd>
		ST7565_w_cmd(0x10);  //set Column address MSB   
 800422e:	2010      	movs	r0, #16
 8004230:	f7ff ffc0 	bl	80041b4 <ST7565_w_cmd>
		ST7565_w_cmd(0x00);  //set column address LSB   
 8004234:	2000      	movs	r0, #0
 8004236:	f7ff ffbd 	bl	80041b4 <ST7565_w_cmd>
		for( column=0; column<131; column++ ){  
 800423a:	2300      	movs	r3, #0
 800423c:	73bb      	strb	r3, [r7, #14]
 800423e:	e006      	b.n	800424e <ST7565_Display_fill+0x4a>
			ST7565_w_dat(fill);  
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff9c 	bl	8004180 <ST7565_w_dat>
		for( column=0; column<131; column++ ){  
 8004248:	7bbb      	ldrb	r3, [r7, #14]
 800424a:	3301      	adds	r3, #1
 800424c:	73bb      	strb	r3, [r7, #14]
 800424e:	7bbb      	ldrb	r3, [r7, #14]
 8004250:	2b82      	cmp	r3, #130	; 0x82
 8004252:	d9f5      	bls.n	8004240 <ST7565_Display_fill+0x3c>
	for( page=0xB7; page>=0xB0; page-- ){
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	3b01      	subs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2baf      	cmp	r3, #175	; 0xaf
 800425e:	d8e2      	bhi.n	8004226 <ST7565_Display_fill+0x22>
        }  
    }
		
	ST7565_Unselect();
 8004260:	f7ff ff70 	bl	8004144 <ST7565_Unselect>
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000450 	.word	0x20000450

08004270 <ST7565_Init>:

void ST7565_Init( void ){  
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
	
	ST7565_Select();
 8004274:	f7ff ff60 	bl	8004138 <ST7565_Select>
	
	ST7565_Reset();
 8004278:	f7ff ff6a 	bl	8004150 <ST7565_Reset>

	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея	
	ST7565_w_cmd( CMD_SET_BIAS_9 );    // CMD_SET_BIAS_7   1/7    CMD_SET_BIAS_9  1/9
 800427c:	20a2      	movs	r0, #162	; 0xa2
 800427e:	f7ff ff99 	bl	80041b4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 8004282:	2001      	movs	r0, #1
 8004284:	f7fd fc72 	bl	8001b6c <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	#if defined (SCREEN_ORIENTATION_180)
		ST7565_w_cmd( CMD_SET_ADC_REVERSE );    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		ST7565_w_cmd( CMD_SET_COM_NORMAL );    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#else
		ST7565_w_cmd( CMD_SET_ADC_NORMAL );    		//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
 8004288:	20a0      	movs	r0, #160	; 0xa0
 800428a:	f7ff ff93 	bl	80041b4 <ST7565_w_cmd>
		ST7565_w_cmd( CMD_SET_COM_REVERSE );    	//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
 800428e:	20c8      	movs	r0, #200	; 0xc8
 8004290:	f7ff ff90 	bl	80041b4 <ST7565_w_cmd>
	#endif		
	//---------------------------------------------------------------------------------------------	
	
	HAL_Delay(1);
 8004294:	2001      	movs	r0, #1
 8004296:	f7fd fc69 	bl	8001b6c <HAL_Delay>
	
	// делитель внутреннего резистора установлен на 7 (от 0..7)	
	ST7565_w_cmd( CMD_SET_RESISTOR_RATIO | 0x7 );    //Regulator Resistor Selection   
 800429a:	2027      	movs	r0, #39	; 0x27
 800429c:	f7ff ff8a 	bl	80041b4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80042a0:	2001      	movs	r0, #1
 80042a2:	f7fd fc63 	bl	8001b6c <HAL_Delay>
	
	// управление питанием, все внутренние блоки включены	(от 0..7)
	ST7565_w_cmd( CMD_SET_POWER_CONTROL | 0x7 );
 80042a6:	202f      	movs	r0, #47	; 0x2f
 80042a8:	f7ff ff84 	bl	80041b4 <ST7565_w_cmd>
		
	HAL_Delay(1);
 80042ac:	2001      	movs	r0, #1
 80042ae:	f7fd fc5d 	bl	8001b6c <HAL_Delay>

	// войти в режим динамического контраста	
	ST7565_w_cmd( CMD_SET_VOLUME_FIRST );    //Electronic Volume   
 80042b2:	2081      	movs	r0, #129	; 0x81
 80042b4:	f7ff ff7e 	bl	80041b4 <ST7565_w_cmd>
	ST7565_w_cmd( 19 );	// устанавливает контраст от 0..63.
 80042b8:	2013      	movs	r0, #19
 80042ba:	f7ff ff7b 	bl	80041b4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80042be:	2001      	movs	r0, #1
 80042c0:	f7fd fc54 	bl	8001b6c <HAL_Delay>
	
	ST7565_w_cmd( CMD_SET_DISP_START_LINE );
 80042c4:	2040      	movs	r0, #64	; 0x40
 80042c6:	f7ff ff75 	bl	80041b4 <ST7565_w_cmd>
 
	HAL_Delay(1);
 80042ca:	2001      	movs	r0, #1
 80042cc:	f7fd fc4e 	bl	8001b6c <HAL_Delay>

	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	ST7565_w_cmd( CMD_DISPLAY_ON );    		//Display on   
 80042d0:	20af      	movs	r0, #175	; 0xaf
 80042d2:	f7ff ff6f 	bl	80041b4 <ST7565_w_cmd>
 
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd( CMD_SET_DISP_NORMAL );
 80042d6:	20a6      	movs	r0, #166	; 0xa6
 80042d8:	f7ff ff6c 	bl	80041b4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80042dc:	2001      	movs	r0, #1
 80042de:	f7fd fc45 	bl	8001b6c <HAL_Delay>
	
	ST7565_Display_fill( 0x00 );
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7ff ff8e 	bl	8004204 <ST7565_Display_fill>
	
	ST7565_Unselect();
 80042e8:	f7ff ff2c 	bl	8004144 <ST7565_Unselect>
   
}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <ST7565_Draw_pixel>:
  
  
  ST7565_Unselect();
}

void ST7565_Draw_pixel(int16_t x, int16_t y, color_t color){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	80fb      	strh	r3, [r7, #6]
 80042fa:	460b      	mov	r3, r1
 80042fc:	80bb      	strh	r3, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	70fb      	strb	r3, [r7, #3]
	
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 8004302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004306:	2b80      	cmp	r3, #128	; 0x80
 8004308:	f300 808b 	bgt.w	8004422 <ST7565_Draw_pixel+0x132>
 800430c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f2c0 8086 	blt.w	8004422 <ST7565_Draw_pixel+0x132>
 8004316:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	f300 8081 	bgt.w	8004422 <ST7565_Draw_pixel+0x132>
 8004320:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	db7c      	blt.n	8004422 <ST7565_Draw_pixel+0x132>

    // Real screen coordinates are 0-63, not 1-64.
    x -= 1;
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	3b01      	subs	r3, #1
 800432c:	b29b      	uxth	r3, r3
 800432e:	80fb      	strh	r3, [r7, #6]
    y -= 1;
 8004330:	88bb      	ldrh	r3, [r7, #4]
 8004332:	3b01      	subs	r3, #1
 8004334:	b29b      	uxth	r3, r3
 8004336:	80bb      	strh	r3, [r7, #4]

    uint16_t array_pos = x + ((y / 8) * SCREEN_WIDTH );
 8004338:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	da00      	bge.n	8004342 <ST7565_Draw_pixel+0x52>
 8004340:	3307      	adds	r3, #7
 8004342:	10db      	asrs	r3, r3, #3
 8004344:	b21b      	sxth	r3, r3
 8004346:	b29b      	uxth	r3, r3
 8004348:	01db      	lsls	r3, r3, #7
 800434a:	b29a      	uxth	r2, r3
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	4413      	add	r3, r2
 8004350:	81fb      	strh	r3, [r7, #14]


    if ( color ) {
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d018      	beq.n	800438a <ST7565_Draw_pixel+0x9a>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8004358:	89fb      	ldrh	r3, [r7, #14]
 800435a:	4a34      	ldr	r2, [pc, #208]	; (800442c <ST7565_Draw_pixel+0x13c>)
 800435c:	5cd3      	ldrb	r3, [r2, r3]
 800435e:	b25a      	sxtb	r2, r3
 8004360:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004364:	4259      	negs	r1, r3
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	f001 0107 	and.w	r1, r1, #7
 800436e:	bf58      	it	pl
 8004370:	424b      	negpl	r3, r1
 8004372:	b21b      	sxth	r3, r3
 8004374:	4619      	mov	r1, r3
 8004376:	2301      	movs	r3, #1
 8004378:	408b      	lsls	r3, r1
 800437a:	b25b      	sxtb	r3, r3
 800437c:	4313      	orrs	r3, r2
 800437e:	b25a      	sxtb	r2, r3
 8004380:	89fb      	ldrh	r3, [r7, #14]
 8004382:	b2d1      	uxtb	r1, r2
 8004384:	4a29      	ldr	r2, [pc, #164]	; (800442c <ST7565_Draw_pixel+0x13c>)
 8004386:	54d1      	strb	r1, [r2, r3]
 8004388:	e019      	b.n	80043be <ST7565_Draw_pixel+0xce>
    } 
	else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 800438a:	89fb      	ldrh	r3, [r7, #14]
 800438c:	4a27      	ldr	r2, [pc, #156]	; (800442c <ST7565_Draw_pixel+0x13c>)
 800438e:	5cd3      	ldrb	r3, [r2, r3]
 8004390:	b25a      	sxtb	r2, r3
 8004392:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004396:	4259      	negs	r1, r3
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	f001 0107 	and.w	r1, r1, #7
 80043a0:	bf58      	it	pl
 80043a2:	424b      	negpl	r3, r1
 80043a4:	b21b      	sxth	r3, r3
 80043a6:	4619      	mov	r1, r3
 80043a8:	2301      	movs	r3, #1
 80043aa:	408b      	lsls	r3, r1
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	b25b      	sxtb	r3, r3
 80043b2:	4013      	ands	r3, r2
 80043b4:	b25a      	sxtb	r2, r3
 80043b6:	89fb      	ldrh	r3, [r7, #14]
 80043b8:	b2d1      	uxtb	r1, r2
 80043ba:	4a1c      	ldr	r2, [pc, #112]	; (800442c <ST7565_Draw_pixel+0x13c>)
 80043bc:	54d1      	strb	r1, [r2, r3]
    }
	
	ST7565_Select();
 80043be:	f7ff febb 	bl	8004138 <ST7565_Select>
	
	ST7565_SetX(x);	
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	111b      	asrs	r3, r3, #4
 80043c6:	b25b      	sxtb	r3, r3
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	b25b      	sxtb	r3, r3
 80043ce:	f043 0310 	orr.w	r3, r3, #16
 80043d2:	b25b      	sxtb	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff feec 	bl	80041b4 <ST7565_w_cmd>
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fee4 	bl	80041b4 <ST7565_w_cmd>
	
	// page 0xB0 0xB1 0xB2 0xB3 0xB4 0xB5 0xB6 0xB7
	ST7565_SetY( (int16_t)y/8 );	// ST7565_SetY(y) 		ST7565_w_cmd( ( (y) & 0x07 ) | 0xB0 )
 80043ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da00      	bge.n	80043f6 <ST7565_Draw_pixel+0x106>
 80043f4:	3307      	adds	r3, #7
 80043f6:	10db      	asrs	r3, r3, #3
 80043f8:	b21b      	sxth	r3, r3
 80043fa:	b25b      	sxtb	r3, r3
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	b25b      	sxtb	r3, r3
 8004402:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004406:	b25b      	sxtb	r3, r3
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fed2 	bl	80041b4 <ST7565_w_cmd>
		
	ST7565_w_dat( ST7565_buffer[array_pos] ); 
 8004410:	89fb      	ldrh	r3, [r7, #14]
 8004412:	4a06      	ldr	r2, [pc, #24]	; (800442c <ST7565_Draw_pixel+0x13c>)
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff feb2 	bl	8004180 <ST7565_w_dat>
	
	ST7565_Unselect();
 800441c:	f7ff fe92 	bl	8004144 <ST7565_Unselect>
 8004420:	e000      	b.n	8004424 <ST7565_Draw_pixel+0x134>
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 8004422:	bf00      	nop
}
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000450 	.word	0x20000450

08004430 <ST7565_DrawChar>:
            if(byte & 0x80){ ST7565_Draw_pixel(x+i, y, color); }
        }
    }	
}

void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	4603      	mov	r3, r0
 800443a:	81fb      	strh	r3, [r7, #14]
 800443c:	460b      	mov	r3, r1
 800443e:	81bb      	strh	r3, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	72fb      	strb	r3, [r7, #11]
	
	uint16_t i, j;
	
	uint16_t b;
	
	int16_t X = x, Y = y;
 8004444:	89fb      	ldrh	r3, [r7, #14]
 8004446:	833b      	strh	r3, [r7, #24]
 8004448:	89bb      	ldrh	r3, [r7, #12]
 800444a:	82fb      	strh	r3, [r7, #22]
	
	int16_t xx, yy;
	
	if( multiplier < 1 ){
 800444c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <ST7565_DrawChar+0x2a>
		multiplier = 1;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	/* Check available space in LCD */
	if ( SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)){
 800445a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	4413      	add	r3, r2
 8004464:	2b80      	cmp	r3, #128	; 0x80
 8004466:	dd07      	ble.n	8004478 <ST7565_DrawChar+0x48>
 8004468:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	7852      	ldrb	r2, [r2, #1]
 8004470:	4413      	add	r3, r2
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	f300 80dc 	bgt.w	8004630 <ST7565_DrawChar+0x200>
	
		/* Go through font */
		for (i = 0; i < Font->FontHeight; i++) {
 8004478:	2300      	movs	r3, #0
 800447a:	83fb      	strh	r3, [r7, #30]
 800447c:	e0d1      	b.n	8004622 <ST7565_DrawChar+0x1f2>
			
			if( ch < 127 ){			
 800447e:	7afb      	ldrb	r3, [r7, #11]
 8004480:	2b7e      	cmp	r3, #126	; 0x7e
 8004482:	d80e      	bhi.n	80044a2 <ST7565_DrawChar+0x72>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	7afb      	ldrb	r3, [r7, #11]
 800448a:	3b20      	subs	r3, #32
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	7849      	ldrb	r1, [r1, #1]
 8004490:	fb01 f103 	mul.w	r1, r1, r3
 8004494:	8bfb      	ldrh	r3, [r7, #30]
 8004496:	440b      	add	r3, r1
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	837b      	strh	r3, [r7, #26]
 80044a0:	e038      	b.n	8004514 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch > 191 ){
 80044a2:	7afb      	ldrb	r3, [r7, #11]
 80044a4:	2bbf      	cmp	r3, #191	; 0xbf
 80044a6:	d90e      	bls.n	80044c6 <ST7565_DrawChar+0x96>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	7afb      	ldrb	r3, [r7, #11]
 80044ae:	3b60      	subs	r3, #96	; 0x60
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	7849      	ldrb	r1, [r1, #1]
 80044b4:	fb01 f103 	mul.w	r1, r1, r3
 80044b8:	8bfb      	ldrh	r3, [r7, #30]
 80044ba:	440b      	add	r3, r1
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	837b      	strh	r3, [r7, #26]
 80044c4:	e026      	b.n	8004514 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 80044c6:	7afb      	ldrb	r3, [r7, #11]
 80044c8:	2ba8      	cmp	r3, #168	; 0xa8
 80044ca:	d110      	bne.n	80044ee <ST7565_DrawChar+0xbe>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[( 160 ) * Font->FontHeight + i];
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	4619      	mov	r1, r3
 80044d6:	460b      	mov	r3, r1
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	015b      	lsls	r3, r3, #5
 80044de:	4619      	mov	r1, r3
 80044e0:	8bfb      	ldrh	r3, [r7, #30]
 80044e2:	440b      	add	r3, r1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	837b      	strh	r3, [r7, #26]
 80044ec:	e012      	b.n	8004514 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 80044ee:	7afb      	ldrb	r3, [r7, #11]
 80044f0:	2bb8      	cmp	r3, #184	; 0xb8
 80044f2:	d10f      	bne.n	8004514 <ST7565_DrawChar+0xe4>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[( 161 ) * Font->FontHeight + i];
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6859      	ldr	r1, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	461a      	mov	r2, r3
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	015b      	lsls	r3, r3, #5
 8004506:	441a      	add	r2, r3
 8004508:	8bfb      	ldrh	r3, [r7, #30]
 800450a:	4413      	add	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	440b      	add	r3, r1
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	837b      	strh	r3, [r7, #26]
			}
			//-------------------------------------------------------------------------------
			
			
			for (j = 0; j < Font->FontWidth; j++) {
 8004514:	2300      	movs	r3, #0
 8004516:	83bb      	strh	r3, [r7, #28]
 8004518:	e071      	b.n	80045fe <ST7565_DrawChar+0x1ce>
				
				if ((b << j) & 0x8000) {
 800451a:	8b7a      	ldrh	r2, [r7, #26]
 800451c:	8bbb      	ldrh	r3, [r7, #28]
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d02d      	beq.n	8004586 <ST7565_DrawChar+0x156>
					
					for (yy = 0; yy < multiplier; yy++){
 800452a:	2300      	movs	r3, #0
 800452c:	827b      	strh	r3, [r7, #18]
 800452e:	e023      	b.n	8004578 <ST7565_DrawChar+0x148>
						for (xx = 0; xx < multiplier; xx++){
 8004530:	2300      	movs	r3, #0
 8004532:	82bb      	strh	r3, [r7, #20]
 8004534:	e014      	b.n	8004560 <ST7565_DrawChar+0x130>
								ST7565_Draw_pixel(X+xx, Y+yy, color);
 8004536:	8b3a      	ldrh	r2, [r7, #24]
 8004538:	8abb      	ldrh	r3, [r7, #20]
 800453a:	4413      	add	r3, r2
 800453c:	b29b      	uxth	r3, r3
 800453e:	b218      	sxth	r0, r3
 8004540:	8afa      	ldrh	r2, [r7, #22]
 8004542:	8a7b      	ldrh	r3, [r7, #18]
 8004544:	4413      	add	r3, r2
 8004546:	b29b      	uxth	r3, r3
 8004548:	b21b      	sxth	r3, r3
 800454a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800454e:	4619      	mov	r1, r3
 8004550:	f7ff fece 	bl	80042f0 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8004554:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004558:	b29b      	uxth	r3, r3
 800455a:	3301      	adds	r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	82bb      	strh	r3, [r7, #20]
 8004560:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004564:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004568:	429a      	cmp	r2, r3
 800456a:	dbe4      	blt.n	8004536 <ST7565_DrawChar+0x106>
					for (yy = 0; yy < multiplier; yy++){
 800456c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004570:	b29b      	uxth	r3, r3
 8004572:	3301      	adds	r3, #1
 8004574:	b29b      	uxth	r3, r3
 8004576:	827b      	strh	r3, [r7, #18]
 8004578:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800457c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004580:	429a      	cmp	r2, r3
 8004582:	dbd5      	blt.n	8004530 <ST7565_DrawChar+0x100>
 8004584:	e031      	b.n	80045ea <ST7565_DrawChar+0x1ba>
				}
				// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть --------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				else{
					
					for (yy = 0; yy < multiplier; yy++){
 8004586:	2300      	movs	r3, #0
 8004588:	827b      	strh	r3, [r7, #18]
 800458a:	e028      	b.n	80045de <ST7565_DrawChar+0x1ae>
						for (xx = 0; xx < multiplier; xx++){
 800458c:	2300      	movs	r3, #0
 800458e:	82bb      	strh	r3, [r7, #20]
 8004590:	e019      	b.n	80045c6 <ST7565_DrawChar+0x196>
								ST7565_Draw_pixel(X+xx, Y+yy, !color);
 8004592:	8b3a      	ldrh	r2, [r7, #24]
 8004594:	8abb      	ldrh	r3, [r7, #20]
 8004596:	4413      	add	r3, r2
 8004598:	b29b      	uxth	r3, r3
 800459a:	b218      	sxth	r0, r3
 800459c:	8afa      	ldrh	r2, [r7, #22]
 800459e:	8a7b      	ldrh	r3, [r7, #18]
 80045a0:	4413      	add	r3, r2
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	b219      	sxth	r1, r3
 80045a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	f7ff fe9b 	bl	80042f0 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80045ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3301      	adds	r3, #1
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	82bb      	strh	r3, [r7, #20]
 80045c6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80045ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045ce:	429a      	cmp	r2, r3
 80045d0:	dbdf      	blt.n	8004592 <ST7565_DrawChar+0x162>
					for (yy = 0; yy < multiplier; yy++){
 80045d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	827b      	strh	r3, [r7, #18]
 80045de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80045e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045e6:	429a      	cmp	r2, r3
 80045e8:	dbd0      	blt.n	800458c <ST7565_DrawChar+0x15c>
					}
				}
				//-----------------------------------------------------------------------------------------------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				
				X = X + multiplier;
 80045ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	8b3b      	ldrh	r3, [r7, #24]
 80045f2:	4413      	add	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 80045f8:	8bbb      	ldrh	r3, [r7, #28]
 80045fa:	3301      	adds	r3, #1
 80045fc:	83bb      	strh	r3, [r7, #28]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	8bba      	ldrh	r2, [r7, #28]
 8004606:	429a      	cmp	r2, r3
 8004608:	d387      	bcc.n	800451a <ST7565_DrawChar+0xea>
			}
			
			X = x;
 800460a:	89fb      	ldrh	r3, [r7, #14]
 800460c:	833b      	strh	r3, [r7, #24]
			Y = Y + multiplier;
 800460e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004612:	b29a      	uxth	r2, r3
 8004614:	8afb      	ldrh	r3, [r7, #22]
 8004616:	4413      	add	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 800461c:	8bfb      	ldrh	r3, [r7, #30]
 800461e:	3301      	adds	r3, #1
 8004620:	83fb      	strh	r3, [r7, #30]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	785b      	ldrb	r3, [r3, #1]
 8004626:	b29b      	uxth	r3, r3
 8004628:	8bfa      	ldrh	r2, [r7, #30]
 800462a:	429a      	cmp	r2, r3
 800462c:	f4ff af27 	bcc.w	800447e <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8004630:	bf00      	nop
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <ST7565_Print>:

void ST7565_Print(int16_t x, int16_t y, char* str, FontDef_t* Font, uint8_t multiplier, color_t color) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af02      	add	r7, sp, #8
 800463e:	60ba      	str	r2, [r7, #8]
 8004640:	607b      	str	r3, [r7, #4]
 8004642:	4603      	mov	r3, r0
 8004644:	81fb      	strh	r3, [r7, #14]
 8004646:	460b      	mov	r3, r1
 8004648:	81bb      	strh	r3, [r7, #12]
	
	if( multiplier < 1 ){
 800464a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <ST7565_Print+0x20>
		multiplier = 1;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3020 	strb.w	r3, [r7, #32]
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8004658:	68b8      	ldr	r0, [r7, #8]
 800465a:	f7fb fd79 	bl	8000150 <strlen>
 800465e:	4603      	mov	r3, r0
 8004660:	82bb      	strh	r3, [r7, #20]
	
	while (len--) {
 8004662:	e06d      	b.n	8004740 <ST7565_Print+0x108>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2bbf      	cmp	r3, #191	; 0xbf
 800466a:	d94a      	bls.n	8004702 <ST7565_Print+0xca>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2bd0      	cmp	r3, #208	; 0xd0
 8004672:	d002      	beq.n	800467a <ST7565_Print+0x42>
 8004674:	2bd1      	cmp	r3, #209	; 0xd1
 8004676:	d017      	beq.n	80046a8 <ST7565_Print+0x70>
 8004678:	e031      	b.n	80046de <ST7565_Print+0xa6>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3301      	adds	r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b81      	cmp	r3, #129	; 0x81
 8004686:	d102      	bne.n	800468e <ST7565_Print+0x56>
 8004688:	23a8      	movs	r3, #168	; 0xa8
 800468a:	75fb      	strb	r3, [r7, #23]
 800468c:	e027      	b.n	80046de <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b8f      	cmp	r3, #143	; 0x8f
 8004694:	d920      	bls.n	80046d8 <ST7565_Print+0xa0>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2bbf      	cmp	r3, #191	; 0xbf
 800469c:	d81c      	bhi.n	80046d8 <ST7565_Print+0xa0>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	3330      	adds	r3, #48	; 0x30
 80046a4:	75fb      	strb	r3, [r7, #23]
					break;
 80046a6:	e017      	b.n	80046d8 <ST7565_Print+0xa0>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	3301      	adds	r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b91      	cmp	r3, #145	; 0x91
 80046b4:	d102      	bne.n	80046bc <ST7565_Print+0x84>
 80046b6:	23b8      	movs	r3, #184	; 0xb8
 80046b8:	75fb      	strb	r3, [r7, #23]
 80046ba:	e010      	b.n	80046de <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b25b      	sxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da0a      	bge.n	80046dc <ST7565_Print+0xa4>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b8f      	cmp	r3, #143	; 0x8f
 80046cc:	d806      	bhi.n	80046dc <ST7565_Print+0xa4>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	3370      	adds	r3, #112	; 0x70
 80046d4:	75fb      	strb	r3, [r7, #23]
					break;
 80046d6:	e001      	b.n	80046dc <ST7565_Print+0xa4>
					break;
 80046d8:	bf00      	nop
 80046da:	e000      	b.n	80046de <ST7565_Print+0xa6>
					break;
 80046dc:	bf00      	nop
				}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 80046de:	8abb      	ldrh	r3, [r7, #20]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	82bb      	strh	r3, [r7, #20]
			
			ST7565_DrawChar( x, y, buff_char, Font, multiplier, color);
 80046e4:	7dfa      	ldrb	r2, [r7, #23]
 80046e6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80046ea:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80046ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f7ff fe98 	bl	8004430 <ST7565_DrawChar>
 8004700:	e00e      	b.n	8004720 <ST7565_Print+0xe8>
		}
		//---------------------------------------------------------------------
		else{			
			ST7565_DrawChar( x, y, *str, Font, multiplier, color);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800470a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800470e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f7ff fe88 	bl	8004430 <ST7565_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f897 2020 	ldrb.w	r2, [r7, #32]
 800472a:	b292      	uxth	r2, r2
 800472c:	fb02 f303 	mul.w	r3, r2, r3
 8004730:	b29a      	uxth	r2, r3
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	4413      	add	r3, r2
 8004736:	b29b      	uxth	r3, r3
 8004738:	81fb      	strh	r3, [r7, #14]
		/* Increase string pointer */
		str++;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3301      	adds	r3, #1
 800473e:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8004740:	8abb      	ldrh	r3, [r7, #20]
 8004742:	1e5a      	subs	r2, r3, #1
 8004744:	82ba      	strh	r2, [r7, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d18c      	bne.n	8004664 <ST7565_Print+0x2c>
	}
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <ST7565_DrawLine>:

void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color) {
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	4604      	mov	r4, r0
 800475c:	4608      	mov	r0, r1
 800475e:	4611      	mov	r1, r2
 8004760:	461a      	mov	r2, r3
 8004762:	4623      	mov	r3, r4
 8004764:	80fb      	strh	r3, [r7, #6]
 8004766:	4603      	mov	r3, r0
 8004768:	80bb      	strh	r3, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	807b      	strh	r3, [r7, #2]
 800476e:	4613      	mov	r3, r2
 8004770:	803b      	strh	r3, [r7, #0]
	
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH) {
 8004772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004776:	2b7f      	cmp	r3, #127	; 0x7f
 8004778:	dd01      	ble.n	800477e <ST7565_DrawLine+0x2a>
		x0 = SCREEN_WIDTH - 1;
 800477a:	237f      	movs	r3, #127	; 0x7f
 800477c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SCREEN_WIDTH) {
 800477e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004782:	2b7f      	cmp	r3, #127	; 0x7f
 8004784:	dd01      	ble.n	800478a <ST7565_DrawLine+0x36>
		x1 = SCREEN_WIDTH - 1;
 8004786:	237f      	movs	r3, #127	; 0x7f
 8004788:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SCREEN_HEIGHT) {
 800478a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800478e:	2b3f      	cmp	r3, #63	; 0x3f
 8004790:	dd01      	ble.n	8004796 <ST7565_DrawLine+0x42>
		y0 = SCREEN_HEIGHT - 1;
 8004792:	233f      	movs	r3, #63	; 0x3f
 8004794:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SCREEN_HEIGHT) {
 8004796:	f9b7 3000 	ldrsh.w	r3, [r7]
 800479a:	2b3f      	cmp	r3, #63	; 0x3f
 800479c:	dd01      	ble.n	80047a2 <ST7565_DrawLine+0x4e>
		y1 = SCREEN_HEIGHT - 1;
 800479e:	233f      	movs	r3, #63	; 0x3f
 80047a0:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80047a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	da05      	bge.n	80047ba <ST7565_DrawLine+0x66>
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	b21b      	sxth	r3, r3
 80047b8:	e004      	b.n	80047c4 <ST7565_DrawLine+0x70>
 80047ba:	88fa      	ldrh	r2, [r7, #6]
 80047bc:	887b      	ldrh	r3, [r7, #2]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	b21b      	sxth	r3, r3
 80047c4:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80047c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80047ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	da05      	bge.n	80047de <ST7565_DrawLine+0x8a>
 80047d2:	883a      	ldrh	r2, [r7, #0]
 80047d4:	88bb      	ldrh	r3, [r7, #4]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	b29b      	uxth	r3, r3
 80047da:	b21b      	sxth	r3, r3
 80047dc:	e004      	b.n	80047e8 <ST7565_DrawLine+0x94>
 80047de:	88ba      	ldrh	r2, [r7, #4]
 80047e0:	883b      	ldrh	r3, [r7, #0]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	b21b      	sxth	r3, r3
 80047e8:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80047ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	da01      	bge.n	80047fa <ST7565_DrawLine+0xa6>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e001      	b.n	80047fe <ST7565_DrawLine+0xaa>
 80047fa:	f04f 33ff 	mov.w	r3, #4294967295
 80047fe:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8004800:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004804:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004808:	429a      	cmp	r2, r3
 800480a:	da01      	bge.n	8004810 <ST7565_DrawLine+0xbc>
 800480c:	2301      	movs	r3, #1
 800480e:	e001      	b.n	8004814 <ST7565_DrawLine+0xc0>
 8004810:	f04f 33ff 	mov.w	r3, #4294967295
 8004814:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8004816:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800481a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800481e:	429a      	cmp	r2, r3
 8004820:	dd06      	ble.n	8004830 <ST7565_DrawLine+0xdc>
 8004822:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004826:	0fda      	lsrs	r2, r3, #31
 8004828:	4413      	add	r3, r2
 800482a:	105b      	asrs	r3, r3, #1
 800482c:	b21b      	sxth	r3, r3
 800482e:	e006      	b.n	800483e <ST7565_DrawLine+0xea>
 8004830:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004834:	0fda      	lsrs	r2, r3, #31
 8004836:	4413      	add	r3, r2
 8004838:	105b      	asrs	r3, r3, #1
 800483a:	425b      	negs	r3, r3
 800483c:	b21b      	sxth	r3, r3
 800483e:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8004840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d130      	bne.n	80048aa <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 8004848:	f9b7 2000 	ldrsh.w	r2, [r7]
 800484c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004850:	429a      	cmp	r2, r3
 8004852:	da05      	bge.n	8004860 <ST7565_DrawLine+0x10c>
			tmp = y1;
 8004854:	883b      	ldrh	r3, [r7, #0]
 8004856:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8004858:	88bb      	ldrh	r3, [r7, #4]
 800485a:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800485c:	893b      	ldrh	r3, [r7, #8]
 800485e:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8004860:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004868:	429a      	cmp	r2, r3
 800486a:	da05      	bge.n	8004878 <ST7565_DrawLine+0x124>
			tmp = x1;
 800486c:	887b      	ldrh	r3, [r7, #2]
 800486e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8004874:	893b      	ldrh	r3, [r7, #8]
 8004876:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8004878:	88bb      	ldrh	r3, [r7, #4]
 800487a:	82bb      	strh	r3, [r7, #20]
 800487c:	e00e      	b.n	800489c <ST7565_DrawLine+0x148>
			ST7565_Draw_pixel(x0, i, color);
 800487e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004882:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8004886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fd30 	bl	80042f0 <ST7565_Draw_pixel>
		for (i = y0; i <= y1; i++) {
 8004890:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004894:	b29b      	uxth	r3, r3
 8004896:	3301      	adds	r3, #1
 8004898:	b29b      	uxth	r3, r3
 800489a:	82bb      	strh	r3, [r7, #20]
 800489c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80048a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	ddea      	ble.n	800487e <ST7565_DrawLine+0x12a>
		}
		
		/* Return from function */
		return;
 80048a8:	e06e      	b.n	8004988 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 80048aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d130      	bne.n	8004914 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 80048b2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80048b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	da05      	bge.n	80048ca <ST7565_DrawLine+0x176>
			tmp = y1;
 80048be:	883b      	ldrh	r3, [r7, #0]
 80048c0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80048c2:	88bb      	ldrh	r3, [r7, #4]
 80048c4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80048c6:	893b      	ldrh	r3, [r7, #8]
 80048c8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80048ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80048ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	da05      	bge.n	80048e2 <ST7565_DrawLine+0x18e>
			tmp = x1;
 80048d6:	887b      	ldrh	r3, [r7, #2]
 80048d8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80048de:	893b      	ldrh	r3, [r7, #8]
 80048e0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	82bb      	strh	r3, [r7, #20]
 80048e6:	e00e      	b.n	8004906 <ST7565_DrawLine+0x1b2>
			ST7565_Draw_pixel(i, y0, color);
 80048e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80048ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80048f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fcfb 	bl	80042f0 <ST7565_Draw_pixel>
		for (i = x0; i <= x1; i++) {
 80048fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3301      	adds	r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	82bb      	strh	r3, [r7, #20]
 8004906:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800490a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800490e:	429a      	cmp	r2, r3
 8004910:	ddea      	ble.n	80048e8 <ST7565_DrawLine+0x194>
		}
		
		/* Return from function */
		return;
 8004912:	e039      	b.n	8004988 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, color);
 8004914:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004918:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800491c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fce5 	bl	80042f0 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) {
 8004926:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800492a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800492e:	429a      	cmp	r2, r3
 8004930:	d105      	bne.n	800493e <ST7565_DrawLine+0x1ea>
 8004932:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004936:	f9b7 3000 	ldrsh.w	r3, [r7]
 800493a:	429a      	cmp	r2, r3
 800493c:	d023      	beq.n	8004986 <ST7565_DrawLine+0x232>
			break;
		}
		e2 = err; 
 800493e:	8afb      	ldrh	r3, [r7, #22]
 8004940:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8004942:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004946:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800494a:	425b      	negs	r3, r3
 800494c:	429a      	cmp	r2, r3
 800494e:	dd09      	ble.n	8004964 <ST7565_DrawLine+0x210>
			err -= dy;
 8004950:	8afa      	ldrh	r2, [r7, #22]
 8004952:	8a3b      	ldrh	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	b29b      	uxth	r3, r3
 8004958:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	89fb      	ldrh	r3, [r7, #14]
 800495e:	4413      	add	r3, r2
 8004960:	b29b      	uxth	r3, r3
 8004962:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8004964:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004968:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800496c:	429a      	cmp	r2, r3
 800496e:	dad1      	bge.n	8004914 <ST7565_DrawLine+0x1c0>
			err += dx;
 8004970:	8afa      	ldrh	r2, [r7, #22]
 8004972:	8a7b      	ldrh	r3, [r7, #18]
 8004974:	4413      	add	r3, r2
 8004976:	b29b      	uxth	r3, r3
 8004978:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800497a:	88ba      	ldrh	r2, [r7, #4]
 800497c:	89bb      	ldrh	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	b29b      	uxth	r3, r3
 8004982:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, color);
 8004984:	e7c6      	b.n	8004914 <ST7565_DrawLine+0x1c0>
			break;
 8004986:	bf00      	nop
		} 
	}
}
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	bd90      	pop	{r4, r7, pc}
	...

08004990 <HX711_init>:
/**
 * @brief init hx711
 * 
 */
void  HX711_init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8004996:	2301      	movs	r3, #1
 8004998:	607b      	str	r3, [r7, #4]
  gpio.Pull = GPIO_NOPULL;
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800499e:	2303      	movs	r3, #3
 80049a0:	60fb      	str	r3, [r7, #12]
  gpio.Pin = SCK_GPIO_PIN;
 80049a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a6:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(SCK_GPIO_PORT, &gpio);
 80049a8:	463b      	mov	r3, r7
 80049aa:	4619      	mov	r1, r3
 80049ac:	4819      	ldr	r0, [pc, #100]	; (8004a14 <HX711_init+0x84>)
 80049ae:	f7fd fa0f 	bl	8001dd0 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]
  gpio.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80049ba:	2303      	movs	r3, #3
 80049bc:	60fb      	str	r3, [r7, #12]
  gpio.Pin = Dout_GPIO_PIN;
 80049be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049c2:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(Dout_GPIO_PORT, &gpio);
 80049c4:	463b      	mov	r3, r7
 80049c6:	4619      	mov	r1, r3
 80049c8:	4812      	ldr	r0, [pc, #72]	; (8004a14 <HX711_init+0x84>)
 80049ca:	f7fd fa01 	bl	8001dd0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_SET);
 80049ce:	2201      	movs	r2, #1
 80049d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049d4:	480f      	ldr	r0, [pc, #60]	; (8004a14 <HX711_init+0x84>)
 80049d6:	f7fd fb96 	bl	8002106 <HAL_GPIO_WritePin>
  HX711_delay(10);
 80049da:	200a      	movs	r0, #10
 80049dc:	f7fd f8c6 	bl	8001b6c <HAL_Delay>
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_RESET);
 80049e0:	2200      	movs	r2, #0
 80049e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049e6:	480b      	ldr	r0, [pc, #44]	; (8004a14 <HX711_init+0x84>)
 80049e8:	f7fd fb8d 	bl	8002106 <HAL_GPIO_WritePin>
  HX711_delay(10);
 80049ec:	200a      	movs	r0, #10
 80049ee:	f7fd f8bd 	bl	8001b6c <HAL_Delay>
  HX711_valueAve(8, Channel_A, 128);
 80049f2:	2280      	movs	r2, #128	; 0x80
 80049f4:	2100      	movs	r1, #0
 80049f6:	2008      	movs	r0, #8
 80049f8:	f000 f86e 	bl	8004ad8 <HX711_valueAve>
  HX711_delay(10);
 80049fc:	200a      	movs	r0, #10
 80049fe:	f7fd f8b5 	bl	8001b6c <HAL_Delay>
  HX711_valueAve(8, Channel_B, 32);
 8004a02:	2220      	movs	r2, #32
 8004a04:	2101      	movs	r1, #1
 8004a06:	2008      	movs	r0, #8
 8004a08:	f000 f866 	bl	8004ad8 <HX711_valueAve>
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40010c00 	.word	0x40010c00

08004a18 <HX711_value>:
 * 
 * @param Channel 
 * @return uint32_t 
 */
uint32_t HX711_value(Channel_t Channel, uint8_t Gain)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	460a      	mov	r2, r1
 8004a22:	71fb      	strb	r3, [r7, #7]
 8004a24:	4613      	mov	r3, r2
 8004a26:	71bb      	strb	r3, [r7, #6]
  uint32_t data = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8004a2c:	f7fd f894 	bl	8001b58 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(Dout_GPIO_PORT, Dout_GPIO_PIN) == GPIO_PIN_SET);
 8004a32:	bf00      	nop
 8004a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a38:	4826      	ldr	r0, [pc, #152]	; (8004ad4 <HX711_value+0xbc>)
 8004a3a:	f7fd fb4d 	bl	80020d8 <HAL_GPIO_ReadPin>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d0f7      	beq.n	8004a34 <HX711_value+0x1c>

  for(int8_t i=0; i < 24 ; i++)
 8004a44:	2300      	movs	r3, #0
 8004a46:	74fb      	strb	r3, [r7, #19]
 8004a48:	e025      	b.n	8004a96 <HX711_value+0x7e>
  {
    HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_SET);
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a50:	4820      	ldr	r0, [pc, #128]	; (8004ad4 <HX711_value+0xbc>)
 8004a52:	f7fd fb58 	bl	8002106 <HAL_GPIO_WritePin>
    delay_us(1);
 8004a56:	2001      	movs	r0, #1
 8004a58:	f000 f964 	bl	8004d24 <delay_us>
//    HX711_delay_us(1);
    data = data << 1;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
    HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_RESET);
 8004a62:	2200      	movs	r2, #0
 8004a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a68:	481a      	ldr	r0, [pc, #104]	; (8004ad4 <HX711_value+0xbc>)
 8004a6a:	f7fd fb4c 	bl	8002106 <HAL_GPIO_WritePin>
    delay_us(1);
 8004a6e:	2001      	movs	r0, #1
 8004a70:	f000 f958 	bl	8004d24 <delay_us>
//    HX711_delay_us(1);
    if(HAL_GPIO_ReadPin(Dout_GPIO_PORT, Dout_GPIO_PIN) == GPIO_PIN_SET)
 8004a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a78:	4816      	ldr	r0, [pc, #88]	; (8004ad4 <HX711_value+0xbc>)
 8004a7a:	f7fd fb2d 	bl	80020d8 <HAL_GPIO_ReadPin>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d102      	bne.n	8004a8a <HX711_value+0x72>
      data ++;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	3301      	adds	r3, #1
 8004a88:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i < 24 ; i++)
 8004a8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	74fb      	strb	r3, [r7, #19]
 8004a96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a9a:	2b17      	cmp	r3, #23
 8004a9c:	ddd5      	ble.n	8004a4a <HX711_value+0x32>
  }
  data = data ^ 0x800000;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8004aa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_SET);
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004aac:	4809      	ldr	r0, [pc, #36]	; (8004ad4 <HX711_value+0xbc>)
 8004aae:	f7fd fb2a 	bl	8002106 <HAL_GPIO_WritePin>
  delay_us(1);
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	f000 f936 	bl	8004d24 <delay_us>
//  HX711_delay_us(1);
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_RESET);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004abe:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <HX711_value+0xbc>)
 8004ac0:	f7fd fb21 	bl	8002106 <HAL_GPIO_WritePin>
  delay_us(1);
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	f000 f92d 	bl	8004d24 <delay_us>
//  HX711_delay_us(1);
  return data;
 8004aca:	697b      	ldr	r3, [r7, #20]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40010c00 	.word	0x40010c00

08004ad8 <HX711_valueAve>:




uint32_t HX711_valueAve(uint16_t sample, Channel_t Channel, uint8_t Gain)
{
 8004ad8:	b5b0      	push	{r4, r5, r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	80fb      	strh	r3, [r7, #6]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	717b      	strb	r3, [r7, #5]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	713b      	strb	r3, [r7, #4]
  uint64_t  ave = 0;
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	e9c7 2304 	strd	r2, r3, [r7, #16]

  for(uint16_t i=0 ; i < sample ; i++)
 8004af6:	2300      	movs	r3, #0
 8004af8:	81fb      	strh	r3, [r7, #14]
 8004afa:	e013      	b.n	8004b24 <HX711_valueAve+0x4c>
    ave += HX711_value(Channel, Gain);
 8004afc:	793a      	ldrb	r2, [r7, #4]
 8004afe:	797b      	ldrb	r3, [r7, #5]
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff88 	bl	8004a18 <HX711_value>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b14:	1884      	adds	r4, r0, r2
 8004b16:	eb41 0503 	adc.w	r5, r1, r3
 8004b1a:	e9c7 4504 	strd	r4, r5, [r7, #16]
  for(uint16_t i=0 ; i < sample ; i++)
 8004b1e:	89fb      	ldrh	r3, [r7, #14]
 8004b20:	3301      	adds	r3, #1
 8004b22:	81fb      	strh	r3, [r7, #14]
 8004b24:	89fa      	ldrh	r2, [r7, #14]
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3e7      	bcc.n	8004afc <HX711_valueAve+0x24>
  return (int32_t)(ave / sample);
 8004b2c:	88fa      	ldrh	r2, [r7, #6]
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b36:	f7fc f817 	bl	8000b68 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4613      	mov	r3, r2
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bdb0      	pop	{r4, r5, r7, pc}

08004b48 <HX711_getPressure>:
  * @brief lấy giá trị huyết áp
  * @param NONE
  * @return gía trị huyết áp
  * */
 uint8_t HX711_getPressure(void)
 {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
   uint8_t data = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	71fb      	strb	r3, [r7, #7]
   uint32_t data_raw = HX711_valueAve(16, Channel_B, 32);
 8004b52:	2220      	movs	r2, #32
 8004b54:	2101      	movs	r1, #1
 8004b56:	2010      	movs	r0, #16
 8004b58:	f7ff ffbe 	bl	8004ad8 <HX711_valueAve>
 8004b5c:	6038      	str	r0, [r7, #0]
   data = 2* ((pow(2,23) - data_raw))/((pow(2, 23)/300));
 8004b5e:	6838      	ldr	r0, [r7, #0]
 8004b60:	f7fb fc40 	bl	80003e4 <__aeabi_ui2d>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	f04f 0000 	mov.w	r0, #0
 8004b6c:	4912      	ldr	r1, [pc, #72]	; (8004bb8 <HX711_getPressure+0x70>)
 8004b6e:	f7fb fafb 	bl	8000168 <__aeabi_dsub>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	f7fb faf5 	bl	800016c <__adddf3>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	a309      	add	r3, pc, #36	; (adr r3, 8004bb0 <HX711_getPressure+0x68>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fdcc 	bl	800072c <__aeabi_ddiv>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f7fb ff74 	bl	8000a88 <__aeabi_d2uiz>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	71fb      	strb	r3, [r7, #7]
 }
 8004ba4:	bf00      	nop
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	b4e81b4f 	.word	0xb4e81b4f
 8004bb4:	40db4e81 	.word	0x40db4e81
 8004bb8:	41600000 	.word	0x41600000

08004bbc <UImeas_pressure>:
ST7565_DrawBitmap(1,1, no1_2, 20, 20, 1);

}

void UImeas_pressure(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af02      	add	r7, sp, #8
    ST7565_Print(1, 1, "SYS", &Font_11x18, 1, BLACK);
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <UImeas_pressure+0x90>)
 8004bcc:	4a20      	ldr	r2, [pc, #128]	; (8004c50 <UImeas_pressure+0x94>)
 8004bce:	2101      	movs	r1, #1
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f7ff fd31 	bl	8004638 <ST7565_Print>
    // ST7565_DrawBitmap(1,1, no1, 30, 30, 1);
    ST7565_Print(1, 20, "DIA", &Font_11x18, 1, BLACK);
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	2301      	movs	r3, #1
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <UImeas_pressure+0x90>)
 8004be0:	4a1c      	ldr	r2, [pc, #112]	; (8004c54 <UImeas_pressure+0x98>)
 8004be2:	2114      	movs	r1, #20
 8004be4:	2001      	movs	r0, #1
 8004be6:	f7ff fd27 	bl	8004638 <ST7565_Print>
    ST7565_Print(1, 40, "PULSE", &Font_11x18, 1, BLACK);
 8004bea:	2301      	movs	r3, #1
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	2301      	movs	r3, #1
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <UImeas_pressure+0x90>)
 8004bf4:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <UImeas_pressure+0x9c>)
 8004bf6:	2128      	movs	r1, #40	; 0x28
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f7ff fd1d 	bl	8004638 <ST7565_Print>
    // duong ke doc
    ST7565_DrawLine(109, 1, 109, 64, BLACK);
 8004bfe:	2301      	movs	r3, #1
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	2340      	movs	r3, #64	; 0x40
 8004c04:	226d      	movs	r2, #109	; 0x6d
 8004c06:	2101      	movs	r1, #1
 8004c08:	206d      	movs	r0, #109	; 0x6d
 8004c0a:	f7ff fda3 	bl	8004754 <ST7565_DrawLine>
    ST7565_DrawLine(110, 1, 110, 64, BLACK);
 8004c0e:	2301      	movs	r3, #1
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	2340      	movs	r3, #64	; 0x40
 8004c14:	226e      	movs	r2, #110	; 0x6e
 8004c16:	2101      	movs	r1, #1
 8004c18:	206e      	movs	r0, #110	; 0x6e
 8004c1a:	f7ff fd9b 	bl	8004754 <ST7565_DrawLine>

    // ket qua SYS
    // ST7565_Print(44, 1, "..8", &Font_11x18, 1, BLACK);
    ST7565_Print(80, 8, "mmHg", &Font_7x9, 1, BLACK);
 8004c1e:	2301      	movs	r3, #1
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	2301      	movs	r3, #1
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <UImeas_pressure+0xa0>)
 8004c28:	4a0d      	ldr	r2, [pc, #52]	; (8004c60 <UImeas_pressure+0xa4>)
 8004c2a:	2108      	movs	r1, #8
 8004c2c:	2050      	movs	r0, #80	; 0x50
 8004c2e:	f7ff fd03 	bl	8004638 <ST7565_Print>
    // ket qua DIA
    // ST7565_Print(44, 20, "..8", &Font_11x18, 1, BLACK);
    ST7565_Print(80, 27, "mmHg", &Font_7x9, 1, BLACK);
 8004c32:	2301      	movs	r3, #1
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	2301      	movs	r3, #1
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <UImeas_pressure+0xa0>)
 8004c3c:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <UImeas_pressure+0xa4>)
 8004c3e:	211b      	movs	r1, #27
 8004c40:	2050      	movs	r0, #80	; 0x50
 8004c42:	f7ff fcf9 	bl	8004638 <ST7565_Print>
    // ket qua PULSE
    // ST7565_Print(66, 40, "..", &Font_11x18, 1, BLACK);
    //
}
 8004c46:	bf00      	nop
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20000014 	.word	0x20000014
 8004c50:	08009650 	.word	0x08009650
 8004c54:	08009654 	.word	0x08009654
 8004c58:	08009658 	.word	0x08009658
 8004c5c:	2000000c 	.word	0x2000000c
 8004c60:	08009660 	.word	0x08009660

08004c64 <TimerDelay_Init>:
#define TIMER  TIM4
volatile static TIM_HandleTypeDef HTIMx;
volatile static uint32_t gu32_ticks = 0;

void TimerDelay_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8004c6a:	f7fd ff73 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <TimerDelay_Init+0xb0>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	0c9b      	lsrs	r3, r3, #18
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <TimerDelay_Init+0xb4>)
 8004c7a:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8004c7c:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <TimerDelay_Init+0xb8>)
 8004c7e:	4a28      	ldr	r2, [pc, #160]	; (8004d20 <TimerDelay_Init+0xbc>)
 8004c80:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c82:	f107 0308 	add.w	r3, r7, #8
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c90:	463b      	mov	r3, r7
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 8004c98:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <TimerDelay_Init+0xb4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <TimerDelay_Init+0xb8>)
 8004ca0:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <TimerDelay_Init+0xb8>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 8004ca8:	4b1c      	ldr	r3, [pc, #112]	; (8004d1c <TimerDelay_Init+0xb8>)
 8004caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cae:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <TimerDelay_Init+0xb8>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cb6:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <TimerDelay_Init+0xb8>)
 8004cb8:	2280      	movs	r2, #128	; 0x80
 8004cba:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 8004cbc:	4817      	ldr	r0, [pc, #92]	; (8004d1c <TimerDelay_Init+0xb8>)
 8004cbe:	f7fe fa0d 	bl	80030dc <HAL_TIM_Base_Init>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <TimerDelay_Init+0x68>
    {
      Error_Handler();
 8004cc8:	f7fc fc24 	bl	8001514 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cd0:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 8004cd2:	f107 0308 	add.w	r3, r7, #8
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4810      	ldr	r0, [pc, #64]	; (8004d1c <TimerDelay_Init+0xb8>)
 8004cda:	f7fe fd8b 	bl	80037f4 <HAL_TIM_ConfigClockSource>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <TimerDelay_Init+0x84>
    {
      Error_Handler();
 8004ce4:	f7fc fc16 	bl	8001514 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4809      	ldr	r0, [pc, #36]	; (8004d1c <TimerDelay_Init+0xb8>)
 8004cf6:	f7ff f8d3 	bl	8003ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 8004d00:	f7fc fc08 	bl	8001514 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 8004d04:	4805      	ldr	r0, [pc, #20]	; (8004d1c <TimerDelay_Init+0xb8>)
 8004d06:	f7fe fa39 	bl	800317c <HAL_TIM_Base_Start>

}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	431bde83 	.word	0x431bde83
 8004d18:	20000268 	.word	0x20000268
 8004d1c:	20000220 	.word	0x20000220
 8004d20:	40000800 	.word	0x40000800

08004d24 <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <delay_us+0x30>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24
	while (HTIMx.Instance->CNT < au16_us);
 8004d36:	bf00      	nop
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <delay_us+0x30>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	b292      	uxth	r2, r2
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d3f8      	bcc.n	8004d38 <delay_us+0x14>
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000220 	.word	0x20000220

08004d58 <__errno>:
 8004d58:	4b01      	ldr	r3, [pc, #4]	; (8004d60 <__errno+0x8>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	2000001c 	.word	0x2000001c

08004d64 <__libc_init_array>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	2600      	movs	r6, #0
 8004d68:	4d0c      	ldr	r5, [pc, #48]	; (8004d9c <__libc_init_array+0x38>)
 8004d6a:	4c0d      	ldr	r4, [pc, #52]	; (8004da0 <__libc_init_array+0x3c>)
 8004d6c:	1b64      	subs	r4, r4, r5
 8004d6e:	10a4      	asrs	r4, r4, #2
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	d109      	bne.n	8004d88 <__libc_init_array+0x24>
 8004d74:	f004 fc2a 	bl	80095cc <_init>
 8004d78:	2600      	movs	r6, #0
 8004d7a:	4d0a      	ldr	r5, [pc, #40]	; (8004da4 <__libc_init_array+0x40>)
 8004d7c:	4c0a      	ldr	r4, [pc, #40]	; (8004da8 <__libc_init_array+0x44>)
 8004d7e:	1b64      	subs	r4, r4, r5
 8004d80:	10a4      	asrs	r4, r4, #2
 8004d82:	42a6      	cmp	r6, r4
 8004d84:	d105      	bne.n	8004d92 <__libc_init_array+0x2e>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8c:	4798      	blx	r3
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7ee      	b.n	8004d70 <__libc_init_array+0xc>
 8004d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d96:	4798      	blx	r3
 8004d98:	3601      	adds	r6, #1
 8004d9a:	e7f2      	b.n	8004d82 <__libc_init_array+0x1e>
 8004d9c:	0800af7c 	.word	0x0800af7c
 8004da0:	0800af7c 	.word	0x0800af7c
 8004da4:	0800af7c 	.word	0x0800af7c
 8004da8:	0800af80 	.word	0x0800af80

08004dac <memset>:
 8004dac:	4603      	mov	r3, r0
 8004dae:	4402      	add	r2, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d100      	bne.n	8004db6 <memset+0xa>
 8004db4:	4770      	bx	lr
 8004db6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dba:	e7f9      	b.n	8004db0 <memset+0x4>

08004dbc <__cvt>:
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc2:	461f      	mov	r7, r3
 8004dc4:	bfbb      	ittet	lt
 8004dc6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004dca:	461f      	movlt	r7, r3
 8004dcc:	2300      	movge	r3, #0
 8004dce:	232d      	movlt	r3, #45	; 0x2d
 8004dd0:	b088      	sub	sp, #32
 8004dd2:	4614      	mov	r4, r2
 8004dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004dd6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004dd8:	7013      	strb	r3, [r2, #0]
 8004dda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ddc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004de0:	f023 0820 	bic.w	r8, r3, #32
 8004de4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004de8:	d005      	beq.n	8004df6 <__cvt+0x3a>
 8004dea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dee:	d100      	bne.n	8004df2 <__cvt+0x36>
 8004df0:	3501      	adds	r5, #1
 8004df2:	2302      	movs	r3, #2
 8004df4:	e000      	b.n	8004df8 <__cvt+0x3c>
 8004df6:	2303      	movs	r3, #3
 8004df8:	aa07      	add	r2, sp, #28
 8004dfa:	9204      	str	r2, [sp, #16]
 8004dfc:	aa06      	add	r2, sp, #24
 8004dfe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e02:	e9cd 3500 	strd	r3, r5, [sp]
 8004e06:	4622      	mov	r2, r4
 8004e08:	463b      	mov	r3, r7
 8004e0a:	f001 fda1 	bl	8006950 <_dtoa_r>
 8004e0e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e12:	4606      	mov	r6, r0
 8004e14:	d102      	bne.n	8004e1c <__cvt+0x60>
 8004e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e18:	07db      	lsls	r3, r3, #31
 8004e1a:	d522      	bpl.n	8004e62 <__cvt+0xa6>
 8004e1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e20:	eb06 0905 	add.w	r9, r6, r5
 8004e24:	d110      	bne.n	8004e48 <__cvt+0x8c>
 8004e26:	7833      	ldrb	r3, [r6, #0]
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d10a      	bne.n	8004e42 <__cvt+0x86>
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2300      	movs	r3, #0
 8004e30:	4620      	mov	r0, r4
 8004e32:	4639      	mov	r1, r7
 8004e34:	f7fb fdb8 	bl	80009a8 <__aeabi_dcmpeq>
 8004e38:	b918      	cbnz	r0, 8004e42 <__cvt+0x86>
 8004e3a:	f1c5 0501 	rsb	r5, r5, #1
 8004e3e:	f8ca 5000 	str.w	r5, [sl]
 8004e42:	f8da 3000 	ldr.w	r3, [sl]
 8004e46:	4499      	add	r9, r3
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	4639      	mov	r1, r7
 8004e50:	f7fb fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8004e54:	b108      	cbz	r0, 8004e5a <__cvt+0x9e>
 8004e56:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e5a:	2230      	movs	r2, #48	; 0x30
 8004e5c:	9b07      	ldr	r3, [sp, #28]
 8004e5e:	454b      	cmp	r3, r9
 8004e60:	d307      	bcc.n	8004e72 <__cvt+0xb6>
 8004e62:	4630      	mov	r0, r6
 8004e64:	9b07      	ldr	r3, [sp, #28]
 8004e66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e68:	1b9b      	subs	r3, r3, r6
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	b008      	add	sp, #32
 8004e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e72:	1c59      	adds	r1, r3, #1
 8004e74:	9107      	str	r1, [sp, #28]
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	e7f0      	b.n	8004e5c <__cvt+0xa0>

08004e7a <__exponent>:
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e7e:	2900      	cmp	r1, #0
 8004e80:	f803 2b02 	strb.w	r2, [r3], #2
 8004e84:	bfb6      	itet	lt
 8004e86:	222d      	movlt	r2, #45	; 0x2d
 8004e88:	222b      	movge	r2, #43	; 0x2b
 8004e8a:	4249      	neglt	r1, r1
 8004e8c:	2909      	cmp	r1, #9
 8004e8e:	7042      	strb	r2, [r0, #1]
 8004e90:	dd2b      	ble.n	8004eea <__exponent+0x70>
 8004e92:	f10d 0407 	add.w	r4, sp, #7
 8004e96:	46a4      	mov	ip, r4
 8004e98:	270a      	movs	r7, #10
 8004e9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e9e:	460a      	mov	r2, r1
 8004ea0:	46a6      	mov	lr, r4
 8004ea2:	fb07 1516 	mls	r5, r7, r6, r1
 8004ea6:	2a63      	cmp	r2, #99	; 0x63
 8004ea8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004eac:	4631      	mov	r1, r6
 8004eae:	f104 34ff 	add.w	r4, r4, #4294967295
 8004eb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004eb6:	dcf0      	bgt.n	8004e9a <__exponent+0x20>
 8004eb8:	3130      	adds	r1, #48	; 0x30
 8004eba:	f1ae 0502 	sub.w	r5, lr, #2
 8004ebe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	1c44      	adds	r4, r0, #1
 8004ec6:	4561      	cmp	r1, ip
 8004ec8:	d30a      	bcc.n	8004ee0 <__exponent+0x66>
 8004eca:	f10d 0209 	add.w	r2, sp, #9
 8004ece:	eba2 020e 	sub.w	r2, r2, lr
 8004ed2:	4565      	cmp	r5, ip
 8004ed4:	bf88      	it	hi
 8004ed6:	2200      	movhi	r2, #0
 8004ed8:	4413      	add	r3, r2
 8004eda:	1a18      	subs	r0, r3, r0
 8004edc:	b003      	add	sp, #12
 8004ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ee4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ee8:	e7ed      	b.n	8004ec6 <__exponent+0x4c>
 8004eea:	2330      	movs	r3, #48	; 0x30
 8004eec:	3130      	adds	r1, #48	; 0x30
 8004eee:	7083      	strb	r3, [r0, #2]
 8004ef0:	70c1      	strb	r1, [r0, #3]
 8004ef2:	1d03      	adds	r3, r0, #4
 8004ef4:	e7f1      	b.n	8004eda <__exponent+0x60>
	...

08004ef8 <_printf_float>:
 8004ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efc:	b091      	sub	sp, #68	; 0x44
 8004efe:	460c      	mov	r4, r1
 8004f00:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004f04:	4616      	mov	r6, r2
 8004f06:	461f      	mov	r7, r3
 8004f08:	4605      	mov	r5, r0
 8004f0a:	f002 fe75 	bl	8007bf8 <_localeconv_r>
 8004f0e:	6803      	ldr	r3, [r0, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	9309      	str	r3, [sp, #36]	; 0x24
 8004f14:	f7fb f91c 	bl	8000150 <strlen>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	930e      	str	r3, [sp, #56]	; 0x38
 8004f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f20:	900a      	str	r0, [sp, #40]	; 0x28
 8004f22:	3307      	adds	r3, #7
 8004f24:	f023 0307 	bic.w	r3, r3, #7
 8004f28:	f103 0208 	add.w	r2, r3, #8
 8004f2c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004f30:	f8d4 b000 	ldr.w	fp, [r4]
 8004f34:	f8c8 2000 	str.w	r2, [r8]
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f40:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004f44:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4e:	4640      	mov	r0, r8
 8004f50:	4b9c      	ldr	r3, [pc, #624]	; (80051c4 <_printf_float+0x2cc>)
 8004f52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f54:	f7fb fd5a 	bl	8000a0c <__aeabi_dcmpun>
 8004f58:	bb70      	cbnz	r0, 8004fb8 <_printf_float+0xc0>
 8004f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5e:	4640      	mov	r0, r8
 8004f60:	4b98      	ldr	r3, [pc, #608]	; (80051c4 <_printf_float+0x2cc>)
 8004f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f64:	f7fb fd34 	bl	80009d0 <__aeabi_dcmple>
 8004f68:	bb30      	cbnz	r0, 8004fb8 <_printf_float+0xc0>
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4640      	mov	r0, r8
 8004f70:	4651      	mov	r1, sl
 8004f72:	f7fb fd23 	bl	80009bc <__aeabi_dcmplt>
 8004f76:	b110      	cbz	r0, 8004f7e <_printf_float+0x86>
 8004f78:	232d      	movs	r3, #45	; 0x2d
 8004f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f7e:	4b92      	ldr	r3, [pc, #584]	; (80051c8 <_printf_float+0x2d0>)
 8004f80:	4892      	ldr	r0, [pc, #584]	; (80051cc <_printf_float+0x2d4>)
 8004f82:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f86:	bf94      	ite	ls
 8004f88:	4698      	movls	r8, r3
 8004f8a:	4680      	movhi	r8, r0
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	f04f 0a00 	mov.w	sl, #0
 8004f92:	6123      	str	r3, [r4, #16]
 8004f94:	f02b 0304 	bic.w	r3, fp, #4
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	4633      	mov	r3, r6
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	9700      	str	r7, [sp, #0]
 8004fa2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004fa4:	f000 f9d4 	bl	8005350 <_printf_common>
 8004fa8:	3001      	adds	r0, #1
 8004faa:	f040 8090 	bne.w	80050ce <_printf_float+0x1d6>
 8004fae:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb2:	b011      	add	sp, #68	; 0x44
 8004fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb8:	4642      	mov	r2, r8
 8004fba:	4653      	mov	r3, sl
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	4651      	mov	r1, sl
 8004fc0:	f7fb fd24 	bl	8000a0c <__aeabi_dcmpun>
 8004fc4:	b148      	cbz	r0, 8004fda <_printf_float+0xe2>
 8004fc6:	f1ba 0f00 	cmp.w	sl, #0
 8004fca:	bfb8      	it	lt
 8004fcc:	232d      	movlt	r3, #45	; 0x2d
 8004fce:	4880      	ldr	r0, [pc, #512]	; (80051d0 <_printf_float+0x2d8>)
 8004fd0:	bfb8      	it	lt
 8004fd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fd6:	4b7f      	ldr	r3, [pc, #508]	; (80051d4 <_printf_float+0x2dc>)
 8004fd8:	e7d3      	b.n	8004f82 <_printf_float+0x8a>
 8004fda:	6863      	ldr	r3, [r4, #4]
 8004fdc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	d142      	bne.n	800506a <_printf_float+0x172>
 8004fe4:	2306      	movs	r3, #6
 8004fe6:	6063      	str	r3, [r4, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	9206      	str	r2, [sp, #24]
 8004fec:	aa0e      	add	r2, sp, #56	; 0x38
 8004fee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ff2:	aa0d      	add	r2, sp, #52	; 0x34
 8004ff4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ff8:	9203      	str	r2, [sp, #12]
 8004ffa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004ffe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	6863      	ldr	r3, [r4, #4]
 8005006:	4642      	mov	r2, r8
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	4628      	mov	r0, r5
 800500c:	4653      	mov	r3, sl
 800500e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005010:	f7ff fed4 	bl	8004dbc <__cvt>
 8005014:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005016:	4680      	mov	r8, r0
 8005018:	2947      	cmp	r1, #71	; 0x47
 800501a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800501c:	d108      	bne.n	8005030 <_printf_float+0x138>
 800501e:	1cc8      	adds	r0, r1, #3
 8005020:	db02      	blt.n	8005028 <_printf_float+0x130>
 8005022:	6863      	ldr	r3, [r4, #4]
 8005024:	4299      	cmp	r1, r3
 8005026:	dd40      	ble.n	80050aa <_printf_float+0x1b2>
 8005028:	f1a9 0902 	sub.w	r9, r9, #2
 800502c:	fa5f f989 	uxtb.w	r9, r9
 8005030:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005034:	d81f      	bhi.n	8005076 <_printf_float+0x17e>
 8005036:	464a      	mov	r2, r9
 8005038:	3901      	subs	r1, #1
 800503a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800503e:	910d      	str	r1, [sp, #52]	; 0x34
 8005040:	f7ff ff1b 	bl	8004e7a <__exponent>
 8005044:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005046:	4682      	mov	sl, r0
 8005048:	1813      	adds	r3, r2, r0
 800504a:	2a01      	cmp	r2, #1
 800504c:	6123      	str	r3, [r4, #16]
 800504e:	dc02      	bgt.n	8005056 <_printf_float+0x15e>
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	07d2      	lsls	r2, r2, #31
 8005054:	d501      	bpl.n	800505a <_printf_float+0x162>
 8005056:	3301      	adds	r3, #1
 8005058:	6123      	str	r3, [r4, #16]
 800505a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800505e:	2b00      	cmp	r3, #0
 8005060:	d09b      	beq.n	8004f9a <_printf_float+0xa2>
 8005062:	232d      	movs	r3, #45	; 0x2d
 8005064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005068:	e797      	b.n	8004f9a <_printf_float+0xa2>
 800506a:	2947      	cmp	r1, #71	; 0x47
 800506c:	d1bc      	bne.n	8004fe8 <_printf_float+0xf0>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1ba      	bne.n	8004fe8 <_printf_float+0xf0>
 8005072:	2301      	movs	r3, #1
 8005074:	e7b7      	b.n	8004fe6 <_printf_float+0xee>
 8005076:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800507a:	d118      	bne.n	80050ae <_printf_float+0x1b6>
 800507c:	2900      	cmp	r1, #0
 800507e:	6863      	ldr	r3, [r4, #4]
 8005080:	dd0b      	ble.n	800509a <_printf_float+0x1a2>
 8005082:	6121      	str	r1, [r4, #16]
 8005084:	b913      	cbnz	r3, 800508c <_printf_float+0x194>
 8005086:	6822      	ldr	r2, [r4, #0]
 8005088:	07d0      	lsls	r0, r2, #31
 800508a:	d502      	bpl.n	8005092 <_printf_float+0x19a>
 800508c:	3301      	adds	r3, #1
 800508e:	440b      	add	r3, r1
 8005090:	6123      	str	r3, [r4, #16]
 8005092:	f04f 0a00 	mov.w	sl, #0
 8005096:	65a1      	str	r1, [r4, #88]	; 0x58
 8005098:	e7df      	b.n	800505a <_printf_float+0x162>
 800509a:	b913      	cbnz	r3, 80050a2 <_printf_float+0x1aa>
 800509c:	6822      	ldr	r2, [r4, #0]
 800509e:	07d2      	lsls	r2, r2, #31
 80050a0:	d501      	bpl.n	80050a6 <_printf_float+0x1ae>
 80050a2:	3302      	adds	r3, #2
 80050a4:	e7f4      	b.n	8005090 <_printf_float+0x198>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e7f2      	b.n	8005090 <_printf_float+0x198>
 80050aa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80050ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050b0:	4299      	cmp	r1, r3
 80050b2:	db05      	blt.n	80050c0 <_printf_float+0x1c8>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	6121      	str	r1, [r4, #16]
 80050b8:	07d8      	lsls	r0, r3, #31
 80050ba:	d5ea      	bpl.n	8005092 <_printf_float+0x19a>
 80050bc:	1c4b      	adds	r3, r1, #1
 80050be:	e7e7      	b.n	8005090 <_printf_float+0x198>
 80050c0:	2900      	cmp	r1, #0
 80050c2:	bfcc      	ite	gt
 80050c4:	2201      	movgt	r2, #1
 80050c6:	f1c1 0202 	rsble	r2, r1, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	e7e0      	b.n	8005090 <_printf_float+0x198>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	055a      	lsls	r2, r3, #21
 80050d2:	d407      	bmi.n	80050e4 <_printf_float+0x1ec>
 80050d4:	6923      	ldr	r3, [r4, #16]
 80050d6:	4642      	mov	r2, r8
 80050d8:	4631      	mov	r1, r6
 80050da:	4628      	mov	r0, r5
 80050dc:	47b8      	blx	r7
 80050de:	3001      	adds	r0, #1
 80050e0:	d12b      	bne.n	800513a <_printf_float+0x242>
 80050e2:	e764      	b.n	8004fae <_printf_float+0xb6>
 80050e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80050e8:	f240 80dd 	bls.w	80052a6 <_printf_float+0x3ae>
 80050ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050f0:	2200      	movs	r2, #0
 80050f2:	2300      	movs	r3, #0
 80050f4:	f7fb fc58 	bl	80009a8 <__aeabi_dcmpeq>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d033      	beq.n	8005164 <_printf_float+0x26c>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4631      	mov	r1, r6
 8005100:	4628      	mov	r0, r5
 8005102:	4a35      	ldr	r2, [pc, #212]	; (80051d8 <_printf_float+0x2e0>)
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	f43f af51 	beq.w	8004fae <_printf_float+0xb6>
 800510c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005110:	429a      	cmp	r2, r3
 8005112:	db02      	blt.n	800511a <_printf_float+0x222>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	07d8      	lsls	r0, r3, #31
 8005118:	d50f      	bpl.n	800513a <_printf_float+0x242>
 800511a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800511e:	4631      	mov	r1, r6
 8005120:	4628      	mov	r0, r5
 8005122:	47b8      	blx	r7
 8005124:	3001      	adds	r0, #1
 8005126:	f43f af42 	beq.w	8004fae <_printf_float+0xb6>
 800512a:	f04f 0800 	mov.w	r8, #0
 800512e:	f104 091a 	add.w	r9, r4, #26
 8005132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005134:	3b01      	subs	r3, #1
 8005136:	4543      	cmp	r3, r8
 8005138:	dc09      	bgt.n	800514e <_printf_float+0x256>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	079b      	lsls	r3, r3, #30
 800513e:	f100 8102 	bmi.w	8005346 <_printf_float+0x44e>
 8005142:	68e0      	ldr	r0, [r4, #12]
 8005144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005146:	4298      	cmp	r0, r3
 8005148:	bfb8      	it	lt
 800514a:	4618      	movlt	r0, r3
 800514c:	e731      	b.n	8004fb2 <_printf_float+0xba>
 800514e:	2301      	movs	r3, #1
 8005150:	464a      	mov	r2, r9
 8005152:	4631      	mov	r1, r6
 8005154:	4628      	mov	r0, r5
 8005156:	47b8      	blx	r7
 8005158:	3001      	adds	r0, #1
 800515a:	f43f af28 	beq.w	8004fae <_printf_float+0xb6>
 800515e:	f108 0801 	add.w	r8, r8, #1
 8005162:	e7e6      	b.n	8005132 <_printf_float+0x23a>
 8005164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005166:	2b00      	cmp	r3, #0
 8005168:	dc38      	bgt.n	80051dc <_printf_float+0x2e4>
 800516a:	2301      	movs	r3, #1
 800516c:	4631      	mov	r1, r6
 800516e:	4628      	mov	r0, r5
 8005170:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <_printf_float+0x2e0>)
 8005172:	47b8      	blx	r7
 8005174:	3001      	adds	r0, #1
 8005176:	f43f af1a 	beq.w	8004fae <_printf_float+0xb6>
 800517a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800517e:	4313      	orrs	r3, r2
 8005180:	d102      	bne.n	8005188 <_printf_float+0x290>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	07d9      	lsls	r1, r3, #31
 8005186:	d5d8      	bpl.n	800513a <_printf_float+0x242>
 8005188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800518c:	4631      	mov	r1, r6
 800518e:	4628      	mov	r0, r5
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	f43f af0b 	beq.w	8004fae <_printf_float+0xb6>
 8005198:	f04f 0900 	mov.w	r9, #0
 800519c:	f104 0a1a 	add.w	sl, r4, #26
 80051a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051a2:	425b      	negs	r3, r3
 80051a4:	454b      	cmp	r3, r9
 80051a6:	dc01      	bgt.n	80051ac <_printf_float+0x2b4>
 80051a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051aa:	e794      	b.n	80050d6 <_printf_float+0x1de>
 80051ac:	2301      	movs	r3, #1
 80051ae:	4652      	mov	r2, sl
 80051b0:	4631      	mov	r1, r6
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b8      	blx	r7
 80051b6:	3001      	adds	r0, #1
 80051b8:	f43f aef9 	beq.w	8004fae <_printf_float+0xb6>
 80051bc:	f109 0901 	add.w	r9, r9, #1
 80051c0:	e7ee      	b.n	80051a0 <_printf_float+0x2a8>
 80051c2:	bf00      	nop
 80051c4:	7fefffff 	.word	0x7fefffff
 80051c8:	0800aac4 	.word	0x0800aac4
 80051cc:	0800aac8 	.word	0x0800aac8
 80051d0:	0800aad0 	.word	0x0800aad0
 80051d4:	0800aacc 	.word	0x0800aacc
 80051d8:	0800aad4 	.word	0x0800aad4
 80051dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051e0:	429a      	cmp	r2, r3
 80051e2:	bfa8      	it	ge
 80051e4:	461a      	movge	r2, r3
 80051e6:	2a00      	cmp	r2, #0
 80051e8:	4691      	mov	r9, r2
 80051ea:	dc37      	bgt.n	800525c <_printf_float+0x364>
 80051ec:	f04f 0b00 	mov.w	fp, #0
 80051f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051f4:	f104 021a 	add.w	r2, r4, #26
 80051f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80051fc:	ebaa 0309 	sub.w	r3, sl, r9
 8005200:	455b      	cmp	r3, fp
 8005202:	dc33      	bgt.n	800526c <_printf_float+0x374>
 8005204:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005208:	429a      	cmp	r2, r3
 800520a:	db3b      	blt.n	8005284 <_printf_float+0x38c>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	07da      	lsls	r2, r3, #31
 8005210:	d438      	bmi.n	8005284 <_printf_float+0x38c>
 8005212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005214:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005216:	eba2 030a 	sub.w	r3, r2, sl
 800521a:	eba2 0901 	sub.w	r9, r2, r1
 800521e:	4599      	cmp	r9, r3
 8005220:	bfa8      	it	ge
 8005222:	4699      	movge	r9, r3
 8005224:	f1b9 0f00 	cmp.w	r9, #0
 8005228:	dc34      	bgt.n	8005294 <_printf_float+0x39c>
 800522a:	f04f 0800 	mov.w	r8, #0
 800522e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005232:	f104 0a1a 	add.w	sl, r4, #26
 8005236:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	eba3 0309 	sub.w	r3, r3, r9
 8005240:	4543      	cmp	r3, r8
 8005242:	f77f af7a 	ble.w	800513a <_printf_float+0x242>
 8005246:	2301      	movs	r3, #1
 8005248:	4652      	mov	r2, sl
 800524a:	4631      	mov	r1, r6
 800524c:	4628      	mov	r0, r5
 800524e:	47b8      	blx	r7
 8005250:	3001      	adds	r0, #1
 8005252:	f43f aeac 	beq.w	8004fae <_printf_float+0xb6>
 8005256:	f108 0801 	add.w	r8, r8, #1
 800525a:	e7ec      	b.n	8005236 <_printf_float+0x33e>
 800525c:	4613      	mov	r3, r2
 800525e:	4631      	mov	r1, r6
 8005260:	4642      	mov	r2, r8
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	d1c0      	bne.n	80051ec <_printf_float+0x2f4>
 800526a:	e6a0      	b.n	8004fae <_printf_float+0xb6>
 800526c:	2301      	movs	r3, #1
 800526e:	4631      	mov	r1, r6
 8005270:	4628      	mov	r0, r5
 8005272:	920b      	str	r2, [sp, #44]	; 0x2c
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	f43f ae99 	beq.w	8004fae <_printf_float+0xb6>
 800527c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800527e:	f10b 0b01 	add.w	fp, fp, #1
 8005282:	e7b9      	b.n	80051f8 <_printf_float+0x300>
 8005284:	4631      	mov	r1, r6
 8005286:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800528a:	4628      	mov	r0, r5
 800528c:	47b8      	blx	r7
 800528e:	3001      	adds	r0, #1
 8005290:	d1bf      	bne.n	8005212 <_printf_float+0x31a>
 8005292:	e68c      	b.n	8004fae <_printf_float+0xb6>
 8005294:	464b      	mov	r3, r9
 8005296:	4631      	mov	r1, r6
 8005298:	4628      	mov	r0, r5
 800529a:	eb08 020a 	add.w	r2, r8, sl
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	d1c2      	bne.n	800522a <_printf_float+0x332>
 80052a4:	e683      	b.n	8004fae <_printf_float+0xb6>
 80052a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052a8:	2a01      	cmp	r2, #1
 80052aa:	dc01      	bgt.n	80052b0 <_printf_float+0x3b8>
 80052ac:	07db      	lsls	r3, r3, #31
 80052ae:	d537      	bpl.n	8005320 <_printf_float+0x428>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4642      	mov	r2, r8
 80052b4:	4631      	mov	r1, r6
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b8      	blx	r7
 80052ba:	3001      	adds	r0, #1
 80052bc:	f43f ae77 	beq.w	8004fae <_printf_float+0xb6>
 80052c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052c4:	4631      	mov	r1, r6
 80052c6:	4628      	mov	r0, r5
 80052c8:	47b8      	blx	r7
 80052ca:	3001      	adds	r0, #1
 80052cc:	f43f ae6f 	beq.w	8004fae <_printf_float+0xb6>
 80052d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052d4:	2200      	movs	r2, #0
 80052d6:	2300      	movs	r3, #0
 80052d8:	f7fb fb66 	bl	80009a8 <__aeabi_dcmpeq>
 80052dc:	b9d8      	cbnz	r0, 8005316 <_printf_float+0x41e>
 80052de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052e0:	f108 0201 	add.w	r2, r8, #1
 80052e4:	3b01      	subs	r3, #1
 80052e6:	4631      	mov	r1, r6
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b8      	blx	r7
 80052ec:	3001      	adds	r0, #1
 80052ee:	d10e      	bne.n	800530e <_printf_float+0x416>
 80052f0:	e65d      	b.n	8004fae <_printf_float+0xb6>
 80052f2:	2301      	movs	r3, #1
 80052f4:	464a      	mov	r2, r9
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f ae56 	beq.w	8004fae <_printf_float+0xb6>
 8005302:	f108 0801 	add.w	r8, r8, #1
 8005306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005308:	3b01      	subs	r3, #1
 800530a:	4543      	cmp	r3, r8
 800530c:	dcf1      	bgt.n	80052f2 <_printf_float+0x3fa>
 800530e:	4653      	mov	r3, sl
 8005310:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005314:	e6e0      	b.n	80050d8 <_printf_float+0x1e0>
 8005316:	f04f 0800 	mov.w	r8, #0
 800531a:	f104 091a 	add.w	r9, r4, #26
 800531e:	e7f2      	b.n	8005306 <_printf_float+0x40e>
 8005320:	2301      	movs	r3, #1
 8005322:	4642      	mov	r2, r8
 8005324:	e7df      	b.n	80052e6 <_printf_float+0x3ee>
 8005326:	2301      	movs	r3, #1
 8005328:	464a      	mov	r2, r9
 800532a:	4631      	mov	r1, r6
 800532c:	4628      	mov	r0, r5
 800532e:	47b8      	blx	r7
 8005330:	3001      	adds	r0, #1
 8005332:	f43f ae3c 	beq.w	8004fae <_printf_float+0xb6>
 8005336:	f108 0801 	add.w	r8, r8, #1
 800533a:	68e3      	ldr	r3, [r4, #12]
 800533c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800533e:	1a5b      	subs	r3, r3, r1
 8005340:	4543      	cmp	r3, r8
 8005342:	dcf0      	bgt.n	8005326 <_printf_float+0x42e>
 8005344:	e6fd      	b.n	8005142 <_printf_float+0x24a>
 8005346:	f04f 0800 	mov.w	r8, #0
 800534a:	f104 0919 	add.w	r9, r4, #25
 800534e:	e7f4      	b.n	800533a <_printf_float+0x442>

08005350 <_printf_common>:
 8005350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005354:	4616      	mov	r6, r2
 8005356:	4699      	mov	r9, r3
 8005358:	688a      	ldr	r2, [r1, #8]
 800535a:	690b      	ldr	r3, [r1, #16]
 800535c:	4607      	mov	r7, r0
 800535e:	4293      	cmp	r3, r2
 8005360:	bfb8      	it	lt
 8005362:	4613      	movlt	r3, r2
 8005364:	6033      	str	r3, [r6, #0]
 8005366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800536a:	460c      	mov	r4, r1
 800536c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005370:	b10a      	cbz	r2, 8005376 <_printf_common+0x26>
 8005372:	3301      	adds	r3, #1
 8005374:	6033      	str	r3, [r6, #0]
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	0699      	lsls	r1, r3, #26
 800537a:	bf42      	ittt	mi
 800537c:	6833      	ldrmi	r3, [r6, #0]
 800537e:	3302      	addmi	r3, #2
 8005380:	6033      	strmi	r3, [r6, #0]
 8005382:	6825      	ldr	r5, [r4, #0]
 8005384:	f015 0506 	ands.w	r5, r5, #6
 8005388:	d106      	bne.n	8005398 <_printf_common+0x48>
 800538a:	f104 0a19 	add.w	sl, r4, #25
 800538e:	68e3      	ldr	r3, [r4, #12]
 8005390:	6832      	ldr	r2, [r6, #0]
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	42ab      	cmp	r3, r5
 8005396:	dc28      	bgt.n	80053ea <_printf_common+0x9a>
 8005398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800539c:	1e13      	subs	r3, r2, #0
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	bf18      	it	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	0692      	lsls	r2, r2, #26
 80053a6:	d42d      	bmi.n	8005404 <_printf_common+0xb4>
 80053a8:	4649      	mov	r1, r9
 80053aa:	4638      	mov	r0, r7
 80053ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053b0:	47c0      	blx	r8
 80053b2:	3001      	adds	r0, #1
 80053b4:	d020      	beq.n	80053f8 <_printf_common+0xa8>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	68e5      	ldr	r5, [r4, #12]
 80053ba:	f003 0306 	and.w	r3, r3, #6
 80053be:	2b04      	cmp	r3, #4
 80053c0:	bf18      	it	ne
 80053c2:	2500      	movne	r5, #0
 80053c4:	6832      	ldr	r2, [r6, #0]
 80053c6:	f04f 0600 	mov.w	r6, #0
 80053ca:	68a3      	ldr	r3, [r4, #8]
 80053cc:	bf08      	it	eq
 80053ce:	1aad      	subeq	r5, r5, r2
 80053d0:	6922      	ldr	r2, [r4, #16]
 80053d2:	bf08      	it	eq
 80053d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053d8:	4293      	cmp	r3, r2
 80053da:	bfc4      	itt	gt
 80053dc:	1a9b      	subgt	r3, r3, r2
 80053de:	18ed      	addgt	r5, r5, r3
 80053e0:	341a      	adds	r4, #26
 80053e2:	42b5      	cmp	r5, r6
 80053e4:	d11a      	bne.n	800541c <_printf_common+0xcc>
 80053e6:	2000      	movs	r0, #0
 80053e8:	e008      	b.n	80053fc <_printf_common+0xac>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4652      	mov	r2, sl
 80053ee:	4649      	mov	r1, r9
 80053f0:	4638      	mov	r0, r7
 80053f2:	47c0      	blx	r8
 80053f4:	3001      	adds	r0, #1
 80053f6:	d103      	bne.n	8005400 <_printf_common+0xb0>
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005400:	3501      	adds	r5, #1
 8005402:	e7c4      	b.n	800538e <_printf_common+0x3e>
 8005404:	2030      	movs	r0, #48	; 0x30
 8005406:	18e1      	adds	r1, r4, r3
 8005408:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005412:	4422      	add	r2, r4
 8005414:	3302      	adds	r3, #2
 8005416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800541a:	e7c5      	b.n	80053a8 <_printf_common+0x58>
 800541c:	2301      	movs	r3, #1
 800541e:	4622      	mov	r2, r4
 8005420:	4649      	mov	r1, r9
 8005422:	4638      	mov	r0, r7
 8005424:	47c0      	blx	r8
 8005426:	3001      	adds	r0, #1
 8005428:	d0e6      	beq.n	80053f8 <_printf_common+0xa8>
 800542a:	3601      	adds	r6, #1
 800542c:	e7d9      	b.n	80053e2 <_printf_common+0x92>
	...

08005430 <_printf_i>:
 8005430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005434:	460c      	mov	r4, r1
 8005436:	7e27      	ldrb	r7, [r4, #24]
 8005438:	4691      	mov	r9, r2
 800543a:	2f78      	cmp	r7, #120	; 0x78
 800543c:	4680      	mov	r8, r0
 800543e:	469a      	mov	sl, r3
 8005440:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005442:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005446:	d807      	bhi.n	8005458 <_printf_i+0x28>
 8005448:	2f62      	cmp	r7, #98	; 0x62
 800544a:	d80a      	bhi.n	8005462 <_printf_i+0x32>
 800544c:	2f00      	cmp	r7, #0
 800544e:	f000 80d9 	beq.w	8005604 <_printf_i+0x1d4>
 8005452:	2f58      	cmp	r7, #88	; 0x58
 8005454:	f000 80a4 	beq.w	80055a0 <_printf_i+0x170>
 8005458:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800545c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005460:	e03a      	b.n	80054d8 <_printf_i+0xa8>
 8005462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005466:	2b15      	cmp	r3, #21
 8005468:	d8f6      	bhi.n	8005458 <_printf_i+0x28>
 800546a:	a001      	add	r0, pc, #4	; (adr r0, 8005470 <_printf_i+0x40>)
 800546c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005470:	080054c9 	.word	0x080054c9
 8005474:	080054dd 	.word	0x080054dd
 8005478:	08005459 	.word	0x08005459
 800547c:	08005459 	.word	0x08005459
 8005480:	08005459 	.word	0x08005459
 8005484:	08005459 	.word	0x08005459
 8005488:	080054dd 	.word	0x080054dd
 800548c:	08005459 	.word	0x08005459
 8005490:	08005459 	.word	0x08005459
 8005494:	08005459 	.word	0x08005459
 8005498:	08005459 	.word	0x08005459
 800549c:	080055eb 	.word	0x080055eb
 80054a0:	0800550d 	.word	0x0800550d
 80054a4:	080055cd 	.word	0x080055cd
 80054a8:	08005459 	.word	0x08005459
 80054ac:	08005459 	.word	0x08005459
 80054b0:	0800560d 	.word	0x0800560d
 80054b4:	08005459 	.word	0x08005459
 80054b8:	0800550d 	.word	0x0800550d
 80054bc:	08005459 	.word	0x08005459
 80054c0:	08005459 	.word	0x08005459
 80054c4:	080055d5 	.word	0x080055d5
 80054c8:	680b      	ldr	r3, [r1, #0]
 80054ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054ce:	1d1a      	adds	r2, r3, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	600a      	str	r2, [r1, #0]
 80054d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054d8:	2301      	movs	r3, #1
 80054da:	e0a4      	b.n	8005626 <_printf_i+0x1f6>
 80054dc:	6825      	ldr	r5, [r4, #0]
 80054de:	6808      	ldr	r0, [r1, #0]
 80054e0:	062e      	lsls	r6, r5, #24
 80054e2:	f100 0304 	add.w	r3, r0, #4
 80054e6:	d50a      	bpl.n	80054fe <_printf_i+0xce>
 80054e8:	6805      	ldr	r5, [r0, #0]
 80054ea:	600b      	str	r3, [r1, #0]
 80054ec:	2d00      	cmp	r5, #0
 80054ee:	da03      	bge.n	80054f8 <_printf_i+0xc8>
 80054f0:	232d      	movs	r3, #45	; 0x2d
 80054f2:	426d      	negs	r5, r5
 80054f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f8:	230a      	movs	r3, #10
 80054fa:	485e      	ldr	r0, [pc, #376]	; (8005674 <_printf_i+0x244>)
 80054fc:	e019      	b.n	8005532 <_printf_i+0x102>
 80054fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005502:	6805      	ldr	r5, [r0, #0]
 8005504:	600b      	str	r3, [r1, #0]
 8005506:	bf18      	it	ne
 8005508:	b22d      	sxthne	r5, r5
 800550a:	e7ef      	b.n	80054ec <_printf_i+0xbc>
 800550c:	680b      	ldr	r3, [r1, #0]
 800550e:	6825      	ldr	r5, [r4, #0]
 8005510:	1d18      	adds	r0, r3, #4
 8005512:	6008      	str	r0, [r1, #0]
 8005514:	0628      	lsls	r0, r5, #24
 8005516:	d501      	bpl.n	800551c <_printf_i+0xec>
 8005518:	681d      	ldr	r5, [r3, #0]
 800551a:	e002      	b.n	8005522 <_printf_i+0xf2>
 800551c:	0669      	lsls	r1, r5, #25
 800551e:	d5fb      	bpl.n	8005518 <_printf_i+0xe8>
 8005520:	881d      	ldrh	r5, [r3, #0]
 8005522:	2f6f      	cmp	r7, #111	; 0x6f
 8005524:	bf0c      	ite	eq
 8005526:	2308      	moveq	r3, #8
 8005528:	230a      	movne	r3, #10
 800552a:	4852      	ldr	r0, [pc, #328]	; (8005674 <_printf_i+0x244>)
 800552c:	2100      	movs	r1, #0
 800552e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005532:	6866      	ldr	r6, [r4, #4]
 8005534:	2e00      	cmp	r6, #0
 8005536:	bfa8      	it	ge
 8005538:	6821      	ldrge	r1, [r4, #0]
 800553a:	60a6      	str	r6, [r4, #8]
 800553c:	bfa4      	itt	ge
 800553e:	f021 0104 	bicge.w	r1, r1, #4
 8005542:	6021      	strge	r1, [r4, #0]
 8005544:	b90d      	cbnz	r5, 800554a <_printf_i+0x11a>
 8005546:	2e00      	cmp	r6, #0
 8005548:	d04d      	beq.n	80055e6 <_printf_i+0x1b6>
 800554a:	4616      	mov	r6, r2
 800554c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005550:	fb03 5711 	mls	r7, r3, r1, r5
 8005554:	5dc7      	ldrb	r7, [r0, r7]
 8005556:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800555a:	462f      	mov	r7, r5
 800555c:	42bb      	cmp	r3, r7
 800555e:	460d      	mov	r5, r1
 8005560:	d9f4      	bls.n	800554c <_printf_i+0x11c>
 8005562:	2b08      	cmp	r3, #8
 8005564:	d10b      	bne.n	800557e <_printf_i+0x14e>
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	07df      	lsls	r7, r3, #31
 800556a:	d508      	bpl.n	800557e <_printf_i+0x14e>
 800556c:	6923      	ldr	r3, [r4, #16]
 800556e:	6861      	ldr	r1, [r4, #4]
 8005570:	4299      	cmp	r1, r3
 8005572:	bfde      	ittt	le
 8005574:	2330      	movle	r3, #48	; 0x30
 8005576:	f806 3c01 	strble.w	r3, [r6, #-1]
 800557a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800557e:	1b92      	subs	r2, r2, r6
 8005580:	6122      	str	r2, [r4, #16]
 8005582:	464b      	mov	r3, r9
 8005584:	4621      	mov	r1, r4
 8005586:	4640      	mov	r0, r8
 8005588:	f8cd a000 	str.w	sl, [sp]
 800558c:	aa03      	add	r2, sp, #12
 800558e:	f7ff fedf 	bl	8005350 <_printf_common>
 8005592:	3001      	adds	r0, #1
 8005594:	d14c      	bne.n	8005630 <_printf_i+0x200>
 8005596:	f04f 30ff 	mov.w	r0, #4294967295
 800559a:	b004      	add	sp, #16
 800559c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a0:	4834      	ldr	r0, [pc, #208]	; (8005674 <_printf_i+0x244>)
 80055a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055a6:	680e      	ldr	r6, [r1, #0]
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80055ae:	061f      	lsls	r7, r3, #24
 80055b0:	600e      	str	r6, [r1, #0]
 80055b2:	d514      	bpl.n	80055de <_printf_i+0x1ae>
 80055b4:	07d9      	lsls	r1, r3, #31
 80055b6:	bf44      	itt	mi
 80055b8:	f043 0320 	orrmi.w	r3, r3, #32
 80055bc:	6023      	strmi	r3, [r4, #0]
 80055be:	b91d      	cbnz	r5, 80055c8 <_printf_i+0x198>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	f023 0320 	bic.w	r3, r3, #32
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	2310      	movs	r3, #16
 80055ca:	e7af      	b.n	800552c <_printf_i+0xfc>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	f043 0320 	orr.w	r3, r3, #32
 80055d2:	6023      	str	r3, [r4, #0]
 80055d4:	2378      	movs	r3, #120	; 0x78
 80055d6:	4828      	ldr	r0, [pc, #160]	; (8005678 <_printf_i+0x248>)
 80055d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055dc:	e7e3      	b.n	80055a6 <_printf_i+0x176>
 80055de:	065e      	lsls	r6, r3, #25
 80055e0:	bf48      	it	mi
 80055e2:	b2ad      	uxthmi	r5, r5
 80055e4:	e7e6      	b.n	80055b4 <_printf_i+0x184>
 80055e6:	4616      	mov	r6, r2
 80055e8:	e7bb      	b.n	8005562 <_printf_i+0x132>
 80055ea:	680b      	ldr	r3, [r1, #0]
 80055ec:	6826      	ldr	r6, [r4, #0]
 80055ee:	1d1d      	adds	r5, r3, #4
 80055f0:	6960      	ldr	r0, [r4, #20]
 80055f2:	600d      	str	r5, [r1, #0]
 80055f4:	0635      	lsls	r5, r6, #24
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	d501      	bpl.n	80055fe <_printf_i+0x1ce>
 80055fa:	6018      	str	r0, [r3, #0]
 80055fc:	e002      	b.n	8005604 <_printf_i+0x1d4>
 80055fe:	0671      	lsls	r1, r6, #25
 8005600:	d5fb      	bpl.n	80055fa <_printf_i+0x1ca>
 8005602:	8018      	strh	r0, [r3, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	4616      	mov	r6, r2
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	e7ba      	b.n	8005582 <_printf_i+0x152>
 800560c:	680b      	ldr	r3, [r1, #0]
 800560e:	1d1a      	adds	r2, r3, #4
 8005610:	600a      	str	r2, [r1, #0]
 8005612:	681e      	ldr	r6, [r3, #0]
 8005614:	2100      	movs	r1, #0
 8005616:	4630      	mov	r0, r6
 8005618:	6862      	ldr	r2, [r4, #4]
 800561a:	f002 fb0b 	bl	8007c34 <memchr>
 800561e:	b108      	cbz	r0, 8005624 <_printf_i+0x1f4>
 8005620:	1b80      	subs	r0, r0, r6
 8005622:	6060      	str	r0, [r4, #4]
 8005624:	6863      	ldr	r3, [r4, #4]
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	2300      	movs	r3, #0
 800562a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800562e:	e7a8      	b.n	8005582 <_printf_i+0x152>
 8005630:	4632      	mov	r2, r6
 8005632:	4649      	mov	r1, r9
 8005634:	4640      	mov	r0, r8
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	47d0      	blx	sl
 800563a:	3001      	adds	r0, #1
 800563c:	d0ab      	beq.n	8005596 <_printf_i+0x166>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	079b      	lsls	r3, r3, #30
 8005642:	d413      	bmi.n	800566c <_printf_i+0x23c>
 8005644:	68e0      	ldr	r0, [r4, #12]
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	4298      	cmp	r0, r3
 800564a:	bfb8      	it	lt
 800564c:	4618      	movlt	r0, r3
 800564e:	e7a4      	b.n	800559a <_printf_i+0x16a>
 8005650:	2301      	movs	r3, #1
 8005652:	4632      	mov	r2, r6
 8005654:	4649      	mov	r1, r9
 8005656:	4640      	mov	r0, r8
 8005658:	47d0      	blx	sl
 800565a:	3001      	adds	r0, #1
 800565c:	d09b      	beq.n	8005596 <_printf_i+0x166>
 800565e:	3501      	adds	r5, #1
 8005660:	68e3      	ldr	r3, [r4, #12]
 8005662:	9903      	ldr	r1, [sp, #12]
 8005664:	1a5b      	subs	r3, r3, r1
 8005666:	42ab      	cmp	r3, r5
 8005668:	dcf2      	bgt.n	8005650 <_printf_i+0x220>
 800566a:	e7eb      	b.n	8005644 <_printf_i+0x214>
 800566c:	2500      	movs	r5, #0
 800566e:	f104 0619 	add.w	r6, r4, #25
 8005672:	e7f5      	b.n	8005660 <_printf_i+0x230>
 8005674:	0800aad6 	.word	0x0800aad6
 8005678:	0800aae7 	.word	0x0800aae7

0800567c <_scanf_float>:
 800567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005680:	b087      	sub	sp, #28
 8005682:	9303      	str	r3, [sp, #12]
 8005684:	688b      	ldr	r3, [r1, #8]
 8005686:	4617      	mov	r7, r2
 8005688:	1e5a      	subs	r2, r3, #1
 800568a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800568e:	bf85      	ittet	hi
 8005690:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005694:	195b      	addhi	r3, r3, r5
 8005696:	2300      	movls	r3, #0
 8005698:	9302      	strhi	r3, [sp, #8]
 800569a:	bf88      	it	hi
 800569c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80056a0:	468b      	mov	fp, r1
 80056a2:	f04f 0500 	mov.w	r5, #0
 80056a6:	bf8c      	ite	hi
 80056a8:	608b      	strhi	r3, [r1, #8]
 80056aa:	9302      	strls	r3, [sp, #8]
 80056ac:	680b      	ldr	r3, [r1, #0]
 80056ae:	4680      	mov	r8, r0
 80056b0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80056b4:	f84b 3b1c 	str.w	r3, [fp], #28
 80056b8:	460c      	mov	r4, r1
 80056ba:	465e      	mov	r6, fp
 80056bc:	46aa      	mov	sl, r5
 80056be:	46a9      	mov	r9, r5
 80056c0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80056c4:	9501      	str	r5, [sp, #4]
 80056c6:	68a2      	ldr	r2, [r4, #8]
 80056c8:	b152      	cbz	r2, 80056e0 <_scanf_float+0x64>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b4e      	cmp	r3, #78	; 0x4e
 80056d0:	d864      	bhi.n	800579c <_scanf_float+0x120>
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d83c      	bhi.n	8005750 <_scanf_float+0xd4>
 80056d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80056da:	b2c8      	uxtb	r0, r1
 80056dc:	280e      	cmp	r0, #14
 80056de:	d93a      	bls.n	8005756 <_scanf_float+0xda>
 80056e0:	f1b9 0f00 	cmp.w	r9, #0
 80056e4:	d003      	beq.n	80056ee <_scanf_float+0x72>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056f2:	f1ba 0f01 	cmp.w	sl, #1
 80056f6:	f200 8113 	bhi.w	8005920 <_scanf_float+0x2a4>
 80056fa:	455e      	cmp	r6, fp
 80056fc:	f200 8105 	bhi.w	800590a <_scanf_float+0x28e>
 8005700:	2501      	movs	r5, #1
 8005702:	4628      	mov	r0, r5
 8005704:	b007      	add	sp, #28
 8005706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800570e:	2a0d      	cmp	r2, #13
 8005710:	d8e6      	bhi.n	80056e0 <_scanf_float+0x64>
 8005712:	a101      	add	r1, pc, #4	; (adr r1, 8005718 <_scanf_float+0x9c>)
 8005714:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005718:	08005857 	.word	0x08005857
 800571c:	080056e1 	.word	0x080056e1
 8005720:	080056e1 	.word	0x080056e1
 8005724:	080056e1 	.word	0x080056e1
 8005728:	080058b7 	.word	0x080058b7
 800572c:	0800588f 	.word	0x0800588f
 8005730:	080056e1 	.word	0x080056e1
 8005734:	080056e1 	.word	0x080056e1
 8005738:	08005865 	.word	0x08005865
 800573c:	080056e1 	.word	0x080056e1
 8005740:	080056e1 	.word	0x080056e1
 8005744:	080056e1 	.word	0x080056e1
 8005748:	080056e1 	.word	0x080056e1
 800574c:	0800581d 	.word	0x0800581d
 8005750:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005754:	e7db      	b.n	800570e <_scanf_float+0x92>
 8005756:	290e      	cmp	r1, #14
 8005758:	d8c2      	bhi.n	80056e0 <_scanf_float+0x64>
 800575a:	a001      	add	r0, pc, #4	; (adr r0, 8005760 <_scanf_float+0xe4>)
 800575c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005760:	0800580f 	.word	0x0800580f
 8005764:	080056e1 	.word	0x080056e1
 8005768:	0800580f 	.word	0x0800580f
 800576c:	080058a3 	.word	0x080058a3
 8005770:	080056e1 	.word	0x080056e1
 8005774:	080057bd 	.word	0x080057bd
 8005778:	080057f9 	.word	0x080057f9
 800577c:	080057f9 	.word	0x080057f9
 8005780:	080057f9 	.word	0x080057f9
 8005784:	080057f9 	.word	0x080057f9
 8005788:	080057f9 	.word	0x080057f9
 800578c:	080057f9 	.word	0x080057f9
 8005790:	080057f9 	.word	0x080057f9
 8005794:	080057f9 	.word	0x080057f9
 8005798:	080057f9 	.word	0x080057f9
 800579c:	2b6e      	cmp	r3, #110	; 0x6e
 800579e:	d809      	bhi.n	80057b4 <_scanf_float+0x138>
 80057a0:	2b60      	cmp	r3, #96	; 0x60
 80057a2:	d8b2      	bhi.n	800570a <_scanf_float+0x8e>
 80057a4:	2b54      	cmp	r3, #84	; 0x54
 80057a6:	d077      	beq.n	8005898 <_scanf_float+0x21c>
 80057a8:	2b59      	cmp	r3, #89	; 0x59
 80057aa:	d199      	bne.n	80056e0 <_scanf_float+0x64>
 80057ac:	2d07      	cmp	r5, #7
 80057ae:	d197      	bne.n	80056e0 <_scanf_float+0x64>
 80057b0:	2508      	movs	r5, #8
 80057b2:	e029      	b.n	8005808 <_scanf_float+0x18c>
 80057b4:	2b74      	cmp	r3, #116	; 0x74
 80057b6:	d06f      	beq.n	8005898 <_scanf_float+0x21c>
 80057b8:	2b79      	cmp	r3, #121	; 0x79
 80057ba:	e7f6      	b.n	80057aa <_scanf_float+0x12e>
 80057bc:	6821      	ldr	r1, [r4, #0]
 80057be:	05c8      	lsls	r0, r1, #23
 80057c0:	d51a      	bpl.n	80057f8 <_scanf_float+0x17c>
 80057c2:	9b02      	ldr	r3, [sp, #8]
 80057c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80057c8:	6021      	str	r1, [r4, #0]
 80057ca:	f109 0901 	add.w	r9, r9, #1
 80057ce:	b11b      	cbz	r3, 80057d8 <_scanf_float+0x15c>
 80057d0:	3b01      	subs	r3, #1
 80057d2:	3201      	adds	r2, #1
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	60a2      	str	r2, [r4, #8]
 80057d8:	68a3      	ldr	r3, [r4, #8]
 80057da:	3b01      	subs	r3, #1
 80057dc:	60a3      	str	r3, [r4, #8]
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	3301      	adds	r3, #1
 80057e2:	6123      	str	r3, [r4, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	607b      	str	r3, [r7, #4]
 80057ec:	f340 8084 	ble.w	80058f8 <_scanf_float+0x27c>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	3301      	adds	r3, #1
 80057f4:	603b      	str	r3, [r7, #0]
 80057f6:	e766      	b.n	80056c6 <_scanf_float+0x4a>
 80057f8:	eb1a 0f05 	cmn.w	sl, r5
 80057fc:	f47f af70 	bne.w	80056e0 <_scanf_float+0x64>
 8005800:	6822      	ldr	r2, [r4, #0]
 8005802:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005806:	6022      	str	r2, [r4, #0]
 8005808:	f806 3b01 	strb.w	r3, [r6], #1
 800580c:	e7e4      	b.n	80057d8 <_scanf_float+0x15c>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	0610      	lsls	r0, r2, #24
 8005812:	f57f af65 	bpl.w	80056e0 <_scanf_float+0x64>
 8005816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800581a:	e7f4      	b.n	8005806 <_scanf_float+0x18a>
 800581c:	f1ba 0f00 	cmp.w	sl, #0
 8005820:	d10e      	bne.n	8005840 <_scanf_float+0x1c4>
 8005822:	f1b9 0f00 	cmp.w	r9, #0
 8005826:	d10e      	bne.n	8005846 <_scanf_float+0x1ca>
 8005828:	6822      	ldr	r2, [r4, #0]
 800582a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800582e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005832:	d108      	bne.n	8005846 <_scanf_float+0x1ca>
 8005834:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005838:	f04f 0a01 	mov.w	sl, #1
 800583c:	6022      	str	r2, [r4, #0]
 800583e:	e7e3      	b.n	8005808 <_scanf_float+0x18c>
 8005840:	f1ba 0f02 	cmp.w	sl, #2
 8005844:	d055      	beq.n	80058f2 <_scanf_float+0x276>
 8005846:	2d01      	cmp	r5, #1
 8005848:	d002      	beq.n	8005850 <_scanf_float+0x1d4>
 800584a:	2d04      	cmp	r5, #4
 800584c:	f47f af48 	bne.w	80056e0 <_scanf_float+0x64>
 8005850:	3501      	adds	r5, #1
 8005852:	b2ed      	uxtb	r5, r5
 8005854:	e7d8      	b.n	8005808 <_scanf_float+0x18c>
 8005856:	f1ba 0f01 	cmp.w	sl, #1
 800585a:	f47f af41 	bne.w	80056e0 <_scanf_float+0x64>
 800585e:	f04f 0a02 	mov.w	sl, #2
 8005862:	e7d1      	b.n	8005808 <_scanf_float+0x18c>
 8005864:	b97d      	cbnz	r5, 8005886 <_scanf_float+0x20a>
 8005866:	f1b9 0f00 	cmp.w	r9, #0
 800586a:	f47f af3c 	bne.w	80056e6 <_scanf_float+0x6a>
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005874:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005878:	f47f af39 	bne.w	80056ee <_scanf_float+0x72>
 800587c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005880:	2501      	movs	r5, #1
 8005882:	6022      	str	r2, [r4, #0]
 8005884:	e7c0      	b.n	8005808 <_scanf_float+0x18c>
 8005886:	2d03      	cmp	r5, #3
 8005888:	d0e2      	beq.n	8005850 <_scanf_float+0x1d4>
 800588a:	2d05      	cmp	r5, #5
 800588c:	e7de      	b.n	800584c <_scanf_float+0x1d0>
 800588e:	2d02      	cmp	r5, #2
 8005890:	f47f af26 	bne.w	80056e0 <_scanf_float+0x64>
 8005894:	2503      	movs	r5, #3
 8005896:	e7b7      	b.n	8005808 <_scanf_float+0x18c>
 8005898:	2d06      	cmp	r5, #6
 800589a:	f47f af21 	bne.w	80056e0 <_scanf_float+0x64>
 800589e:	2507      	movs	r5, #7
 80058a0:	e7b2      	b.n	8005808 <_scanf_float+0x18c>
 80058a2:	6822      	ldr	r2, [r4, #0]
 80058a4:	0591      	lsls	r1, r2, #22
 80058a6:	f57f af1b 	bpl.w	80056e0 <_scanf_float+0x64>
 80058aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80058b4:	e7a8      	b.n	8005808 <_scanf_float+0x18c>
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80058bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80058c0:	d006      	beq.n	80058d0 <_scanf_float+0x254>
 80058c2:	0550      	lsls	r0, r2, #21
 80058c4:	f57f af0c 	bpl.w	80056e0 <_scanf_float+0x64>
 80058c8:	f1b9 0f00 	cmp.w	r9, #0
 80058cc:	f43f af0f 	beq.w	80056ee <_scanf_float+0x72>
 80058d0:	0591      	lsls	r1, r2, #22
 80058d2:	bf58      	it	pl
 80058d4:	9901      	ldrpl	r1, [sp, #4]
 80058d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058da:	bf58      	it	pl
 80058dc:	eba9 0101 	subpl.w	r1, r9, r1
 80058e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80058e4:	f04f 0900 	mov.w	r9, #0
 80058e8:	bf58      	it	pl
 80058ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	e78a      	b.n	8005808 <_scanf_float+0x18c>
 80058f2:	f04f 0a03 	mov.w	sl, #3
 80058f6:	e787      	b.n	8005808 <_scanf_float+0x18c>
 80058f8:	4639      	mov	r1, r7
 80058fa:	4640      	mov	r0, r8
 80058fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005900:	4798      	blx	r3
 8005902:	2800      	cmp	r0, #0
 8005904:	f43f aedf 	beq.w	80056c6 <_scanf_float+0x4a>
 8005908:	e6ea      	b.n	80056e0 <_scanf_float+0x64>
 800590a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800590e:	463a      	mov	r2, r7
 8005910:	4640      	mov	r0, r8
 8005912:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005916:	4798      	blx	r3
 8005918:	6923      	ldr	r3, [r4, #16]
 800591a:	3b01      	subs	r3, #1
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	e6ec      	b.n	80056fa <_scanf_float+0x7e>
 8005920:	1e6b      	subs	r3, r5, #1
 8005922:	2b06      	cmp	r3, #6
 8005924:	d825      	bhi.n	8005972 <_scanf_float+0x2f6>
 8005926:	2d02      	cmp	r5, #2
 8005928:	d836      	bhi.n	8005998 <_scanf_float+0x31c>
 800592a:	455e      	cmp	r6, fp
 800592c:	f67f aee8 	bls.w	8005700 <_scanf_float+0x84>
 8005930:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005934:	463a      	mov	r2, r7
 8005936:	4640      	mov	r0, r8
 8005938:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800593c:	4798      	blx	r3
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	3b01      	subs	r3, #1
 8005942:	6123      	str	r3, [r4, #16]
 8005944:	e7f1      	b.n	800592a <_scanf_float+0x2ae>
 8005946:	9802      	ldr	r0, [sp, #8]
 8005948:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800594c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005950:	463a      	mov	r2, r7
 8005952:	9002      	str	r0, [sp, #8]
 8005954:	4640      	mov	r0, r8
 8005956:	4798      	blx	r3
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	3b01      	subs	r3, #1
 800595c:	6123      	str	r3, [r4, #16]
 800595e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005962:	fa5f fa8a 	uxtb.w	sl, sl
 8005966:	f1ba 0f02 	cmp.w	sl, #2
 800596a:	d1ec      	bne.n	8005946 <_scanf_float+0x2ca>
 800596c:	3d03      	subs	r5, #3
 800596e:	b2ed      	uxtb	r5, r5
 8005970:	1b76      	subs	r6, r6, r5
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	05da      	lsls	r2, r3, #23
 8005976:	d52f      	bpl.n	80059d8 <_scanf_float+0x35c>
 8005978:	055b      	lsls	r3, r3, #21
 800597a:	d510      	bpl.n	800599e <_scanf_float+0x322>
 800597c:	455e      	cmp	r6, fp
 800597e:	f67f aebf 	bls.w	8005700 <_scanf_float+0x84>
 8005982:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005986:	463a      	mov	r2, r7
 8005988:	4640      	mov	r0, r8
 800598a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800598e:	4798      	blx	r3
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	3b01      	subs	r3, #1
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	e7f1      	b.n	800597c <_scanf_float+0x300>
 8005998:	46aa      	mov	sl, r5
 800599a:	9602      	str	r6, [sp, #8]
 800599c:	e7df      	b.n	800595e <_scanf_float+0x2e2>
 800599e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	2965      	cmp	r1, #101	; 0x65
 80059a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80059aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80059ae:	6123      	str	r3, [r4, #16]
 80059b0:	d00c      	beq.n	80059cc <_scanf_float+0x350>
 80059b2:	2945      	cmp	r1, #69	; 0x45
 80059b4:	d00a      	beq.n	80059cc <_scanf_float+0x350>
 80059b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059ba:	463a      	mov	r2, r7
 80059bc:	4640      	mov	r0, r8
 80059be:	4798      	blx	r3
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	1eb5      	subs	r5, r6, #2
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	463a      	mov	r2, r7
 80059ce:	4640      	mov	r0, r8
 80059d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059d4:	4798      	blx	r3
 80059d6:	462e      	mov	r6, r5
 80059d8:	6825      	ldr	r5, [r4, #0]
 80059da:	f015 0510 	ands.w	r5, r5, #16
 80059de:	d159      	bne.n	8005a94 <_scanf_float+0x418>
 80059e0:	7035      	strb	r5, [r6, #0]
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ec:	d11c      	bne.n	8005a28 <_scanf_float+0x3ac>
 80059ee:	9b01      	ldr	r3, [sp, #4]
 80059f0:	454b      	cmp	r3, r9
 80059f2:	eba3 0209 	sub.w	r2, r3, r9
 80059f6:	d124      	bne.n	8005a42 <_scanf_float+0x3c6>
 80059f8:	2200      	movs	r2, #0
 80059fa:	4659      	mov	r1, fp
 80059fc:	4640      	mov	r0, r8
 80059fe:	f000 fe8b 	bl	8006718 <_strtod_r>
 8005a02:	f8d4 c000 	ldr.w	ip, [r4]
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	f01c 0f02 	tst.w	ip, #2
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	460f      	mov	r7, r1
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	d021      	beq.n	8005a58 <_scanf_float+0x3dc>
 8005a14:	9903      	ldr	r1, [sp, #12]
 8005a16:	1d1a      	adds	r2, r3, #4
 8005a18:	600a      	str	r2, [r1, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	e9c3 6700 	strd	r6, r7, [r3]
 8005a20:	68e3      	ldr	r3, [r4, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60e3      	str	r3, [r4, #12]
 8005a26:	e66c      	b.n	8005702 <_scanf_float+0x86>
 8005a28:	9b04      	ldr	r3, [sp, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0e4      	beq.n	80059f8 <_scanf_float+0x37c>
 8005a2e:	9905      	ldr	r1, [sp, #20]
 8005a30:	230a      	movs	r3, #10
 8005a32:	462a      	mov	r2, r5
 8005a34:	4640      	mov	r0, r8
 8005a36:	3101      	adds	r1, #1
 8005a38:	f000 fefa 	bl	8006830 <_strtol_r>
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	9e05      	ldr	r6, [sp, #20]
 8005a40:	1ac2      	subs	r2, r0, r3
 8005a42:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005a46:	429e      	cmp	r6, r3
 8005a48:	bf28      	it	cs
 8005a4a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005a4e:	4630      	mov	r0, r6
 8005a50:	4911      	ldr	r1, [pc, #68]	; (8005a98 <_scanf_float+0x41c>)
 8005a52:	f000 f829 	bl	8005aa8 <siprintf>
 8005a56:	e7cf      	b.n	80059f8 <_scanf_float+0x37c>
 8005a58:	f01c 0f04 	tst.w	ip, #4
 8005a5c:	f103 0e04 	add.w	lr, r3, #4
 8005a60:	d003      	beq.n	8005a6a <_scanf_float+0x3ee>
 8005a62:	9903      	ldr	r1, [sp, #12]
 8005a64:	f8c1 e000 	str.w	lr, [r1]
 8005a68:	e7d7      	b.n	8005a1a <_scanf_float+0x39e>
 8005a6a:	9a03      	ldr	r2, [sp, #12]
 8005a6c:	f8c2 e000 	str.w	lr, [r2]
 8005a70:	f8d3 8000 	ldr.w	r8, [r3]
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	f7fa ffc8 	bl	8000a0c <__aeabi_dcmpun>
 8005a7c:	b128      	cbz	r0, 8005a8a <_scanf_float+0x40e>
 8005a7e:	4807      	ldr	r0, [pc, #28]	; (8005a9c <_scanf_float+0x420>)
 8005a80:	f000 f80e 	bl	8005aa0 <nanf>
 8005a84:	f8c8 0000 	str.w	r0, [r8]
 8005a88:	e7ca      	b.n	8005a20 <_scanf_float+0x3a4>
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	f7fb f81b 	bl	8000ac8 <__aeabi_d2f>
 8005a92:	e7f7      	b.n	8005a84 <_scanf_float+0x408>
 8005a94:	2500      	movs	r5, #0
 8005a96:	e634      	b.n	8005702 <_scanf_float+0x86>
 8005a98:	0800aaf8 	.word	0x0800aaf8
 8005a9c:	0800af10 	.word	0x0800af10

08005aa0 <nanf>:
 8005aa0:	4800      	ldr	r0, [pc, #0]	; (8005aa4 <nanf+0x4>)
 8005aa2:	4770      	bx	lr
 8005aa4:	7fc00000 	.word	0x7fc00000

08005aa8 <siprintf>:
 8005aa8:	b40e      	push	{r1, r2, r3}
 8005aaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005aae:	b500      	push	{lr}
 8005ab0:	b09c      	sub	sp, #112	; 0x70
 8005ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ab4:	9002      	str	r0, [sp, #8]
 8005ab6:	9006      	str	r0, [sp, #24]
 8005ab8:	9107      	str	r1, [sp, #28]
 8005aba:	9104      	str	r1, [sp, #16]
 8005abc:	4808      	ldr	r0, [pc, #32]	; (8005ae0 <siprintf+0x38>)
 8005abe:	4909      	ldr	r1, [pc, #36]	; (8005ae4 <siprintf+0x3c>)
 8005ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac4:	9105      	str	r1, [sp, #20]
 8005ac6:	6800      	ldr	r0, [r0, #0]
 8005ac8:	a902      	add	r1, sp, #8
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	f002 fe96 	bl	80087fc <_svfiprintf_r>
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	9b02      	ldr	r3, [sp, #8]
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	b01c      	add	sp, #112	; 0x70
 8005ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005adc:	b003      	add	sp, #12
 8005ade:	4770      	bx	lr
 8005ae0:	2000001c 	.word	0x2000001c
 8005ae4:	ffff0208 	.word	0xffff0208

08005ae8 <sulp>:
 8005ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aec:	460f      	mov	r7, r1
 8005aee:	4690      	mov	r8, r2
 8005af0:	f002 fc2c 	bl	800834c <__ulp>
 8005af4:	4604      	mov	r4, r0
 8005af6:	460d      	mov	r5, r1
 8005af8:	f1b8 0f00 	cmp.w	r8, #0
 8005afc:	d011      	beq.n	8005b22 <sulp+0x3a>
 8005afe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005b02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dd0b      	ble.n	8005b22 <sulp+0x3a>
 8005b0a:	2400      	movs	r4, #0
 8005b0c:	051b      	lsls	r3, r3, #20
 8005b0e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005b12:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005b16:	4622      	mov	r2, r4
 8005b18:	462b      	mov	r3, r5
 8005b1a:	f7fa fcdd 	bl	80004d8 <__aeabi_dmul>
 8005b1e:	4604      	mov	r4, r0
 8005b20:	460d      	mov	r5, r1
 8005b22:	4620      	mov	r0, r4
 8005b24:	4629      	mov	r1, r5
 8005b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b2a:	0000      	movs	r0, r0
 8005b2c:	0000      	movs	r0, r0
	...

08005b30 <_strtod_l>:
 8005b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	469b      	mov	fp, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	b0a1      	sub	sp, #132	; 0x84
 8005b3a:	931c      	str	r3, [sp, #112]	; 0x70
 8005b3c:	4ba1      	ldr	r3, [pc, #644]	; (8005dc4 <_strtod_l+0x294>)
 8005b3e:	4682      	mov	sl, r0
 8005b40:	681f      	ldr	r7, [r3, #0]
 8005b42:	460e      	mov	r6, r1
 8005b44:	4638      	mov	r0, r7
 8005b46:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b48:	f7fa fb02 	bl	8000150 <strlen>
 8005b4c:	f04f 0800 	mov.w	r8, #0
 8005b50:	4604      	mov	r4, r0
 8005b52:	f04f 0900 	mov.w	r9, #0
 8005b56:	961b      	str	r6, [sp, #108]	; 0x6c
 8005b58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b5a:	781a      	ldrb	r2, [r3, #0]
 8005b5c:	2a2b      	cmp	r2, #43	; 0x2b
 8005b5e:	d04c      	beq.n	8005bfa <_strtod_l+0xca>
 8005b60:	d83a      	bhi.n	8005bd8 <_strtod_l+0xa8>
 8005b62:	2a0d      	cmp	r2, #13
 8005b64:	d833      	bhi.n	8005bce <_strtod_l+0x9e>
 8005b66:	2a08      	cmp	r2, #8
 8005b68:	d833      	bhi.n	8005bd2 <_strtod_l+0xa2>
 8005b6a:	2a00      	cmp	r2, #0
 8005b6c:	d03d      	beq.n	8005bea <_strtod_l+0xba>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	930c      	str	r3, [sp, #48]	; 0x30
 8005b72:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005b74:	782b      	ldrb	r3, [r5, #0]
 8005b76:	2b30      	cmp	r3, #48	; 0x30
 8005b78:	f040 80af 	bne.w	8005cda <_strtod_l+0x1aa>
 8005b7c:	786b      	ldrb	r3, [r5, #1]
 8005b7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b82:	2b58      	cmp	r3, #88	; 0x58
 8005b84:	d16c      	bne.n	8005c60 <_strtod_l+0x130>
 8005b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b88:	4650      	mov	r0, sl
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	ab1c      	add	r3, sp, #112	; 0x70
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	4a8d      	ldr	r2, [pc, #564]	; (8005dc8 <_strtod_l+0x298>)
 8005b92:	f8cd b008 	str.w	fp, [sp, #8]
 8005b96:	ab1d      	add	r3, sp, #116	; 0x74
 8005b98:	a91b      	add	r1, sp, #108	; 0x6c
 8005b9a:	f001 fd2f 	bl	80075fc <__gethex>
 8005b9e:	f010 0607 	ands.w	r6, r0, #7
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	d005      	beq.n	8005bb2 <_strtod_l+0x82>
 8005ba6:	2e06      	cmp	r6, #6
 8005ba8:	d129      	bne.n	8005bfe <_strtod_l+0xce>
 8005baa:	2300      	movs	r3, #0
 8005bac:	3501      	adds	r5, #1
 8005bae:	951b      	str	r5, [sp, #108]	; 0x6c
 8005bb0:	930c      	str	r3, [sp, #48]	; 0x30
 8005bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f040 8596 	bne.w	80066e6 <_strtod_l+0xbb6>
 8005bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bbc:	b1d3      	cbz	r3, 8005bf4 <_strtod_l+0xc4>
 8005bbe:	4642      	mov	r2, r8
 8005bc0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	b021      	add	sp, #132	; 0x84
 8005bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bce:	2a20      	cmp	r2, #32
 8005bd0:	d1cd      	bne.n	8005b6e <_strtod_l+0x3e>
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bd6:	e7bf      	b.n	8005b58 <_strtod_l+0x28>
 8005bd8:	2a2d      	cmp	r2, #45	; 0x2d
 8005bda:	d1c8      	bne.n	8005b6e <_strtod_l+0x3e>
 8005bdc:	2201      	movs	r2, #1
 8005bde:	920c      	str	r2, [sp, #48]	; 0x30
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	921b      	str	r2, [sp, #108]	; 0x6c
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1c3      	bne.n	8005b72 <_strtod_l+0x42>
 8005bea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bec:	961b      	str	r6, [sp, #108]	; 0x6c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 8577 	bne.w	80066e2 <_strtod_l+0xbb2>
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	e7e4      	b.n	8005bc4 <_strtod_l+0x94>
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	e7ef      	b.n	8005bde <_strtod_l+0xae>
 8005bfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005c00:	b13a      	cbz	r2, 8005c12 <_strtod_l+0xe2>
 8005c02:	2135      	movs	r1, #53	; 0x35
 8005c04:	a81e      	add	r0, sp, #120	; 0x78
 8005c06:	f002 fca5 	bl	8008554 <__copybits>
 8005c0a:	4650      	mov	r0, sl
 8005c0c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c0e:	f002 f86d 	bl	8007cec <_Bfree>
 8005c12:	3e01      	subs	r6, #1
 8005c14:	2e05      	cmp	r6, #5
 8005c16:	d807      	bhi.n	8005c28 <_strtod_l+0xf8>
 8005c18:	e8df f006 	tbb	[pc, r6]
 8005c1c:	1d180b0e 	.word	0x1d180b0e
 8005c20:	030e      	.short	0x030e
 8005c22:	f04f 0900 	mov.w	r9, #0
 8005c26:	46c8      	mov	r8, r9
 8005c28:	0721      	lsls	r1, r4, #28
 8005c2a:	d5c2      	bpl.n	8005bb2 <_strtod_l+0x82>
 8005c2c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005c30:	e7bf      	b.n	8005bb2 <_strtod_l+0x82>
 8005c32:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8005c36:	e7f7      	b.n	8005c28 <_strtod_l+0xf8>
 8005c38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005c3a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8005c3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c46:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005c4a:	e7ed      	b.n	8005c28 <_strtod_l+0xf8>
 8005c4c:	f04f 0800 	mov.w	r8, #0
 8005c50:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005dcc <_strtod_l+0x29c>
 8005c54:	e7e8      	b.n	8005c28 <_strtod_l+0xf8>
 8005c56:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005c5a:	f04f 38ff 	mov.w	r8, #4294967295
 8005c5e:	e7e3      	b.n	8005c28 <_strtod_l+0xf8>
 8005c60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	2b30      	cmp	r3, #48	; 0x30
 8005c6a:	d0f9      	beq.n	8005c60 <_strtod_l+0x130>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0a0      	beq.n	8005bb2 <_strtod_l+0x82>
 8005c70:	2301      	movs	r3, #1
 8005c72:	9307      	str	r3, [sp, #28]
 8005c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c76:	220a      	movs	r2, #10
 8005c78:	9308      	str	r3, [sp, #32]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	469b      	mov	fp, r3
 8005c7e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005c82:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005c84:	7805      	ldrb	r5, [r0, #0]
 8005c86:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005c8a:	b2d9      	uxtb	r1, r3
 8005c8c:	2909      	cmp	r1, #9
 8005c8e:	d926      	bls.n	8005cde <_strtod_l+0x1ae>
 8005c90:	4622      	mov	r2, r4
 8005c92:	4639      	mov	r1, r7
 8005c94:	f002 fec8 	bl	8008a28 <strncmp>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d032      	beq.n	8005d02 <_strtod_l+0x1d2>
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	462b      	mov	r3, r5
 8005ca0:	465c      	mov	r4, fp
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	9004      	str	r0, [sp, #16]
 8005ca6:	2b65      	cmp	r3, #101	; 0x65
 8005ca8:	d001      	beq.n	8005cae <_strtod_l+0x17e>
 8005caa:	2b45      	cmp	r3, #69	; 0x45
 8005cac:	d113      	bne.n	8005cd6 <_strtod_l+0x1a6>
 8005cae:	b91c      	cbnz	r4, 8005cb8 <_strtod_l+0x188>
 8005cb0:	9b07      	ldr	r3, [sp, #28]
 8005cb2:	4303      	orrs	r3, r0
 8005cb4:	d099      	beq.n	8005bea <_strtod_l+0xba>
 8005cb6:	2400      	movs	r4, #0
 8005cb8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005cba:	1c73      	adds	r3, r6, #1
 8005cbc:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cbe:	7873      	ldrb	r3, [r6, #1]
 8005cc0:	2b2b      	cmp	r3, #43	; 0x2b
 8005cc2:	d078      	beq.n	8005db6 <_strtod_l+0x286>
 8005cc4:	2b2d      	cmp	r3, #45	; 0x2d
 8005cc6:	d07b      	beq.n	8005dc0 <_strtod_l+0x290>
 8005cc8:	2700      	movs	r7, #0
 8005cca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005cce:	2909      	cmp	r1, #9
 8005cd0:	f240 8082 	bls.w	8005dd8 <_strtod_l+0x2a8>
 8005cd4:	961b      	str	r6, [sp, #108]	; 0x6c
 8005cd6:	2500      	movs	r5, #0
 8005cd8:	e09e      	b.n	8005e18 <_strtod_l+0x2e8>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e7c9      	b.n	8005c72 <_strtod_l+0x142>
 8005cde:	f1bb 0f08 	cmp.w	fp, #8
 8005ce2:	bfd5      	itete	le
 8005ce4:	9906      	ldrle	r1, [sp, #24]
 8005ce6:	9905      	ldrgt	r1, [sp, #20]
 8005ce8:	fb02 3301 	mlale	r3, r2, r1, r3
 8005cec:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005cf0:	f100 0001 	add.w	r0, r0, #1
 8005cf4:	bfd4      	ite	le
 8005cf6:	9306      	strle	r3, [sp, #24]
 8005cf8:	9305      	strgt	r3, [sp, #20]
 8005cfa:	f10b 0b01 	add.w	fp, fp, #1
 8005cfe:	901b      	str	r0, [sp, #108]	; 0x6c
 8005d00:	e7bf      	b.n	8005c82 <_strtod_l+0x152>
 8005d02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d04:	191a      	adds	r2, r3, r4
 8005d06:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d08:	5d1b      	ldrb	r3, [r3, r4]
 8005d0a:	f1bb 0f00 	cmp.w	fp, #0
 8005d0e:	d036      	beq.n	8005d7e <_strtod_l+0x24e>
 8005d10:	465c      	mov	r4, fp
 8005d12:	9004      	str	r0, [sp, #16]
 8005d14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005d18:	2a09      	cmp	r2, #9
 8005d1a:	d912      	bls.n	8005d42 <_strtod_l+0x212>
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	e7c2      	b.n	8005ca6 <_strtod_l+0x176>
 8005d20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d22:	3001      	adds	r0, #1
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	2b30      	cmp	r3, #48	; 0x30
 8005d2c:	d0f8      	beq.n	8005d20 <_strtod_l+0x1f0>
 8005d2e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005d32:	2a08      	cmp	r2, #8
 8005d34:	f200 84dc 	bhi.w	80066f0 <_strtod_l+0xbc0>
 8005d38:	9004      	str	r0, [sp, #16]
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005d40:	9208      	str	r2, [sp, #32]
 8005d42:	3b30      	subs	r3, #48	; 0x30
 8005d44:	f100 0201 	add.w	r2, r0, #1
 8005d48:	d013      	beq.n	8005d72 <_strtod_l+0x242>
 8005d4a:	9904      	ldr	r1, [sp, #16]
 8005d4c:	1905      	adds	r5, r0, r4
 8005d4e:	4411      	add	r1, r2
 8005d50:	9104      	str	r1, [sp, #16]
 8005d52:	4622      	mov	r2, r4
 8005d54:	210a      	movs	r1, #10
 8005d56:	42aa      	cmp	r2, r5
 8005d58:	d113      	bne.n	8005d82 <_strtod_l+0x252>
 8005d5a:	1822      	adds	r2, r4, r0
 8005d5c:	2a08      	cmp	r2, #8
 8005d5e:	f104 0401 	add.w	r4, r4, #1
 8005d62:	4404      	add	r4, r0
 8005d64:	dc1b      	bgt.n	8005d9e <_strtod_l+0x26e>
 8005d66:	220a      	movs	r2, #10
 8005d68:	9906      	ldr	r1, [sp, #24]
 8005d6a:	fb02 3301 	mla	r3, r2, r1, r3
 8005d6e:	9306      	str	r3, [sp, #24]
 8005d70:	2200      	movs	r2, #0
 8005d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d74:	4610      	mov	r0, r2
 8005d76:	1c59      	adds	r1, r3, #1
 8005d78:	911b      	str	r1, [sp, #108]	; 0x6c
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	e7ca      	b.n	8005d14 <_strtod_l+0x1e4>
 8005d7e:	4658      	mov	r0, fp
 8005d80:	e7d3      	b.n	8005d2a <_strtod_l+0x1fa>
 8005d82:	2a08      	cmp	r2, #8
 8005d84:	dc04      	bgt.n	8005d90 <_strtod_l+0x260>
 8005d86:	9f06      	ldr	r7, [sp, #24]
 8005d88:	434f      	muls	r7, r1
 8005d8a:	9706      	str	r7, [sp, #24]
 8005d8c:	3201      	adds	r2, #1
 8005d8e:	e7e2      	b.n	8005d56 <_strtod_l+0x226>
 8005d90:	1c57      	adds	r7, r2, #1
 8005d92:	2f10      	cmp	r7, #16
 8005d94:	bfde      	ittt	le
 8005d96:	9f05      	ldrle	r7, [sp, #20]
 8005d98:	434f      	mulle	r7, r1
 8005d9a:	9705      	strle	r7, [sp, #20]
 8005d9c:	e7f6      	b.n	8005d8c <_strtod_l+0x25c>
 8005d9e:	2c10      	cmp	r4, #16
 8005da0:	bfdf      	itttt	le
 8005da2:	220a      	movle	r2, #10
 8005da4:	9905      	ldrle	r1, [sp, #20]
 8005da6:	fb02 3301 	mlale	r3, r2, r1, r3
 8005daa:	9305      	strle	r3, [sp, #20]
 8005dac:	e7e0      	b.n	8005d70 <_strtod_l+0x240>
 8005dae:	2300      	movs	r3, #0
 8005db0:	2201      	movs	r2, #1
 8005db2:	9304      	str	r3, [sp, #16]
 8005db4:	e77c      	b.n	8005cb0 <_strtod_l+0x180>
 8005db6:	2700      	movs	r7, #0
 8005db8:	1cb3      	adds	r3, r6, #2
 8005dba:	931b      	str	r3, [sp, #108]	; 0x6c
 8005dbc:	78b3      	ldrb	r3, [r6, #2]
 8005dbe:	e784      	b.n	8005cca <_strtod_l+0x19a>
 8005dc0:	2701      	movs	r7, #1
 8005dc2:	e7f9      	b.n	8005db8 <_strtod_l+0x288>
 8005dc4:	0800ad50 	.word	0x0800ad50
 8005dc8:	0800ab00 	.word	0x0800ab00
 8005dcc:	7ff00000 	.word	0x7ff00000
 8005dd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dd2:	1c59      	adds	r1, r3, #1
 8005dd4:	911b      	str	r1, [sp, #108]	; 0x6c
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b30      	cmp	r3, #48	; 0x30
 8005dda:	d0f9      	beq.n	8005dd0 <_strtod_l+0x2a0>
 8005ddc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005de0:	2908      	cmp	r1, #8
 8005de2:	f63f af78 	bhi.w	8005cd6 <_strtod_l+0x1a6>
 8005de6:	f04f 0e0a 	mov.w	lr, #10
 8005dea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8005dee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005df0:	9309      	str	r3, [sp, #36]	; 0x24
 8005df2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005df4:	1c59      	adds	r1, r3, #1
 8005df6:	911b      	str	r1, [sp, #108]	; 0x6c
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8005dfe:	2d09      	cmp	r5, #9
 8005e00:	d935      	bls.n	8005e6e <_strtod_l+0x33e>
 8005e02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e04:	1b49      	subs	r1, r1, r5
 8005e06:	2908      	cmp	r1, #8
 8005e08:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005e0c:	dc02      	bgt.n	8005e14 <_strtod_l+0x2e4>
 8005e0e:	4565      	cmp	r5, ip
 8005e10:	bfa8      	it	ge
 8005e12:	4665      	movge	r5, ip
 8005e14:	b107      	cbz	r7, 8005e18 <_strtod_l+0x2e8>
 8005e16:	426d      	negs	r5, r5
 8005e18:	2c00      	cmp	r4, #0
 8005e1a:	d14c      	bne.n	8005eb6 <_strtod_l+0x386>
 8005e1c:	9907      	ldr	r1, [sp, #28]
 8005e1e:	4301      	orrs	r1, r0
 8005e20:	f47f aec7 	bne.w	8005bb2 <_strtod_l+0x82>
 8005e24:	2a00      	cmp	r2, #0
 8005e26:	f47f aee0 	bne.w	8005bea <_strtod_l+0xba>
 8005e2a:	2b69      	cmp	r3, #105	; 0x69
 8005e2c:	d026      	beq.n	8005e7c <_strtod_l+0x34c>
 8005e2e:	dc23      	bgt.n	8005e78 <_strtod_l+0x348>
 8005e30:	2b49      	cmp	r3, #73	; 0x49
 8005e32:	d023      	beq.n	8005e7c <_strtod_l+0x34c>
 8005e34:	2b4e      	cmp	r3, #78	; 0x4e
 8005e36:	f47f aed8 	bne.w	8005bea <_strtod_l+0xba>
 8005e3a:	499c      	ldr	r1, [pc, #624]	; (80060ac <_strtod_l+0x57c>)
 8005e3c:	a81b      	add	r0, sp, #108	; 0x6c
 8005e3e:	f001 fe2b 	bl	8007a98 <__match>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f43f aed1 	beq.w	8005bea <_strtod_l+0xba>
 8005e48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b28      	cmp	r3, #40	; 0x28
 8005e4e:	d12c      	bne.n	8005eaa <_strtod_l+0x37a>
 8005e50:	4997      	ldr	r1, [pc, #604]	; (80060b0 <_strtod_l+0x580>)
 8005e52:	aa1e      	add	r2, sp, #120	; 0x78
 8005e54:	a81b      	add	r0, sp, #108	; 0x6c
 8005e56:	f001 fe33 	bl	8007ac0 <__hexnan>
 8005e5a:	2805      	cmp	r0, #5
 8005e5c:	d125      	bne.n	8005eaa <_strtod_l+0x37a>
 8005e5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e60:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005e64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005e68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005e6c:	e6a1      	b.n	8005bb2 <_strtod_l+0x82>
 8005e6e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8005e72:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005e76:	e7bc      	b.n	8005df2 <_strtod_l+0x2c2>
 8005e78:	2b6e      	cmp	r3, #110	; 0x6e
 8005e7a:	e7dc      	b.n	8005e36 <_strtod_l+0x306>
 8005e7c:	498d      	ldr	r1, [pc, #564]	; (80060b4 <_strtod_l+0x584>)
 8005e7e:	a81b      	add	r0, sp, #108	; 0x6c
 8005e80:	f001 fe0a 	bl	8007a98 <__match>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f43f aeb0 	beq.w	8005bea <_strtod_l+0xba>
 8005e8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e8c:	498a      	ldr	r1, [pc, #552]	; (80060b8 <_strtod_l+0x588>)
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	a81b      	add	r0, sp, #108	; 0x6c
 8005e92:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e94:	f001 fe00 	bl	8007a98 <__match>
 8005e98:	b910      	cbnz	r0, 8005ea0 <_strtod_l+0x370>
 8005e9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ea0:	f04f 0800 	mov.w	r8, #0
 8005ea4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80060c8 <_strtod_l+0x598>
 8005ea8:	e683      	b.n	8005bb2 <_strtod_l+0x82>
 8005eaa:	4884      	ldr	r0, [pc, #528]	; (80060bc <_strtod_l+0x58c>)
 8005eac:	f002 fda6 	bl	80089fc <nan>
 8005eb0:	4680      	mov	r8, r0
 8005eb2:	4689      	mov	r9, r1
 8005eb4:	e67d      	b.n	8005bb2 <_strtod_l+0x82>
 8005eb6:	9b04      	ldr	r3, [sp, #16]
 8005eb8:	f1bb 0f00 	cmp.w	fp, #0
 8005ebc:	bf08      	it	eq
 8005ebe:	46a3      	moveq	fp, r4
 8005ec0:	1aeb      	subs	r3, r5, r3
 8005ec2:	2c10      	cmp	r4, #16
 8005ec4:	9806      	ldr	r0, [sp, #24]
 8005ec6:	4626      	mov	r6, r4
 8005ec8:	9307      	str	r3, [sp, #28]
 8005eca:	bfa8      	it	ge
 8005ecc:	2610      	movge	r6, #16
 8005ece:	f7fa fa89 	bl	80003e4 <__aeabi_ui2d>
 8005ed2:	2c09      	cmp	r4, #9
 8005ed4:	4680      	mov	r8, r0
 8005ed6:	4689      	mov	r9, r1
 8005ed8:	dd13      	ble.n	8005f02 <_strtod_l+0x3d2>
 8005eda:	4b79      	ldr	r3, [pc, #484]	; (80060c0 <_strtod_l+0x590>)
 8005edc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ee0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005ee4:	f7fa faf8 	bl	80004d8 <__aeabi_dmul>
 8005ee8:	4680      	mov	r8, r0
 8005eea:	9805      	ldr	r0, [sp, #20]
 8005eec:	4689      	mov	r9, r1
 8005eee:	f7fa fa79 	bl	80003e4 <__aeabi_ui2d>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	4649      	mov	r1, r9
 8005efa:	f7fa f937 	bl	800016c <__adddf3>
 8005efe:	4680      	mov	r8, r0
 8005f00:	4689      	mov	r9, r1
 8005f02:	2c0f      	cmp	r4, #15
 8005f04:	dc36      	bgt.n	8005f74 <_strtod_l+0x444>
 8005f06:	9b07      	ldr	r3, [sp, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f43f ae52 	beq.w	8005bb2 <_strtod_l+0x82>
 8005f0e:	dd22      	ble.n	8005f56 <_strtod_l+0x426>
 8005f10:	2b16      	cmp	r3, #22
 8005f12:	dc09      	bgt.n	8005f28 <_strtod_l+0x3f8>
 8005f14:	4c6a      	ldr	r4, [pc, #424]	; (80060c0 <_strtod_l+0x590>)
 8005f16:	4642      	mov	r2, r8
 8005f18:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005f22:	f7fa fad9 	bl	80004d8 <__aeabi_dmul>
 8005f26:	e7c3      	b.n	8005eb0 <_strtod_l+0x380>
 8005f28:	9a07      	ldr	r2, [sp, #28]
 8005f2a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	db20      	blt.n	8005f74 <_strtod_l+0x444>
 8005f32:	4d63      	ldr	r5, [pc, #396]	; (80060c0 <_strtod_l+0x590>)
 8005f34:	f1c4 040f 	rsb	r4, r4, #15
 8005f38:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f42:	464b      	mov	r3, r9
 8005f44:	f7fa fac8 	bl	80004d8 <__aeabi_dmul>
 8005f48:	9b07      	ldr	r3, [sp, #28]
 8005f4a:	1b1c      	subs	r4, r3, r4
 8005f4c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005f50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f54:	e7e5      	b.n	8005f22 <_strtod_l+0x3f2>
 8005f56:	9b07      	ldr	r3, [sp, #28]
 8005f58:	3316      	adds	r3, #22
 8005f5a:	db0b      	blt.n	8005f74 <_strtod_l+0x444>
 8005f5c:	9b04      	ldr	r3, [sp, #16]
 8005f5e:	4a58      	ldr	r2, [pc, #352]	; (80060c0 <_strtod_l+0x590>)
 8005f60:	1b5d      	subs	r5, r3, r5
 8005f62:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005f66:	4640      	mov	r0, r8
 8005f68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	f7fa fbdd 	bl	800072c <__aeabi_ddiv>
 8005f72:	e79d      	b.n	8005eb0 <_strtod_l+0x380>
 8005f74:	9b07      	ldr	r3, [sp, #28]
 8005f76:	1ba6      	subs	r6, r4, r6
 8005f78:	441e      	add	r6, r3
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	dd71      	ble.n	8006062 <_strtod_l+0x532>
 8005f7e:	f016 030f 	ands.w	r3, r6, #15
 8005f82:	d00a      	beq.n	8005f9a <_strtod_l+0x46a>
 8005f84:	494e      	ldr	r1, [pc, #312]	; (80060c0 <_strtod_l+0x590>)
 8005f86:	4642      	mov	r2, r8
 8005f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f90:	464b      	mov	r3, r9
 8005f92:	f7fa faa1 	bl	80004d8 <__aeabi_dmul>
 8005f96:	4680      	mov	r8, r0
 8005f98:	4689      	mov	r9, r1
 8005f9a:	f036 060f 	bics.w	r6, r6, #15
 8005f9e:	d050      	beq.n	8006042 <_strtod_l+0x512>
 8005fa0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005fa4:	dd27      	ble.n	8005ff6 <_strtod_l+0x4c6>
 8005fa6:	f04f 0b00 	mov.w	fp, #0
 8005faa:	f8cd b010 	str.w	fp, [sp, #16]
 8005fae:	f8cd b020 	str.w	fp, [sp, #32]
 8005fb2:	f8cd b018 	str.w	fp, [sp, #24]
 8005fb6:	2322      	movs	r3, #34	; 0x22
 8005fb8:	f04f 0800 	mov.w	r8, #0
 8005fbc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80060c8 <_strtod_l+0x598>
 8005fc0:	f8ca 3000 	str.w	r3, [sl]
 8005fc4:	9b08      	ldr	r3, [sp, #32]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f43f adf3 	beq.w	8005bb2 <_strtod_l+0x82>
 8005fcc:	4650      	mov	r0, sl
 8005fce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fd0:	f001 fe8c 	bl	8007cec <_Bfree>
 8005fd4:	4650      	mov	r0, sl
 8005fd6:	9906      	ldr	r1, [sp, #24]
 8005fd8:	f001 fe88 	bl	8007cec <_Bfree>
 8005fdc:	4650      	mov	r0, sl
 8005fde:	9904      	ldr	r1, [sp, #16]
 8005fe0:	f001 fe84 	bl	8007cec <_Bfree>
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	9908      	ldr	r1, [sp, #32]
 8005fe8:	f001 fe80 	bl	8007cec <_Bfree>
 8005fec:	4659      	mov	r1, fp
 8005fee:	4650      	mov	r0, sl
 8005ff0:	f001 fe7c 	bl	8007cec <_Bfree>
 8005ff4:	e5dd      	b.n	8005bb2 <_strtod_l+0x82>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	461f      	mov	r7, r3
 8005ffe:	1136      	asrs	r6, r6, #4
 8006000:	2e01      	cmp	r6, #1
 8006002:	dc21      	bgt.n	8006048 <_strtod_l+0x518>
 8006004:	b10b      	cbz	r3, 800600a <_strtod_l+0x4da>
 8006006:	4680      	mov	r8, r0
 8006008:	4689      	mov	r9, r1
 800600a:	4b2e      	ldr	r3, [pc, #184]	; (80060c4 <_strtod_l+0x594>)
 800600c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006010:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006014:	4642      	mov	r2, r8
 8006016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800601a:	464b      	mov	r3, r9
 800601c:	f7fa fa5c 	bl	80004d8 <__aeabi_dmul>
 8006020:	4b29      	ldr	r3, [pc, #164]	; (80060c8 <_strtod_l+0x598>)
 8006022:	460a      	mov	r2, r1
 8006024:	400b      	ands	r3, r1
 8006026:	4929      	ldr	r1, [pc, #164]	; (80060cc <_strtod_l+0x59c>)
 8006028:	4680      	mov	r8, r0
 800602a:	428b      	cmp	r3, r1
 800602c:	d8bb      	bhi.n	8005fa6 <_strtod_l+0x476>
 800602e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006032:	428b      	cmp	r3, r1
 8006034:	bf86      	itte	hi
 8006036:	f04f 38ff 	movhi.w	r8, #4294967295
 800603a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80060d0 <_strtod_l+0x5a0>
 800603e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006042:	2300      	movs	r3, #0
 8006044:	9305      	str	r3, [sp, #20]
 8006046:	e07e      	b.n	8006146 <_strtod_l+0x616>
 8006048:	07f2      	lsls	r2, r6, #31
 800604a:	d507      	bpl.n	800605c <_strtod_l+0x52c>
 800604c:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <_strtod_l+0x594>)
 800604e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f7fa fa3f 	bl	80004d8 <__aeabi_dmul>
 800605a:	2301      	movs	r3, #1
 800605c:	3701      	adds	r7, #1
 800605e:	1076      	asrs	r6, r6, #1
 8006060:	e7ce      	b.n	8006000 <_strtod_l+0x4d0>
 8006062:	d0ee      	beq.n	8006042 <_strtod_l+0x512>
 8006064:	4276      	negs	r6, r6
 8006066:	f016 020f 	ands.w	r2, r6, #15
 800606a:	d00a      	beq.n	8006082 <_strtod_l+0x552>
 800606c:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <_strtod_l+0x590>)
 800606e:	4640      	mov	r0, r8
 8006070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006074:	4649      	mov	r1, r9
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f7fa fb57 	bl	800072c <__aeabi_ddiv>
 800607e:	4680      	mov	r8, r0
 8006080:	4689      	mov	r9, r1
 8006082:	1136      	asrs	r6, r6, #4
 8006084:	d0dd      	beq.n	8006042 <_strtod_l+0x512>
 8006086:	2e1f      	cmp	r6, #31
 8006088:	dd24      	ble.n	80060d4 <_strtod_l+0x5a4>
 800608a:	f04f 0b00 	mov.w	fp, #0
 800608e:	f8cd b010 	str.w	fp, [sp, #16]
 8006092:	f8cd b020 	str.w	fp, [sp, #32]
 8006096:	f8cd b018 	str.w	fp, [sp, #24]
 800609a:	2322      	movs	r3, #34	; 0x22
 800609c:	f04f 0800 	mov.w	r8, #0
 80060a0:	f04f 0900 	mov.w	r9, #0
 80060a4:	f8ca 3000 	str.w	r3, [sl]
 80060a8:	e78c      	b.n	8005fc4 <_strtod_l+0x494>
 80060aa:	bf00      	nop
 80060ac:	0800aad1 	.word	0x0800aad1
 80060b0:	0800ab14 	.word	0x0800ab14
 80060b4:	0800aac9 	.word	0x0800aac9
 80060b8:	0800ac54 	.word	0x0800ac54
 80060bc:	0800af10 	.word	0x0800af10
 80060c0:	0800adf0 	.word	0x0800adf0
 80060c4:	0800adc8 	.word	0x0800adc8
 80060c8:	7ff00000 	.word	0x7ff00000
 80060cc:	7ca00000 	.word	0x7ca00000
 80060d0:	7fefffff 	.word	0x7fefffff
 80060d4:	f016 0310 	ands.w	r3, r6, #16
 80060d8:	bf18      	it	ne
 80060da:	236a      	movne	r3, #106	; 0x6a
 80060dc:	4640      	mov	r0, r8
 80060de:	9305      	str	r3, [sp, #20]
 80060e0:	4649      	mov	r1, r9
 80060e2:	2300      	movs	r3, #0
 80060e4:	4fb2      	ldr	r7, [pc, #712]	; (80063b0 <_strtod_l+0x880>)
 80060e6:	07f2      	lsls	r2, r6, #31
 80060e8:	d504      	bpl.n	80060f4 <_strtod_l+0x5c4>
 80060ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ee:	f7fa f9f3 	bl	80004d8 <__aeabi_dmul>
 80060f2:	2301      	movs	r3, #1
 80060f4:	1076      	asrs	r6, r6, #1
 80060f6:	f107 0708 	add.w	r7, r7, #8
 80060fa:	d1f4      	bne.n	80060e6 <_strtod_l+0x5b6>
 80060fc:	b10b      	cbz	r3, 8006102 <_strtod_l+0x5d2>
 80060fe:	4680      	mov	r8, r0
 8006100:	4689      	mov	r9, r1
 8006102:	9b05      	ldr	r3, [sp, #20]
 8006104:	b1bb      	cbz	r3, 8006136 <_strtod_l+0x606>
 8006106:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800610a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800610e:	2b00      	cmp	r3, #0
 8006110:	4649      	mov	r1, r9
 8006112:	dd10      	ble.n	8006136 <_strtod_l+0x606>
 8006114:	2b1f      	cmp	r3, #31
 8006116:	f340 812b 	ble.w	8006370 <_strtod_l+0x840>
 800611a:	2b34      	cmp	r3, #52	; 0x34
 800611c:	bfd8      	it	le
 800611e:	f04f 32ff 	movle.w	r2, #4294967295
 8006122:	f04f 0800 	mov.w	r8, #0
 8006126:	bfcf      	iteee	gt
 8006128:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800612c:	3b20      	suble	r3, #32
 800612e:	fa02 f303 	lslle.w	r3, r2, r3
 8006132:	ea03 0901 	andle.w	r9, r3, r1
 8006136:	2200      	movs	r2, #0
 8006138:	2300      	movs	r3, #0
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	f7fa fc33 	bl	80009a8 <__aeabi_dcmpeq>
 8006142:	2800      	cmp	r0, #0
 8006144:	d1a1      	bne.n	800608a <_strtod_l+0x55a>
 8006146:	9b06      	ldr	r3, [sp, #24]
 8006148:	465a      	mov	r2, fp
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	4650      	mov	r0, sl
 800614e:	4623      	mov	r3, r4
 8006150:	9908      	ldr	r1, [sp, #32]
 8006152:	f001 fe37 	bl	8007dc4 <__s2b>
 8006156:	9008      	str	r0, [sp, #32]
 8006158:	2800      	cmp	r0, #0
 800615a:	f43f af24 	beq.w	8005fa6 <_strtod_l+0x476>
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	f04f 0b00 	mov.w	fp, #0
 8006164:	1b5d      	subs	r5, r3, r5
 8006166:	9b07      	ldr	r3, [sp, #28]
 8006168:	f8cd b010 	str.w	fp, [sp, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	bfb4      	ite	lt
 8006170:	462b      	movlt	r3, r5
 8006172:	2300      	movge	r3, #0
 8006174:	930e      	str	r3, [sp, #56]	; 0x38
 8006176:	9b07      	ldr	r3, [sp, #28]
 8006178:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800617c:	9316      	str	r3, [sp, #88]	; 0x58
 800617e:	9b08      	ldr	r3, [sp, #32]
 8006180:	4650      	mov	r0, sl
 8006182:	6859      	ldr	r1, [r3, #4]
 8006184:	f001 fd72 	bl	8007c6c <_Balloc>
 8006188:	9006      	str	r0, [sp, #24]
 800618a:	2800      	cmp	r0, #0
 800618c:	f43f af13 	beq.w	8005fb6 <_strtod_l+0x486>
 8006190:	9b08      	ldr	r3, [sp, #32]
 8006192:	300c      	adds	r0, #12
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	f103 010c 	add.w	r1, r3, #12
 800619a:	3202      	adds	r2, #2
 800619c:	0092      	lsls	r2, r2, #2
 800619e:	f001 fd57 	bl	8007c50 <memcpy>
 80061a2:	ab1e      	add	r3, sp, #120	; 0x78
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	ab1d      	add	r3, sp, #116	; 0x74
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	4642      	mov	r2, r8
 80061ac:	464b      	mov	r3, r9
 80061ae:	4650      	mov	r0, sl
 80061b0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80061b4:	f002 f944 	bl	8008440 <__d2b>
 80061b8:	901c      	str	r0, [sp, #112]	; 0x70
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f43f aefb 	beq.w	8005fb6 <_strtod_l+0x486>
 80061c0:	2101      	movs	r1, #1
 80061c2:	4650      	mov	r0, sl
 80061c4:	f001 fe96 	bl	8007ef4 <__i2b>
 80061c8:	4603      	mov	r3, r0
 80061ca:	9004      	str	r0, [sp, #16]
 80061cc:	2800      	cmp	r0, #0
 80061ce:	f43f aef2 	beq.w	8005fb6 <_strtod_l+0x486>
 80061d2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80061d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	bfab      	itete	ge
 80061da:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80061dc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80061de:	18ee      	addge	r6, r5, r3
 80061e0:	1b5c      	sublt	r4, r3, r5
 80061e2:	9b05      	ldr	r3, [sp, #20]
 80061e4:	bfa8      	it	ge
 80061e6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80061e8:	eba5 0503 	sub.w	r5, r5, r3
 80061ec:	4415      	add	r5, r2
 80061ee:	4b71      	ldr	r3, [pc, #452]	; (80063b4 <_strtod_l+0x884>)
 80061f0:	f105 35ff 	add.w	r5, r5, #4294967295
 80061f4:	bfb8      	it	lt
 80061f6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80061f8:	429d      	cmp	r5, r3
 80061fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80061fe:	f280 80c9 	bge.w	8006394 <_strtod_l+0x864>
 8006202:	1b5b      	subs	r3, r3, r5
 8006204:	2b1f      	cmp	r3, #31
 8006206:	f04f 0701 	mov.w	r7, #1
 800620a:	eba2 0203 	sub.w	r2, r2, r3
 800620e:	f300 80b6 	bgt.w	800637e <_strtod_l+0x84e>
 8006212:	2500      	movs	r5, #0
 8006214:	fa07 f303 	lsl.w	r3, r7, r3
 8006218:	930f      	str	r3, [sp, #60]	; 0x3c
 800621a:	18b7      	adds	r7, r6, r2
 800621c:	9b05      	ldr	r3, [sp, #20]
 800621e:	42be      	cmp	r6, r7
 8006220:	4414      	add	r4, r2
 8006222:	441c      	add	r4, r3
 8006224:	4633      	mov	r3, r6
 8006226:	bfa8      	it	ge
 8006228:	463b      	movge	r3, r7
 800622a:	42a3      	cmp	r3, r4
 800622c:	bfa8      	it	ge
 800622e:	4623      	movge	r3, r4
 8006230:	2b00      	cmp	r3, #0
 8006232:	bfc2      	ittt	gt
 8006234:	1aff      	subgt	r7, r7, r3
 8006236:	1ae4      	subgt	r4, r4, r3
 8006238:	1af6      	subgt	r6, r6, r3
 800623a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800623c:	2b00      	cmp	r3, #0
 800623e:	dd17      	ble.n	8006270 <_strtod_l+0x740>
 8006240:	461a      	mov	r2, r3
 8006242:	4650      	mov	r0, sl
 8006244:	9904      	ldr	r1, [sp, #16]
 8006246:	f001 ff0f 	bl	8008068 <__pow5mult>
 800624a:	9004      	str	r0, [sp, #16]
 800624c:	2800      	cmp	r0, #0
 800624e:	f43f aeb2 	beq.w	8005fb6 <_strtod_l+0x486>
 8006252:	4601      	mov	r1, r0
 8006254:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006256:	4650      	mov	r0, sl
 8006258:	f001 fe62 	bl	8007f20 <__multiply>
 800625c:	9009      	str	r0, [sp, #36]	; 0x24
 800625e:	2800      	cmp	r0, #0
 8006260:	f43f aea9 	beq.w	8005fb6 <_strtod_l+0x486>
 8006264:	4650      	mov	r0, sl
 8006266:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006268:	f001 fd40 	bl	8007cec <_Bfree>
 800626c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626e:	931c      	str	r3, [sp, #112]	; 0x70
 8006270:	2f00      	cmp	r7, #0
 8006272:	f300 8093 	bgt.w	800639c <_strtod_l+0x86c>
 8006276:	9b07      	ldr	r3, [sp, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	dd08      	ble.n	800628e <_strtod_l+0x75e>
 800627c:	4650      	mov	r0, sl
 800627e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006280:	9906      	ldr	r1, [sp, #24]
 8006282:	f001 fef1 	bl	8008068 <__pow5mult>
 8006286:	9006      	str	r0, [sp, #24]
 8006288:	2800      	cmp	r0, #0
 800628a:	f43f ae94 	beq.w	8005fb6 <_strtod_l+0x486>
 800628e:	2c00      	cmp	r4, #0
 8006290:	dd08      	ble.n	80062a4 <_strtod_l+0x774>
 8006292:	4622      	mov	r2, r4
 8006294:	4650      	mov	r0, sl
 8006296:	9906      	ldr	r1, [sp, #24]
 8006298:	f001 ff40 	bl	800811c <__lshift>
 800629c:	9006      	str	r0, [sp, #24]
 800629e:	2800      	cmp	r0, #0
 80062a0:	f43f ae89 	beq.w	8005fb6 <_strtod_l+0x486>
 80062a4:	2e00      	cmp	r6, #0
 80062a6:	dd08      	ble.n	80062ba <_strtod_l+0x78a>
 80062a8:	4632      	mov	r2, r6
 80062aa:	4650      	mov	r0, sl
 80062ac:	9904      	ldr	r1, [sp, #16]
 80062ae:	f001 ff35 	bl	800811c <__lshift>
 80062b2:	9004      	str	r0, [sp, #16]
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f43f ae7e 	beq.w	8005fb6 <_strtod_l+0x486>
 80062ba:	4650      	mov	r0, sl
 80062bc:	9a06      	ldr	r2, [sp, #24]
 80062be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80062c0:	f001 ffb4 	bl	800822c <__mdiff>
 80062c4:	4683      	mov	fp, r0
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f43f ae75 	beq.w	8005fb6 <_strtod_l+0x486>
 80062cc:	2400      	movs	r4, #0
 80062ce:	68c3      	ldr	r3, [r0, #12]
 80062d0:	9904      	ldr	r1, [sp, #16]
 80062d2:	60c4      	str	r4, [r0, #12]
 80062d4:	930d      	str	r3, [sp, #52]	; 0x34
 80062d6:	f001 ff8d 	bl	80081f4 <__mcmp>
 80062da:	42a0      	cmp	r0, r4
 80062dc:	da70      	bge.n	80063c0 <_strtod_l+0x890>
 80062de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062e0:	ea53 0308 	orrs.w	r3, r3, r8
 80062e4:	f040 8096 	bne.w	8006414 <_strtod_l+0x8e4>
 80062e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f040 8091 	bne.w	8006414 <_strtod_l+0x8e4>
 80062f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062f6:	0d1b      	lsrs	r3, r3, #20
 80062f8:	051b      	lsls	r3, r3, #20
 80062fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80062fe:	f240 8089 	bls.w	8006414 <_strtod_l+0x8e4>
 8006302:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006306:	b923      	cbnz	r3, 8006312 <_strtod_l+0x7e2>
 8006308:	f8db 3010 	ldr.w	r3, [fp, #16]
 800630c:	2b01      	cmp	r3, #1
 800630e:	f340 8081 	ble.w	8006414 <_strtod_l+0x8e4>
 8006312:	4659      	mov	r1, fp
 8006314:	2201      	movs	r2, #1
 8006316:	4650      	mov	r0, sl
 8006318:	f001 ff00 	bl	800811c <__lshift>
 800631c:	9904      	ldr	r1, [sp, #16]
 800631e:	4683      	mov	fp, r0
 8006320:	f001 ff68 	bl	80081f4 <__mcmp>
 8006324:	2800      	cmp	r0, #0
 8006326:	dd75      	ble.n	8006414 <_strtod_l+0x8e4>
 8006328:	9905      	ldr	r1, [sp, #20]
 800632a:	464b      	mov	r3, r9
 800632c:	4a22      	ldr	r2, [pc, #136]	; (80063b8 <_strtod_l+0x888>)
 800632e:	2900      	cmp	r1, #0
 8006330:	f000 8091 	beq.w	8006456 <_strtod_l+0x926>
 8006334:	ea02 0109 	and.w	r1, r2, r9
 8006338:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800633c:	f300 808b 	bgt.w	8006456 <_strtod_l+0x926>
 8006340:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006344:	f77f aea9 	ble.w	800609a <_strtod_l+0x56a>
 8006348:	2300      	movs	r3, #0
 800634a:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <_strtod_l+0x88c>)
 800634c:	4640      	mov	r0, r8
 800634e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006352:	4649      	mov	r1, r9
 8006354:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006358:	f7fa f8be 	bl	80004d8 <__aeabi_dmul>
 800635c:	460b      	mov	r3, r1
 800635e:	4303      	orrs	r3, r0
 8006360:	bf08      	it	eq
 8006362:	2322      	moveq	r3, #34	; 0x22
 8006364:	4680      	mov	r8, r0
 8006366:	4689      	mov	r9, r1
 8006368:	bf08      	it	eq
 800636a:	f8ca 3000 	streq.w	r3, [sl]
 800636e:	e62d      	b.n	8005fcc <_strtod_l+0x49c>
 8006370:	f04f 32ff 	mov.w	r2, #4294967295
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	ea03 0808 	and.w	r8, r3, r8
 800637c:	e6db      	b.n	8006136 <_strtod_l+0x606>
 800637e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006382:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006386:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800638a:	35e2      	adds	r5, #226	; 0xe2
 800638c:	fa07 f505 	lsl.w	r5, r7, r5
 8006390:	970f      	str	r7, [sp, #60]	; 0x3c
 8006392:	e742      	b.n	800621a <_strtod_l+0x6ea>
 8006394:	2301      	movs	r3, #1
 8006396:	2500      	movs	r5, #0
 8006398:	930f      	str	r3, [sp, #60]	; 0x3c
 800639a:	e73e      	b.n	800621a <_strtod_l+0x6ea>
 800639c:	463a      	mov	r2, r7
 800639e:	4650      	mov	r0, sl
 80063a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80063a2:	f001 febb 	bl	800811c <__lshift>
 80063a6:	901c      	str	r0, [sp, #112]	; 0x70
 80063a8:	2800      	cmp	r0, #0
 80063aa:	f47f af64 	bne.w	8006276 <_strtod_l+0x746>
 80063ae:	e602      	b.n	8005fb6 <_strtod_l+0x486>
 80063b0:	0800ab28 	.word	0x0800ab28
 80063b4:	fffffc02 	.word	0xfffffc02
 80063b8:	7ff00000 	.word	0x7ff00000
 80063bc:	39500000 	.word	0x39500000
 80063c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063c4:	d166      	bne.n	8006494 <_strtod_l+0x964>
 80063c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063cc:	b35a      	cbz	r2, 8006426 <_strtod_l+0x8f6>
 80063ce:	4a9c      	ldr	r2, [pc, #624]	; (8006640 <_strtod_l+0xb10>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d12c      	bne.n	800642e <_strtod_l+0x8fe>
 80063d4:	9b05      	ldr	r3, [sp, #20]
 80063d6:	4640      	mov	r0, r8
 80063d8:	b303      	cbz	r3, 800641c <_strtod_l+0x8ec>
 80063da:	464b      	mov	r3, r9
 80063dc:	4a99      	ldr	r2, [pc, #612]	; (8006644 <_strtod_l+0xb14>)
 80063de:	f04f 31ff 	mov.w	r1, #4294967295
 80063e2:	401a      	ands	r2, r3
 80063e4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80063e8:	d81b      	bhi.n	8006422 <_strtod_l+0x8f2>
 80063ea:	0d12      	lsrs	r2, r2, #20
 80063ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80063f0:	fa01 f303 	lsl.w	r3, r1, r3
 80063f4:	4298      	cmp	r0, r3
 80063f6:	d11a      	bne.n	800642e <_strtod_l+0x8fe>
 80063f8:	4b93      	ldr	r3, [pc, #588]	; (8006648 <_strtod_l+0xb18>)
 80063fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d102      	bne.n	8006406 <_strtod_l+0x8d6>
 8006400:	3001      	adds	r0, #1
 8006402:	f43f add8 	beq.w	8005fb6 <_strtod_l+0x486>
 8006406:	f04f 0800 	mov.w	r8, #0
 800640a:	4b8e      	ldr	r3, [pc, #568]	; (8006644 <_strtod_l+0xb14>)
 800640c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800640e:	401a      	ands	r2, r3
 8006410:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006414:	9b05      	ldr	r3, [sp, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d196      	bne.n	8006348 <_strtod_l+0x818>
 800641a:	e5d7      	b.n	8005fcc <_strtod_l+0x49c>
 800641c:	f04f 33ff 	mov.w	r3, #4294967295
 8006420:	e7e8      	b.n	80063f4 <_strtod_l+0x8c4>
 8006422:	460b      	mov	r3, r1
 8006424:	e7e6      	b.n	80063f4 <_strtod_l+0x8c4>
 8006426:	ea53 0308 	orrs.w	r3, r3, r8
 800642a:	f43f af7d 	beq.w	8006328 <_strtod_l+0x7f8>
 800642e:	b1e5      	cbz	r5, 800646a <_strtod_l+0x93a>
 8006430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006432:	421d      	tst	r5, r3
 8006434:	d0ee      	beq.n	8006414 <_strtod_l+0x8e4>
 8006436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	9a05      	ldr	r2, [sp, #20]
 800643e:	b1c3      	cbz	r3, 8006472 <_strtod_l+0x942>
 8006440:	f7ff fb52 	bl	8005ae8 <sulp>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800644c:	f7f9 fe8e 	bl	800016c <__adddf3>
 8006450:	4680      	mov	r8, r0
 8006452:	4689      	mov	r9, r1
 8006454:	e7de      	b.n	8006414 <_strtod_l+0x8e4>
 8006456:	4013      	ands	r3, r2
 8006458:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800645c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006460:	f04f 38ff 	mov.w	r8, #4294967295
 8006464:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006468:	e7d4      	b.n	8006414 <_strtod_l+0x8e4>
 800646a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800646c:	ea13 0f08 	tst.w	r3, r8
 8006470:	e7e0      	b.n	8006434 <_strtod_l+0x904>
 8006472:	f7ff fb39 	bl	8005ae8 <sulp>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800647e:	f7f9 fe73 	bl	8000168 <__aeabi_dsub>
 8006482:	2200      	movs	r2, #0
 8006484:	2300      	movs	r3, #0
 8006486:	4680      	mov	r8, r0
 8006488:	4689      	mov	r9, r1
 800648a:	f7fa fa8d 	bl	80009a8 <__aeabi_dcmpeq>
 800648e:	2800      	cmp	r0, #0
 8006490:	d0c0      	beq.n	8006414 <_strtod_l+0x8e4>
 8006492:	e602      	b.n	800609a <_strtod_l+0x56a>
 8006494:	4658      	mov	r0, fp
 8006496:	9904      	ldr	r1, [sp, #16]
 8006498:	f002 f82e 	bl	80084f8 <__ratio>
 800649c:	2200      	movs	r2, #0
 800649e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064a2:	4606      	mov	r6, r0
 80064a4:	460f      	mov	r7, r1
 80064a6:	f7fa fa93 	bl	80009d0 <__aeabi_dcmple>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d075      	beq.n	800659a <_strtod_l+0xa6a>
 80064ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d047      	beq.n	8006544 <_strtod_l+0xa14>
 80064b4:	2600      	movs	r6, #0
 80064b6:	4f65      	ldr	r7, [pc, #404]	; (800664c <_strtod_l+0xb1c>)
 80064b8:	4d64      	ldr	r5, [pc, #400]	; (800664c <_strtod_l+0xb1c>)
 80064ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064c0:	0d1b      	lsrs	r3, r3, #20
 80064c2:	051b      	lsls	r3, r3, #20
 80064c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80064c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064c8:	4b61      	ldr	r3, [pc, #388]	; (8006650 <_strtod_l+0xb20>)
 80064ca:	429a      	cmp	r2, r3
 80064cc:	f040 80c8 	bne.w	8006660 <_strtod_l+0xb30>
 80064d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064d4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80064d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064da:	4640      	mov	r0, r8
 80064dc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80064e0:	4649      	mov	r1, r9
 80064e2:	f001 ff33 	bl	800834c <__ulp>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4630      	mov	r0, r6
 80064ec:	4639      	mov	r1, r7
 80064ee:	f7f9 fff3 	bl	80004d8 <__aeabi_dmul>
 80064f2:	4642      	mov	r2, r8
 80064f4:	464b      	mov	r3, r9
 80064f6:	f7f9 fe39 	bl	800016c <__adddf3>
 80064fa:	460b      	mov	r3, r1
 80064fc:	4951      	ldr	r1, [pc, #324]	; (8006644 <_strtod_l+0xb14>)
 80064fe:	4a55      	ldr	r2, [pc, #340]	; (8006654 <_strtod_l+0xb24>)
 8006500:	4019      	ands	r1, r3
 8006502:	4291      	cmp	r1, r2
 8006504:	4680      	mov	r8, r0
 8006506:	d95e      	bls.n	80065c6 <_strtod_l+0xa96>
 8006508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800650a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800650e:	4293      	cmp	r3, r2
 8006510:	d103      	bne.n	800651a <_strtod_l+0x9ea>
 8006512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006514:	3301      	adds	r3, #1
 8006516:	f43f ad4e 	beq.w	8005fb6 <_strtod_l+0x486>
 800651a:	f04f 38ff 	mov.w	r8, #4294967295
 800651e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006648 <_strtod_l+0xb18>
 8006522:	4650      	mov	r0, sl
 8006524:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006526:	f001 fbe1 	bl	8007cec <_Bfree>
 800652a:	4650      	mov	r0, sl
 800652c:	9906      	ldr	r1, [sp, #24]
 800652e:	f001 fbdd 	bl	8007cec <_Bfree>
 8006532:	4650      	mov	r0, sl
 8006534:	9904      	ldr	r1, [sp, #16]
 8006536:	f001 fbd9 	bl	8007cec <_Bfree>
 800653a:	4659      	mov	r1, fp
 800653c:	4650      	mov	r0, sl
 800653e:	f001 fbd5 	bl	8007cec <_Bfree>
 8006542:	e61c      	b.n	800617e <_strtod_l+0x64e>
 8006544:	f1b8 0f00 	cmp.w	r8, #0
 8006548:	d119      	bne.n	800657e <_strtod_l+0xa4e>
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006550:	b9e3      	cbnz	r3, 800658c <_strtod_l+0xa5c>
 8006552:	2200      	movs	r2, #0
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	4b3c      	ldr	r3, [pc, #240]	; (800664c <_strtod_l+0xb1c>)
 800655a:	f7fa fa2f 	bl	80009bc <__aeabi_dcmplt>
 800655e:	b9c8      	cbnz	r0, 8006594 <_strtod_l+0xa64>
 8006560:	2200      	movs	r2, #0
 8006562:	4630      	mov	r0, r6
 8006564:	4639      	mov	r1, r7
 8006566:	4b3c      	ldr	r3, [pc, #240]	; (8006658 <_strtod_l+0xb28>)
 8006568:	f7f9 ffb6 	bl	80004d8 <__aeabi_dmul>
 800656c:	4604      	mov	r4, r0
 800656e:	460d      	mov	r5, r1
 8006570:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006574:	9418      	str	r4, [sp, #96]	; 0x60
 8006576:	9319      	str	r3, [sp, #100]	; 0x64
 8006578:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800657c:	e79d      	b.n	80064ba <_strtod_l+0x98a>
 800657e:	f1b8 0f01 	cmp.w	r8, #1
 8006582:	d103      	bne.n	800658c <_strtod_l+0xa5c>
 8006584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006586:	2b00      	cmp	r3, #0
 8006588:	f43f ad87 	beq.w	800609a <_strtod_l+0x56a>
 800658c:	2600      	movs	r6, #0
 800658e:	2400      	movs	r4, #0
 8006590:	4f32      	ldr	r7, [pc, #200]	; (800665c <_strtod_l+0xb2c>)
 8006592:	e791      	b.n	80064b8 <_strtod_l+0x988>
 8006594:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006596:	4d30      	ldr	r5, [pc, #192]	; (8006658 <_strtod_l+0xb28>)
 8006598:	e7ea      	b.n	8006570 <_strtod_l+0xa40>
 800659a:	4b2f      	ldr	r3, [pc, #188]	; (8006658 <_strtod_l+0xb28>)
 800659c:	2200      	movs	r2, #0
 800659e:	4630      	mov	r0, r6
 80065a0:	4639      	mov	r1, r7
 80065a2:	f7f9 ff99 	bl	80004d8 <__aeabi_dmul>
 80065a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065a8:	4604      	mov	r4, r0
 80065aa:	460d      	mov	r5, r1
 80065ac:	b933      	cbnz	r3, 80065bc <_strtod_l+0xa8c>
 80065ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065b2:	9010      	str	r0, [sp, #64]	; 0x40
 80065b4:	9311      	str	r3, [sp, #68]	; 0x44
 80065b6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80065ba:	e77e      	b.n	80064ba <_strtod_l+0x98a>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80065c4:	e7f7      	b.n	80065b6 <_strtod_l+0xa86>
 80065c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80065ca:	9b05      	ldr	r3, [sp, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1a8      	bne.n	8006522 <_strtod_l+0x9f2>
 80065d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065d6:	0d1b      	lsrs	r3, r3, #20
 80065d8:	051b      	lsls	r3, r3, #20
 80065da:	429a      	cmp	r2, r3
 80065dc:	d1a1      	bne.n	8006522 <_strtod_l+0x9f2>
 80065de:	4620      	mov	r0, r4
 80065e0:	4629      	mov	r1, r5
 80065e2:	f7fa fad9 	bl	8000b98 <__aeabi_d2lz>
 80065e6:	f7f9 ff49 	bl	800047c <__aeabi_l2d>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4620      	mov	r0, r4
 80065f0:	4629      	mov	r1, r5
 80065f2:	f7f9 fdb9 	bl	8000168 <__aeabi_dsub>
 80065f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065fc:	ea43 0308 	orr.w	r3, r3, r8
 8006600:	4313      	orrs	r3, r2
 8006602:	4604      	mov	r4, r0
 8006604:	460d      	mov	r5, r1
 8006606:	d066      	beq.n	80066d6 <_strtod_l+0xba6>
 8006608:	a309      	add	r3, pc, #36	; (adr r3, 8006630 <_strtod_l+0xb00>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f7fa f9d5 	bl	80009bc <__aeabi_dcmplt>
 8006612:	2800      	cmp	r0, #0
 8006614:	f47f acda 	bne.w	8005fcc <_strtod_l+0x49c>
 8006618:	a307      	add	r3, pc, #28	; (adr r3, 8006638 <_strtod_l+0xb08>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	4620      	mov	r0, r4
 8006620:	4629      	mov	r1, r5
 8006622:	f7fa f9e9 	bl	80009f8 <__aeabi_dcmpgt>
 8006626:	2800      	cmp	r0, #0
 8006628:	f43f af7b 	beq.w	8006522 <_strtod_l+0x9f2>
 800662c:	e4ce      	b.n	8005fcc <_strtod_l+0x49c>
 800662e:	bf00      	nop
 8006630:	94a03595 	.word	0x94a03595
 8006634:	3fdfffff 	.word	0x3fdfffff
 8006638:	35afe535 	.word	0x35afe535
 800663c:	3fe00000 	.word	0x3fe00000
 8006640:	000fffff 	.word	0x000fffff
 8006644:	7ff00000 	.word	0x7ff00000
 8006648:	7fefffff 	.word	0x7fefffff
 800664c:	3ff00000 	.word	0x3ff00000
 8006650:	7fe00000 	.word	0x7fe00000
 8006654:	7c9fffff 	.word	0x7c9fffff
 8006658:	3fe00000 	.word	0x3fe00000
 800665c:	bff00000 	.word	0xbff00000
 8006660:	9b05      	ldr	r3, [sp, #20]
 8006662:	b313      	cbz	r3, 80066aa <_strtod_l+0xb7a>
 8006664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006666:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800666a:	d81e      	bhi.n	80066aa <_strtod_l+0xb7a>
 800666c:	a326      	add	r3, pc, #152	; (adr r3, 8006708 <_strtod_l+0xbd8>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	4620      	mov	r0, r4
 8006674:	4629      	mov	r1, r5
 8006676:	f7fa f9ab 	bl	80009d0 <__aeabi_dcmple>
 800667a:	b190      	cbz	r0, 80066a2 <_strtod_l+0xb72>
 800667c:	4629      	mov	r1, r5
 800667e:	4620      	mov	r0, r4
 8006680:	f7fa fa02 	bl	8000a88 <__aeabi_d2uiz>
 8006684:	2801      	cmp	r0, #1
 8006686:	bf38      	it	cc
 8006688:	2001      	movcc	r0, #1
 800668a:	f7f9 feab 	bl	80003e4 <__aeabi_ui2d>
 800668e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006690:	4604      	mov	r4, r0
 8006692:	460d      	mov	r5, r1
 8006694:	b9d3      	cbnz	r3, 80066cc <_strtod_l+0xb9c>
 8006696:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800669a:	9012      	str	r0, [sp, #72]	; 0x48
 800669c:	9313      	str	r3, [sp, #76]	; 0x4c
 800669e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80066a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066a4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80066a8:	1a9f      	subs	r7, r3, r2
 80066aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066ae:	f001 fe4d 	bl	800834c <__ulp>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4630      	mov	r0, r6
 80066b8:	4639      	mov	r1, r7
 80066ba:	f7f9 ff0d 	bl	80004d8 <__aeabi_dmul>
 80066be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066c2:	f7f9 fd53 	bl	800016c <__adddf3>
 80066c6:	4680      	mov	r8, r0
 80066c8:	4689      	mov	r9, r1
 80066ca:	e77e      	b.n	80065ca <_strtod_l+0xa9a>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80066d4:	e7e3      	b.n	800669e <_strtod_l+0xb6e>
 80066d6:	a30e      	add	r3, pc, #56	; (adr r3, 8006710 <_strtod_l+0xbe0>)
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f7fa f96e 	bl	80009bc <__aeabi_dcmplt>
 80066e0:	e7a1      	b.n	8006626 <_strtod_l+0xaf6>
 80066e2:	2300      	movs	r3, #0
 80066e4:	930c      	str	r3, [sp, #48]	; 0x30
 80066e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	f7ff ba65 	b.w	8005bba <_strtod_l+0x8a>
 80066f0:	2b65      	cmp	r3, #101	; 0x65
 80066f2:	f43f ab5c 	beq.w	8005dae <_strtod_l+0x27e>
 80066f6:	2b45      	cmp	r3, #69	; 0x45
 80066f8:	f43f ab59 	beq.w	8005dae <_strtod_l+0x27e>
 80066fc:	2201      	movs	r2, #1
 80066fe:	f7ff bb8d 	b.w	8005e1c <_strtod_l+0x2ec>
 8006702:	bf00      	nop
 8006704:	f3af 8000 	nop.w
 8006708:	ffc00000 	.word	0xffc00000
 800670c:	41dfffff 	.word	0x41dfffff
 8006710:	94a03595 	.word	0x94a03595
 8006714:	3fcfffff 	.word	0x3fcfffff

08006718 <_strtod_r>:
 8006718:	4b01      	ldr	r3, [pc, #4]	; (8006720 <_strtod_r+0x8>)
 800671a:	f7ff ba09 	b.w	8005b30 <_strtod_l>
 800671e:	bf00      	nop
 8006720:	20000084 	.word	0x20000084

08006724 <_strtol_l.isra.0>:
 8006724:	2b01      	cmp	r3, #1
 8006726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672a:	4686      	mov	lr, r0
 800672c:	d001      	beq.n	8006732 <_strtol_l.isra.0+0xe>
 800672e:	2b24      	cmp	r3, #36	; 0x24
 8006730:	d906      	bls.n	8006740 <_strtol_l.isra.0+0x1c>
 8006732:	f7fe fb11 	bl	8004d58 <__errno>
 8006736:	2316      	movs	r3, #22
 8006738:	6003      	str	r3, [r0, #0]
 800673a:	2000      	movs	r0, #0
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006740:	468c      	mov	ip, r1
 8006742:	4e3a      	ldr	r6, [pc, #232]	; (800682c <_strtol_l.isra.0+0x108>)
 8006744:	4660      	mov	r0, ip
 8006746:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800674a:	5da5      	ldrb	r5, [r4, r6]
 800674c:	f015 0508 	ands.w	r5, r5, #8
 8006750:	d1f8      	bne.n	8006744 <_strtol_l.isra.0+0x20>
 8006752:	2c2d      	cmp	r4, #45	; 0x2d
 8006754:	d133      	bne.n	80067be <_strtol_l.isra.0+0x9a>
 8006756:	f04f 0801 	mov.w	r8, #1
 800675a:	f89c 4000 	ldrb.w	r4, [ip]
 800675e:	f100 0c02 	add.w	ip, r0, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d05d      	beq.n	8006822 <_strtol_l.isra.0+0xfe>
 8006766:	2b10      	cmp	r3, #16
 8006768:	d10c      	bne.n	8006784 <_strtol_l.isra.0+0x60>
 800676a:	2c30      	cmp	r4, #48	; 0x30
 800676c:	d10a      	bne.n	8006784 <_strtol_l.isra.0+0x60>
 800676e:	f89c 0000 	ldrb.w	r0, [ip]
 8006772:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006776:	2858      	cmp	r0, #88	; 0x58
 8006778:	d14e      	bne.n	8006818 <_strtol_l.isra.0+0xf4>
 800677a:	2310      	movs	r3, #16
 800677c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006780:	f10c 0c02 	add.w	ip, ip, #2
 8006784:	2500      	movs	r5, #0
 8006786:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800678a:	3f01      	subs	r7, #1
 800678c:	fbb7 f9f3 	udiv	r9, r7, r3
 8006790:	4628      	mov	r0, r5
 8006792:	fb03 7a19 	mls	sl, r3, r9, r7
 8006796:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800679a:	2e09      	cmp	r6, #9
 800679c:	d818      	bhi.n	80067d0 <_strtol_l.isra.0+0xac>
 800679e:	4634      	mov	r4, r6
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	dd24      	ble.n	80067ee <_strtol_l.isra.0+0xca>
 80067a4:	2d00      	cmp	r5, #0
 80067a6:	db1f      	blt.n	80067e8 <_strtol_l.isra.0+0xc4>
 80067a8:	4581      	cmp	r9, r0
 80067aa:	d31d      	bcc.n	80067e8 <_strtol_l.isra.0+0xc4>
 80067ac:	d101      	bne.n	80067b2 <_strtol_l.isra.0+0x8e>
 80067ae:	45a2      	cmp	sl, r4
 80067b0:	db1a      	blt.n	80067e8 <_strtol_l.isra.0+0xc4>
 80067b2:	2501      	movs	r5, #1
 80067b4:	fb00 4003 	mla	r0, r0, r3, r4
 80067b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80067bc:	e7eb      	b.n	8006796 <_strtol_l.isra.0+0x72>
 80067be:	2c2b      	cmp	r4, #43	; 0x2b
 80067c0:	bf08      	it	eq
 80067c2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80067c6:	46a8      	mov	r8, r5
 80067c8:	bf08      	it	eq
 80067ca:	f100 0c02 	addeq.w	ip, r0, #2
 80067ce:	e7c8      	b.n	8006762 <_strtol_l.isra.0+0x3e>
 80067d0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80067d4:	2e19      	cmp	r6, #25
 80067d6:	d801      	bhi.n	80067dc <_strtol_l.isra.0+0xb8>
 80067d8:	3c37      	subs	r4, #55	; 0x37
 80067da:	e7e1      	b.n	80067a0 <_strtol_l.isra.0+0x7c>
 80067dc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80067e0:	2e19      	cmp	r6, #25
 80067e2:	d804      	bhi.n	80067ee <_strtol_l.isra.0+0xca>
 80067e4:	3c57      	subs	r4, #87	; 0x57
 80067e6:	e7db      	b.n	80067a0 <_strtol_l.isra.0+0x7c>
 80067e8:	f04f 35ff 	mov.w	r5, #4294967295
 80067ec:	e7e4      	b.n	80067b8 <_strtol_l.isra.0+0x94>
 80067ee:	2d00      	cmp	r5, #0
 80067f0:	da08      	bge.n	8006804 <_strtol_l.isra.0+0xe0>
 80067f2:	2322      	movs	r3, #34	; 0x22
 80067f4:	4638      	mov	r0, r7
 80067f6:	f8ce 3000 	str.w	r3, [lr]
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	d09e      	beq.n	800673c <_strtol_l.isra.0+0x18>
 80067fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006802:	e007      	b.n	8006814 <_strtol_l.isra.0+0xf0>
 8006804:	f1b8 0f00 	cmp.w	r8, #0
 8006808:	d000      	beq.n	800680c <_strtol_l.isra.0+0xe8>
 800680a:	4240      	negs	r0, r0
 800680c:	2a00      	cmp	r2, #0
 800680e:	d095      	beq.n	800673c <_strtol_l.isra.0+0x18>
 8006810:	2d00      	cmp	r5, #0
 8006812:	d1f4      	bne.n	80067fe <_strtol_l.isra.0+0xda>
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	e791      	b.n	800673c <_strtol_l.isra.0+0x18>
 8006818:	2430      	movs	r4, #48	; 0x30
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1b2      	bne.n	8006784 <_strtol_l.isra.0+0x60>
 800681e:	2308      	movs	r3, #8
 8006820:	e7b0      	b.n	8006784 <_strtol_l.isra.0+0x60>
 8006822:	2c30      	cmp	r4, #48	; 0x30
 8006824:	d0a3      	beq.n	800676e <_strtol_l.isra.0+0x4a>
 8006826:	230a      	movs	r3, #10
 8006828:	e7ac      	b.n	8006784 <_strtol_l.isra.0+0x60>
 800682a:	bf00      	nop
 800682c:	0800ab51 	.word	0x0800ab51

08006830 <_strtol_r>:
 8006830:	f7ff bf78 	b.w	8006724 <_strtol_l.isra.0>

08006834 <quorem>:
 8006834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	6903      	ldr	r3, [r0, #16]
 800683a:	690c      	ldr	r4, [r1, #16]
 800683c:	4607      	mov	r7, r0
 800683e:	42a3      	cmp	r3, r4
 8006840:	f2c0 8083 	blt.w	800694a <quorem+0x116>
 8006844:	3c01      	subs	r4, #1
 8006846:	f100 0514 	add.w	r5, r0, #20
 800684a:	f101 0814 	add.w	r8, r1, #20
 800684e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006858:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800685c:	3301      	adds	r3, #1
 800685e:	429a      	cmp	r2, r3
 8006860:	fbb2 f6f3 	udiv	r6, r2, r3
 8006864:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006868:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800686c:	d332      	bcc.n	80068d4 <quorem+0xa0>
 800686e:	f04f 0e00 	mov.w	lr, #0
 8006872:	4640      	mov	r0, r8
 8006874:	46ac      	mov	ip, r5
 8006876:	46f2      	mov	sl, lr
 8006878:	f850 2b04 	ldr.w	r2, [r0], #4
 800687c:	b293      	uxth	r3, r2
 800687e:	fb06 e303 	mla	r3, r6, r3, lr
 8006882:	0c12      	lsrs	r2, r2, #16
 8006884:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006888:	fb06 e202 	mla	r2, r6, r2, lr
 800688c:	b29b      	uxth	r3, r3
 800688e:	ebaa 0303 	sub.w	r3, sl, r3
 8006892:	f8dc a000 	ldr.w	sl, [ip]
 8006896:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800689a:	fa1f fa8a 	uxth.w	sl, sl
 800689e:	4453      	add	r3, sl
 80068a0:	fa1f fa82 	uxth.w	sl, r2
 80068a4:	f8dc 2000 	ldr.w	r2, [ip]
 80068a8:	4581      	cmp	r9, r0
 80068aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80068ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068bc:	f84c 3b04 	str.w	r3, [ip], #4
 80068c0:	d2da      	bcs.n	8006878 <quorem+0x44>
 80068c2:	f855 300b 	ldr.w	r3, [r5, fp]
 80068c6:	b92b      	cbnz	r3, 80068d4 <quorem+0xa0>
 80068c8:	9b01      	ldr	r3, [sp, #4]
 80068ca:	3b04      	subs	r3, #4
 80068cc:	429d      	cmp	r5, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	d32f      	bcc.n	8006932 <quorem+0xfe>
 80068d2:	613c      	str	r4, [r7, #16]
 80068d4:	4638      	mov	r0, r7
 80068d6:	f001 fc8d 	bl	80081f4 <__mcmp>
 80068da:	2800      	cmp	r0, #0
 80068dc:	db25      	blt.n	800692a <quorem+0xf6>
 80068de:	4628      	mov	r0, r5
 80068e0:	f04f 0c00 	mov.w	ip, #0
 80068e4:	3601      	adds	r6, #1
 80068e6:	f858 1b04 	ldr.w	r1, [r8], #4
 80068ea:	f8d0 e000 	ldr.w	lr, [r0]
 80068ee:	b28b      	uxth	r3, r1
 80068f0:	ebac 0303 	sub.w	r3, ip, r3
 80068f4:	fa1f f28e 	uxth.w	r2, lr
 80068f8:	4413      	add	r3, r2
 80068fa:	0c0a      	lsrs	r2, r1, #16
 80068fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006904:	b29b      	uxth	r3, r3
 8006906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800690a:	45c1      	cmp	r9, r8
 800690c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006910:	f840 3b04 	str.w	r3, [r0], #4
 8006914:	d2e7      	bcs.n	80068e6 <quorem+0xb2>
 8006916:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800691a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800691e:	b922      	cbnz	r2, 800692a <quorem+0xf6>
 8006920:	3b04      	subs	r3, #4
 8006922:	429d      	cmp	r5, r3
 8006924:	461a      	mov	r2, r3
 8006926:	d30a      	bcc.n	800693e <quorem+0x10a>
 8006928:	613c      	str	r4, [r7, #16]
 800692a:	4630      	mov	r0, r6
 800692c:	b003      	add	sp, #12
 800692e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	3b04      	subs	r3, #4
 8006936:	2a00      	cmp	r2, #0
 8006938:	d1cb      	bne.n	80068d2 <quorem+0x9e>
 800693a:	3c01      	subs	r4, #1
 800693c:	e7c6      	b.n	80068cc <quorem+0x98>
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	3b04      	subs	r3, #4
 8006942:	2a00      	cmp	r2, #0
 8006944:	d1f0      	bne.n	8006928 <quorem+0xf4>
 8006946:	3c01      	subs	r4, #1
 8006948:	e7eb      	b.n	8006922 <quorem+0xee>
 800694a:	2000      	movs	r0, #0
 800694c:	e7ee      	b.n	800692c <quorem+0xf8>
	...

08006950 <_dtoa_r>:
 8006950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006954:	4616      	mov	r6, r2
 8006956:	461f      	mov	r7, r3
 8006958:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800695a:	b099      	sub	sp, #100	; 0x64
 800695c:	4605      	mov	r5, r0
 800695e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006962:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006966:	b974      	cbnz	r4, 8006986 <_dtoa_r+0x36>
 8006968:	2010      	movs	r0, #16
 800696a:	f001 f949 	bl	8007c00 <malloc>
 800696e:	4602      	mov	r2, r0
 8006970:	6268      	str	r0, [r5, #36]	; 0x24
 8006972:	b920      	cbnz	r0, 800697e <_dtoa_r+0x2e>
 8006974:	21ea      	movs	r1, #234	; 0xea
 8006976:	4bae      	ldr	r3, [pc, #696]	; (8006c30 <_dtoa_r+0x2e0>)
 8006978:	48ae      	ldr	r0, [pc, #696]	; (8006c34 <_dtoa_r+0x2e4>)
 800697a:	f002 f875 	bl	8008a68 <__assert_func>
 800697e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006982:	6004      	str	r4, [r0, #0]
 8006984:	60c4      	str	r4, [r0, #12]
 8006986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006988:	6819      	ldr	r1, [r3, #0]
 800698a:	b151      	cbz	r1, 80069a2 <_dtoa_r+0x52>
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	2301      	movs	r3, #1
 8006990:	4093      	lsls	r3, r2
 8006992:	604a      	str	r2, [r1, #4]
 8006994:	608b      	str	r3, [r1, #8]
 8006996:	4628      	mov	r0, r5
 8006998:	f001 f9a8 	bl	8007cec <_Bfree>
 800699c:	2200      	movs	r2, #0
 800699e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	1e3b      	subs	r3, r7, #0
 80069a4:	bfaf      	iteee	ge
 80069a6:	2300      	movge	r3, #0
 80069a8:	2201      	movlt	r2, #1
 80069aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069ae:	9305      	strlt	r3, [sp, #20]
 80069b0:	bfa8      	it	ge
 80069b2:	f8c8 3000 	strge.w	r3, [r8]
 80069b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80069ba:	4b9f      	ldr	r3, [pc, #636]	; (8006c38 <_dtoa_r+0x2e8>)
 80069bc:	bfb8      	it	lt
 80069be:	f8c8 2000 	strlt.w	r2, [r8]
 80069c2:	ea33 0309 	bics.w	r3, r3, r9
 80069c6:	d119      	bne.n	80069fc <_dtoa_r+0xac>
 80069c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80069cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069d4:	4333      	orrs	r3, r6
 80069d6:	f000 8580 	beq.w	80074da <_dtoa_r+0xb8a>
 80069da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069dc:	b953      	cbnz	r3, 80069f4 <_dtoa_r+0xa4>
 80069de:	4b97      	ldr	r3, [pc, #604]	; (8006c3c <_dtoa_r+0x2ec>)
 80069e0:	e022      	b.n	8006a28 <_dtoa_r+0xd8>
 80069e2:	4b97      	ldr	r3, [pc, #604]	; (8006c40 <_dtoa_r+0x2f0>)
 80069e4:	9308      	str	r3, [sp, #32]
 80069e6:	3308      	adds	r3, #8
 80069e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	9808      	ldr	r0, [sp, #32]
 80069ee:	b019      	add	sp, #100	; 0x64
 80069f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f4:	4b91      	ldr	r3, [pc, #580]	; (8006c3c <_dtoa_r+0x2ec>)
 80069f6:	9308      	str	r3, [sp, #32]
 80069f8:	3303      	adds	r3, #3
 80069fa:	e7f5      	b.n	80069e8 <_dtoa_r+0x98>
 80069fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006a04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f7f9 ffcc 	bl	80009a8 <__aeabi_dcmpeq>
 8006a10:	4680      	mov	r8, r0
 8006a12:	b158      	cbz	r0, 8006a2c <_dtoa_r+0xdc>
 8006a14:	2301      	movs	r3, #1
 8006a16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 8559 	beq.w	80074d4 <_dtoa_r+0xb84>
 8006a22:	4888      	ldr	r0, [pc, #544]	; (8006c44 <_dtoa_r+0x2f4>)
 8006a24:	6018      	str	r0, [r3, #0]
 8006a26:	1e43      	subs	r3, r0, #1
 8006a28:	9308      	str	r3, [sp, #32]
 8006a2a:	e7df      	b.n	80069ec <_dtoa_r+0x9c>
 8006a2c:	ab16      	add	r3, sp, #88	; 0x58
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	ab17      	add	r3, sp, #92	; 0x5c
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	4628      	mov	r0, r5
 8006a36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a3a:	f001 fd01 	bl	8008440 <__d2b>
 8006a3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006a42:	4682      	mov	sl, r0
 8006a44:	2c00      	cmp	r4, #0
 8006a46:	d07e      	beq.n	8006b46 <_dtoa_r+0x1f6>
 8006a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006a5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006a5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006a62:	2200      	movs	r2, #0
 8006a64:	4b78      	ldr	r3, [pc, #480]	; (8006c48 <_dtoa_r+0x2f8>)
 8006a66:	f7f9 fb7f 	bl	8000168 <__aeabi_dsub>
 8006a6a:	a36b      	add	r3, pc, #428	; (adr r3, 8006c18 <_dtoa_r+0x2c8>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7f9 fd32 	bl	80004d8 <__aeabi_dmul>
 8006a74:	a36a      	add	r3, pc, #424	; (adr r3, 8006c20 <_dtoa_r+0x2d0>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fb77 	bl	800016c <__adddf3>
 8006a7e:	4606      	mov	r6, r0
 8006a80:	4620      	mov	r0, r4
 8006a82:	460f      	mov	r7, r1
 8006a84:	f7f9 fcbe 	bl	8000404 <__aeabi_i2d>
 8006a88:	a367      	add	r3, pc, #412	; (adr r3, 8006c28 <_dtoa_r+0x2d8>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	f7f9 fd23 	bl	80004d8 <__aeabi_dmul>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4630      	mov	r0, r6
 8006a98:	4639      	mov	r1, r7
 8006a9a:	f7f9 fb67 	bl	800016c <__adddf3>
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460f      	mov	r7, r1
 8006aa2:	f7f9 ffc9 	bl	8000a38 <__aeabi_d2iz>
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	4681      	mov	r9, r0
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7f9 ff84 	bl	80009bc <__aeabi_dcmplt>
 8006ab4:	b148      	cbz	r0, 8006aca <_dtoa_r+0x17a>
 8006ab6:	4648      	mov	r0, r9
 8006ab8:	f7f9 fca4 	bl	8000404 <__aeabi_i2d>
 8006abc:	4632      	mov	r2, r6
 8006abe:	463b      	mov	r3, r7
 8006ac0:	f7f9 ff72 	bl	80009a8 <__aeabi_dcmpeq>
 8006ac4:	b908      	cbnz	r0, 8006aca <_dtoa_r+0x17a>
 8006ac6:	f109 39ff 	add.w	r9, r9, #4294967295
 8006aca:	f1b9 0f16 	cmp.w	r9, #22
 8006ace:	d857      	bhi.n	8006b80 <_dtoa_r+0x230>
 8006ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ad4:	4b5d      	ldr	r3, [pc, #372]	; (8006c4c <_dtoa_r+0x2fc>)
 8006ad6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 ff6d 	bl	80009bc <__aeabi_dcmplt>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d04e      	beq.n	8006b84 <_dtoa_r+0x234>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006aec:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006af0:	1b1c      	subs	r4, r3, r4
 8006af2:	1e63      	subs	r3, r4, #1
 8006af4:	9309      	str	r3, [sp, #36]	; 0x24
 8006af6:	bf49      	itett	mi
 8006af8:	f1c4 0301 	rsbmi	r3, r4, #1
 8006afc:	2300      	movpl	r3, #0
 8006afe:	9306      	strmi	r3, [sp, #24]
 8006b00:	2300      	movmi	r3, #0
 8006b02:	bf54      	ite	pl
 8006b04:	9306      	strpl	r3, [sp, #24]
 8006b06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006b08:	f1b9 0f00 	cmp.w	r9, #0
 8006b0c:	db3c      	blt.n	8006b88 <_dtoa_r+0x238>
 8006b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b10:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b14:	444b      	add	r3, r9
 8006b16:	9309      	str	r3, [sp, #36]	; 0x24
 8006b18:	2300      	movs	r3, #0
 8006b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b1e:	2b09      	cmp	r3, #9
 8006b20:	d86c      	bhi.n	8006bfc <_dtoa_r+0x2ac>
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	bfc4      	itt	gt
 8006b26:	3b04      	subgt	r3, #4
 8006b28:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006b2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b2c:	bfc8      	it	gt
 8006b2e:	2400      	movgt	r4, #0
 8006b30:	f1a3 0302 	sub.w	r3, r3, #2
 8006b34:	bfd8      	it	le
 8006b36:	2401      	movle	r4, #1
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	f200 808b 	bhi.w	8006c54 <_dtoa_r+0x304>
 8006b3e:	e8df f003 	tbb	[pc, r3]
 8006b42:	4f2d      	.short	0x4f2d
 8006b44:	5b4d      	.short	0x5b4d
 8006b46:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006b4a:	441c      	add	r4, r3
 8006b4c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	bfc3      	ittte	gt
 8006b54:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b58:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006b5c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b60:	f1c3 0320 	rsble	r3, r3, #32
 8006b64:	bfc6      	itte	gt
 8006b66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b6a:	4318      	orrgt	r0, r3
 8006b6c:	fa06 f003 	lslle.w	r0, r6, r3
 8006b70:	f7f9 fc38 	bl	80003e4 <__aeabi_ui2d>
 8006b74:	2301      	movs	r3, #1
 8006b76:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006b7a:	3c01      	subs	r4, #1
 8006b7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b7e:	e770      	b.n	8006a62 <_dtoa_r+0x112>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e7b3      	b.n	8006aec <_dtoa_r+0x19c>
 8006b84:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b86:	e7b2      	b.n	8006aee <_dtoa_r+0x19e>
 8006b88:	9b06      	ldr	r3, [sp, #24]
 8006b8a:	eba3 0309 	sub.w	r3, r3, r9
 8006b8e:	9306      	str	r3, [sp, #24]
 8006b90:	f1c9 0300 	rsb	r3, r9, #0
 8006b94:	930a      	str	r3, [sp, #40]	; 0x28
 8006b96:	2300      	movs	r3, #0
 8006b98:	930e      	str	r3, [sp, #56]	; 0x38
 8006b9a:	e7bf      	b.n	8006b1c <_dtoa_r+0x1cc>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ba0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	dc59      	bgt.n	8006c5a <_dtoa_r+0x30a>
 8006ba6:	f04f 0b01 	mov.w	fp, #1
 8006baa:	465b      	mov	r3, fp
 8006bac:	f8cd b008 	str.w	fp, [sp, #8]
 8006bb0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006bb8:	6042      	str	r2, [r0, #4]
 8006bba:	2204      	movs	r2, #4
 8006bbc:	f102 0614 	add.w	r6, r2, #20
 8006bc0:	429e      	cmp	r6, r3
 8006bc2:	6841      	ldr	r1, [r0, #4]
 8006bc4:	d94f      	bls.n	8006c66 <_dtoa_r+0x316>
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f001 f850 	bl	8007c6c <_Balloc>
 8006bcc:	9008      	str	r0, [sp, #32]
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d14d      	bne.n	8006c6e <_dtoa_r+0x31e>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bd8:	4b1d      	ldr	r3, [pc, #116]	; (8006c50 <_dtoa_r+0x300>)
 8006bda:	e6cd      	b.n	8006978 <_dtoa_r+0x28>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e7de      	b.n	8006b9e <_dtoa_r+0x24e>
 8006be0:	2300      	movs	r3, #0
 8006be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006be4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006be6:	eb09 0b03 	add.w	fp, r9, r3
 8006bea:	f10b 0301 	add.w	r3, fp, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	9302      	str	r3, [sp, #8]
 8006bf2:	bfb8      	it	lt
 8006bf4:	2301      	movlt	r3, #1
 8006bf6:	e7dd      	b.n	8006bb4 <_dtoa_r+0x264>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e7f2      	b.n	8006be2 <_dtoa_r+0x292>
 8006bfc:	2401      	movs	r4, #1
 8006bfe:	2300      	movs	r3, #0
 8006c00:	940b      	str	r4, [sp, #44]	; 0x2c
 8006c02:	9322      	str	r3, [sp, #136]	; 0x88
 8006c04:	f04f 3bff 	mov.w	fp, #4294967295
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2312      	movs	r3, #18
 8006c0c:	f8cd b008 	str.w	fp, [sp, #8]
 8006c10:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c12:	e7cf      	b.n	8006bb4 <_dtoa_r+0x264>
 8006c14:	f3af 8000 	nop.w
 8006c18:	636f4361 	.word	0x636f4361
 8006c1c:	3fd287a7 	.word	0x3fd287a7
 8006c20:	8b60c8b3 	.word	0x8b60c8b3
 8006c24:	3fc68a28 	.word	0x3fc68a28
 8006c28:	509f79fb 	.word	0x509f79fb
 8006c2c:	3fd34413 	.word	0x3fd34413
 8006c30:	0800ac5e 	.word	0x0800ac5e
 8006c34:	0800ac75 	.word	0x0800ac75
 8006c38:	7ff00000 	.word	0x7ff00000
 8006c3c:	0800ac5a 	.word	0x0800ac5a
 8006c40:	0800ac51 	.word	0x0800ac51
 8006c44:	0800aad5 	.word	0x0800aad5
 8006c48:	3ff80000 	.word	0x3ff80000
 8006c4c:	0800adf0 	.word	0x0800adf0
 8006c50:	0800acd4 	.word	0x0800acd4
 8006c54:	2301      	movs	r3, #1
 8006c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c58:	e7d4      	b.n	8006c04 <_dtoa_r+0x2b4>
 8006c5a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006c5e:	465b      	mov	r3, fp
 8006c60:	f8cd b008 	str.w	fp, [sp, #8]
 8006c64:	e7a6      	b.n	8006bb4 <_dtoa_r+0x264>
 8006c66:	3101      	adds	r1, #1
 8006c68:	6041      	str	r1, [r0, #4]
 8006c6a:	0052      	lsls	r2, r2, #1
 8006c6c:	e7a6      	b.n	8006bbc <_dtoa_r+0x26c>
 8006c6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c70:	9a08      	ldr	r2, [sp, #32]
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	9b02      	ldr	r3, [sp, #8]
 8006c76:	2b0e      	cmp	r3, #14
 8006c78:	f200 80a8 	bhi.w	8006dcc <_dtoa_r+0x47c>
 8006c7c:	2c00      	cmp	r4, #0
 8006c7e:	f000 80a5 	beq.w	8006dcc <_dtoa_r+0x47c>
 8006c82:	f1b9 0f00 	cmp.w	r9, #0
 8006c86:	dd34      	ble.n	8006cf2 <_dtoa_r+0x3a2>
 8006c88:	4a9a      	ldr	r2, [pc, #616]	; (8006ef4 <_dtoa_r+0x5a4>)
 8006c8a:	f009 030f 	and.w	r3, r9, #15
 8006c8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c92:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006c96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c9e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006ca2:	d016      	beq.n	8006cd2 <_dtoa_r+0x382>
 8006ca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ca8:	4b93      	ldr	r3, [pc, #588]	; (8006ef8 <_dtoa_r+0x5a8>)
 8006caa:	2703      	movs	r7, #3
 8006cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cb0:	f7f9 fd3c 	bl	800072c <__aeabi_ddiv>
 8006cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cb8:	f004 040f 	and.w	r4, r4, #15
 8006cbc:	4e8e      	ldr	r6, [pc, #568]	; (8006ef8 <_dtoa_r+0x5a8>)
 8006cbe:	b954      	cbnz	r4, 8006cd6 <_dtoa_r+0x386>
 8006cc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006cc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cc8:	f7f9 fd30 	bl	800072c <__aeabi_ddiv>
 8006ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cd0:	e029      	b.n	8006d26 <_dtoa_r+0x3d6>
 8006cd2:	2702      	movs	r7, #2
 8006cd4:	e7f2      	b.n	8006cbc <_dtoa_r+0x36c>
 8006cd6:	07e1      	lsls	r1, r4, #31
 8006cd8:	d508      	bpl.n	8006cec <_dtoa_r+0x39c>
 8006cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ce2:	f7f9 fbf9 	bl	80004d8 <__aeabi_dmul>
 8006ce6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cea:	3701      	adds	r7, #1
 8006cec:	1064      	asrs	r4, r4, #1
 8006cee:	3608      	adds	r6, #8
 8006cf0:	e7e5      	b.n	8006cbe <_dtoa_r+0x36e>
 8006cf2:	f000 80a5 	beq.w	8006e40 <_dtoa_r+0x4f0>
 8006cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cfa:	f1c9 0400 	rsb	r4, r9, #0
 8006cfe:	4b7d      	ldr	r3, [pc, #500]	; (8006ef4 <_dtoa_r+0x5a4>)
 8006d00:	f004 020f 	and.w	r2, r4, #15
 8006d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fbe4 	bl	80004d8 <__aeabi_dmul>
 8006d10:	2702      	movs	r7, #2
 8006d12:	2300      	movs	r3, #0
 8006d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d18:	4e77      	ldr	r6, [pc, #476]	; (8006ef8 <_dtoa_r+0x5a8>)
 8006d1a:	1124      	asrs	r4, r4, #4
 8006d1c:	2c00      	cmp	r4, #0
 8006d1e:	f040 8084 	bne.w	8006e2a <_dtoa_r+0x4da>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1d2      	bne.n	8006ccc <_dtoa_r+0x37c>
 8006d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 808b 	beq.w	8006e44 <_dtoa_r+0x4f4>
 8006d2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006d32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006d36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	4b6f      	ldr	r3, [pc, #444]	; (8006efc <_dtoa_r+0x5ac>)
 8006d3e:	f7f9 fe3d 	bl	80009bc <__aeabi_dcmplt>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d07e      	beq.n	8006e44 <_dtoa_r+0x4f4>
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d07b      	beq.n	8006e44 <_dtoa_r+0x4f4>
 8006d4c:	f1bb 0f00 	cmp.w	fp, #0
 8006d50:	dd38      	ble.n	8006dc4 <_dtoa_r+0x474>
 8006d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d56:	2200      	movs	r2, #0
 8006d58:	4b69      	ldr	r3, [pc, #420]	; (8006f00 <_dtoa_r+0x5b0>)
 8006d5a:	f7f9 fbbd 	bl	80004d8 <__aeabi_dmul>
 8006d5e:	465c      	mov	r4, fp
 8006d60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d64:	f109 38ff 	add.w	r8, r9, #4294967295
 8006d68:	3701      	adds	r7, #1
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	f7f9 fb4a 	bl	8000404 <__aeabi_i2d>
 8006d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d74:	f7f9 fbb0 	bl	80004d8 <__aeabi_dmul>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4b62      	ldr	r3, [pc, #392]	; (8006f04 <_dtoa_r+0x5b4>)
 8006d7c:	f7f9 f9f6 	bl	800016c <__adddf3>
 8006d80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006d84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d88:	9611      	str	r6, [sp, #68]	; 0x44
 8006d8a:	2c00      	cmp	r4, #0
 8006d8c:	d15d      	bne.n	8006e4a <_dtoa_r+0x4fa>
 8006d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d92:	2200      	movs	r2, #0
 8006d94:	4b5c      	ldr	r3, [pc, #368]	; (8006f08 <_dtoa_r+0x5b8>)
 8006d96:	f7f9 f9e7 	bl	8000168 <__aeabi_dsub>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006da2:	4633      	mov	r3, r6
 8006da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006da6:	f7f9 fe27 	bl	80009f8 <__aeabi_dcmpgt>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	f040 829e 	bne.w	80072ec <_dtoa_r+0x99c>
 8006db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006db6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006dba:	f7f9 fdff 	bl	80009bc <__aeabi_dcmplt>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	f040 8292 	bne.w	80072e8 <_dtoa_r+0x998>
 8006dc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006dc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006dcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f2c0 8153 	blt.w	800707a <_dtoa_r+0x72a>
 8006dd4:	f1b9 0f0e 	cmp.w	r9, #14
 8006dd8:	f300 814f 	bgt.w	800707a <_dtoa_r+0x72a>
 8006ddc:	4b45      	ldr	r3, [pc, #276]	; (8006ef4 <_dtoa_r+0x5a4>)
 8006dde:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006de2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006de6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006dea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f280 80db 	bge.w	8006fa8 <_dtoa_r+0x658>
 8006df2:	9b02      	ldr	r3, [sp, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f300 80d7 	bgt.w	8006fa8 <_dtoa_r+0x658>
 8006dfa:	f040 8274 	bne.w	80072e6 <_dtoa_r+0x996>
 8006dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e02:	2200      	movs	r2, #0
 8006e04:	4b40      	ldr	r3, [pc, #256]	; (8006f08 <_dtoa_r+0x5b8>)
 8006e06:	f7f9 fb67 	bl	80004d8 <__aeabi_dmul>
 8006e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e0e:	f7f9 fde9 	bl	80009e4 <__aeabi_dcmpge>
 8006e12:	9c02      	ldr	r4, [sp, #8]
 8006e14:	4626      	mov	r6, r4
 8006e16:	2800      	cmp	r0, #0
 8006e18:	f040 824a 	bne.w	80072b0 <_dtoa_r+0x960>
 8006e1c:	2331      	movs	r3, #49	; 0x31
 8006e1e:	9f08      	ldr	r7, [sp, #32]
 8006e20:	f109 0901 	add.w	r9, r9, #1
 8006e24:	f807 3b01 	strb.w	r3, [r7], #1
 8006e28:	e246      	b.n	80072b8 <_dtoa_r+0x968>
 8006e2a:	07e2      	lsls	r2, r4, #31
 8006e2c:	d505      	bpl.n	8006e3a <_dtoa_r+0x4ea>
 8006e2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e32:	f7f9 fb51 	bl	80004d8 <__aeabi_dmul>
 8006e36:	2301      	movs	r3, #1
 8006e38:	3701      	adds	r7, #1
 8006e3a:	1064      	asrs	r4, r4, #1
 8006e3c:	3608      	adds	r6, #8
 8006e3e:	e76d      	b.n	8006d1c <_dtoa_r+0x3cc>
 8006e40:	2702      	movs	r7, #2
 8006e42:	e770      	b.n	8006d26 <_dtoa_r+0x3d6>
 8006e44:	46c8      	mov	r8, r9
 8006e46:	9c02      	ldr	r4, [sp, #8]
 8006e48:	e78f      	b.n	8006d6a <_dtoa_r+0x41a>
 8006e4a:	9908      	ldr	r1, [sp, #32]
 8006e4c:	4b29      	ldr	r3, [pc, #164]	; (8006ef4 <_dtoa_r+0x5a4>)
 8006e4e:	4421      	add	r1, r4
 8006e50:	9112      	str	r1, [sp, #72]	; 0x48
 8006e52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006e5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e60:	2900      	cmp	r1, #0
 8006e62:	d055      	beq.n	8006f10 <_dtoa_r+0x5c0>
 8006e64:	2000      	movs	r0, #0
 8006e66:	4929      	ldr	r1, [pc, #164]	; (8006f0c <_dtoa_r+0x5bc>)
 8006e68:	f7f9 fc60 	bl	800072c <__aeabi_ddiv>
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	4632      	mov	r2, r6
 8006e70:	f7f9 f97a 	bl	8000168 <__aeabi_dsub>
 8006e74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e78:	9f08      	ldr	r7, [sp, #32]
 8006e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e7e:	f7f9 fddb 	bl	8000a38 <__aeabi_d2iz>
 8006e82:	4604      	mov	r4, r0
 8006e84:	f7f9 fabe 	bl	8000404 <__aeabi_i2d>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e90:	f7f9 f96a 	bl	8000168 <__aeabi_dsub>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	3430      	adds	r4, #48	; 0x30
 8006e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ea2:	f807 4b01 	strb.w	r4, [r7], #1
 8006ea6:	f7f9 fd89 	bl	80009bc <__aeabi_dcmplt>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d174      	bne.n	8006f98 <_dtoa_r+0x648>
 8006eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	4911      	ldr	r1, [pc, #68]	; (8006efc <_dtoa_r+0x5ac>)
 8006eb6:	f7f9 f957 	bl	8000168 <__aeabi_dsub>
 8006eba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ebe:	f7f9 fd7d 	bl	80009bc <__aeabi_dcmplt>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	f040 80b6 	bne.w	8007034 <_dtoa_r+0x6e4>
 8006ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006eca:	429f      	cmp	r7, r3
 8006ecc:	f43f af7a 	beq.w	8006dc4 <_dtoa_r+0x474>
 8006ed0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <_dtoa_r+0x5b0>)
 8006ed8:	f7f9 fafe 	bl	80004d8 <__aeabi_dmul>
 8006edc:	2200      	movs	r2, #0
 8006ede:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ee6:	4b06      	ldr	r3, [pc, #24]	; (8006f00 <_dtoa_r+0x5b0>)
 8006ee8:	f7f9 faf6 	bl	80004d8 <__aeabi_dmul>
 8006eec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ef0:	e7c3      	b.n	8006e7a <_dtoa_r+0x52a>
 8006ef2:	bf00      	nop
 8006ef4:	0800adf0 	.word	0x0800adf0
 8006ef8:	0800adc8 	.word	0x0800adc8
 8006efc:	3ff00000 	.word	0x3ff00000
 8006f00:	40240000 	.word	0x40240000
 8006f04:	401c0000 	.word	0x401c0000
 8006f08:	40140000 	.word	0x40140000
 8006f0c:	3fe00000 	.word	0x3fe00000
 8006f10:	4630      	mov	r0, r6
 8006f12:	4639      	mov	r1, r7
 8006f14:	f7f9 fae0 	bl	80004d8 <__aeabi_dmul>
 8006f18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f1e:	9c08      	ldr	r4, [sp, #32]
 8006f20:	9314      	str	r3, [sp, #80]	; 0x50
 8006f22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f26:	f7f9 fd87 	bl	8000a38 <__aeabi_d2iz>
 8006f2a:	9015      	str	r0, [sp, #84]	; 0x54
 8006f2c:	f7f9 fa6a 	bl	8000404 <__aeabi_i2d>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f38:	f7f9 f916 	bl	8000168 <__aeabi_dsub>
 8006f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f3e:	4606      	mov	r6, r0
 8006f40:	3330      	adds	r3, #48	; 0x30
 8006f42:	f804 3b01 	strb.w	r3, [r4], #1
 8006f46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f48:	460f      	mov	r7, r1
 8006f4a:	429c      	cmp	r4, r3
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	d124      	bne.n	8006f9c <_dtoa_r+0x64c>
 8006f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f56:	4bb3      	ldr	r3, [pc, #716]	; (8007224 <_dtoa_r+0x8d4>)
 8006f58:	f7f9 f908 	bl	800016c <__adddf3>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4630      	mov	r0, r6
 8006f62:	4639      	mov	r1, r7
 8006f64:	f7f9 fd48 	bl	80009f8 <__aeabi_dcmpgt>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d162      	bne.n	8007032 <_dtoa_r+0x6e2>
 8006f6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f70:	2000      	movs	r0, #0
 8006f72:	49ac      	ldr	r1, [pc, #688]	; (8007224 <_dtoa_r+0x8d4>)
 8006f74:	f7f9 f8f8 	bl	8000168 <__aeabi_dsub>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	4639      	mov	r1, r7
 8006f80:	f7f9 fd1c 	bl	80009bc <__aeabi_dcmplt>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	f43f af1d 	beq.w	8006dc4 <_dtoa_r+0x474>
 8006f8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006f8c:	1e7b      	subs	r3, r7, #1
 8006f8e:	9314      	str	r3, [sp, #80]	; 0x50
 8006f90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006f94:	2b30      	cmp	r3, #48	; 0x30
 8006f96:	d0f8      	beq.n	8006f8a <_dtoa_r+0x63a>
 8006f98:	46c1      	mov	r9, r8
 8006f9a:	e03a      	b.n	8007012 <_dtoa_r+0x6c2>
 8006f9c:	4ba2      	ldr	r3, [pc, #648]	; (8007228 <_dtoa_r+0x8d8>)
 8006f9e:	f7f9 fa9b 	bl	80004d8 <__aeabi_dmul>
 8006fa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fa6:	e7bc      	b.n	8006f22 <_dtoa_r+0x5d2>
 8006fa8:	9f08      	ldr	r7, [sp, #32]
 8006faa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fb2:	f7f9 fbbb 	bl	800072c <__aeabi_ddiv>
 8006fb6:	f7f9 fd3f 	bl	8000a38 <__aeabi_d2iz>
 8006fba:	4604      	mov	r4, r0
 8006fbc:	f7f9 fa22 	bl	8000404 <__aeabi_i2d>
 8006fc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fc4:	f7f9 fa88 	bl	80004d8 <__aeabi_dmul>
 8006fc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4602      	mov	r2, r0
 8006fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fd4:	f7f9 f8c8 	bl	8000168 <__aeabi_dsub>
 8006fd8:	f807 6b01 	strb.w	r6, [r7], #1
 8006fdc:	9e08      	ldr	r6, [sp, #32]
 8006fde:	9b02      	ldr	r3, [sp, #8]
 8006fe0:	1bbe      	subs	r6, r7, r6
 8006fe2:	42b3      	cmp	r3, r6
 8006fe4:	d13a      	bne.n	800705c <_dtoa_r+0x70c>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	f7f9 f8bf 	bl	800016c <__adddf3>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ffa:	f7f9 fcfd 	bl	80009f8 <__aeabi_dcmpgt>
 8006ffe:	bb58      	cbnz	r0, 8007058 <_dtoa_r+0x708>
 8007000:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007008:	f7f9 fcce 	bl	80009a8 <__aeabi_dcmpeq>
 800700c:	b108      	cbz	r0, 8007012 <_dtoa_r+0x6c2>
 800700e:	07e1      	lsls	r1, r4, #31
 8007010:	d422      	bmi.n	8007058 <_dtoa_r+0x708>
 8007012:	4628      	mov	r0, r5
 8007014:	4651      	mov	r1, sl
 8007016:	f000 fe69 	bl	8007cec <_Bfree>
 800701a:	2300      	movs	r3, #0
 800701c:	703b      	strb	r3, [r7, #0]
 800701e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007020:	f109 0001 	add.w	r0, r9, #1
 8007024:	6018      	str	r0, [r3, #0]
 8007026:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007028:	2b00      	cmp	r3, #0
 800702a:	f43f acdf 	beq.w	80069ec <_dtoa_r+0x9c>
 800702e:	601f      	str	r7, [r3, #0]
 8007030:	e4dc      	b.n	80069ec <_dtoa_r+0x9c>
 8007032:	4627      	mov	r7, r4
 8007034:	463b      	mov	r3, r7
 8007036:	461f      	mov	r7, r3
 8007038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800703c:	2a39      	cmp	r2, #57	; 0x39
 800703e:	d107      	bne.n	8007050 <_dtoa_r+0x700>
 8007040:	9a08      	ldr	r2, [sp, #32]
 8007042:	429a      	cmp	r2, r3
 8007044:	d1f7      	bne.n	8007036 <_dtoa_r+0x6e6>
 8007046:	2230      	movs	r2, #48	; 0x30
 8007048:	9908      	ldr	r1, [sp, #32]
 800704a:	f108 0801 	add.w	r8, r8, #1
 800704e:	700a      	strb	r2, [r1, #0]
 8007050:	781a      	ldrb	r2, [r3, #0]
 8007052:	3201      	adds	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e79f      	b.n	8006f98 <_dtoa_r+0x648>
 8007058:	46c8      	mov	r8, r9
 800705a:	e7eb      	b.n	8007034 <_dtoa_r+0x6e4>
 800705c:	2200      	movs	r2, #0
 800705e:	4b72      	ldr	r3, [pc, #456]	; (8007228 <_dtoa_r+0x8d8>)
 8007060:	f7f9 fa3a 	bl	80004d8 <__aeabi_dmul>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800706c:	2200      	movs	r2, #0
 800706e:	2300      	movs	r3, #0
 8007070:	f7f9 fc9a 	bl	80009a8 <__aeabi_dcmpeq>
 8007074:	2800      	cmp	r0, #0
 8007076:	d098      	beq.n	8006faa <_dtoa_r+0x65a>
 8007078:	e7cb      	b.n	8007012 <_dtoa_r+0x6c2>
 800707a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800707c:	2a00      	cmp	r2, #0
 800707e:	f000 80cd 	beq.w	800721c <_dtoa_r+0x8cc>
 8007082:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007084:	2a01      	cmp	r2, #1
 8007086:	f300 80af 	bgt.w	80071e8 <_dtoa_r+0x898>
 800708a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800708c:	2a00      	cmp	r2, #0
 800708e:	f000 80a7 	beq.w	80071e0 <_dtoa_r+0x890>
 8007092:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007096:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007098:	9f06      	ldr	r7, [sp, #24]
 800709a:	9a06      	ldr	r2, [sp, #24]
 800709c:	2101      	movs	r1, #1
 800709e:	441a      	add	r2, r3
 80070a0:	9206      	str	r2, [sp, #24]
 80070a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a4:	4628      	mov	r0, r5
 80070a6:	441a      	add	r2, r3
 80070a8:	9209      	str	r2, [sp, #36]	; 0x24
 80070aa:	f000 ff23 	bl	8007ef4 <__i2b>
 80070ae:	4606      	mov	r6, r0
 80070b0:	2f00      	cmp	r7, #0
 80070b2:	dd0c      	ble.n	80070ce <_dtoa_r+0x77e>
 80070b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	dd09      	ble.n	80070ce <_dtoa_r+0x77e>
 80070ba:	42bb      	cmp	r3, r7
 80070bc:	bfa8      	it	ge
 80070be:	463b      	movge	r3, r7
 80070c0:	9a06      	ldr	r2, [sp, #24]
 80070c2:	1aff      	subs	r7, r7, r3
 80070c4:	1ad2      	subs	r2, r2, r3
 80070c6:	9206      	str	r2, [sp, #24]
 80070c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	9309      	str	r3, [sp, #36]	; 0x24
 80070ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d0:	b1f3      	cbz	r3, 8007110 <_dtoa_r+0x7c0>
 80070d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 80a9 	beq.w	800722c <_dtoa_r+0x8dc>
 80070da:	2c00      	cmp	r4, #0
 80070dc:	dd10      	ble.n	8007100 <_dtoa_r+0x7b0>
 80070de:	4631      	mov	r1, r6
 80070e0:	4622      	mov	r2, r4
 80070e2:	4628      	mov	r0, r5
 80070e4:	f000 ffc0 	bl	8008068 <__pow5mult>
 80070e8:	4652      	mov	r2, sl
 80070ea:	4601      	mov	r1, r0
 80070ec:	4606      	mov	r6, r0
 80070ee:	4628      	mov	r0, r5
 80070f0:	f000 ff16 	bl	8007f20 <__multiply>
 80070f4:	4680      	mov	r8, r0
 80070f6:	4651      	mov	r1, sl
 80070f8:	4628      	mov	r0, r5
 80070fa:	f000 fdf7 	bl	8007cec <_Bfree>
 80070fe:	46c2      	mov	sl, r8
 8007100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007102:	1b1a      	subs	r2, r3, r4
 8007104:	d004      	beq.n	8007110 <_dtoa_r+0x7c0>
 8007106:	4651      	mov	r1, sl
 8007108:	4628      	mov	r0, r5
 800710a:	f000 ffad 	bl	8008068 <__pow5mult>
 800710e:	4682      	mov	sl, r0
 8007110:	2101      	movs	r1, #1
 8007112:	4628      	mov	r0, r5
 8007114:	f000 feee 	bl	8007ef4 <__i2b>
 8007118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800711a:	4604      	mov	r4, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	f340 8087 	ble.w	8007230 <_dtoa_r+0x8e0>
 8007122:	461a      	mov	r2, r3
 8007124:	4601      	mov	r1, r0
 8007126:	4628      	mov	r0, r5
 8007128:	f000 ff9e 	bl	8008068 <__pow5mult>
 800712c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800712e:	4604      	mov	r4, r0
 8007130:	2b01      	cmp	r3, #1
 8007132:	f340 8080 	ble.w	8007236 <_dtoa_r+0x8e6>
 8007136:	f04f 0800 	mov.w	r8, #0
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007140:	6918      	ldr	r0, [r3, #16]
 8007142:	f000 fe89 	bl	8007e58 <__hi0bits>
 8007146:	f1c0 0020 	rsb	r0, r0, #32
 800714a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714c:	4418      	add	r0, r3
 800714e:	f010 001f 	ands.w	r0, r0, #31
 8007152:	f000 8092 	beq.w	800727a <_dtoa_r+0x92a>
 8007156:	f1c0 0320 	rsb	r3, r0, #32
 800715a:	2b04      	cmp	r3, #4
 800715c:	f340 808a 	ble.w	8007274 <_dtoa_r+0x924>
 8007160:	f1c0 001c 	rsb	r0, r0, #28
 8007164:	9b06      	ldr	r3, [sp, #24]
 8007166:	4407      	add	r7, r0
 8007168:	4403      	add	r3, r0
 800716a:	9306      	str	r3, [sp, #24]
 800716c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716e:	4403      	add	r3, r0
 8007170:	9309      	str	r3, [sp, #36]	; 0x24
 8007172:	9b06      	ldr	r3, [sp, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	dd05      	ble.n	8007184 <_dtoa_r+0x834>
 8007178:	4651      	mov	r1, sl
 800717a:	461a      	mov	r2, r3
 800717c:	4628      	mov	r0, r5
 800717e:	f000 ffcd 	bl	800811c <__lshift>
 8007182:	4682      	mov	sl, r0
 8007184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	dd05      	ble.n	8007196 <_dtoa_r+0x846>
 800718a:	4621      	mov	r1, r4
 800718c:	461a      	mov	r2, r3
 800718e:	4628      	mov	r0, r5
 8007190:	f000 ffc4 	bl	800811c <__lshift>
 8007194:	4604      	mov	r4, r0
 8007196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d070      	beq.n	800727e <_dtoa_r+0x92e>
 800719c:	4621      	mov	r1, r4
 800719e:	4650      	mov	r0, sl
 80071a0:	f001 f828 	bl	80081f4 <__mcmp>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	da6a      	bge.n	800727e <_dtoa_r+0x92e>
 80071a8:	2300      	movs	r3, #0
 80071aa:	4651      	mov	r1, sl
 80071ac:	220a      	movs	r2, #10
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 fdbe 	bl	8007d30 <__multadd>
 80071b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b6:	4682      	mov	sl, r0
 80071b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8193 	beq.w	80074e8 <_dtoa_r+0xb98>
 80071c2:	4631      	mov	r1, r6
 80071c4:	2300      	movs	r3, #0
 80071c6:	220a      	movs	r2, #10
 80071c8:	4628      	mov	r0, r5
 80071ca:	f000 fdb1 	bl	8007d30 <__multadd>
 80071ce:	f1bb 0f00 	cmp.w	fp, #0
 80071d2:	4606      	mov	r6, r0
 80071d4:	f300 8093 	bgt.w	80072fe <_dtoa_r+0x9ae>
 80071d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071da:	2b02      	cmp	r3, #2
 80071dc:	dc57      	bgt.n	800728e <_dtoa_r+0x93e>
 80071de:	e08e      	b.n	80072fe <_dtoa_r+0x9ae>
 80071e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071e6:	e756      	b.n	8007096 <_dtoa_r+0x746>
 80071e8:	9b02      	ldr	r3, [sp, #8]
 80071ea:	1e5c      	subs	r4, r3, #1
 80071ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	bfb7      	itett	lt
 80071f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80071f4:	1b1c      	subge	r4, r3, r4
 80071f6:	1ae2      	sublt	r2, r4, r3
 80071f8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80071fa:	bfbe      	ittt	lt
 80071fc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80071fe:	189b      	addlt	r3, r3, r2
 8007200:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007202:	9b02      	ldr	r3, [sp, #8]
 8007204:	bfb8      	it	lt
 8007206:	2400      	movlt	r4, #0
 8007208:	2b00      	cmp	r3, #0
 800720a:	bfbb      	ittet	lt
 800720c:	9b06      	ldrlt	r3, [sp, #24]
 800720e:	9a02      	ldrlt	r2, [sp, #8]
 8007210:	9f06      	ldrge	r7, [sp, #24]
 8007212:	1a9f      	sublt	r7, r3, r2
 8007214:	bfac      	ite	ge
 8007216:	9b02      	ldrge	r3, [sp, #8]
 8007218:	2300      	movlt	r3, #0
 800721a:	e73e      	b.n	800709a <_dtoa_r+0x74a>
 800721c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800721e:	9f06      	ldr	r7, [sp, #24]
 8007220:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007222:	e745      	b.n	80070b0 <_dtoa_r+0x760>
 8007224:	3fe00000 	.word	0x3fe00000
 8007228:	40240000 	.word	0x40240000
 800722c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800722e:	e76a      	b.n	8007106 <_dtoa_r+0x7b6>
 8007230:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007232:	2b01      	cmp	r3, #1
 8007234:	dc19      	bgt.n	800726a <_dtoa_r+0x91a>
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	b9bb      	cbnz	r3, 800726a <_dtoa_r+0x91a>
 800723a:	9b05      	ldr	r3, [sp, #20]
 800723c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007240:	b99b      	cbnz	r3, 800726a <_dtoa_r+0x91a>
 8007242:	9b05      	ldr	r3, [sp, #20]
 8007244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007248:	0d1b      	lsrs	r3, r3, #20
 800724a:	051b      	lsls	r3, r3, #20
 800724c:	b183      	cbz	r3, 8007270 <_dtoa_r+0x920>
 800724e:	f04f 0801 	mov.w	r8, #1
 8007252:	9b06      	ldr	r3, [sp, #24]
 8007254:	3301      	adds	r3, #1
 8007256:	9306      	str	r3, [sp, #24]
 8007258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800725a:	3301      	adds	r3, #1
 800725c:	9309      	str	r3, [sp, #36]	; 0x24
 800725e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007260:	2b00      	cmp	r3, #0
 8007262:	f47f af6a 	bne.w	800713a <_dtoa_r+0x7ea>
 8007266:	2001      	movs	r0, #1
 8007268:	e76f      	b.n	800714a <_dtoa_r+0x7fa>
 800726a:	f04f 0800 	mov.w	r8, #0
 800726e:	e7f6      	b.n	800725e <_dtoa_r+0x90e>
 8007270:	4698      	mov	r8, r3
 8007272:	e7f4      	b.n	800725e <_dtoa_r+0x90e>
 8007274:	f43f af7d 	beq.w	8007172 <_dtoa_r+0x822>
 8007278:	4618      	mov	r0, r3
 800727a:	301c      	adds	r0, #28
 800727c:	e772      	b.n	8007164 <_dtoa_r+0x814>
 800727e:	9b02      	ldr	r3, [sp, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	dc36      	bgt.n	80072f2 <_dtoa_r+0x9a2>
 8007284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007286:	2b02      	cmp	r3, #2
 8007288:	dd33      	ble.n	80072f2 <_dtoa_r+0x9a2>
 800728a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800728e:	f1bb 0f00 	cmp.w	fp, #0
 8007292:	d10d      	bne.n	80072b0 <_dtoa_r+0x960>
 8007294:	4621      	mov	r1, r4
 8007296:	465b      	mov	r3, fp
 8007298:	2205      	movs	r2, #5
 800729a:	4628      	mov	r0, r5
 800729c:	f000 fd48 	bl	8007d30 <__multadd>
 80072a0:	4601      	mov	r1, r0
 80072a2:	4604      	mov	r4, r0
 80072a4:	4650      	mov	r0, sl
 80072a6:	f000 ffa5 	bl	80081f4 <__mcmp>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	f73f adb6 	bgt.w	8006e1c <_dtoa_r+0x4cc>
 80072b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072b2:	9f08      	ldr	r7, [sp, #32]
 80072b4:	ea6f 0903 	mvn.w	r9, r3
 80072b8:	f04f 0800 	mov.w	r8, #0
 80072bc:	4621      	mov	r1, r4
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 fd14 	bl	8007cec <_Bfree>
 80072c4:	2e00      	cmp	r6, #0
 80072c6:	f43f aea4 	beq.w	8007012 <_dtoa_r+0x6c2>
 80072ca:	f1b8 0f00 	cmp.w	r8, #0
 80072ce:	d005      	beq.n	80072dc <_dtoa_r+0x98c>
 80072d0:	45b0      	cmp	r8, r6
 80072d2:	d003      	beq.n	80072dc <_dtoa_r+0x98c>
 80072d4:	4641      	mov	r1, r8
 80072d6:	4628      	mov	r0, r5
 80072d8:	f000 fd08 	bl	8007cec <_Bfree>
 80072dc:	4631      	mov	r1, r6
 80072de:	4628      	mov	r0, r5
 80072e0:	f000 fd04 	bl	8007cec <_Bfree>
 80072e4:	e695      	b.n	8007012 <_dtoa_r+0x6c2>
 80072e6:	2400      	movs	r4, #0
 80072e8:	4626      	mov	r6, r4
 80072ea:	e7e1      	b.n	80072b0 <_dtoa_r+0x960>
 80072ec:	46c1      	mov	r9, r8
 80072ee:	4626      	mov	r6, r4
 80072f0:	e594      	b.n	8006e1c <_dtoa_r+0x4cc>
 80072f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80fc 	beq.w	80074f6 <_dtoa_r+0xba6>
 80072fe:	2f00      	cmp	r7, #0
 8007300:	dd05      	ble.n	800730e <_dtoa_r+0x9be>
 8007302:	4631      	mov	r1, r6
 8007304:	463a      	mov	r2, r7
 8007306:	4628      	mov	r0, r5
 8007308:	f000 ff08 	bl	800811c <__lshift>
 800730c:	4606      	mov	r6, r0
 800730e:	f1b8 0f00 	cmp.w	r8, #0
 8007312:	d05c      	beq.n	80073ce <_dtoa_r+0xa7e>
 8007314:	4628      	mov	r0, r5
 8007316:	6871      	ldr	r1, [r6, #4]
 8007318:	f000 fca8 	bl	8007c6c <_Balloc>
 800731c:	4607      	mov	r7, r0
 800731e:	b928      	cbnz	r0, 800732c <_dtoa_r+0x9dc>
 8007320:	4602      	mov	r2, r0
 8007322:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007326:	4b7e      	ldr	r3, [pc, #504]	; (8007520 <_dtoa_r+0xbd0>)
 8007328:	f7ff bb26 	b.w	8006978 <_dtoa_r+0x28>
 800732c:	6932      	ldr	r2, [r6, #16]
 800732e:	f106 010c 	add.w	r1, r6, #12
 8007332:	3202      	adds	r2, #2
 8007334:	0092      	lsls	r2, r2, #2
 8007336:	300c      	adds	r0, #12
 8007338:	f000 fc8a 	bl	8007c50 <memcpy>
 800733c:	2201      	movs	r2, #1
 800733e:	4639      	mov	r1, r7
 8007340:	4628      	mov	r0, r5
 8007342:	f000 feeb 	bl	800811c <__lshift>
 8007346:	46b0      	mov	r8, r6
 8007348:	4606      	mov	r6, r0
 800734a:	9b08      	ldr	r3, [sp, #32]
 800734c:	3301      	adds	r3, #1
 800734e:	9302      	str	r3, [sp, #8]
 8007350:	9b08      	ldr	r3, [sp, #32]
 8007352:	445b      	add	r3, fp
 8007354:	930a      	str	r3, [sp, #40]	; 0x28
 8007356:	9b04      	ldr	r3, [sp, #16]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	9309      	str	r3, [sp, #36]	; 0x24
 800735e:	9b02      	ldr	r3, [sp, #8]
 8007360:	4621      	mov	r1, r4
 8007362:	4650      	mov	r0, sl
 8007364:	f103 3bff 	add.w	fp, r3, #4294967295
 8007368:	f7ff fa64 	bl	8006834 <quorem>
 800736c:	4603      	mov	r3, r0
 800736e:	4641      	mov	r1, r8
 8007370:	3330      	adds	r3, #48	; 0x30
 8007372:	9004      	str	r0, [sp, #16]
 8007374:	4650      	mov	r0, sl
 8007376:	930b      	str	r3, [sp, #44]	; 0x2c
 8007378:	f000 ff3c 	bl	80081f4 <__mcmp>
 800737c:	4632      	mov	r2, r6
 800737e:	9006      	str	r0, [sp, #24]
 8007380:	4621      	mov	r1, r4
 8007382:	4628      	mov	r0, r5
 8007384:	f000 ff52 	bl	800822c <__mdiff>
 8007388:	68c2      	ldr	r2, [r0, #12]
 800738a:	4607      	mov	r7, r0
 800738c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800738e:	bb02      	cbnz	r2, 80073d2 <_dtoa_r+0xa82>
 8007390:	4601      	mov	r1, r0
 8007392:	4650      	mov	r0, sl
 8007394:	f000 ff2e 	bl	80081f4 <__mcmp>
 8007398:	4602      	mov	r2, r0
 800739a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800739c:	4639      	mov	r1, r7
 800739e:	4628      	mov	r0, r5
 80073a0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80073a4:	f000 fca2 	bl	8007cec <_Bfree>
 80073a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073ac:	9f02      	ldr	r7, [sp, #8]
 80073ae:	ea43 0102 	orr.w	r1, r3, r2
 80073b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b4:	430b      	orrs	r3, r1
 80073b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b8:	d10d      	bne.n	80073d6 <_dtoa_r+0xa86>
 80073ba:	2b39      	cmp	r3, #57	; 0x39
 80073bc:	d027      	beq.n	800740e <_dtoa_r+0xabe>
 80073be:	9a06      	ldr	r2, [sp, #24]
 80073c0:	2a00      	cmp	r2, #0
 80073c2:	dd01      	ble.n	80073c8 <_dtoa_r+0xa78>
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	3331      	adds	r3, #49	; 0x31
 80073c8:	f88b 3000 	strb.w	r3, [fp]
 80073cc:	e776      	b.n	80072bc <_dtoa_r+0x96c>
 80073ce:	4630      	mov	r0, r6
 80073d0:	e7b9      	b.n	8007346 <_dtoa_r+0x9f6>
 80073d2:	2201      	movs	r2, #1
 80073d4:	e7e2      	b.n	800739c <_dtoa_r+0xa4c>
 80073d6:	9906      	ldr	r1, [sp, #24]
 80073d8:	2900      	cmp	r1, #0
 80073da:	db04      	blt.n	80073e6 <_dtoa_r+0xa96>
 80073dc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80073de:	4301      	orrs	r1, r0
 80073e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e2:	4301      	orrs	r1, r0
 80073e4:	d120      	bne.n	8007428 <_dtoa_r+0xad8>
 80073e6:	2a00      	cmp	r2, #0
 80073e8:	ddee      	ble.n	80073c8 <_dtoa_r+0xa78>
 80073ea:	4651      	mov	r1, sl
 80073ec:	2201      	movs	r2, #1
 80073ee:	4628      	mov	r0, r5
 80073f0:	9302      	str	r3, [sp, #8]
 80073f2:	f000 fe93 	bl	800811c <__lshift>
 80073f6:	4621      	mov	r1, r4
 80073f8:	4682      	mov	sl, r0
 80073fa:	f000 fefb 	bl	80081f4 <__mcmp>
 80073fe:	2800      	cmp	r0, #0
 8007400:	9b02      	ldr	r3, [sp, #8]
 8007402:	dc02      	bgt.n	800740a <_dtoa_r+0xaba>
 8007404:	d1e0      	bne.n	80073c8 <_dtoa_r+0xa78>
 8007406:	07da      	lsls	r2, r3, #31
 8007408:	d5de      	bpl.n	80073c8 <_dtoa_r+0xa78>
 800740a:	2b39      	cmp	r3, #57	; 0x39
 800740c:	d1da      	bne.n	80073c4 <_dtoa_r+0xa74>
 800740e:	2339      	movs	r3, #57	; 0x39
 8007410:	f88b 3000 	strb.w	r3, [fp]
 8007414:	463b      	mov	r3, r7
 8007416:	461f      	mov	r7, r3
 8007418:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800741c:	3b01      	subs	r3, #1
 800741e:	2a39      	cmp	r2, #57	; 0x39
 8007420:	d050      	beq.n	80074c4 <_dtoa_r+0xb74>
 8007422:	3201      	adds	r2, #1
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	e749      	b.n	80072bc <_dtoa_r+0x96c>
 8007428:	2a00      	cmp	r2, #0
 800742a:	dd03      	ble.n	8007434 <_dtoa_r+0xae4>
 800742c:	2b39      	cmp	r3, #57	; 0x39
 800742e:	d0ee      	beq.n	800740e <_dtoa_r+0xabe>
 8007430:	3301      	adds	r3, #1
 8007432:	e7c9      	b.n	80073c8 <_dtoa_r+0xa78>
 8007434:	9a02      	ldr	r2, [sp, #8]
 8007436:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007438:	f802 3c01 	strb.w	r3, [r2, #-1]
 800743c:	428a      	cmp	r2, r1
 800743e:	d02a      	beq.n	8007496 <_dtoa_r+0xb46>
 8007440:	4651      	mov	r1, sl
 8007442:	2300      	movs	r3, #0
 8007444:	220a      	movs	r2, #10
 8007446:	4628      	mov	r0, r5
 8007448:	f000 fc72 	bl	8007d30 <__multadd>
 800744c:	45b0      	cmp	r8, r6
 800744e:	4682      	mov	sl, r0
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	f04f 020a 	mov.w	r2, #10
 8007458:	4641      	mov	r1, r8
 800745a:	4628      	mov	r0, r5
 800745c:	d107      	bne.n	800746e <_dtoa_r+0xb1e>
 800745e:	f000 fc67 	bl	8007d30 <__multadd>
 8007462:	4680      	mov	r8, r0
 8007464:	4606      	mov	r6, r0
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	3301      	adds	r3, #1
 800746a:	9302      	str	r3, [sp, #8]
 800746c:	e777      	b.n	800735e <_dtoa_r+0xa0e>
 800746e:	f000 fc5f 	bl	8007d30 <__multadd>
 8007472:	4631      	mov	r1, r6
 8007474:	4680      	mov	r8, r0
 8007476:	2300      	movs	r3, #0
 8007478:	220a      	movs	r2, #10
 800747a:	4628      	mov	r0, r5
 800747c:	f000 fc58 	bl	8007d30 <__multadd>
 8007480:	4606      	mov	r6, r0
 8007482:	e7f0      	b.n	8007466 <_dtoa_r+0xb16>
 8007484:	f1bb 0f00 	cmp.w	fp, #0
 8007488:	bfcc      	ite	gt
 800748a:	465f      	movgt	r7, fp
 800748c:	2701      	movle	r7, #1
 800748e:	f04f 0800 	mov.w	r8, #0
 8007492:	9a08      	ldr	r2, [sp, #32]
 8007494:	4417      	add	r7, r2
 8007496:	4651      	mov	r1, sl
 8007498:	2201      	movs	r2, #1
 800749a:	4628      	mov	r0, r5
 800749c:	9302      	str	r3, [sp, #8]
 800749e:	f000 fe3d 	bl	800811c <__lshift>
 80074a2:	4621      	mov	r1, r4
 80074a4:	4682      	mov	sl, r0
 80074a6:	f000 fea5 	bl	80081f4 <__mcmp>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	dcb2      	bgt.n	8007414 <_dtoa_r+0xac4>
 80074ae:	d102      	bne.n	80074b6 <_dtoa_r+0xb66>
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	07db      	lsls	r3, r3, #31
 80074b4:	d4ae      	bmi.n	8007414 <_dtoa_r+0xac4>
 80074b6:	463b      	mov	r3, r7
 80074b8:	461f      	mov	r7, r3
 80074ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074be:	2a30      	cmp	r2, #48	; 0x30
 80074c0:	d0fa      	beq.n	80074b8 <_dtoa_r+0xb68>
 80074c2:	e6fb      	b.n	80072bc <_dtoa_r+0x96c>
 80074c4:	9a08      	ldr	r2, [sp, #32]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d1a5      	bne.n	8007416 <_dtoa_r+0xac6>
 80074ca:	2331      	movs	r3, #49	; 0x31
 80074cc:	f109 0901 	add.w	r9, r9, #1
 80074d0:	7013      	strb	r3, [r2, #0]
 80074d2:	e6f3      	b.n	80072bc <_dtoa_r+0x96c>
 80074d4:	4b13      	ldr	r3, [pc, #76]	; (8007524 <_dtoa_r+0xbd4>)
 80074d6:	f7ff baa7 	b.w	8006a28 <_dtoa_r+0xd8>
 80074da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f47f aa80 	bne.w	80069e2 <_dtoa_r+0x92>
 80074e2:	4b11      	ldr	r3, [pc, #68]	; (8007528 <_dtoa_r+0xbd8>)
 80074e4:	f7ff baa0 	b.w	8006a28 <_dtoa_r+0xd8>
 80074e8:	f1bb 0f00 	cmp.w	fp, #0
 80074ec:	dc03      	bgt.n	80074f6 <_dtoa_r+0xba6>
 80074ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	f73f aecc 	bgt.w	800728e <_dtoa_r+0x93e>
 80074f6:	9f08      	ldr	r7, [sp, #32]
 80074f8:	4621      	mov	r1, r4
 80074fa:	4650      	mov	r0, sl
 80074fc:	f7ff f99a 	bl	8006834 <quorem>
 8007500:	9a08      	ldr	r2, [sp, #32]
 8007502:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007506:	f807 3b01 	strb.w	r3, [r7], #1
 800750a:	1aba      	subs	r2, r7, r2
 800750c:	4593      	cmp	fp, r2
 800750e:	ddb9      	ble.n	8007484 <_dtoa_r+0xb34>
 8007510:	4651      	mov	r1, sl
 8007512:	2300      	movs	r3, #0
 8007514:	220a      	movs	r2, #10
 8007516:	4628      	mov	r0, r5
 8007518:	f000 fc0a 	bl	8007d30 <__multadd>
 800751c:	4682      	mov	sl, r0
 800751e:	e7eb      	b.n	80074f8 <_dtoa_r+0xba8>
 8007520:	0800acd4 	.word	0x0800acd4
 8007524:	0800aad4 	.word	0x0800aad4
 8007528:	0800ac51 	.word	0x0800ac51

0800752c <rshift>:
 800752c:	6903      	ldr	r3, [r0, #16]
 800752e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007532:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007536:	f100 0414 	add.w	r4, r0, #20
 800753a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800753e:	dd46      	ble.n	80075ce <rshift+0xa2>
 8007540:	f011 011f 	ands.w	r1, r1, #31
 8007544:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007548:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800754c:	d10c      	bne.n	8007568 <rshift+0x3c>
 800754e:	4629      	mov	r1, r5
 8007550:	f100 0710 	add.w	r7, r0, #16
 8007554:	42b1      	cmp	r1, r6
 8007556:	d335      	bcc.n	80075c4 <rshift+0x98>
 8007558:	1a9b      	subs	r3, r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	1eea      	subs	r2, r5, #3
 800755e:	4296      	cmp	r6, r2
 8007560:	bf38      	it	cc
 8007562:	2300      	movcc	r3, #0
 8007564:	4423      	add	r3, r4
 8007566:	e015      	b.n	8007594 <rshift+0x68>
 8007568:	46a1      	mov	r9, r4
 800756a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800756e:	f1c1 0820 	rsb	r8, r1, #32
 8007572:	40cf      	lsrs	r7, r1
 8007574:	f105 0e04 	add.w	lr, r5, #4
 8007578:	4576      	cmp	r6, lr
 800757a:	46f4      	mov	ip, lr
 800757c:	d816      	bhi.n	80075ac <rshift+0x80>
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	009a      	lsls	r2, r3, #2
 8007582:	3a04      	subs	r2, #4
 8007584:	3501      	adds	r5, #1
 8007586:	42ae      	cmp	r6, r5
 8007588:	bf38      	it	cc
 800758a:	2200      	movcc	r2, #0
 800758c:	18a3      	adds	r3, r4, r2
 800758e:	50a7      	str	r7, [r4, r2]
 8007590:	b107      	cbz	r7, 8007594 <rshift+0x68>
 8007592:	3304      	adds	r3, #4
 8007594:	42a3      	cmp	r3, r4
 8007596:	eba3 0204 	sub.w	r2, r3, r4
 800759a:	bf08      	it	eq
 800759c:	2300      	moveq	r3, #0
 800759e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80075a2:	6102      	str	r2, [r0, #16]
 80075a4:	bf08      	it	eq
 80075a6:	6143      	streq	r3, [r0, #20]
 80075a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075ac:	f8dc c000 	ldr.w	ip, [ip]
 80075b0:	fa0c fc08 	lsl.w	ip, ip, r8
 80075b4:	ea4c 0707 	orr.w	r7, ip, r7
 80075b8:	f849 7b04 	str.w	r7, [r9], #4
 80075bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075c0:	40cf      	lsrs	r7, r1
 80075c2:	e7d9      	b.n	8007578 <rshift+0x4c>
 80075c4:	f851 cb04 	ldr.w	ip, [r1], #4
 80075c8:	f847 cf04 	str.w	ip, [r7, #4]!
 80075cc:	e7c2      	b.n	8007554 <rshift+0x28>
 80075ce:	4623      	mov	r3, r4
 80075d0:	e7e0      	b.n	8007594 <rshift+0x68>

080075d2 <__hexdig_fun>:
 80075d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80075d6:	2b09      	cmp	r3, #9
 80075d8:	d802      	bhi.n	80075e0 <__hexdig_fun+0xe>
 80075da:	3820      	subs	r0, #32
 80075dc:	b2c0      	uxtb	r0, r0
 80075de:	4770      	bx	lr
 80075e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80075e4:	2b05      	cmp	r3, #5
 80075e6:	d801      	bhi.n	80075ec <__hexdig_fun+0x1a>
 80075e8:	3847      	subs	r0, #71	; 0x47
 80075ea:	e7f7      	b.n	80075dc <__hexdig_fun+0xa>
 80075ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80075f0:	2b05      	cmp	r3, #5
 80075f2:	d801      	bhi.n	80075f8 <__hexdig_fun+0x26>
 80075f4:	3827      	subs	r0, #39	; 0x27
 80075f6:	e7f1      	b.n	80075dc <__hexdig_fun+0xa>
 80075f8:	2000      	movs	r0, #0
 80075fa:	4770      	bx	lr

080075fc <__gethex>:
 80075fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	b08b      	sub	sp, #44	; 0x2c
 8007602:	9306      	str	r3, [sp, #24]
 8007604:	4bb9      	ldr	r3, [pc, #740]	; (80078ec <__gethex+0x2f0>)
 8007606:	9002      	str	r0, [sp, #8]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	468b      	mov	fp, r1
 800760c:	4618      	mov	r0, r3
 800760e:	4690      	mov	r8, r2
 8007610:	9303      	str	r3, [sp, #12]
 8007612:	f7f8 fd9d 	bl	8000150 <strlen>
 8007616:	4682      	mov	sl, r0
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	f8db 2000 	ldr.w	r2, [fp]
 800761e:	4403      	add	r3, r0
 8007620:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007624:	9307      	str	r3, [sp, #28]
 8007626:	1c93      	adds	r3, r2, #2
 8007628:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800762c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007630:	32fe      	adds	r2, #254	; 0xfe
 8007632:	18d1      	adds	r1, r2, r3
 8007634:	461f      	mov	r7, r3
 8007636:	f813 0b01 	ldrb.w	r0, [r3], #1
 800763a:	9101      	str	r1, [sp, #4]
 800763c:	2830      	cmp	r0, #48	; 0x30
 800763e:	d0f8      	beq.n	8007632 <__gethex+0x36>
 8007640:	f7ff ffc7 	bl	80075d2 <__hexdig_fun>
 8007644:	4604      	mov	r4, r0
 8007646:	2800      	cmp	r0, #0
 8007648:	d13a      	bne.n	80076c0 <__gethex+0xc4>
 800764a:	4652      	mov	r2, sl
 800764c:	4638      	mov	r0, r7
 800764e:	9903      	ldr	r1, [sp, #12]
 8007650:	f001 f9ea 	bl	8008a28 <strncmp>
 8007654:	4605      	mov	r5, r0
 8007656:	2800      	cmp	r0, #0
 8007658:	d166      	bne.n	8007728 <__gethex+0x12c>
 800765a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800765e:	eb07 060a 	add.w	r6, r7, sl
 8007662:	f7ff ffb6 	bl	80075d2 <__hexdig_fun>
 8007666:	2800      	cmp	r0, #0
 8007668:	d060      	beq.n	800772c <__gethex+0x130>
 800766a:	4633      	mov	r3, r6
 800766c:	7818      	ldrb	r0, [r3, #0]
 800766e:	461f      	mov	r7, r3
 8007670:	2830      	cmp	r0, #48	; 0x30
 8007672:	f103 0301 	add.w	r3, r3, #1
 8007676:	d0f9      	beq.n	800766c <__gethex+0x70>
 8007678:	f7ff ffab 	bl	80075d2 <__hexdig_fun>
 800767c:	2301      	movs	r3, #1
 800767e:	fab0 f480 	clz	r4, r0
 8007682:	4635      	mov	r5, r6
 8007684:	0964      	lsrs	r4, r4, #5
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	463a      	mov	r2, r7
 800768a:	4616      	mov	r6, r2
 800768c:	7830      	ldrb	r0, [r6, #0]
 800768e:	3201      	adds	r2, #1
 8007690:	f7ff ff9f 	bl	80075d2 <__hexdig_fun>
 8007694:	2800      	cmp	r0, #0
 8007696:	d1f8      	bne.n	800768a <__gethex+0x8e>
 8007698:	4652      	mov	r2, sl
 800769a:	4630      	mov	r0, r6
 800769c:	9903      	ldr	r1, [sp, #12]
 800769e:	f001 f9c3 	bl	8008a28 <strncmp>
 80076a2:	b980      	cbnz	r0, 80076c6 <__gethex+0xca>
 80076a4:	b94d      	cbnz	r5, 80076ba <__gethex+0xbe>
 80076a6:	eb06 050a 	add.w	r5, r6, sl
 80076aa:	462a      	mov	r2, r5
 80076ac:	4616      	mov	r6, r2
 80076ae:	7830      	ldrb	r0, [r6, #0]
 80076b0:	3201      	adds	r2, #1
 80076b2:	f7ff ff8e 	bl	80075d2 <__hexdig_fun>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d1f8      	bne.n	80076ac <__gethex+0xb0>
 80076ba:	1bad      	subs	r5, r5, r6
 80076bc:	00ad      	lsls	r5, r5, #2
 80076be:	e004      	b.n	80076ca <__gethex+0xce>
 80076c0:	2400      	movs	r4, #0
 80076c2:	4625      	mov	r5, r4
 80076c4:	e7e0      	b.n	8007688 <__gethex+0x8c>
 80076c6:	2d00      	cmp	r5, #0
 80076c8:	d1f7      	bne.n	80076ba <__gethex+0xbe>
 80076ca:	7833      	ldrb	r3, [r6, #0]
 80076cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076d0:	2b50      	cmp	r3, #80	; 0x50
 80076d2:	d139      	bne.n	8007748 <__gethex+0x14c>
 80076d4:	7873      	ldrb	r3, [r6, #1]
 80076d6:	2b2b      	cmp	r3, #43	; 0x2b
 80076d8:	d02a      	beq.n	8007730 <__gethex+0x134>
 80076da:	2b2d      	cmp	r3, #45	; 0x2d
 80076dc:	d02c      	beq.n	8007738 <__gethex+0x13c>
 80076de:	f04f 0900 	mov.w	r9, #0
 80076e2:	1c71      	adds	r1, r6, #1
 80076e4:	7808      	ldrb	r0, [r1, #0]
 80076e6:	f7ff ff74 	bl	80075d2 <__hexdig_fun>
 80076ea:	1e43      	subs	r3, r0, #1
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b18      	cmp	r3, #24
 80076f0:	d82a      	bhi.n	8007748 <__gethex+0x14c>
 80076f2:	f1a0 0210 	sub.w	r2, r0, #16
 80076f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076fa:	f7ff ff6a 	bl	80075d2 <__hexdig_fun>
 80076fe:	1e43      	subs	r3, r0, #1
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b18      	cmp	r3, #24
 8007704:	d91b      	bls.n	800773e <__gethex+0x142>
 8007706:	f1b9 0f00 	cmp.w	r9, #0
 800770a:	d000      	beq.n	800770e <__gethex+0x112>
 800770c:	4252      	negs	r2, r2
 800770e:	4415      	add	r5, r2
 8007710:	f8cb 1000 	str.w	r1, [fp]
 8007714:	b1d4      	cbz	r4, 800774c <__gethex+0x150>
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf14      	ite	ne
 800771c:	2700      	movne	r7, #0
 800771e:	2706      	moveq	r7, #6
 8007720:	4638      	mov	r0, r7
 8007722:	b00b      	add	sp, #44	; 0x2c
 8007724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007728:	463e      	mov	r6, r7
 800772a:	4625      	mov	r5, r4
 800772c:	2401      	movs	r4, #1
 800772e:	e7cc      	b.n	80076ca <__gethex+0xce>
 8007730:	f04f 0900 	mov.w	r9, #0
 8007734:	1cb1      	adds	r1, r6, #2
 8007736:	e7d5      	b.n	80076e4 <__gethex+0xe8>
 8007738:	f04f 0901 	mov.w	r9, #1
 800773c:	e7fa      	b.n	8007734 <__gethex+0x138>
 800773e:	230a      	movs	r3, #10
 8007740:	fb03 0202 	mla	r2, r3, r2, r0
 8007744:	3a10      	subs	r2, #16
 8007746:	e7d6      	b.n	80076f6 <__gethex+0xfa>
 8007748:	4631      	mov	r1, r6
 800774a:	e7e1      	b.n	8007710 <__gethex+0x114>
 800774c:	4621      	mov	r1, r4
 800774e:	1bf3      	subs	r3, r6, r7
 8007750:	3b01      	subs	r3, #1
 8007752:	2b07      	cmp	r3, #7
 8007754:	dc0a      	bgt.n	800776c <__gethex+0x170>
 8007756:	9802      	ldr	r0, [sp, #8]
 8007758:	f000 fa88 	bl	8007c6c <_Balloc>
 800775c:	4604      	mov	r4, r0
 800775e:	b940      	cbnz	r0, 8007772 <__gethex+0x176>
 8007760:	4602      	mov	r2, r0
 8007762:	21de      	movs	r1, #222	; 0xde
 8007764:	4b62      	ldr	r3, [pc, #392]	; (80078f0 <__gethex+0x2f4>)
 8007766:	4863      	ldr	r0, [pc, #396]	; (80078f4 <__gethex+0x2f8>)
 8007768:	f001 f97e 	bl	8008a68 <__assert_func>
 800776c:	3101      	adds	r1, #1
 800776e:	105b      	asrs	r3, r3, #1
 8007770:	e7ef      	b.n	8007752 <__gethex+0x156>
 8007772:	f04f 0b00 	mov.w	fp, #0
 8007776:	f100 0914 	add.w	r9, r0, #20
 800777a:	f1ca 0301 	rsb	r3, sl, #1
 800777e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007782:	f8cd b004 	str.w	fp, [sp, #4]
 8007786:	9308      	str	r3, [sp, #32]
 8007788:	42b7      	cmp	r7, r6
 800778a:	d33f      	bcc.n	800780c <__gethex+0x210>
 800778c:	9f04      	ldr	r7, [sp, #16]
 800778e:	9b01      	ldr	r3, [sp, #4]
 8007790:	f847 3b04 	str.w	r3, [r7], #4
 8007794:	eba7 0709 	sub.w	r7, r7, r9
 8007798:	10bf      	asrs	r7, r7, #2
 800779a:	6127      	str	r7, [r4, #16]
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fb5b 	bl	8007e58 <__hi0bits>
 80077a2:	017f      	lsls	r7, r7, #5
 80077a4:	f8d8 6000 	ldr.w	r6, [r8]
 80077a8:	1a3f      	subs	r7, r7, r0
 80077aa:	42b7      	cmp	r7, r6
 80077ac:	dd62      	ble.n	8007874 <__gethex+0x278>
 80077ae:	1bbf      	subs	r7, r7, r6
 80077b0:	4639      	mov	r1, r7
 80077b2:	4620      	mov	r0, r4
 80077b4:	f000 fef1 	bl	800859a <__any_on>
 80077b8:	4682      	mov	sl, r0
 80077ba:	b1a8      	cbz	r0, 80077e8 <__gethex+0x1ec>
 80077bc:	f04f 0a01 	mov.w	sl, #1
 80077c0:	1e7b      	subs	r3, r7, #1
 80077c2:	1159      	asrs	r1, r3, #5
 80077c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80077c8:	f003 021f 	and.w	r2, r3, #31
 80077cc:	fa0a f202 	lsl.w	r2, sl, r2
 80077d0:	420a      	tst	r2, r1
 80077d2:	d009      	beq.n	80077e8 <__gethex+0x1ec>
 80077d4:	4553      	cmp	r3, sl
 80077d6:	dd05      	ble.n	80077e4 <__gethex+0x1e8>
 80077d8:	4620      	mov	r0, r4
 80077da:	1eb9      	subs	r1, r7, #2
 80077dc:	f000 fedd 	bl	800859a <__any_on>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d144      	bne.n	800786e <__gethex+0x272>
 80077e4:	f04f 0a02 	mov.w	sl, #2
 80077e8:	4639      	mov	r1, r7
 80077ea:	4620      	mov	r0, r4
 80077ec:	f7ff fe9e 	bl	800752c <rshift>
 80077f0:	443d      	add	r5, r7
 80077f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077f6:	42ab      	cmp	r3, r5
 80077f8:	da4a      	bge.n	8007890 <__gethex+0x294>
 80077fa:	4621      	mov	r1, r4
 80077fc:	9802      	ldr	r0, [sp, #8]
 80077fe:	f000 fa75 	bl	8007cec <_Bfree>
 8007802:	2300      	movs	r3, #0
 8007804:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007806:	27a3      	movs	r7, #163	; 0xa3
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	e789      	b.n	8007720 <__gethex+0x124>
 800780c:	1e73      	subs	r3, r6, #1
 800780e:	9a07      	ldr	r2, [sp, #28]
 8007810:	9305      	str	r3, [sp, #20]
 8007812:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007816:	4293      	cmp	r3, r2
 8007818:	d019      	beq.n	800784e <__gethex+0x252>
 800781a:	f1bb 0f20 	cmp.w	fp, #32
 800781e:	d107      	bne.n	8007830 <__gethex+0x234>
 8007820:	9b04      	ldr	r3, [sp, #16]
 8007822:	9a01      	ldr	r2, [sp, #4]
 8007824:	f843 2b04 	str.w	r2, [r3], #4
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	2300      	movs	r3, #0
 800782c:	469b      	mov	fp, r3
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007834:	f7ff fecd 	bl	80075d2 <__hexdig_fun>
 8007838:	9b01      	ldr	r3, [sp, #4]
 800783a:	f000 000f 	and.w	r0, r0, #15
 800783e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007842:	4303      	orrs	r3, r0
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	f10b 0b04 	add.w	fp, fp, #4
 800784a:	9b05      	ldr	r3, [sp, #20]
 800784c:	e00d      	b.n	800786a <__gethex+0x26e>
 800784e:	9b05      	ldr	r3, [sp, #20]
 8007850:	9a08      	ldr	r2, [sp, #32]
 8007852:	4413      	add	r3, r2
 8007854:	42bb      	cmp	r3, r7
 8007856:	d3e0      	bcc.n	800781a <__gethex+0x21e>
 8007858:	4618      	mov	r0, r3
 800785a:	4652      	mov	r2, sl
 800785c:	9903      	ldr	r1, [sp, #12]
 800785e:	9309      	str	r3, [sp, #36]	; 0x24
 8007860:	f001 f8e2 	bl	8008a28 <strncmp>
 8007864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007866:	2800      	cmp	r0, #0
 8007868:	d1d7      	bne.n	800781a <__gethex+0x21e>
 800786a:	461e      	mov	r6, r3
 800786c:	e78c      	b.n	8007788 <__gethex+0x18c>
 800786e:	f04f 0a03 	mov.w	sl, #3
 8007872:	e7b9      	b.n	80077e8 <__gethex+0x1ec>
 8007874:	da09      	bge.n	800788a <__gethex+0x28e>
 8007876:	1bf7      	subs	r7, r6, r7
 8007878:	4621      	mov	r1, r4
 800787a:	463a      	mov	r2, r7
 800787c:	9802      	ldr	r0, [sp, #8]
 800787e:	f000 fc4d 	bl	800811c <__lshift>
 8007882:	4604      	mov	r4, r0
 8007884:	1bed      	subs	r5, r5, r7
 8007886:	f100 0914 	add.w	r9, r0, #20
 800788a:	f04f 0a00 	mov.w	sl, #0
 800788e:	e7b0      	b.n	80077f2 <__gethex+0x1f6>
 8007890:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007894:	42a8      	cmp	r0, r5
 8007896:	dd71      	ble.n	800797c <__gethex+0x380>
 8007898:	1b45      	subs	r5, r0, r5
 800789a:	42ae      	cmp	r6, r5
 800789c:	dc34      	bgt.n	8007908 <__gethex+0x30c>
 800789e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d028      	beq.n	80078f8 <__gethex+0x2fc>
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d02a      	beq.n	8007900 <__gethex+0x304>
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d115      	bne.n	80078da <__gethex+0x2de>
 80078ae:	42ae      	cmp	r6, r5
 80078b0:	d113      	bne.n	80078da <__gethex+0x2de>
 80078b2:	2e01      	cmp	r6, #1
 80078b4:	d10b      	bne.n	80078ce <__gethex+0x2d2>
 80078b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80078ba:	9a06      	ldr	r2, [sp, #24]
 80078bc:	2762      	movs	r7, #98	; 0x62
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	2301      	movs	r3, #1
 80078c2:	6123      	str	r3, [r4, #16]
 80078c4:	f8c9 3000 	str.w	r3, [r9]
 80078c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078ca:	601c      	str	r4, [r3, #0]
 80078cc:	e728      	b.n	8007720 <__gethex+0x124>
 80078ce:	4620      	mov	r0, r4
 80078d0:	1e71      	subs	r1, r6, #1
 80078d2:	f000 fe62 	bl	800859a <__any_on>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d1ed      	bne.n	80078b6 <__gethex+0x2ba>
 80078da:	4621      	mov	r1, r4
 80078dc:	9802      	ldr	r0, [sp, #8]
 80078de:	f000 fa05 	bl	8007cec <_Bfree>
 80078e2:	2300      	movs	r3, #0
 80078e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078e6:	2750      	movs	r7, #80	; 0x50
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	e719      	b.n	8007720 <__gethex+0x124>
 80078ec:	0800ad50 	.word	0x0800ad50
 80078f0:	0800acd4 	.word	0x0800acd4
 80078f4:	0800ace5 	.word	0x0800ace5
 80078f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1ed      	bne.n	80078da <__gethex+0x2de>
 80078fe:	e7da      	b.n	80078b6 <__gethex+0x2ba>
 8007900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1d7      	bne.n	80078b6 <__gethex+0x2ba>
 8007906:	e7e8      	b.n	80078da <__gethex+0x2de>
 8007908:	1e6f      	subs	r7, r5, #1
 800790a:	f1ba 0f00 	cmp.w	sl, #0
 800790e:	d132      	bne.n	8007976 <__gethex+0x37a>
 8007910:	b127      	cbz	r7, 800791c <__gethex+0x320>
 8007912:	4639      	mov	r1, r7
 8007914:	4620      	mov	r0, r4
 8007916:	f000 fe40 	bl	800859a <__any_on>
 800791a:	4682      	mov	sl, r0
 800791c:	2101      	movs	r1, #1
 800791e:	117b      	asrs	r3, r7, #5
 8007920:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007924:	f007 071f 	and.w	r7, r7, #31
 8007928:	fa01 f707 	lsl.w	r7, r1, r7
 800792c:	421f      	tst	r7, r3
 800792e:	f04f 0702 	mov.w	r7, #2
 8007932:	4629      	mov	r1, r5
 8007934:	4620      	mov	r0, r4
 8007936:	bf18      	it	ne
 8007938:	f04a 0a02 	orrne.w	sl, sl, #2
 800793c:	1b76      	subs	r6, r6, r5
 800793e:	f7ff fdf5 	bl	800752c <rshift>
 8007942:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007946:	f1ba 0f00 	cmp.w	sl, #0
 800794a:	d048      	beq.n	80079de <__gethex+0x3e2>
 800794c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007950:	2b02      	cmp	r3, #2
 8007952:	d015      	beq.n	8007980 <__gethex+0x384>
 8007954:	2b03      	cmp	r3, #3
 8007956:	d017      	beq.n	8007988 <__gethex+0x38c>
 8007958:	2b01      	cmp	r3, #1
 800795a:	d109      	bne.n	8007970 <__gethex+0x374>
 800795c:	f01a 0f02 	tst.w	sl, #2
 8007960:	d006      	beq.n	8007970 <__gethex+0x374>
 8007962:	f8d9 0000 	ldr.w	r0, [r9]
 8007966:	ea4a 0a00 	orr.w	sl, sl, r0
 800796a:	f01a 0f01 	tst.w	sl, #1
 800796e:	d10e      	bne.n	800798e <__gethex+0x392>
 8007970:	f047 0710 	orr.w	r7, r7, #16
 8007974:	e033      	b.n	80079de <__gethex+0x3e2>
 8007976:	f04f 0a01 	mov.w	sl, #1
 800797a:	e7cf      	b.n	800791c <__gethex+0x320>
 800797c:	2701      	movs	r7, #1
 800797e:	e7e2      	b.n	8007946 <__gethex+0x34a>
 8007980:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007982:	f1c3 0301 	rsb	r3, r3, #1
 8007986:	9315      	str	r3, [sp, #84]	; 0x54
 8007988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0f0      	beq.n	8007970 <__gethex+0x374>
 800798e:	f04f 0c00 	mov.w	ip, #0
 8007992:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007996:	f104 0314 	add.w	r3, r4, #20
 800799a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800799e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80079ac:	d01c      	beq.n	80079e8 <__gethex+0x3ec>
 80079ae:	3201      	adds	r2, #1
 80079b0:	6002      	str	r2, [r0, #0]
 80079b2:	2f02      	cmp	r7, #2
 80079b4:	f104 0314 	add.w	r3, r4, #20
 80079b8:	d13d      	bne.n	8007a36 <__gethex+0x43a>
 80079ba:	f8d8 2000 	ldr.w	r2, [r8]
 80079be:	3a01      	subs	r2, #1
 80079c0:	42b2      	cmp	r2, r6
 80079c2:	d10a      	bne.n	80079da <__gethex+0x3de>
 80079c4:	2201      	movs	r2, #1
 80079c6:	1171      	asrs	r1, r6, #5
 80079c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079cc:	f006 061f 	and.w	r6, r6, #31
 80079d0:	fa02 f606 	lsl.w	r6, r2, r6
 80079d4:	421e      	tst	r6, r3
 80079d6:	bf18      	it	ne
 80079d8:	4617      	movne	r7, r2
 80079da:	f047 0720 	orr.w	r7, r7, #32
 80079de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079e0:	601c      	str	r4, [r3, #0]
 80079e2:	9b06      	ldr	r3, [sp, #24]
 80079e4:	601d      	str	r5, [r3, #0]
 80079e6:	e69b      	b.n	8007720 <__gethex+0x124>
 80079e8:	4299      	cmp	r1, r3
 80079ea:	f843 cc04 	str.w	ip, [r3, #-4]
 80079ee:	d8d8      	bhi.n	80079a2 <__gethex+0x3a6>
 80079f0:	68a3      	ldr	r3, [r4, #8]
 80079f2:	459b      	cmp	fp, r3
 80079f4:	db17      	blt.n	8007a26 <__gethex+0x42a>
 80079f6:	6861      	ldr	r1, [r4, #4]
 80079f8:	9802      	ldr	r0, [sp, #8]
 80079fa:	3101      	adds	r1, #1
 80079fc:	f000 f936 	bl	8007c6c <_Balloc>
 8007a00:	4681      	mov	r9, r0
 8007a02:	b918      	cbnz	r0, 8007a0c <__gethex+0x410>
 8007a04:	4602      	mov	r2, r0
 8007a06:	2184      	movs	r1, #132	; 0x84
 8007a08:	4b19      	ldr	r3, [pc, #100]	; (8007a70 <__gethex+0x474>)
 8007a0a:	e6ac      	b.n	8007766 <__gethex+0x16a>
 8007a0c:	6922      	ldr	r2, [r4, #16]
 8007a0e:	f104 010c 	add.w	r1, r4, #12
 8007a12:	3202      	adds	r2, #2
 8007a14:	0092      	lsls	r2, r2, #2
 8007a16:	300c      	adds	r0, #12
 8007a18:	f000 f91a 	bl	8007c50 <memcpy>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	9802      	ldr	r0, [sp, #8]
 8007a20:	f000 f964 	bl	8007cec <_Bfree>
 8007a24:	464c      	mov	r4, r9
 8007a26:	6923      	ldr	r3, [r4, #16]
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	6122      	str	r2, [r4, #16]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a32:	615a      	str	r2, [r3, #20]
 8007a34:	e7bd      	b.n	80079b2 <__gethex+0x3b6>
 8007a36:	6922      	ldr	r2, [r4, #16]
 8007a38:	455a      	cmp	r2, fp
 8007a3a:	dd0b      	ble.n	8007a54 <__gethex+0x458>
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7ff fd74 	bl	800752c <rshift>
 8007a44:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a48:	3501      	adds	r5, #1
 8007a4a:	42ab      	cmp	r3, r5
 8007a4c:	f6ff aed5 	blt.w	80077fa <__gethex+0x1fe>
 8007a50:	2701      	movs	r7, #1
 8007a52:	e7c2      	b.n	80079da <__gethex+0x3de>
 8007a54:	f016 061f 	ands.w	r6, r6, #31
 8007a58:	d0fa      	beq.n	8007a50 <__gethex+0x454>
 8007a5a:	449a      	add	sl, r3
 8007a5c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007a60:	f000 f9fa 	bl	8007e58 <__hi0bits>
 8007a64:	f1c6 0620 	rsb	r6, r6, #32
 8007a68:	42b0      	cmp	r0, r6
 8007a6a:	dbe7      	blt.n	8007a3c <__gethex+0x440>
 8007a6c:	e7f0      	b.n	8007a50 <__gethex+0x454>
 8007a6e:	bf00      	nop
 8007a70:	0800acd4 	.word	0x0800acd4

08007a74 <L_shift>:
 8007a74:	f1c2 0208 	rsb	r2, r2, #8
 8007a78:	0092      	lsls	r2, r2, #2
 8007a7a:	b570      	push	{r4, r5, r6, lr}
 8007a7c:	f1c2 0620 	rsb	r6, r2, #32
 8007a80:	6843      	ldr	r3, [r0, #4]
 8007a82:	6804      	ldr	r4, [r0, #0]
 8007a84:	fa03 f506 	lsl.w	r5, r3, r6
 8007a88:	432c      	orrs	r4, r5
 8007a8a:	40d3      	lsrs	r3, r2
 8007a8c:	6004      	str	r4, [r0, #0]
 8007a8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a92:	4288      	cmp	r0, r1
 8007a94:	d3f4      	bcc.n	8007a80 <L_shift+0xc>
 8007a96:	bd70      	pop	{r4, r5, r6, pc}

08007a98 <__match>:
 8007a98:	b530      	push	{r4, r5, lr}
 8007a9a:	6803      	ldr	r3, [r0, #0]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aa2:	b914      	cbnz	r4, 8007aaa <__match+0x12>
 8007aa4:	6003      	str	r3, [r0, #0]
 8007aa6:	2001      	movs	r0, #1
 8007aa8:	bd30      	pop	{r4, r5, pc}
 8007aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007ab2:	2d19      	cmp	r5, #25
 8007ab4:	bf98      	it	ls
 8007ab6:	3220      	addls	r2, #32
 8007ab8:	42a2      	cmp	r2, r4
 8007aba:	d0f0      	beq.n	8007a9e <__match+0x6>
 8007abc:	2000      	movs	r0, #0
 8007abe:	e7f3      	b.n	8007aa8 <__match+0x10>

08007ac0 <__hexnan>:
 8007ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac4:	2500      	movs	r5, #0
 8007ac6:	680b      	ldr	r3, [r1, #0]
 8007ac8:	4682      	mov	sl, r0
 8007aca:	115e      	asrs	r6, r3, #5
 8007acc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ad0:	f013 031f 	ands.w	r3, r3, #31
 8007ad4:	bf18      	it	ne
 8007ad6:	3604      	addne	r6, #4
 8007ad8:	1f37      	subs	r7, r6, #4
 8007ada:	4690      	mov	r8, r2
 8007adc:	46b9      	mov	r9, r7
 8007ade:	463c      	mov	r4, r7
 8007ae0:	46ab      	mov	fp, r5
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	6801      	ldr	r1, [r0, #0]
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	f846 5c04 	str.w	r5, [r6, #-4]
 8007aec:	9502      	str	r5, [sp, #8]
 8007aee:	784a      	ldrb	r2, [r1, #1]
 8007af0:	1c4b      	adds	r3, r1, #1
 8007af2:	9303      	str	r3, [sp, #12]
 8007af4:	b342      	cbz	r2, 8007b48 <__hexnan+0x88>
 8007af6:	4610      	mov	r0, r2
 8007af8:	9105      	str	r1, [sp, #20]
 8007afa:	9204      	str	r2, [sp, #16]
 8007afc:	f7ff fd69 	bl	80075d2 <__hexdig_fun>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d14f      	bne.n	8007ba4 <__hexnan+0xe4>
 8007b04:	9a04      	ldr	r2, [sp, #16]
 8007b06:	9905      	ldr	r1, [sp, #20]
 8007b08:	2a20      	cmp	r2, #32
 8007b0a:	d818      	bhi.n	8007b3e <__hexnan+0x7e>
 8007b0c:	9b02      	ldr	r3, [sp, #8]
 8007b0e:	459b      	cmp	fp, r3
 8007b10:	dd13      	ble.n	8007b3a <__hexnan+0x7a>
 8007b12:	454c      	cmp	r4, r9
 8007b14:	d206      	bcs.n	8007b24 <__hexnan+0x64>
 8007b16:	2d07      	cmp	r5, #7
 8007b18:	dc04      	bgt.n	8007b24 <__hexnan+0x64>
 8007b1a:	462a      	mov	r2, r5
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7ff ffa8 	bl	8007a74 <L_shift>
 8007b24:	4544      	cmp	r4, r8
 8007b26:	d950      	bls.n	8007bca <__hexnan+0x10a>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f1a4 0904 	sub.w	r9, r4, #4
 8007b2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b32:	461d      	mov	r5, r3
 8007b34:	464c      	mov	r4, r9
 8007b36:	f8cd b008 	str.w	fp, [sp, #8]
 8007b3a:	9903      	ldr	r1, [sp, #12]
 8007b3c:	e7d7      	b.n	8007aee <__hexnan+0x2e>
 8007b3e:	2a29      	cmp	r2, #41	; 0x29
 8007b40:	d156      	bne.n	8007bf0 <__hexnan+0x130>
 8007b42:	3102      	adds	r1, #2
 8007b44:	f8ca 1000 	str.w	r1, [sl]
 8007b48:	f1bb 0f00 	cmp.w	fp, #0
 8007b4c:	d050      	beq.n	8007bf0 <__hexnan+0x130>
 8007b4e:	454c      	cmp	r4, r9
 8007b50:	d206      	bcs.n	8007b60 <__hexnan+0xa0>
 8007b52:	2d07      	cmp	r5, #7
 8007b54:	dc04      	bgt.n	8007b60 <__hexnan+0xa0>
 8007b56:	462a      	mov	r2, r5
 8007b58:	4649      	mov	r1, r9
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f7ff ff8a 	bl	8007a74 <L_shift>
 8007b60:	4544      	cmp	r4, r8
 8007b62:	d934      	bls.n	8007bce <__hexnan+0x10e>
 8007b64:	4623      	mov	r3, r4
 8007b66:	f1a8 0204 	sub.w	r2, r8, #4
 8007b6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b6e:	429f      	cmp	r7, r3
 8007b70:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b74:	d2f9      	bcs.n	8007b6a <__hexnan+0xaa>
 8007b76:	1b3b      	subs	r3, r7, r4
 8007b78:	f023 0303 	bic.w	r3, r3, #3
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	3401      	adds	r4, #1
 8007b80:	3e03      	subs	r6, #3
 8007b82:	42b4      	cmp	r4, r6
 8007b84:	bf88      	it	hi
 8007b86:	2304      	movhi	r3, #4
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4443      	add	r3, r8
 8007b8c:	f843 2b04 	str.w	r2, [r3], #4
 8007b90:	429f      	cmp	r7, r3
 8007b92:	d2fb      	bcs.n	8007b8c <__hexnan+0xcc>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	b91b      	cbnz	r3, 8007ba0 <__hexnan+0xe0>
 8007b98:	4547      	cmp	r7, r8
 8007b9a:	d127      	bne.n	8007bec <__hexnan+0x12c>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	2005      	movs	r0, #5
 8007ba2:	e026      	b.n	8007bf2 <__hexnan+0x132>
 8007ba4:	3501      	adds	r5, #1
 8007ba6:	2d08      	cmp	r5, #8
 8007ba8:	f10b 0b01 	add.w	fp, fp, #1
 8007bac:	dd06      	ble.n	8007bbc <__hexnan+0xfc>
 8007bae:	4544      	cmp	r4, r8
 8007bb0:	d9c3      	bls.n	8007b3a <__hexnan+0x7a>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2501      	movs	r5, #1
 8007bb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bba:	3c04      	subs	r4, #4
 8007bbc:	6822      	ldr	r2, [r4, #0]
 8007bbe:	f000 000f 	and.w	r0, r0, #15
 8007bc2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007bc6:	6022      	str	r2, [r4, #0]
 8007bc8:	e7b7      	b.n	8007b3a <__hexnan+0x7a>
 8007bca:	2508      	movs	r5, #8
 8007bcc:	e7b5      	b.n	8007b3a <__hexnan+0x7a>
 8007bce:	9b01      	ldr	r3, [sp, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0df      	beq.n	8007b94 <__hexnan+0xd4>
 8007bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd8:	f1c3 0320 	rsb	r3, r3, #32
 8007bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8007be0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007be4:	401a      	ands	r2, r3
 8007be6:	f846 2c04 	str.w	r2, [r6, #-4]
 8007bea:	e7d3      	b.n	8007b94 <__hexnan+0xd4>
 8007bec:	3f04      	subs	r7, #4
 8007bee:	e7d1      	b.n	8007b94 <__hexnan+0xd4>
 8007bf0:	2004      	movs	r0, #4
 8007bf2:	b007      	add	sp, #28
 8007bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bf8 <_localeconv_r>:
 8007bf8:	4800      	ldr	r0, [pc, #0]	; (8007bfc <_localeconv_r+0x4>)
 8007bfa:	4770      	bx	lr
 8007bfc:	20000174 	.word	0x20000174

08007c00 <malloc>:
 8007c00:	4b02      	ldr	r3, [pc, #8]	; (8007c0c <malloc+0xc>)
 8007c02:	4601      	mov	r1, r0
 8007c04:	6818      	ldr	r0, [r3, #0]
 8007c06:	f000 bd43 	b.w	8008690 <_malloc_r>
 8007c0a:	bf00      	nop
 8007c0c:	2000001c 	.word	0x2000001c

08007c10 <__ascii_mbtowc>:
 8007c10:	b082      	sub	sp, #8
 8007c12:	b901      	cbnz	r1, 8007c16 <__ascii_mbtowc+0x6>
 8007c14:	a901      	add	r1, sp, #4
 8007c16:	b142      	cbz	r2, 8007c2a <__ascii_mbtowc+0x1a>
 8007c18:	b14b      	cbz	r3, 8007c2e <__ascii_mbtowc+0x1e>
 8007c1a:	7813      	ldrb	r3, [r2, #0]
 8007c1c:	600b      	str	r3, [r1, #0]
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	1e10      	subs	r0, r2, #0
 8007c22:	bf18      	it	ne
 8007c24:	2001      	movne	r0, #1
 8007c26:	b002      	add	sp, #8
 8007c28:	4770      	bx	lr
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	e7fb      	b.n	8007c26 <__ascii_mbtowc+0x16>
 8007c2e:	f06f 0001 	mvn.w	r0, #1
 8007c32:	e7f8      	b.n	8007c26 <__ascii_mbtowc+0x16>

08007c34 <memchr>:
 8007c34:	4603      	mov	r3, r0
 8007c36:	b510      	push	{r4, lr}
 8007c38:	b2c9      	uxtb	r1, r1
 8007c3a:	4402      	add	r2, r0
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	d101      	bne.n	8007c46 <memchr+0x12>
 8007c42:	2000      	movs	r0, #0
 8007c44:	e003      	b.n	8007c4e <memchr+0x1a>
 8007c46:	7804      	ldrb	r4, [r0, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	428c      	cmp	r4, r1
 8007c4c:	d1f6      	bne.n	8007c3c <memchr+0x8>
 8007c4e:	bd10      	pop	{r4, pc}

08007c50 <memcpy>:
 8007c50:	440a      	add	r2, r1
 8007c52:	4291      	cmp	r1, r2
 8007c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c58:	d100      	bne.n	8007c5c <memcpy+0xc>
 8007c5a:	4770      	bx	lr
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c62:	4291      	cmp	r1, r2
 8007c64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c68:	d1f9      	bne.n	8007c5e <memcpy+0xe>
 8007c6a:	bd10      	pop	{r4, pc}

08007c6c <_Balloc>:
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c70:	4604      	mov	r4, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	b976      	cbnz	r6, 8007c94 <_Balloc+0x28>
 8007c76:	2010      	movs	r0, #16
 8007c78:	f7ff ffc2 	bl	8007c00 <malloc>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	6260      	str	r0, [r4, #36]	; 0x24
 8007c80:	b920      	cbnz	r0, 8007c8c <_Balloc+0x20>
 8007c82:	2166      	movs	r1, #102	; 0x66
 8007c84:	4b17      	ldr	r3, [pc, #92]	; (8007ce4 <_Balloc+0x78>)
 8007c86:	4818      	ldr	r0, [pc, #96]	; (8007ce8 <_Balloc+0x7c>)
 8007c88:	f000 feee 	bl	8008a68 <__assert_func>
 8007c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c90:	6006      	str	r6, [r0, #0]
 8007c92:	60c6      	str	r6, [r0, #12]
 8007c94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c96:	68f3      	ldr	r3, [r6, #12]
 8007c98:	b183      	cbz	r3, 8007cbc <_Balloc+0x50>
 8007c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ca2:	b9b8      	cbnz	r0, 8007cd4 <_Balloc+0x68>
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	fa01 f605 	lsl.w	r6, r1, r5
 8007caa:	1d72      	adds	r2, r6, #5
 8007cac:	4620      	mov	r0, r4
 8007cae:	0092      	lsls	r2, r2, #2
 8007cb0:	f000 fc94 	bl	80085dc <_calloc_r>
 8007cb4:	b160      	cbz	r0, 8007cd0 <_Balloc+0x64>
 8007cb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cba:	e00e      	b.n	8007cda <_Balloc+0x6e>
 8007cbc:	2221      	movs	r2, #33	; 0x21
 8007cbe:	2104      	movs	r1, #4
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 fc8b 	bl	80085dc <_calloc_r>
 8007cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cc8:	60f0      	str	r0, [r6, #12]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e4      	bne.n	8007c9a <_Balloc+0x2e>
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	6802      	ldr	r2, [r0, #0]
 8007cd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ce0:	e7f7      	b.n	8007cd2 <_Balloc+0x66>
 8007ce2:	bf00      	nop
 8007ce4:	0800ac5e 	.word	0x0800ac5e
 8007ce8:	0800ad64 	.word	0x0800ad64

08007cec <_Bfree>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b976      	cbnz	r6, 8007d14 <_Bfree+0x28>
 8007cf6:	2010      	movs	r0, #16
 8007cf8:	f7ff ff82 	bl	8007c00 <malloc>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	6268      	str	r0, [r5, #36]	; 0x24
 8007d00:	b920      	cbnz	r0, 8007d0c <_Bfree+0x20>
 8007d02:	218a      	movs	r1, #138	; 0x8a
 8007d04:	4b08      	ldr	r3, [pc, #32]	; (8007d28 <_Bfree+0x3c>)
 8007d06:	4809      	ldr	r0, [pc, #36]	; (8007d2c <_Bfree+0x40>)
 8007d08:	f000 feae 	bl	8008a68 <__assert_func>
 8007d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d10:	6006      	str	r6, [r0, #0]
 8007d12:	60c6      	str	r6, [r0, #12]
 8007d14:	b13c      	cbz	r4, 8007d26 <_Bfree+0x3a>
 8007d16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d18:	6862      	ldr	r2, [r4, #4]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d20:	6021      	str	r1, [r4, #0]
 8007d22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d26:	bd70      	pop	{r4, r5, r6, pc}
 8007d28:	0800ac5e 	.word	0x0800ac5e
 8007d2c:	0800ad64 	.word	0x0800ad64

08007d30 <__multadd>:
 8007d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d34:	4698      	mov	r8, r3
 8007d36:	460c      	mov	r4, r1
 8007d38:	2300      	movs	r3, #0
 8007d3a:	690e      	ldr	r6, [r1, #16]
 8007d3c:	4607      	mov	r7, r0
 8007d3e:	f101 0014 	add.w	r0, r1, #20
 8007d42:	6805      	ldr	r5, [r0, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	b2a9      	uxth	r1, r5
 8007d48:	fb02 8101 	mla	r1, r2, r1, r8
 8007d4c:	0c2d      	lsrs	r5, r5, #16
 8007d4e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007d52:	fb02 c505 	mla	r5, r2, r5, ip
 8007d56:	b289      	uxth	r1, r1
 8007d58:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007d5c:	429e      	cmp	r6, r3
 8007d5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007d62:	f840 1b04 	str.w	r1, [r0], #4
 8007d66:	dcec      	bgt.n	8007d42 <__multadd+0x12>
 8007d68:	f1b8 0f00 	cmp.w	r8, #0
 8007d6c:	d022      	beq.n	8007db4 <__multadd+0x84>
 8007d6e:	68a3      	ldr	r3, [r4, #8]
 8007d70:	42b3      	cmp	r3, r6
 8007d72:	dc19      	bgt.n	8007da8 <__multadd+0x78>
 8007d74:	6861      	ldr	r1, [r4, #4]
 8007d76:	4638      	mov	r0, r7
 8007d78:	3101      	adds	r1, #1
 8007d7a:	f7ff ff77 	bl	8007c6c <_Balloc>
 8007d7e:	4605      	mov	r5, r0
 8007d80:	b928      	cbnz	r0, 8007d8e <__multadd+0x5e>
 8007d82:	4602      	mov	r2, r0
 8007d84:	21b5      	movs	r1, #181	; 0xb5
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <__multadd+0x8c>)
 8007d88:	480d      	ldr	r0, [pc, #52]	; (8007dc0 <__multadd+0x90>)
 8007d8a:	f000 fe6d 	bl	8008a68 <__assert_func>
 8007d8e:	6922      	ldr	r2, [r4, #16]
 8007d90:	f104 010c 	add.w	r1, r4, #12
 8007d94:	3202      	adds	r2, #2
 8007d96:	0092      	lsls	r2, r2, #2
 8007d98:	300c      	adds	r0, #12
 8007d9a:	f7ff ff59 	bl	8007c50 <memcpy>
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4638      	mov	r0, r7
 8007da2:	f7ff ffa3 	bl	8007cec <_Bfree>
 8007da6:	462c      	mov	r4, r5
 8007da8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007dac:	3601      	adds	r6, #1
 8007dae:	f8c3 8014 	str.w	r8, [r3, #20]
 8007db2:	6126      	str	r6, [r4, #16]
 8007db4:	4620      	mov	r0, r4
 8007db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dba:	bf00      	nop
 8007dbc:	0800acd4 	.word	0x0800acd4
 8007dc0:	0800ad64 	.word	0x0800ad64

08007dc4 <__s2b>:
 8007dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc8:	4615      	mov	r5, r2
 8007dca:	2209      	movs	r2, #9
 8007dcc:	461f      	mov	r7, r3
 8007dce:	3308      	adds	r3, #8
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	2201      	movs	r2, #1
 8007dda:	2100      	movs	r1, #0
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	db09      	blt.n	8007df4 <__s2b+0x30>
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff ff43 	bl	8007c6c <_Balloc>
 8007de6:	b940      	cbnz	r0, 8007dfa <__s2b+0x36>
 8007de8:	4602      	mov	r2, r0
 8007dea:	21ce      	movs	r1, #206	; 0xce
 8007dec:	4b18      	ldr	r3, [pc, #96]	; (8007e50 <__s2b+0x8c>)
 8007dee:	4819      	ldr	r0, [pc, #100]	; (8007e54 <__s2b+0x90>)
 8007df0:	f000 fe3a 	bl	8008a68 <__assert_func>
 8007df4:	0052      	lsls	r2, r2, #1
 8007df6:	3101      	adds	r1, #1
 8007df8:	e7f0      	b.n	8007ddc <__s2b+0x18>
 8007dfa:	9b08      	ldr	r3, [sp, #32]
 8007dfc:	2d09      	cmp	r5, #9
 8007dfe:	6143      	str	r3, [r0, #20]
 8007e00:	f04f 0301 	mov.w	r3, #1
 8007e04:	6103      	str	r3, [r0, #16]
 8007e06:	dd16      	ble.n	8007e36 <__s2b+0x72>
 8007e08:	f104 0909 	add.w	r9, r4, #9
 8007e0c:	46c8      	mov	r8, r9
 8007e0e:	442c      	add	r4, r5
 8007e10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007e14:	4601      	mov	r1, r0
 8007e16:	220a      	movs	r2, #10
 8007e18:	4630      	mov	r0, r6
 8007e1a:	3b30      	subs	r3, #48	; 0x30
 8007e1c:	f7ff ff88 	bl	8007d30 <__multadd>
 8007e20:	45a0      	cmp	r8, r4
 8007e22:	d1f5      	bne.n	8007e10 <__s2b+0x4c>
 8007e24:	f1a5 0408 	sub.w	r4, r5, #8
 8007e28:	444c      	add	r4, r9
 8007e2a:	1b2d      	subs	r5, r5, r4
 8007e2c:	1963      	adds	r3, r4, r5
 8007e2e:	42bb      	cmp	r3, r7
 8007e30:	db04      	blt.n	8007e3c <__s2b+0x78>
 8007e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e36:	2509      	movs	r5, #9
 8007e38:	340a      	adds	r4, #10
 8007e3a:	e7f6      	b.n	8007e2a <__s2b+0x66>
 8007e3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e40:	4601      	mov	r1, r0
 8007e42:	220a      	movs	r2, #10
 8007e44:	4630      	mov	r0, r6
 8007e46:	3b30      	subs	r3, #48	; 0x30
 8007e48:	f7ff ff72 	bl	8007d30 <__multadd>
 8007e4c:	e7ee      	b.n	8007e2c <__s2b+0x68>
 8007e4e:	bf00      	nop
 8007e50:	0800acd4 	.word	0x0800acd4
 8007e54:	0800ad64 	.word	0x0800ad64

08007e58 <__hi0bits>:
 8007e58:	0c02      	lsrs	r2, r0, #16
 8007e5a:	0412      	lsls	r2, r2, #16
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	b9ca      	cbnz	r2, 8007e94 <__hi0bits+0x3c>
 8007e60:	0403      	lsls	r3, r0, #16
 8007e62:	2010      	movs	r0, #16
 8007e64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007e68:	bf04      	itt	eq
 8007e6a:	021b      	lsleq	r3, r3, #8
 8007e6c:	3008      	addeq	r0, #8
 8007e6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007e72:	bf04      	itt	eq
 8007e74:	011b      	lsleq	r3, r3, #4
 8007e76:	3004      	addeq	r0, #4
 8007e78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007e7c:	bf04      	itt	eq
 8007e7e:	009b      	lsleq	r3, r3, #2
 8007e80:	3002      	addeq	r0, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	db05      	blt.n	8007e92 <__hi0bits+0x3a>
 8007e86:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007e8a:	f100 0001 	add.w	r0, r0, #1
 8007e8e:	bf08      	it	eq
 8007e90:	2020      	moveq	r0, #32
 8007e92:	4770      	bx	lr
 8007e94:	2000      	movs	r0, #0
 8007e96:	e7e5      	b.n	8007e64 <__hi0bits+0xc>

08007e98 <__lo0bits>:
 8007e98:	6803      	ldr	r3, [r0, #0]
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	f013 0007 	ands.w	r0, r3, #7
 8007ea0:	d00b      	beq.n	8007eba <__lo0bits+0x22>
 8007ea2:	07d9      	lsls	r1, r3, #31
 8007ea4:	d422      	bmi.n	8007eec <__lo0bits+0x54>
 8007ea6:	0798      	lsls	r0, r3, #30
 8007ea8:	bf49      	itett	mi
 8007eaa:	085b      	lsrmi	r3, r3, #1
 8007eac:	089b      	lsrpl	r3, r3, #2
 8007eae:	2001      	movmi	r0, #1
 8007eb0:	6013      	strmi	r3, [r2, #0]
 8007eb2:	bf5c      	itt	pl
 8007eb4:	2002      	movpl	r0, #2
 8007eb6:	6013      	strpl	r3, [r2, #0]
 8007eb8:	4770      	bx	lr
 8007eba:	b299      	uxth	r1, r3
 8007ebc:	b909      	cbnz	r1, 8007ec2 <__lo0bits+0x2a>
 8007ebe:	2010      	movs	r0, #16
 8007ec0:	0c1b      	lsrs	r3, r3, #16
 8007ec2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007ec6:	bf04      	itt	eq
 8007ec8:	0a1b      	lsreq	r3, r3, #8
 8007eca:	3008      	addeq	r0, #8
 8007ecc:	0719      	lsls	r1, r3, #28
 8007ece:	bf04      	itt	eq
 8007ed0:	091b      	lsreq	r3, r3, #4
 8007ed2:	3004      	addeq	r0, #4
 8007ed4:	0799      	lsls	r1, r3, #30
 8007ed6:	bf04      	itt	eq
 8007ed8:	089b      	lsreq	r3, r3, #2
 8007eda:	3002      	addeq	r0, #2
 8007edc:	07d9      	lsls	r1, r3, #31
 8007ede:	d403      	bmi.n	8007ee8 <__lo0bits+0x50>
 8007ee0:	085b      	lsrs	r3, r3, #1
 8007ee2:	f100 0001 	add.w	r0, r0, #1
 8007ee6:	d003      	beq.n	8007ef0 <__lo0bits+0x58>
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	4770      	bx	lr
 8007eec:	2000      	movs	r0, #0
 8007eee:	4770      	bx	lr
 8007ef0:	2020      	movs	r0, #32
 8007ef2:	4770      	bx	lr

08007ef4 <__i2b>:
 8007ef4:	b510      	push	{r4, lr}
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	2101      	movs	r1, #1
 8007efa:	f7ff feb7 	bl	8007c6c <_Balloc>
 8007efe:	4602      	mov	r2, r0
 8007f00:	b928      	cbnz	r0, 8007f0e <__i2b+0x1a>
 8007f02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f06:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <__i2b+0x24>)
 8007f08:	4804      	ldr	r0, [pc, #16]	; (8007f1c <__i2b+0x28>)
 8007f0a:	f000 fdad 	bl	8008a68 <__assert_func>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	6144      	str	r4, [r0, #20]
 8007f12:	6103      	str	r3, [r0, #16]
 8007f14:	bd10      	pop	{r4, pc}
 8007f16:	bf00      	nop
 8007f18:	0800acd4 	.word	0x0800acd4
 8007f1c:	0800ad64 	.word	0x0800ad64

08007f20 <__multiply>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	4614      	mov	r4, r2
 8007f26:	690a      	ldr	r2, [r1, #16]
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	460d      	mov	r5, r1
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	bfbe      	ittt	lt
 8007f30:	460b      	movlt	r3, r1
 8007f32:	4625      	movlt	r5, r4
 8007f34:	461c      	movlt	r4, r3
 8007f36:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007f3a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f3e:	68ab      	ldr	r3, [r5, #8]
 8007f40:	6869      	ldr	r1, [r5, #4]
 8007f42:	eb0a 0709 	add.w	r7, sl, r9
 8007f46:	42bb      	cmp	r3, r7
 8007f48:	b085      	sub	sp, #20
 8007f4a:	bfb8      	it	lt
 8007f4c:	3101      	addlt	r1, #1
 8007f4e:	f7ff fe8d 	bl	8007c6c <_Balloc>
 8007f52:	b930      	cbnz	r0, 8007f62 <__multiply+0x42>
 8007f54:	4602      	mov	r2, r0
 8007f56:	f240 115d 	movw	r1, #349	; 0x15d
 8007f5a:	4b41      	ldr	r3, [pc, #260]	; (8008060 <__multiply+0x140>)
 8007f5c:	4841      	ldr	r0, [pc, #260]	; (8008064 <__multiply+0x144>)
 8007f5e:	f000 fd83 	bl	8008a68 <__assert_func>
 8007f62:	f100 0614 	add.w	r6, r0, #20
 8007f66:	4633      	mov	r3, r6
 8007f68:	2200      	movs	r2, #0
 8007f6a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007f6e:	4543      	cmp	r3, r8
 8007f70:	d31e      	bcc.n	8007fb0 <__multiply+0x90>
 8007f72:	f105 0c14 	add.w	ip, r5, #20
 8007f76:	f104 0314 	add.w	r3, r4, #20
 8007f7a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007f7e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007f82:	9202      	str	r2, [sp, #8]
 8007f84:	ebac 0205 	sub.w	r2, ip, r5
 8007f88:	3a15      	subs	r2, #21
 8007f8a:	f022 0203 	bic.w	r2, r2, #3
 8007f8e:	3204      	adds	r2, #4
 8007f90:	f105 0115 	add.w	r1, r5, #21
 8007f94:	458c      	cmp	ip, r1
 8007f96:	bf38      	it	cc
 8007f98:	2204      	movcc	r2, #4
 8007f9a:	9201      	str	r2, [sp, #4]
 8007f9c:	9a02      	ldr	r2, [sp, #8]
 8007f9e:	9303      	str	r3, [sp, #12]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d808      	bhi.n	8007fb6 <__multiply+0x96>
 8007fa4:	2f00      	cmp	r7, #0
 8007fa6:	dc55      	bgt.n	8008054 <__multiply+0x134>
 8007fa8:	6107      	str	r7, [r0, #16]
 8007faa:	b005      	add	sp, #20
 8007fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb0:	f843 2b04 	str.w	r2, [r3], #4
 8007fb4:	e7db      	b.n	8007f6e <__multiply+0x4e>
 8007fb6:	f8b3 a000 	ldrh.w	sl, [r3]
 8007fba:	f1ba 0f00 	cmp.w	sl, #0
 8007fbe:	d020      	beq.n	8008002 <__multiply+0xe2>
 8007fc0:	46b1      	mov	r9, r6
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f105 0e14 	add.w	lr, r5, #20
 8007fc8:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007fcc:	f8d9 b000 	ldr.w	fp, [r9]
 8007fd0:	b2a1      	uxth	r1, r4
 8007fd2:	fa1f fb8b 	uxth.w	fp, fp
 8007fd6:	fb0a b101 	mla	r1, sl, r1, fp
 8007fda:	4411      	add	r1, r2
 8007fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8007fe0:	0c24      	lsrs	r4, r4, #16
 8007fe2:	0c12      	lsrs	r2, r2, #16
 8007fe4:	fb0a 2404 	mla	r4, sl, r4, r2
 8007fe8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007fec:	b289      	uxth	r1, r1
 8007fee:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ff2:	45f4      	cmp	ip, lr
 8007ff4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007ff8:	f849 1b04 	str.w	r1, [r9], #4
 8007ffc:	d8e4      	bhi.n	8007fc8 <__multiply+0xa8>
 8007ffe:	9901      	ldr	r1, [sp, #4]
 8008000:	5072      	str	r2, [r6, r1]
 8008002:	9a03      	ldr	r2, [sp, #12]
 8008004:	3304      	adds	r3, #4
 8008006:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800800a:	f1b9 0f00 	cmp.w	r9, #0
 800800e:	d01f      	beq.n	8008050 <__multiply+0x130>
 8008010:	46b6      	mov	lr, r6
 8008012:	f04f 0a00 	mov.w	sl, #0
 8008016:	6834      	ldr	r4, [r6, #0]
 8008018:	f105 0114 	add.w	r1, r5, #20
 800801c:	880a      	ldrh	r2, [r1, #0]
 800801e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008022:	b2a4      	uxth	r4, r4
 8008024:	fb09 b202 	mla	r2, r9, r2, fp
 8008028:	4492      	add	sl, r2
 800802a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800802e:	f84e 4b04 	str.w	r4, [lr], #4
 8008032:	f851 4b04 	ldr.w	r4, [r1], #4
 8008036:	f8be 2000 	ldrh.w	r2, [lr]
 800803a:	0c24      	lsrs	r4, r4, #16
 800803c:	fb09 2404 	mla	r4, r9, r4, r2
 8008040:	458c      	cmp	ip, r1
 8008042:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008046:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800804a:	d8e7      	bhi.n	800801c <__multiply+0xfc>
 800804c:	9a01      	ldr	r2, [sp, #4]
 800804e:	50b4      	str	r4, [r6, r2]
 8008050:	3604      	adds	r6, #4
 8008052:	e7a3      	b.n	8007f9c <__multiply+0x7c>
 8008054:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1a5      	bne.n	8007fa8 <__multiply+0x88>
 800805c:	3f01      	subs	r7, #1
 800805e:	e7a1      	b.n	8007fa4 <__multiply+0x84>
 8008060:	0800acd4 	.word	0x0800acd4
 8008064:	0800ad64 	.word	0x0800ad64

08008068 <__pow5mult>:
 8008068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800806c:	4615      	mov	r5, r2
 800806e:	f012 0203 	ands.w	r2, r2, #3
 8008072:	4606      	mov	r6, r0
 8008074:	460f      	mov	r7, r1
 8008076:	d007      	beq.n	8008088 <__pow5mult+0x20>
 8008078:	4c25      	ldr	r4, [pc, #148]	; (8008110 <__pow5mult+0xa8>)
 800807a:	3a01      	subs	r2, #1
 800807c:	2300      	movs	r3, #0
 800807e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008082:	f7ff fe55 	bl	8007d30 <__multadd>
 8008086:	4607      	mov	r7, r0
 8008088:	10ad      	asrs	r5, r5, #2
 800808a:	d03d      	beq.n	8008108 <__pow5mult+0xa0>
 800808c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800808e:	b97c      	cbnz	r4, 80080b0 <__pow5mult+0x48>
 8008090:	2010      	movs	r0, #16
 8008092:	f7ff fdb5 	bl	8007c00 <malloc>
 8008096:	4602      	mov	r2, r0
 8008098:	6270      	str	r0, [r6, #36]	; 0x24
 800809a:	b928      	cbnz	r0, 80080a8 <__pow5mult+0x40>
 800809c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80080a0:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <__pow5mult+0xac>)
 80080a2:	481d      	ldr	r0, [pc, #116]	; (8008118 <__pow5mult+0xb0>)
 80080a4:	f000 fce0 	bl	8008a68 <__assert_func>
 80080a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080ac:	6004      	str	r4, [r0, #0]
 80080ae:	60c4      	str	r4, [r0, #12]
 80080b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80080b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080b8:	b94c      	cbnz	r4, 80080ce <__pow5mult+0x66>
 80080ba:	f240 2171 	movw	r1, #625	; 0x271
 80080be:	4630      	mov	r0, r6
 80080c0:	f7ff ff18 	bl	8007ef4 <__i2b>
 80080c4:	2300      	movs	r3, #0
 80080c6:	4604      	mov	r4, r0
 80080c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	f04f 0900 	mov.w	r9, #0
 80080d2:	07eb      	lsls	r3, r5, #31
 80080d4:	d50a      	bpl.n	80080ec <__pow5mult+0x84>
 80080d6:	4639      	mov	r1, r7
 80080d8:	4622      	mov	r2, r4
 80080da:	4630      	mov	r0, r6
 80080dc:	f7ff ff20 	bl	8007f20 <__multiply>
 80080e0:	4680      	mov	r8, r0
 80080e2:	4639      	mov	r1, r7
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff fe01 	bl	8007cec <_Bfree>
 80080ea:	4647      	mov	r7, r8
 80080ec:	106d      	asrs	r5, r5, #1
 80080ee:	d00b      	beq.n	8008108 <__pow5mult+0xa0>
 80080f0:	6820      	ldr	r0, [r4, #0]
 80080f2:	b938      	cbnz	r0, 8008104 <__pow5mult+0x9c>
 80080f4:	4622      	mov	r2, r4
 80080f6:	4621      	mov	r1, r4
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff ff11 	bl	8007f20 <__multiply>
 80080fe:	6020      	str	r0, [r4, #0]
 8008100:	f8c0 9000 	str.w	r9, [r0]
 8008104:	4604      	mov	r4, r0
 8008106:	e7e4      	b.n	80080d2 <__pow5mult+0x6a>
 8008108:	4638      	mov	r0, r7
 800810a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810e:	bf00      	nop
 8008110:	0800aeb8 	.word	0x0800aeb8
 8008114:	0800ac5e 	.word	0x0800ac5e
 8008118:	0800ad64 	.word	0x0800ad64

0800811c <__lshift>:
 800811c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008120:	460c      	mov	r4, r1
 8008122:	4607      	mov	r7, r0
 8008124:	4691      	mov	r9, r2
 8008126:	6923      	ldr	r3, [r4, #16]
 8008128:	6849      	ldr	r1, [r1, #4]
 800812a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008134:	f108 0601 	add.w	r6, r8, #1
 8008138:	42b3      	cmp	r3, r6
 800813a:	db0b      	blt.n	8008154 <__lshift+0x38>
 800813c:	4638      	mov	r0, r7
 800813e:	f7ff fd95 	bl	8007c6c <_Balloc>
 8008142:	4605      	mov	r5, r0
 8008144:	b948      	cbnz	r0, 800815a <__lshift+0x3e>
 8008146:	4602      	mov	r2, r0
 8008148:	f240 11d9 	movw	r1, #473	; 0x1d9
 800814c:	4b27      	ldr	r3, [pc, #156]	; (80081ec <__lshift+0xd0>)
 800814e:	4828      	ldr	r0, [pc, #160]	; (80081f0 <__lshift+0xd4>)
 8008150:	f000 fc8a 	bl	8008a68 <__assert_func>
 8008154:	3101      	adds	r1, #1
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	e7ee      	b.n	8008138 <__lshift+0x1c>
 800815a:	2300      	movs	r3, #0
 800815c:	f100 0114 	add.w	r1, r0, #20
 8008160:	f100 0210 	add.w	r2, r0, #16
 8008164:	4618      	mov	r0, r3
 8008166:	4553      	cmp	r3, sl
 8008168:	db33      	blt.n	80081d2 <__lshift+0xb6>
 800816a:	6920      	ldr	r0, [r4, #16]
 800816c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008170:	f104 0314 	add.w	r3, r4, #20
 8008174:	f019 091f 	ands.w	r9, r9, #31
 8008178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800817c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008180:	d02b      	beq.n	80081da <__lshift+0xbe>
 8008182:	468a      	mov	sl, r1
 8008184:	2200      	movs	r2, #0
 8008186:	f1c9 0e20 	rsb	lr, r9, #32
 800818a:	6818      	ldr	r0, [r3, #0]
 800818c:	fa00 f009 	lsl.w	r0, r0, r9
 8008190:	4302      	orrs	r2, r0
 8008192:	f84a 2b04 	str.w	r2, [sl], #4
 8008196:	f853 2b04 	ldr.w	r2, [r3], #4
 800819a:	459c      	cmp	ip, r3
 800819c:	fa22 f20e 	lsr.w	r2, r2, lr
 80081a0:	d8f3      	bhi.n	800818a <__lshift+0x6e>
 80081a2:	ebac 0304 	sub.w	r3, ip, r4
 80081a6:	3b15      	subs	r3, #21
 80081a8:	f023 0303 	bic.w	r3, r3, #3
 80081ac:	3304      	adds	r3, #4
 80081ae:	f104 0015 	add.w	r0, r4, #21
 80081b2:	4584      	cmp	ip, r0
 80081b4:	bf38      	it	cc
 80081b6:	2304      	movcc	r3, #4
 80081b8:	50ca      	str	r2, [r1, r3]
 80081ba:	b10a      	cbz	r2, 80081c0 <__lshift+0xa4>
 80081bc:	f108 0602 	add.w	r6, r8, #2
 80081c0:	3e01      	subs	r6, #1
 80081c2:	4638      	mov	r0, r7
 80081c4:	4621      	mov	r1, r4
 80081c6:	612e      	str	r6, [r5, #16]
 80081c8:	f7ff fd90 	bl	8007cec <_Bfree>
 80081cc:	4628      	mov	r0, r5
 80081ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80081d6:	3301      	adds	r3, #1
 80081d8:	e7c5      	b.n	8008166 <__lshift+0x4a>
 80081da:	3904      	subs	r1, #4
 80081dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80081e0:	459c      	cmp	ip, r3
 80081e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80081e6:	d8f9      	bhi.n	80081dc <__lshift+0xc0>
 80081e8:	e7ea      	b.n	80081c0 <__lshift+0xa4>
 80081ea:	bf00      	nop
 80081ec:	0800acd4 	.word	0x0800acd4
 80081f0:	0800ad64 	.word	0x0800ad64

080081f4 <__mcmp>:
 80081f4:	4603      	mov	r3, r0
 80081f6:	690a      	ldr	r2, [r1, #16]
 80081f8:	6900      	ldr	r0, [r0, #16]
 80081fa:	b530      	push	{r4, r5, lr}
 80081fc:	1a80      	subs	r0, r0, r2
 80081fe:	d10d      	bne.n	800821c <__mcmp+0x28>
 8008200:	3314      	adds	r3, #20
 8008202:	3114      	adds	r1, #20
 8008204:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008208:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800820c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008210:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008214:	4295      	cmp	r5, r2
 8008216:	d002      	beq.n	800821e <__mcmp+0x2a>
 8008218:	d304      	bcc.n	8008224 <__mcmp+0x30>
 800821a:	2001      	movs	r0, #1
 800821c:	bd30      	pop	{r4, r5, pc}
 800821e:	42a3      	cmp	r3, r4
 8008220:	d3f4      	bcc.n	800820c <__mcmp+0x18>
 8008222:	e7fb      	b.n	800821c <__mcmp+0x28>
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	e7f8      	b.n	800821c <__mcmp+0x28>
	...

0800822c <__mdiff>:
 800822c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	460c      	mov	r4, r1
 8008232:	4606      	mov	r6, r0
 8008234:	4611      	mov	r1, r2
 8008236:	4620      	mov	r0, r4
 8008238:	4692      	mov	sl, r2
 800823a:	f7ff ffdb 	bl	80081f4 <__mcmp>
 800823e:	1e05      	subs	r5, r0, #0
 8008240:	d111      	bne.n	8008266 <__mdiff+0x3a>
 8008242:	4629      	mov	r1, r5
 8008244:	4630      	mov	r0, r6
 8008246:	f7ff fd11 	bl	8007c6c <_Balloc>
 800824a:	4602      	mov	r2, r0
 800824c:	b928      	cbnz	r0, 800825a <__mdiff+0x2e>
 800824e:	f240 2132 	movw	r1, #562	; 0x232
 8008252:	4b3c      	ldr	r3, [pc, #240]	; (8008344 <__mdiff+0x118>)
 8008254:	483c      	ldr	r0, [pc, #240]	; (8008348 <__mdiff+0x11c>)
 8008256:	f000 fc07 	bl	8008a68 <__assert_func>
 800825a:	2301      	movs	r3, #1
 800825c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008260:	4610      	mov	r0, r2
 8008262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008266:	bfa4      	itt	ge
 8008268:	4653      	movge	r3, sl
 800826a:	46a2      	movge	sl, r4
 800826c:	4630      	mov	r0, r6
 800826e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008272:	bfa6      	itte	ge
 8008274:	461c      	movge	r4, r3
 8008276:	2500      	movge	r5, #0
 8008278:	2501      	movlt	r5, #1
 800827a:	f7ff fcf7 	bl	8007c6c <_Balloc>
 800827e:	4602      	mov	r2, r0
 8008280:	b918      	cbnz	r0, 800828a <__mdiff+0x5e>
 8008282:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008286:	4b2f      	ldr	r3, [pc, #188]	; (8008344 <__mdiff+0x118>)
 8008288:	e7e4      	b.n	8008254 <__mdiff+0x28>
 800828a:	f100 0814 	add.w	r8, r0, #20
 800828e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008292:	60c5      	str	r5, [r0, #12]
 8008294:	f04f 0c00 	mov.w	ip, #0
 8008298:	f10a 0514 	add.w	r5, sl, #20
 800829c:	f10a 0010 	add.w	r0, sl, #16
 80082a0:	46c2      	mov	sl, r8
 80082a2:	6926      	ldr	r6, [r4, #16]
 80082a4:	f104 0914 	add.w	r9, r4, #20
 80082a8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80082ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80082b0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80082b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80082b8:	fa1f f18b 	uxth.w	r1, fp
 80082bc:	4461      	add	r1, ip
 80082be:	fa1f fc83 	uxth.w	ip, r3
 80082c2:	0c1b      	lsrs	r3, r3, #16
 80082c4:	eba1 010c 	sub.w	r1, r1, ip
 80082c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80082d0:	b289      	uxth	r1, r1
 80082d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80082d6:	454e      	cmp	r6, r9
 80082d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082dc:	f84a 3b04 	str.w	r3, [sl], #4
 80082e0:	d8e6      	bhi.n	80082b0 <__mdiff+0x84>
 80082e2:	1b33      	subs	r3, r6, r4
 80082e4:	3b15      	subs	r3, #21
 80082e6:	f023 0303 	bic.w	r3, r3, #3
 80082ea:	3415      	adds	r4, #21
 80082ec:	3304      	adds	r3, #4
 80082ee:	42a6      	cmp	r6, r4
 80082f0:	bf38      	it	cc
 80082f2:	2304      	movcc	r3, #4
 80082f4:	441d      	add	r5, r3
 80082f6:	4443      	add	r3, r8
 80082f8:	461e      	mov	r6, r3
 80082fa:	462c      	mov	r4, r5
 80082fc:	4574      	cmp	r4, lr
 80082fe:	d30e      	bcc.n	800831e <__mdiff+0xf2>
 8008300:	f10e 0103 	add.w	r1, lr, #3
 8008304:	1b49      	subs	r1, r1, r5
 8008306:	f021 0103 	bic.w	r1, r1, #3
 800830a:	3d03      	subs	r5, #3
 800830c:	45ae      	cmp	lr, r5
 800830e:	bf38      	it	cc
 8008310:	2100      	movcc	r1, #0
 8008312:	4419      	add	r1, r3
 8008314:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008318:	b18b      	cbz	r3, 800833e <__mdiff+0x112>
 800831a:	6117      	str	r7, [r2, #16]
 800831c:	e7a0      	b.n	8008260 <__mdiff+0x34>
 800831e:	f854 8b04 	ldr.w	r8, [r4], #4
 8008322:	fa1f f188 	uxth.w	r1, r8
 8008326:	4461      	add	r1, ip
 8008328:	1408      	asrs	r0, r1, #16
 800832a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800832e:	b289      	uxth	r1, r1
 8008330:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008334:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008338:	f846 1b04 	str.w	r1, [r6], #4
 800833c:	e7de      	b.n	80082fc <__mdiff+0xd0>
 800833e:	3f01      	subs	r7, #1
 8008340:	e7e8      	b.n	8008314 <__mdiff+0xe8>
 8008342:	bf00      	nop
 8008344:	0800acd4 	.word	0x0800acd4
 8008348:	0800ad64 	.word	0x0800ad64

0800834c <__ulp>:
 800834c:	4b11      	ldr	r3, [pc, #68]	; (8008394 <__ulp+0x48>)
 800834e:	400b      	ands	r3, r1
 8008350:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd02      	ble.n	800835e <__ulp+0x12>
 8008358:	2000      	movs	r0, #0
 800835a:	4619      	mov	r1, r3
 800835c:	4770      	bx	lr
 800835e:	425b      	negs	r3, r3
 8008360:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	f04f 0100 	mov.w	r1, #0
 800836c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008370:	da04      	bge.n	800837c <__ulp+0x30>
 8008372:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008376:	fa43 f102 	asr.w	r1, r3, r2
 800837a:	4770      	bx	lr
 800837c:	f1a2 0314 	sub.w	r3, r2, #20
 8008380:	2b1e      	cmp	r3, #30
 8008382:	bfd6      	itet	le
 8008384:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008388:	2301      	movgt	r3, #1
 800838a:	fa22 f303 	lsrle.w	r3, r2, r3
 800838e:	4618      	mov	r0, r3
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	7ff00000 	.word	0x7ff00000

08008398 <__b2d>:
 8008398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800839c:	6907      	ldr	r7, [r0, #16]
 800839e:	f100 0914 	add.w	r9, r0, #20
 80083a2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80083a6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80083aa:	f1a7 0804 	sub.w	r8, r7, #4
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff fd52 	bl	8007e58 <__hi0bits>
 80083b4:	f1c0 0320 	rsb	r3, r0, #32
 80083b8:	280a      	cmp	r0, #10
 80083ba:	600b      	str	r3, [r1, #0]
 80083bc:	491f      	ldr	r1, [pc, #124]	; (800843c <__b2d+0xa4>)
 80083be:	dc17      	bgt.n	80083f0 <__b2d+0x58>
 80083c0:	45c1      	cmp	r9, r8
 80083c2:	bf28      	it	cs
 80083c4:	2200      	movcs	r2, #0
 80083c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80083ca:	fa26 f30c 	lsr.w	r3, r6, ip
 80083ce:	bf38      	it	cc
 80083d0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80083d4:	ea43 0501 	orr.w	r5, r3, r1
 80083d8:	f100 0315 	add.w	r3, r0, #21
 80083dc:	fa06 f303 	lsl.w	r3, r6, r3
 80083e0:	fa22 f20c 	lsr.w	r2, r2, ip
 80083e4:	ea43 0402 	orr.w	r4, r3, r2
 80083e8:	4620      	mov	r0, r4
 80083ea:	4629      	mov	r1, r5
 80083ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f0:	45c1      	cmp	r9, r8
 80083f2:	bf2e      	itee	cs
 80083f4:	2200      	movcs	r2, #0
 80083f6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80083fa:	f1a7 0808 	subcc.w	r8, r7, #8
 80083fe:	f1b0 030b 	subs.w	r3, r0, #11
 8008402:	d016      	beq.n	8008432 <__b2d+0x9a>
 8008404:	f1c3 0720 	rsb	r7, r3, #32
 8008408:	fa22 f107 	lsr.w	r1, r2, r7
 800840c:	45c8      	cmp	r8, r9
 800840e:	fa06 f603 	lsl.w	r6, r6, r3
 8008412:	ea46 0601 	orr.w	r6, r6, r1
 8008416:	bf94      	ite	ls
 8008418:	2100      	movls	r1, #0
 800841a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800841e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008422:	fa02 f003 	lsl.w	r0, r2, r3
 8008426:	40f9      	lsrs	r1, r7
 8008428:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800842c:	ea40 0401 	orr.w	r4, r0, r1
 8008430:	e7da      	b.n	80083e8 <__b2d+0x50>
 8008432:	4614      	mov	r4, r2
 8008434:	ea46 0501 	orr.w	r5, r6, r1
 8008438:	e7d6      	b.n	80083e8 <__b2d+0x50>
 800843a:	bf00      	nop
 800843c:	3ff00000 	.word	0x3ff00000

08008440 <__d2b>:
 8008440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008444:	2101      	movs	r1, #1
 8008446:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800844a:	4690      	mov	r8, r2
 800844c:	461d      	mov	r5, r3
 800844e:	f7ff fc0d 	bl	8007c6c <_Balloc>
 8008452:	4604      	mov	r4, r0
 8008454:	b930      	cbnz	r0, 8008464 <__d2b+0x24>
 8008456:	4602      	mov	r2, r0
 8008458:	f240 310a 	movw	r1, #778	; 0x30a
 800845c:	4b24      	ldr	r3, [pc, #144]	; (80084f0 <__d2b+0xb0>)
 800845e:	4825      	ldr	r0, [pc, #148]	; (80084f4 <__d2b+0xb4>)
 8008460:	f000 fb02 	bl	8008a68 <__assert_func>
 8008464:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008468:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800846c:	bb2d      	cbnz	r5, 80084ba <__d2b+0x7a>
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	f1b8 0300 	subs.w	r3, r8, #0
 8008474:	d026      	beq.n	80084c4 <__d2b+0x84>
 8008476:	4668      	mov	r0, sp
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	f7ff fd0d 	bl	8007e98 <__lo0bits>
 800847e:	9900      	ldr	r1, [sp, #0]
 8008480:	b1f0      	cbz	r0, 80084c0 <__d2b+0x80>
 8008482:	9a01      	ldr	r2, [sp, #4]
 8008484:	f1c0 0320 	rsb	r3, r0, #32
 8008488:	fa02 f303 	lsl.w	r3, r2, r3
 800848c:	430b      	orrs	r3, r1
 800848e:	40c2      	lsrs	r2, r0
 8008490:	6163      	str	r3, [r4, #20]
 8008492:	9201      	str	r2, [sp, #4]
 8008494:	9b01      	ldr	r3, [sp, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	bf14      	ite	ne
 800849a:	2102      	movne	r1, #2
 800849c:	2101      	moveq	r1, #1
 800849e:	61a3      	str	r3, [r4, #24]
 80084a0:	6121      	str	r1, [r4, #16]
 80084a2:	b1c5      	cbz	r5, 80084d6 <__d2b+0x96>
 80084a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084a8:	4405      	add	r5, r0
 80084aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084ae:	603d      	str	r5, [r7, #0]
 80084b0:	6030      	str	r0, [r6, #0]
 80084b2:	4620      	mov	r0, r4
 80084b4:	b002      	add	sp, #8
 80084b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084be:	e7d6      	b.n	800846e <__d2b+0x2e>
 80084c0:	6161      	str	r1, [r4, #20]
 80084c2:	e7e7      	b.n	8008494 <__d2b+0x54>
 80084c4:	a801      	add	r0, sp, #4
 80084c6:	f7ff fce7 	bl	8007e98 <__lo0bits>
 80084ca:	2101      	movs	r1, #1
 80084cc:	9b01      	ldr	r3, [sp, #4]
 80084ce:	6121      	str	r1, [r4, #16]
 80084d0:	6163      	str	r3, [r4, #20]
 80084d2:	3020      	adds	r0, #32
 80084d4:	e7e5      	b.n	80084a2 <__d2b+0x62>
 80084d6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80084da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084de:	6038      	str	r0, [r7, #0]
 80084e0:	6918      	ldr	r0, [r3, #16]
 80084e2:	f7ff fcb9 	bl	8007e58 <__hi0bits>
 80084e6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80084ea:	6031      	str	r1, [r6, #0]
 80084ec:	e7e1      	b.n	80084b2 <__d2b+0x72>
 80084ee:	bf00      	nop
 80084f0:	0800acd4 	.word	0x0800acd4
 80084f4:	0800ad64 	.word	0x0800ad64

080084f8 <__ratio>:
 80084f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	4688      	mov	r8, r1
 80084fe:	4669      	mov	r1, sp
 8008500:	4681      	mov	r9, r0
 8008502:	f7ff ff49 	bl	8008398 <__b2d>
 8008506:	460f      	mov	r7, r1
 8008508:	4604      	mov	r4, r0
 800850a:	460d      	mov	r5, r1
 800850c:	4640      	mov	r0, r8
 800850e:	a901      	add	r1, sp, #4
 8008510:	f7ff ff42 	bl	8008398 <__b2d>
 8008514:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008518:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800851c:	468b      	mov	fp, r1
 800851e:	eba3 0c02 	sub.w	ip, r3, r2
 8008522:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800852c:	2b00      	cmp	r3, #0
 800852e:	bfd5      	itete	le
 8008530:	460a      	movle	r2, r1
 8008532:	462a      	movgt	r2, r5
 8008534:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008538:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800853c:	bfd8      	it	le
 800853e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008542:	465b      	mov	r3, fp
 8008544:	4602      	mov	r2, r0
 8008546:	4639      	mov	r1, r7
 8008548:	4620      	mov	r0, r4
 800854a:	f7f8 f8ef 	bl	800072c <__aeabi_ddiv>
 800854e:	b003      	add	sp, #12
 8008550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008554 <__copybits>:
 8008554:	3901      	subs	r1, #1
 8008556:	b570      	push	{r4, r5, r6, lr}
 8008558:	1149      	asrs	r1, r1, #5
 800855a:	6914      	ldr	r4, [r2, #16]
 800855c:	3101      	adds	r1, #1
 800855e:	f102 0314 	add.w	r3, r2, #20
 8008562:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008566:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800856a:	1f05      	subs	r5, r0, #4
 800856c:	42a3      	cmp	r3, r4
 800856e:	d30c      	bcc.n	800858a <__copybits+0x36>
 8008570:	1aa3      	subs	r3, r4, r2
 8008572:	3b11      	subs	r3, #17
 8008574:	f023 0303 	bic.w	r3, r3, #3
 8008578:	3211      	adds	r2, #17
 800857a:	42a2      	cmp	r2, r4
 800857c:	bf88      	it	hi
 800857e:	2300      	movhi	r3, #0
 8008580:	4418      	add	r0, r3
 8008582:	2300      	movs	r3, #0
 8008584:	4288      	cmp	r0, r1
 8008586:	d305      	bcc.n	8008594 <__copybits+0x40>
 8008588:	bd70      	pop	{r4, r5, r6, pc}
 800858a:	f853 6b04 	ldr.w	r6, [r3], #4
 800858e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008592:	e7eb      	b.n	800856c <__copybits+0x18>
 8008594:	f840 3b04 	str.w	r3, [r0], #4
 8008598:	e7f4      	b.n	8008584 <__copybits+0x30>

0800859a <__any_on>:
 800859a:	f100 0214 	add.w	r2, r0, #20
 800859e:	6900      	ldr	r0, [r0, #16]
 80085a0:	114b      	asrs	r3, r1, #5
 80085a2:	4298      	cmp	r0, r3
 80085a4:	b510      	push	{r4, lr}
 80085a6:	db11      	blt.n	80085cc <__any_on+0x32>
 80085a8:	dd0a      	ble.n	80085c0 <__any_on+0x26>
 80085aa:	f011 011f 	ands.w	r1, r1, #31
 80085ae:	d007      	beq.n	80085c0 <__any_on+0x26>
 80085b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80085b4:	fa24 f001 	lsr.w	r0, r4, r1
 80085b8:	fa00 f101 	lsl.w	r1, r0, r1
 80085bc:	428c      	cmp	r4, r1
 80085be:	d10b      	bne.n	80085d8 <__any_on+0x3e>
 80085c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d803      	bhi.n	80085d0 <__any_on+0x36>
 80085c8:	2000      	movs	r0, #0
 80085ca:	bd10      	pop	{r4, pc}
 80085cc:	4603      	mov	r3, r0
 80085ce:	e7f7      	b.n	80085c0 <__any_on+0x26>
 80085d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085d4:	2900      	cmp	r1, #0
 80085d6:	d0f5      	beq.n	80085c4 <__any_on+0x2a>
 80085d8:	2001      	movs	r0, #1
 80085da:	e7f6      	b.n	80085ca <__any_on+0x30>

080085dc <_calloc_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	fb02 f501 	mul.w	r5, r2, r1
 80085e2:	4629      	mov	r1, r5
 80085e4:	f000 f854 	bl	8008690 <_malloc_r>
 80085e8:	4604      	mov	r4, r0
 80085ea:	b118      	cbz	r0, 80085f4 <_calloc_r+0x18>
 80085ec:	462a      	mov	r2, r5
 80085ee:	2100      	movs	r1, #0
 80085f0:	f7fc fbdc 	bl	8004dac <memset>
 80085f4:	4620      	mov	r0, r4
 80085f6:	bd38      	pop	{r3, r4, r5, pc}

080085f8 <_free_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4605      	mov	r5, r0
 80085fc:	2900      	cmp	r1, #0
 80085fe:	d043      	beq.n	8008688 <_free_r+0x90>
 8008600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008604:	1f0c      	subs	r4, r1, #4
 8008606:	2b00      	cmp	r3, #0
 8008608:	bfb8      	it	lt
 800860a:	18e4      	addlt	r4, r4, r3
 800860c:	f000 fa76 	bl	8008afc <__malloc_lock>
 8008610:	4a1e      	ldr	r2, [pc, #120]	; (800868c <_free_r+0x94>)
 8008612:	6813      	ldr	r3, [r2, #0]
 8008614:	4610      	mov	r0, r2
 8008616:	b933      	cbnz	r3, 8008626 <_free_r+0x2e>
 8008618:	6063      	str	r3, [r4, #4]
 800861a:	6014      	str	r4, [r2, #0]
 800861c:	4628      	mov	r0, r5
 800861e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008622:	f000 ba71 	b.w	8008b08 <__malloc_unlock>
 8008626:	42a3      	cmp	r3, r4
 8008628:	d90a      	bls.n	8008640 <_free_r+0x48>
 800862a:	6821      	ldr	r1, [r4, #0]
 800862c:	1862      	adds	r2, r4, r1
 800862e:	4293      	cmp	r3, r2
 8008630:	bf01      	itttt	eq
 8008632:	681a      	ldreq	r2, [r3, #0]
 8008634:	685b      	ldreq	r3, [r3, #4]
 8008636:	1852      	addeq	r2, r2, r1
 8008638:	6022      	streq	r2, [r4, #0]
 800863a:	6063      	str	r3, [r4, #4]
 800863c:	6004      	str	r4, [r0, #0]
 800863e:	e7ed      	b.n	800861c <_free_r+0x24>
 8008640:	461a      	mov	r2, r3
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	b10b      	cbz	r3, 800864a <_free_r+0x52>
 8008646:	42a3      	cmp	r3, r4
 8008648:	d9fa      	bls.n	8008640 <_free_r+0x48>
 800864a:	6811      	ldr	r1, [r2, #0]
 800864c:	1850      	adds	r0, r2, r1
 800864e:	42a0      	cmp	r0, r4
 8008650:	d10b      	bne.n	800866a <_free_r+0x72>
 8008652:	6820      	ldr	r0, [r4, #0]
 8008654:	4401      	add	r1, r0
 8008656:	1850      	adds	r0, r2, r1
 8008658:	4283      	cmp	r3, r0
 800865a:	6011      	str	r1, [r2, #0]
 800865c:	d1de      	bne.n	800861c <_free_r+0x24>
 800865e:	6818      	ldr	r0, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	4401      	add	r1, r0
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	6053      	str	r3, [r2, #4]
 8008668:	e7d8      	b.n	800861c <_free_r+0x24>
 800866a:	d902      	bls.n	8008672 <_free_r+0x7a>
 800866c:	230c      	movs	r3, #12
 800866e:	602b      	str	r3, [r5, #0]
 8008670:	e7d4      	b.n	800861c <_free_r+0x24>
 8008672:	6820      	ldr	r0, [r4, #0]
 8008674:	1821      	adds	r1, r4, r0
 8008676:	428b      	cmp	r3, r1
 8008678:	bf01      	itttt	eq
 800867a:	6819      	ldreq	r1, [r3, #0]
 800867c:	685b      	ldreq	r3, [r3, #4]
 800867e:	1809      	addeq	r1, r1, r0
 8008680:	6021      	streq	r1, [r4, #0]
 8008682:	6063      	str	r3, [r4, #4]
 8008684:	6054      	str	r4, [r2, #4]
 8008686:	e7c9      	b.n	800861c <_free_r+0x24>
 8008688:	bd38      	pop	{r3, r4, r5, pc}
 800868a:	bf00      	nop
 800868c:	2000026c 	.word	0x2000026c

08008690 <_malloc_r>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	1ccd      	adds	r5, r1, #3
 8008694:	f025 0503 	bic.w	r5, r5, #3
 8008698:	3508      	adds	r5, #8
 800869a:	2d0c      	cmp	r5, #12
 800869c:	bf38      	it	cc
 800869e:	250c      	movcc	r5, #12
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	4606      	mov	r6, r0
 80086a4:	db01      	blt.n	80086aa <_malloc_r+0x1a>
 80086a6:	42a9      	cmp	r1, r5
 80086a8:	d903      	bls.n	80086b2 <_malloc_r+0x22>
 80086aa:	230c      	movs	r3, #12
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	2000      	movs	r0, #0
 80086b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b2:	f000 fa23 	bl	8008afc <__malloc_lock>
 80086b6:	4921      	ldr	r1, [pc, #132]	; (800873c <_malloc_r+0xac>)
 80086b8:	680a      	ldr	r2, [r1, #0]
 80086ba:	4614      	mov	r4, r2
 80086bc:	b99c      	cbnz	r4, 80086e6 <_malloc_r+0x56>
 80086be:	4f20      	ldr	r7, [pc, #128]	; (8008740 <_malloc_r+0xb0>)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	b923      	cbnz	r3, 80086ce <_malloc_r+0x3e>
 80086c4:	4621      	mov	r1, r4
 80086c6:	4630      	mov	r0, r6
 80086c8:	f000 f99e 	bl	8008a08 <_sbrk_r>
 80086cc:	6038      	str	r0, [r7, #0]
 80086ce:	4629      	mov	r1, r5
 80086d0:	4630      	mov	r0, r6
 80086d2:	f000 f999 	bl	8008a08 <_sbrk_r>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	d123      	bne.n	8008722 <_malloc_r+0x92>
 80086da:	230c      	movs	r3, #12
 80086dc:	4630      	mov	r0, r6
 80086de:	6033      	str	r3, [r6, #0]
 80086e0:	f000 fa12 	bl	8008b08 <__malloc_unlock>
 80086e4:	e7e3      	b.n	80086ae <_malloc_r+0x1e>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	1b5b      	subs	r3, r3, r5
 80086ea:	d417      	bmi.n	800871c <_malloc_r+0x8c>
 80086ec:	2b0b      	cmp	r3, #11
 80086ee:	d903      	bls.n	80086f8 <_malloc_r+0x68>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	441c      	add	r4, r3
 80086f4:	6025      	str	r5, [r4, #0]
 80086f6:	e004      	b.n	8008702 <_malloc_r+0x72>
 80086f8:	6863      	ldr	r3, [r4, #4]
 80086fa:	42a2      	cmp	r2, r4
 80086fc:	bf0c      	ite	eq
 80086fe:	600b      	streq	r3, [r1, #0]
 8008700:	6053      	strne	r3, [r2, #4]
 8008702:	4630      	mov	r0, r6
 8008704:	f000 fa00 	bl	8008b08 <__malloc_unlock>
 8008708:	f104 000b 	add.w	r0, r4, #11
 800870c:	1d23      	adds	r3, r4, #4
 800870e:	f020 0007 	bic.w	r0, r0, #7
 8008712:	1ac2      	subs	r2, r0, r3
 8008714:	d0cc      	beq.n	80086b0 <_malloc_r+0x20>
 8008716:	1a1b      	subs	r3, r3, r0
 8008718:	50a3      	str	r3, [r4, r2]
 800871a:	e7c9      	b.n	80086b0 <_malloc_r+0x20>
 800871c:	4622      	mov	r2, r4
 800871e:	6864      	ldr	r4, [r4, #4]
 8008720:	e7cc      	b.n	80086bc <_malloc_r+0x2c>
 8008722:	1cc4      	adds	r4, r0, #3
 8008724:	f024 0403 	bic.w	r4, r4, #3
 8008728:	42a0      	cmp	r0, r4
 800872a:	d0e3      	beq.n	80086f4 <_malloc_r+0x64>
 800872c:	1a21      	subs	r1, r4, r0
 800872e:	4630      	mov	r0, r6
 8008730:	f000 f96a 	bl	8008a08 <_sbrk_r>
 8008734:	3001      	adds	r0, #1
 8008736:	d1dd      	bne.n	80086f4 <_malloc_r+0x64>
 8008738:	e7cf      	b.n	80086da <_malloc_r+0x4a>
 800873a:	bf00      	nop
 800873c:	2000026c 	.word	0x2000026c
 8008740:	20000270 	.word	0x20000270

08008744 <__ssputs_r>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	688e      	ldr	r6, [r1, #8]
 800874a:	4682      	mov	sl, r0
 800874c:	429e      	cmp	r6, r3
 800874e:	460c      	mov	r4, r1
 8008750:	4690      	mov	r8, r2
 8008752:	461f      	mov	r7, r3
 8008754:	d838      	bhi.n	80087c8 <__ssputs_r+0x84>
 8008756:	898a      	ldrh	r2, [r1, #12]
 8008758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800875c:	d032      	beq.n	80087c4 <__ssputs_r+0x80>
 800875e:	6825      	ldr	r5, [r4, #0]
 8008760:	6909      	ldr	r1, [r1, #16]
 8008762:	3301      	adds	r3, #1
 8008764:	eba5 0901 	sub.w	r9, r5, r1
 8008768:	6965      	ldr	r5, [r4, #20]
 800876a:	444b      	add	r3, r9
 800876c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008774:	106d      	asrs	r5, r5, #1
 8008776:	429d      	cmp	r5, r3
 8008778:	bf38      	it	cc
 800877a:	461d      	movcc	r5, r3
 800877c:	0553      	lsls	r3, r2, #21
 800877e:	d531      	bpl.n	80087e4 <__ssputs_r+0xa0>
 8008780:	4629      	mov	r1, r5
 8008782:	f7ff ff85 	bl	8008690 <_malloc_r>
 8008786:	4606      	mov	r6, r0
 8008788:	b950      	cbnz	r0, 80087a0 <__ssputs_r+0x5c>
 800878a:	230c      	movs	r3, #12
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	f8ca 3000 	str.w	r3, [sl]
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a0:	464a      	mov	r2, r9
 80087a2:	6921      	ldr	r1, [r4, #16]
 80087a4:	f7ff fa54 	bl	8007c50 <memcpy>
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	6126      	str	r6, [r4, #16]
 80087b6:	444e      	add	r6, r9
 80087b8:	6026      	str	r6, [r4, #0]
 80087ba:	463e      	mov	r6, r7
 80087bc:	6165      	str	r5, [r4, #20]
 80087be:	eba5 0509 	sub.w	r5, r5, r9
 80087c2:	60a5      	str	r5, [r4, #8]
 80087c4:	42be      	cmp	r6, r7
 80087c6:	d900      	bls.n	80087ca <__ssputs_r+0x86>
 80087c8:	463e      	mov	r6, r7
 80087ca:	4632      	mov	r2, r6
 80087cc:	4641      	mov	r1, r8
 80087ce:	6820      	ldr	r0, [r4, #0]
 80087d0:	f000 f97a 	bl	8008ac8 <memmove>
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	1b9b      	subs	r3, r3, r6
 80087da:	4432      	add	r2, r6
 80087dc:	2000      	movs	r0, #0
 80087de:	60a3      	str	r3, [r4, #8]
 80087e0:	6022      	str	r2, [r4, #0]
 80087e2:	e7db      	b.n	800879c <__ssputs_r+0x58>
 80087e4:	462a      	mov	r2, r5
 80087e6:	f000 f995 	bl	8008b14 <_realloc_r>
 80087ea:	4606      	mov	r6, r0
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d1e1      	bne.n	80087b4 <__ssputs_r+0x70>
 80087f0:	4650      	mov	r0, sl
 80087f2:	6921      	ldr	r1, [r4, #16]
 80087f4:	f7ff ff00 	bl	80085f8 <_free_r>
 80087f8:	e7c7      	b.n	800878a <__ssputs_r+0x46>
	...

080087fc <_svfiprintf_r>:
 80087fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008800:	4698      	mov	r8, r3
 8008802:	898b      	ldrh	r3, [r1, #12]
 8008804:	4607      	mov	r7, r0
 8008806:	061b      	lsls	r3, r3, #24
 8008808:	460d      	mov	r5, r1
 800880a:	4614      	mov	r4, r2
 800880c:	b09d      	sub	sp, #116	; 0x74
 800880e:	d50e      	bpl.n	800882e <_svfiprintf_r+0x32>
 8008810:	690b      	ldr	r3, [r1, #16]
 8008812:	b963      	cbnz	r3, 800882e <_svfiprintf_r+0x32>
 8008814:	2140      	movs	r1, #64	; 0x40
 8008816:	f7ff ff3b 	bl	8008690 <_malloc_r>
 800881a:	6028      	str	r0, [r5, #0]
 800881c:	6128      	str	r0, [r5, #16]
 800881e:	b920      	cbnz	r0, 800882a <_svfiprintf_r+0x2e>
 8008820:	230c      	movs	r3, #12
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	e0d1      	b.n	80089ce <_svfiprintf_r+0x1d2>
 800882a:	2340      	movs	r3, #64	; 0x40
 800882c:	616b      	str	r3, [r5, #20]
 800882e:	2300      	movs	r3, #0
 8008830:	9309      	str	r3, [sp, #36]	; 0x24
 8008832:	2320      	movs	r3, #32
 8008834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008838:	2330      	movs	r3, #48	; 0x30
 800883a:	f04f 0901 	mov.w	r9, #1
 800883e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008842:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80089e8 <_svfiprintf_r+0x1ec>
 8008846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800884a:	4623      	mov	r3, r4
 800884c:	469a      	mov	sl, r3
 800884e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008852:	b10a      	cbz	r2, 8008858 <_svfiprintf_r+0x5c>
 8008854:	2a25      	cmp	r2, #37	; 0x25
 8008856:	d1f9      	bne.n	800884c <_svfiprintf_r+0x50>
 8008858:	ebba 0b04 	subs.w	fp, sl, r4
 800885c:	d00b      	beq.n	8008876 <_svfiprintf_r+0x7a>
 800885e:	465b      	mov	r3, fp
 8008860:	4622      	mov	r2, r4
 8008862:	4629      	mov	r1, r5
 8008864:	4638      	mov	r0, r7
 8008866:	f7ff ff6d 	bl	8008744 <__ssputs_r>
 800886a:	3001      	adds	r0, #1
 800886c:	f000 80aa 	beq.w	80089c4 <_svfiprintf_r+0x1c8>
 8008870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008872:	445a      	add	r2, fp
 8008874:	9209      	str	r2, [sp, #36]	; 0x24
 8008876:	f89a 3000 	ldrb.w	r3, [sl]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80a2 	beq.w	80089c4 <_svfiprintf_r+0x1c8>
 8008880:	2300      	movs	r3, #0
 8008882:	f04f 32ff 	mov.w	r2, #4294967295
 8008886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800888a:	f10a 0a01 	add.w	sl, sl, #1
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008896:	931a      	str	r3, [sp, #104]	; 0x68
 8008898:	4654      	mov	r4, sl
 800889a:	2205      	movs	r2, #5
 800889c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a0:	4851      	ldr	r0, [pc, #324]	; (80089e8 <_svfiprintf_r+0x1ec>)
 80088a2:	f7ff f9c7 	bl	8007c34 <memchr>
 80088a6:	9a04      	ldr	r2, [sp, #16]
 80088a8:	b9d8      	cbnz	r0, 80088e2 <_svfiprintf_r+0xe6>
 80088aa:	06d0      	lsls	r0, r2, #27
 80088ac:	bf44      	itt	mi
 80088ae:	2320      	movmi	r3, #32
 80088b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b4:	0711      	lsls	r1, r2, #28
 80088b6:	bf44      	itt	mi
 80088b8:	232b      	movmi	r3, #43	; 0x2b
 80088ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088be:	f89a 3000 	ldrb.w	r3, [sl]
 80088c2:	2b2a      	cmp	r3, #42	; 0x2a
 80088c4:	d015      	beq.n	80088f2 <_svfiprintf_r+0xf6>
 80088c6:	4654      	mov	r4, sl
 80088c8:	2000      	movs	r0, #0
 80088ca:	f04f 0c0a 	mov.w	ip, #10
 80088ce:	9a07      	ldr	r2, [sp, #28]
 80088d0:	4621      	mov	r1, r4
 80088d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d6:	3b30      	subs	r3, #48	; 0x30
 80088d8:	2b09      	cmp	r3, #9
 80088da:	d94e      	bls.n	800897a <_svfiprintf_r+0x17e>
 80088dc:	b1b0      	cbz	r0, 800890c <_svfiprintf_r+0x110>
 80088de:	9207      	str	r2, [sp, #28]
 80088e0:	e014      	b.n	800890c <_svfiprintf_r+0x110>
 80088e2:	eba0 0308 	sub.w	r3, r0, r8
 80088e6:	fa09 f303 	lsl.w	r3, r9, r3
 80088ea:	4313      	orrs	r3, r2
 80088ec:	46a2      	mov	sl, r4
 80088ee:	9304      	str	r3, [sp, #16]
 80088f0:	e7d2      	b.n	8008898 <_svfiprintf_r+0x9c>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	1d19      	adds	r1, r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	9103      	str	r1, [sp, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bfbb      	ittet	lt
 80088fe:	425b      	neglt	r3, r3
 8008900:	f042 0202 	orrlt.w	r2, r2, #2
 8008904:	9307      	strge	r3, [sp, #28]
 8008906:	9307      	strlt	r3, [sp, #28]
 8008908:	bfb8      	it	lt
 800890a:	9204      	strlt	r2, [sp, #16]
 800890c:	7823      	ldrb	r3, [r4, #0]
 800890e:	2b2e      	cmp	r3, #46	; 0x2e
 8008910:	d10c      	bne.n	800892c <_svfiprintf_r+0x130>
 8008912:	7863      	ldrb	r3, [r4, #1]
 8008914:	2b2a      	cmp	r3, #42	; 0x2a
 8008916:	d135      	bne.n	8008984 <_svfiprintf_r+0x188>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	3402      	adds	r4, #2
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	9203      	str	r2, [sp, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	bfb8      	it	lt
 8008926:	f04f 33ff 	movlt.w	r3, #4294967295
 800892a:	9305      	str	r3, [sp, #20]
 800892c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089f8 <_svfiprintf_r+0x1fc>
 8008930:	2203      	movs	r2, #3
 8008932:	4650      	mov	r0, sl
 8008934:	7821      	ldrb	r1, [r4, #0]
 8008936:	f7ff f97d 	bl	8007c34 <memchr>
 800893a:	b140      	cbz	r0, 800894e <_svfiprintf_r+0x152>
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	eba0 000a 	sub.w	r0, r0, sl
 8008942:	fa03 f000 	lsl.w	r0, r3, r0
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	3401      	adds	r4, #1
 800894a:	4303      	orrs	r3, r0
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008952:	2206      	movs	r2, #6
 8008954:	4825      	ldr	r0, [pc, #148]	; (80089ec <_svfiprintf_r+0x1f0>)
 8008956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800895a:	f7ff f96b 	bl	8007c34 <memchr>
 800895e:	2800      	cmp	r0, #0
 8008960:	d038      	beq.n	80089d4 <_svfiprintf_r+0x1d8>
 8008962:	4b23      	ldr	r3, [pc, #140]	; (80089f0 <_svfiprintf_r+0x1f4>)
 8008964:	bb1b      	cbnz	r3, 80089ae <_svfiprintf_r+0x1b2>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	3307      	adds	r3, #7
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	3308      	adds	r3, #8
 8008970:	9303      	str	r3, [sp, #12]
 8008972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008974:	4433      	add	r3, r6
 8008976:	9309      	str	r3, [sp, #36]	; 0x24
 8008978:	e767      	b.n	800884a <_svfiprintf_r+0x4e>
 800897a:	460c      	mov	r4, r1
 800897c:	2001      	movs	r0, #1
 800897e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008982:	e7a5      	b.n	80088d0 <_svfiprintf_r+0xd4>
 8008984:	2300      	movs	r3, #0
 8008986:	f04f 0c0a 	mov.w	ip, #10
 800898a:	4619      	mov	r1, r3
 800898c:	3401      	adds	r4, #1
 800898e:	9305      	str	r3, [sp, #20]
 8008990:	4620      	mov	r0, r4
 8008992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008996:	3a30      	subs	r2, #48	; 0x30
 8008998:	2a09      	cmp	r2, #9
 800899a:	d903      	bls.n	80089a4 <_svfiprintf_r+0x1a8>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0c5      	beq.n	800892c <_svfiprintf_r+0x130>
 80089a0:	9105      	str	r1, [sp, #20]
 80089a2:	e7c3      	b.n	800892c <_svfiprintf_r+0x130>
 80089a4:	4604      	mov	r4, r0
 80089a6:	2301      	movs	r3, #1
 80089a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ac:	e7f0      	b.n	8008990 <_svfiprintf_r+0x194>
 80089ae:	ab03      	add	r3, sp, #12
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	462a      	mov	r2, r5
 80089b4:	4638      	mov	r0, r7
 80089b6:	4b0f      	ldr	r3, [pc, #60]	; (80089f4 <_svfiprintf_r+0x1f8>)
 80089b8:	a904      	add	r1, sp, #16
 80089ba:	f7fc fa9d 	bl	8004ef8 <_printf_float>
 80089be:	1c42      	adds	r2, r0, #1
 80089c0:	4606      	mov	r6, r0
 80089c2:	d1d6      	bne.n	8008972 <_svfiprintf_r+0x176>
 80089c4:	89ab      	ldrh	r3, [r5, #12]
 80089c6:	065b      	lsls	r3, r3, #25
 80089c8:	f53f af2c 	bmi.w	8008824 <_svfiprintf_r+0x28>
 80089cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ce:	b01d      	add	sp, #116	; 0x74
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	462a      	mov	r2, r5
 80089da:	4638      	mov	r0, r7
 80089dc:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <_svfiprintf_r+0x1f8>)
 80089de:	a904      	add	r1, sp, #16
 80089e0:	f7fc fd26 	bl	8005430 <_printf_i>
 80089e4:	e7eb      	b.n	80089be <_svfiprintf_r+0x1c2>
 80089e6:	bf00      	nop
 80089e8:	0800aec4 	.word	0x0800aec4
 80089ec:	0800aece 	.word	0x0800aece
 80089f0:	08004ef9 	.word	0x08004ef9
 80089f4:	08008745 	.word	0x08008745
 80089f8:	0800aeca 	.word	0x0800aeca

080089fc <nan>:
 80089fc:	2000      	movs	r0, #0
 80089fe:	4901      	ldr	r1, [pc, #4]	; (8008a04 <nan+0x8>)
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	7ff80000 	.word	0x7ff80000

08008a08 <_sbrk_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4d05      	ldr	r5, [pc, #20]	; (8008a24 <_sbrk_r+0x1c>)
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7f8 ffe6 	bl	80019e4 <_sbrk>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_sbrk_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_sbrk_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	20000850 	.word	0x20000850

08008a28 <strncmp>:
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	b16a      	cbz	r2, 8008a48 <strncmp+0x20>
 8008a2c:	3901      	subs	r1, #1
 8008a2e:	1884      	adds	r4, r0, r2
 8008a30:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008a34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d103      	bne.n	8008a44 <strncmp+0x1c>
 8008a3c:	42a0      	cmp	r0, r4
 8008a3e:	d001      	beq.n	8008a44 <strncmp+0x1c>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1f5      	bne.n	8008a30 <strncmp+0x8>
 8008a44:	1a98      	subs	r0, r3, r2
 8008a46:	bd10      	pop	{r4, pc}
 8008a48:	4610      	mov	r0, r2
 8008a4a:	e7fc      	b.n	8008a46 <strncmp+0x1e>

08008a4c <__ascii_wctomb>:
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	4608      	mov	r0, r1
 8008a50:	b141      	cbz	r1, 8008a64 <__ascii_wctomb+0x18>
 8008a52:	2aff      	cmp	r2, #255	; 0xff
 8008a54:	d904      	bls.n	8008a60 <__ascii_wctomb+0x14>
 8008a56:	228a      	movs	r2, #138	; 0x8a
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	4770      	bx	lr
 8008a60:	2001      	movs	r0, #1
 8008a62:	700a      	strb	r2, [r1, #0]
 8008a64:	4770      	bx	lr
	...

08008a68 <__assert_func>:
 8008a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a6a:	4614      	mov	r4, r2
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <__assert_func+0x2c>)
 8008a70:	4605      	mov	r5, r0
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68d8      	ldr	r0, [r3, #12]
 8008a76:	b14c      	cbz	r4, 8008a8c <__assert_func+0x24>
 8008a78:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <__assert_func+0x30>)
 8008a7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a7e:	9100      	str	r1, [sp, #0]
 8008a80:	462b      	mov	r3, r5
 8008a82:	4906      	ldr	r1, [pc, #24]	; (8008a9c <__assert_func+0x34>)
 8008a84:	f000 f80e 	bl	8008aa4 <fiprintf>
 8008a88:	f000 fa82 	bl	8008f90 <abort>
 8008a8c:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <__assert_func+0x38>)
 8008a8e:	461c      	mov	r4, r3
 8008a90:	e7f3      	b.n	8008a7a <__assert_func+0x12>
 8008a92:	bf00      	nop
 8008a94:	2000001c 	.word	0x2000001c
 8008a98:	0800aed5 	.word	0x0800aed5
 8008a9c:	0800aee2 	.word	0x0800aee2
 8008aa0:	0800af10 	.word	0x0800af10

08008aa4 <fiprintf>:
 8008aa4:	b40e      	push	{r1, r2, r3}
 8008aa6:	b503      	push	{r0, r1, lr}
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	ab03      	add	r3, sp, #12
 8008aac:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <fiprintf+0x20>)
 8008aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab2:	6800      	ldr	r0, [r0, #0]
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	f000 f87b 	bl	8008bb0 <_vfiprintf_r>
 8008aba:	b002      	add	sp, #8
 8008abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ac0:	b003      	add	sp, #12
 8008ac2:	4770      	bx	lr
 8008ac4:	2000001c 	.word	0x2000001c

08008ac8 <memmove>:
 8008ac8:	4288      	cmp	r0, r1
 8008aca:	b510      	push	{r4, lr}
 8008acc:	eb01 0402 	add.w	r4, r1, r2
 8008ad0:	d902      	bls.n	8008ad8 <memmove+0x10>
 8008ad2:	4284      	cmp	r4, r0
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	d807      	bhi.n	8008ae8 <memmove+0x20>
 8008ad8:	1e43      	subs	r3, r0, #1
 8008ada:	42a1      	cmp	r1, r4
 8008adc:	d008      	beq.n	8008af0 <memmove+0x28>
 8008ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ae6:	e7f8      	b.n	8008ada <memmove+0x12>
 8008ae8:	4601      	mov	r1, r0
 8008aea:	4402      	add	r2, r0
 8008aec:	428a      	cmp	r2, r1
 8008aee:	d100      	bne.n	8008af2 <memmove+0x2a>
 8008af0:	bd10      	pop	{r4, pc}
 8008af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008af6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008afa:	e7f7      	b.n	8008aec <memmove+0x24>

08008afc <__malloc_lock>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__malloc_lock+0x8>)
 8008afe:	f000 bc07 	b.w	8009310 <__retarget_lock_acquire_recursive>
 8008b02:	bf00      	nop
 8008b04:	20000858 	.word	0x20000858

08008b08 <__malloc_unlock>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__malloc_unlock+0x8>)
 8008b0a:	f000 bc02 	b.w	8009312 <__retarget_lock_release_recursive>
 8008b0e:	bf00      	nop
 8008b10:	20000858 	.word	0x20000858

08008b14 <_realloc_r>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	4607      	mov	r7, r0
 8008b18:	4614      	mov	r4, r2
 8008b1a:	460e      	mov	r6, r1
 8008b1c:	b921      	cbnz	r1, 8008b28 <_realloc_r+0x14>
 8008b1e:	4611      	mov	r1, r2
 8008b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b24:	f7ff bdb4 	b.w	8008690 <_malloc_r>
 8008b28:	b922      	cbnz	r2, 8008b34 <_realloc_r+0x20>
 8008b2a:	f7ff fd65 	bl	80085f8 <_free_r>
 8008b2e:	4625      	mov	r5, r4
 8008b30:	4628      	mov	r0, r5
 8008b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b34:	f000 fc52 	bl	80093dc <_malloc_usable_size_r>
 8008b38:	42a0      	cmp	r0, r4
 8008b3a:	d20f      	bcs.n	8008b5c <_realloc_r+0x48>
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f7ff fda6 	bl	8008690 <_malloc_r>
 8008b44:	4605      	mov	r5, r0
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d0f2      	beq.n	8008b30 <_realloc_r+0x1c>
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	f7ff f87f 	bl	8007c50 <memcpy>
 8008b52:	4631      	mov	r1, r6
 8008b54:	4638      	mov	r0, r7
 8008b56:	f7ff fd4f 	bl	80085f8 <_free_r>
 8008b5a:	e7e9      	b.n	8008b30 <_realloc_r+0x1c>
 8008b5c:	4635      	mov	r5, r6
 8008b5e:	e7e7      	b.n	8008b30 <_realloc_r+0x1c>

08008b60 <__sfputc_r>:
 8008b60:	6893      	ldr	r3, [r2, #8]
 8008b62:	b410      	push	{r4}
 8008b64:	3b01      	subs	r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	6093      	str	r3, [r2, #8]
 8008b6a:	da07      	bge.n	8008b7c <__sfputc_r+0x1c>
 8008b6c:	6994      	ldr	r4, [r2, #24]
 8008b6e:	42a3      	cmp	r3, r4
 8008b70:	db01      	blt.n	8008b76 <__sfputc_r+0x16>
 8008b72:	290a      	cmp	r1, #10
 8008b74:	d102      	bne.n	8008b7c <__sfputc_r+0x1c>
 8008b76:	bc10      	pop	{r4}
 8008b78:	f000 b94a 	b.w	8008e10 <__swbuf_r>
 8008b7c:	6813      	ldr	r3, [r2, #0]
 8008b7e:	1c58      	adds	r0, r3, #1
 8008b80:	6010      	str	r0, [r2, #0]
 8008b82:	7019      	strb	r1, [r3, #0]
 8008b84:	4608      	mov	r0, r1
 8008b86:	bc10      	pop	{r4}
 8008b88:	4770      	bx	lr

08008b8a <__sfputs_r>:
 8008b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	4614      	mov	r4, r2
 8008b92:	18d5      	adds	r5, r2, r3
 8008b94:	42ac      	cmp	r4, r5
 8008b96:	d101      	bne.n	8008b9c <__sfputs_r+0x12>
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e007      	b.n	8008bac <__sfputs_r+0x22>
 8008b9c:	463a      	mov	r2, r7
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba4:	f7ff ffdc 	bl	8008b60 <__sfputc_r>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d1f3      	bne.n	8008b94 <__sfputs_r+0xa>
 8008bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bb0 <_vfiprintf_r>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	4614      	mov	r4, r2
 8008bb8:	4698      	mov	r8, r3
 8008bba:	4606      	mov	r6, r0
 8008bbc:	b09d      	sub	sp, #116	; 0x74
 8008bbe:	b118      	cbz	r0, 8008bc8 <_vfiprintf_r+0x18>
 8008bc0:	6983      	ldr	r3, [r0, #24]
 8008bc2:	b90b      	cbnz	r3, 8008bc8 <_vfiprintf_r+0x18>
 8008bc4:	f000 fb06 	bl	80091d4 <__sinit>
 8008bc8:	4b89      	ldr	r3, [pc, #548]	; (8008df0 <_vfiprintf_r+0x240>)
 8008bca:	429d      	cmp	r5, r3
 8008bcc:	d11b      	bne.n	8008c06 <_vfiprintf_r+0x56>
 8008bce:	6875      	ldr	r5, [r6, #4]
 8008bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bd2:	07d9      	lsls	r1, r3, #31
 8008bd4:	d405      	bmi.n	8008be2 <_vfiprintf_r+0x32>
 8008bd6:	89ab      	ldrh	r3, [r5, #12]
 8008bd8:	059a      	lsls	r2, r3, #22
 8008bda:	d402      	bmi.n	8008be2 <_vfiprintf_r+0x32>
 8008bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bde:	f000 fb97 	bl	8009310 <__retarget_lock_acquire_recursive>
 8008be2:	89ab      	ldrh	r3, [r5, #12]
 8008be4:	071b      	lsls	r3, r3, #28
 8008be6:	d501      	bpl.n	8008bec <_vfiprintf_r+0x3c>
 8008be8:	692b      	ldr	r3, [r5, #16]
 8008bea:	b9eb      	cbnz	r3, 8008c28 <_vfiprintf_r+0x78>
 8008bec:	4629      	mov	r1, r5
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f000 f960 	bl	8008eb4 <__swsetup_r>
 8008bf4:	b1c0      	cbz	r0, 8008c28 <_vfiprintf_r+0x78>
 8008bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bf8:	07dc      	lsls	r4, r3, #31
 8008bfa:	d50e      	bpl.n	8008c1a <_vfiprintf_r+0x6a>
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008c00:	b01d      	add	sp, #116	; 0x74
 8008c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c06:	4b7b      	ldr	r3, [pc, #492]	; (8008df4 <_vfiprintf_r+0x244>)
 8008c08:	429d      	cmp	r5, r3
 8008c0a:	d101      	bne.n	8008c10 <_vfiprintf_r+0x60>
 8008c0c:	68b5      	ldr	r5, [r6, #8]
 8008c0e:	e7df      	b.n	8008bd0 <_vfiprintf_r+0x20>
 8008c10:	4b79      	ldr	r3, [pc, #484]	; (8008df8 <_vfiprintf_r+0x248>)
 8008c12:	429d      	cmp	r5, r3
 8008c14:	bf08      	it	eq
 8008c16:	68f5      	ldreq	r5, [r6, #12]
 8008c18:	e7da      	b.n	8008bd0 <_vfiprintf_r+0x20>
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	0598      	lsls	r0, r3, #22
 8008c1e:	d4ed      	bmi.n	8008bfc <_vfiprintf_r+0x4c>
 8008c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c22:	f000 fb76 	bl	8009312 <__retarget_lock_release_recursive>
 8008c26:	e7e9      	b.n	8008bfc <_vfiprintf_r+0x4c>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c2c:	2320      	movs	r3, #32
 8008c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c32:	2330      	movs	r3, #48	; 0x30
 8008c34:	f04f 0901 	mov.w	r9, #1
 8008c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c3c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008dfc <_vfiprintf_r+0x24c>
 8008c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c44:	4623      	mov	r3, r4
 8008c46:	469a      	mov	sl, r3
 8008c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c4c:	b10a      	cbz	r2, 8008c52 <_vfiprintf_r+0xa2>
 8008c4e:	2a25      	cmp	r2, #37	; 0x25
 8008c50:	d1f9      	bne.n	8008c46 <_vfiprintf_r+0x96>
 8008c52:	ebba 0b04 	subs.w	fp, sl, r4
 8008c56:	d00b      	beq.n	8008c70 <_vfiprintf_r+0xc0>
 8008c58:	465b      	mov	r3, fp
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f7ff ff93 	bl	8008b8a <__sfputs_r>
 8008c64:	3001      	adds	r0, #1
 8008c66:	f000 80aa 	beq.w	8008dbe <_vfiprintf_r+0x20e>
 8008c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c6c:	445a      	add	r2, fp
 8008c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c70:	f89a 3000 	ldrb.w	r3, [sl]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80a2 	beq.w	8008dbe <_vfiprintf_r+0x20e>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c84:	f10a 0a01 	add.w	sl, sl, #1
 8008c88:	9304      	str	r3, [sp, #16]
 8008c8a:	9307      	str	r3, [sp, #28]
 8008c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c90:	931a      	str	r3, [sp, #104]	; 0x68
 8008c92:	4654      	mov	r4, sl
 8008c94:	2205      	movs	r2, #5
 8008c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9a:	4858      	ldr	r0, [pc, #352]	; (8008dfc <_vfiprintf_r+0x24c>)
 8008c9c:	f7fe ffca 	bl	8007c34 <memchr>
 8008ca0:	9a04      	ldr	r2, [sp, #16]
 8008ca2:	b9d8      	cbnz	r0, 8008cdc <_vfiprintf_r+0x12c>
 8008ca4:	06d1      	lsls	r1, r2, #27
 8008ca6:	bf44      	itt	mi
 8008ca8:	2320      	movmi	r3, #32
 8008caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cae:	0713      	lsls	r3, r2, #28
 8008cb0:	bf44      	itt	mi
 8008cb2:	232b      	movmi	r3, #43	; 0x2b
 8008cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008cbe:	d015      	beq.n	8008cec <_vfiprintf_r+0x13c>
 8008cc0:	4654      	mov	r4, sl
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	f04f 0c0a 	mov.w	ip, #10
 8008cc8:	9a07      	ldr	r2, [sp, #28]
 8008cca:	4621      	mov	r1, r4
 8008ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cd0:	3b30      	subs	r3, #48	; 0x30
 8008cd2:	2b09      	cmp	r3, #9
 8008cd4:	d94e      	bls.n	8008d74 <_vfiprintf_r+0x1c4>
 8008cd6:	b1b0      	cbz	r0, 8008d06 <_vfiprintf_r+0x156>
 8008cd8:	9207      	str	r2, [sp, #28]
 8008cda:	e014      	b.n	8008d06 <_vfiprintf_r+0x156>
 8008cdc:	eba0 0308 	sub.w	r3, r0, r8
 8008ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	46a2      	mov	sl, r4
 8008ce8:	9304      	str	r3, [sp, #16]
 8008cea:	e7d2      	b.n	8008c92 <_vfiprintf_r+0xe2>
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	1d19      	adds	r1, r3, #4
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	9103      	str	r1, [sp, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bfbb      	ittet	lt
 8008cf8:	425b      	neglt	r3, r3
 8008cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008cfe:	9307      	strge	r3, [sp, #28]
 8008d00:	9307      	strlt	r3, [sp, #28]
 8008d02:	bfb8      	it	lt
 8008d04:	9204      	strlt	r2, [sp, #16]
 8008d06:	7823      	ldrb	r3, [r4, #0]
 8008d08:	2b2e      	cmp	r3, #46	; 0x2e
 8008d0a:	d10c      	bne.n	8008d26 <_vfiprintf_r+0x176>
 8008d0c:	7863      	ldrb	r3, [r4, #1]
 8008d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d10:	d135      	bne.n	8008d7e <_vfiprintf_r+0x1ce>
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	3402      	adds	r4, #2
 8008d16:	1d1a      	adds	r2, r3, #4
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	9203      	str	r2, [sp, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bfb8      	it	lt
 8008d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e0c <_vfiprintf_r+0x25c>
 8008d2a:	2203      	movs	r2, #3
 8008d2c:	4650      	mov	r0, sl
 8008d2e:	7821      	ldrb	r1, [r4, #0]
 8008d30:	f7fe ff80 	bl	8007c34 <memchr>
 8008d34:	b140      	cbz	r0, 8008d48 <_vfiprintf_r+0x198>
 8008d36:	2340      	movs	r3, #64	; 0x40
 8008d38:	eba0 000a 	sub.w	r0, r0, sl
 8008d3c:	fa03 f000 	lsl.w	r0, r3, r0
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	3401      	adds	r4, #1
 8008d44:	4303      	orrs	r3, r0
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4c:	2206      	movs	r2, #6
 8008d4e:	482c      	ldr	r0, [pc, #176]	; (8008e00 <_vfiprintf_r+0x250>)
 8008d50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d54:	f7fe ff6e 	bl	8007c34 <memchr>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d03f      	beq.n	8008ddc <_vfiprintf_r+0x22c>
 8008d5c:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <_vfiprintf_r+0x254>)
 8008d5e:	bb1b      	cbnz	r3, 8008da8 <_vfiprintf_r+0x1f8>
 8008d60:	9b03      	ldr	r3, [sp, #12]
 8008d62:	3307      	adds	r3, #7
 8008d64:	f023 0307 	bic.w	r3, r3, #7
 8008d68:	3308      	adds	r3, #8
 8008d6a:	9303      	str	r3, [sp, #12]
 8008d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6e:	443b      	add	r3, r7
 8008d70:	9309      	str	r3, [sp, #36]	; 0x24
 8008d72:	e767      	b.n	8008c44 <_vfiprintf_r+0x94>
 8008d74:	460c      	mov	r4, r1
 8008d76:	2001      	movs	r0, #1
 8008d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d7c:	e7a5      	b.n	8008cca <_vfiprintf_r+0x11a>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f04f 0c0a 	mov.w	ip, #10
 8008d84:	4619      	mov	r1, r3
 8008d86:	3401      	adds	r4, #1
 8008d88:	9305      	str	r3, [sp, #20]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d90:	3a30      	subs	r2, #48	; 0x30
 8008d92:	2a09      	cmp	r2, #9
 8008d94:	d903      	bls.n	8008d9e <_vfiprintf_r+0x1ee>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0c5      	beq.n	8008d26 <_vfiprintf_r+0x176>
 8008d9a:	9105      	str	r1, [sp, #20]
 8008d9c:	e7c3      	b.n	8008d26 <_vfiprintf_r+0x176>
 8008d9e:	4604      	mov	r4, r0
 8008da0:	2301      	movs	r3, #1
 8008da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008da6:	e7f0      	b.n	8008d8a <_vfiprintf_r+0x1da>
 8008da8:	ab03      	add	r3, sp, #12
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	462a      	mov	r2, r5
 8008dae:	4630      	mov	r0, r6
 8008db0:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <_vfiprintf_r+0x258>)
 8008db2:	a904      	add	r1, sp, #16
 8008db4:	f7fc f8a0 	bl	8004ef8 <_printf_float>
 8008db8:	4607      	mov	r7, r0
 8008dba:	1c78      	adds	r0, r7, #1
 8008dbc:	d1d6      	bne.n	8008d6c <_vfiprintf_r+0x1bc>
 8008dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dc0:	07d9      	lsls	r1, r3, #31
 8008dc2:	d405      	bmi.n	8008dd0 <_vfiprintf_r+0x220>
 8008dc4:	89ab      	ldrh	r3, [r5, #12]
 8008dc6:	059a      	lsls	r2, r3, #22
 8008dc8:	d402      	bmi.n	8008dd0 <_vfiprintf_r+0x220>
 8008dca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dcc:	f000 faa1 	bl	8009312 <__retarget_lock_release_recursive>
 8008dd0:	89ab      	ldrh	r3, [r5, #12]
 8008dd2:	065b      	lsls	r3, r3, #25
 8008dd4:	f53f af12 	bmi.w	8008bfc <_vfiprintf_r+0x4c>
 8008dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dda:	e711      	b.n	8008c00 <_vfiprintf_r+0x50>
 8008ddc:	ab03      	add	r3, sp, #12
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	462a      	mov	r2, r5
 8008de2:	4630      	mov	r0, r6
 8008de4:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <_vfiprintf_r+0x258>)
 8008de6:	a904      	add	r1, sp, #16
 8008de8:	f7fc fb22 	bl	8005430 <_printf_i>
 8008dec:	e7e4      	b.n	8008db8 <_vfiprintf_r+0x208>
 8008dee:	bf00      	nop
 8008df0:	0800af34 	.word	0x0800af34
 8008df4:	0800af54 	.word	0x0800af54
 8008df8:	0800af14 	.word	0x0800af14
 8008dfc:	0800aec4 	.word	0x0800aec4
 8008e00:	0800aece 	.word	0x0800aece
 8008e04:	08004ef9 	.word	0x08004ef9
 8008e08:	08008b8b 	.word	0x08008b8b
 8008e0c:	0800aeca 	.word	0x0800aeca

08008e10 <__swbuf_r>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	460e      	mov	r6, r1
 8008e14:	4614      	mov	r4, r2
 8008e16:	4605      	mov	r5, r0
 8008e18:	b118      	cbz	r0, 8008e22 <__swbuf_r+0x12>
 8008e1a:	6983      	ldr	r3, [r0, #24]
 8008e1c:	b90b      	cbnz	r3, 8008e22 <__swbuf_r+0x12>
 8008e1e:	f000 f9d9 	bl	80091d4 <__sinit>
 8008e22:	4b21      	ldr	r3, [pc, #132]	; (8008ea8 <__swbuf_r+0x98>)
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d12b      	bne.n	8008e80 <__swbuf_r+0x70>
 8008e28:	686c      	ldr	r4, [r5, #4]
 8008e2a:	69a3      	ldr	r3, [r4, #24]
 8008e2c:	60a3      	str	r3, [r4, #8]
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	071a      	lsls	r2, r3, #28
 8008e32:	d52f      	bpl.n	8008e94 <__swbuf_r+0x84>
 8008e34:	6923      	ldr	r3, [r4, #16]
 8008e36:	b36b      	cbz	r3, 8008e94 <__swbuf_r+0x84>
 8008e38:	6923      	ldr	r3, [r4, #16]
 8008e3a:	6820      	ldr	r0, [r4, #0]
 8008e3c:	b2f6      	uxtb	r6, r6
 8008e3e:	1ac0      	subs	r0, r0, r3
 8008e40:	6963      	ldr	r3, [r4, #20]
 8008e42:	4637      	mov	r7, r6
 8008e44:	4283      	cmp	r3, r0
 8008e46:	dc04      	bgt.n	8008e52 <__swbuf_r+0x42>
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f000 f92e 	bl	80090ac <_fflush_r>
 8008e50:	bb30      	cbnz	r0, 8008ea0 <__swbuf_r+0x90>
 8008e52:	68a3      	ldr	r3, [r4, #8]
 8008e54:	3001      	adds	r0, #1
 8008e56:	3b01      	subs	r3, #1
 8008e58:	60a3      	str	r3, [r4, #8]
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	1c5a      	adds	r2, r3, #1
 8008e5e:	6022      	str	r2, [r4, #0]
 8008e60:	701e      	strb	r6, [r3, #0]
 8008e62:	6963      	ldr	r3, [r4, #20]
 8008e64:	4283      	cmp	r3, r0
 8008e66:	d004      	beq.n	8008e72 <__swbuf_r+0x62>
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	07db      	lsls	r3, r3, #31
 8008e6c:	d506      	bpl.n	8008e7c <__swbuf_r+0x6c>
 8008e6e:	2e0a      	cmp	r6, #10
 8008e70:	d104      	bne.n	8008e7c <__swbuf_r+0x6c>
 8008e72:	4621      	mov	r1, r4
 8008e74:	4628      	mov	r0, r5
 8008e76:	f000 f919 	bl	80090ac <_fflush_r>
 8008e7a:	b988      	cbnz	r0, 8008ea0 <__swbuf_r+0x90>
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e80:	4b0a      	ldr	r3, [pc, #40]	; (8008eac <__swbuf_r+0x9c>)
 8008e82:	429c      	cmp	r4, r3
 8008e84:	d101      	bne.n	8008e8a <__swbuf_r+0x7a>
 8008e86:	68ac      	ldr	r4, [r5, #8]
 8008e88:	e7cf      	b.n	8008e2a <__swbuf_r+0x1a>
 8008e8a:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <__swbuf_r+0xa0>)
 8008e8c:	429c      	cmp	r4, r3
 8008e8e:	bf08      	it	eq
 8008e90:	68ec      	ldreq	r4, [r5, #12]
 8008e92:	e7ca      	b.n	8008e2a <__swbuf_r+0x1a>
 8008e94:	4621      	mov	r1, r4
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 f80c 	bl	8008eb4 <__swsetup_r>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d0cb      	beq.n	8008e38 <__swbuf_r+0x28>
 8008ea0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ea4:	e7ea      	b.n	8008e7c <__swbuf_r+0x6c>
 8008ea6:	bf00      	nop
 8008ea8:	0800af34 	.word	0x0800af34
 8008eac:	0800af54 	.word	0x0800af54
 8008eb0:	0800af14 	.word	0x0800af14

08008eb4 <__swsetup_r>:
 8008eb4:	4b32      	ldr	r3, [pc, #200]	; (8008f80 <__swsetup_r+0xcc>)
 8008eb6:	b570      	push	{r4, r5, r6, lr}
 8008eb8:	681d      	ldr	r5, [r3, #0]
 8008eba:	4606      	mov	r6, r0
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	b125      	cbz	r5, 8008eca <__swsetup_r+0x16>
 8008ec0:	69ab      	ldr	r3, [r5, #24]
 8008ec2:	b913      	cbnz	r3, 8008eca <__swsetup_r+0x16>
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f000 f985 	bl	80091d4 <__sinit>
 8008eca:	4b2e      	ldr	r3, [pc, #184]	; (8008f84 <__swsetup_r+0xd0>)
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	d10f      	bne.n	8008ef0 <__swsetup_r+0x3c>
 8008ed0:	686c      	ldr	r4, [r5, #4]
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ed8:	0719      	lsls	r1, r3, #28
 8008eda:	d42c      	bmi.n	8008f36 <__swsetup_r+0x82>
 8008edc:	06dd      	lsls	r5, r3, #27
 8008ede:	d411      	bmi.n	8008f04 <__swsetup_r+0x50>
 8008ee0:	2309      	movs	r3, #9
 8008ee2:	6033      	str	r3, [r6, #0]
 8008ee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	e03e      	b.n	8008f6e <__swsetup_r+0xba>
 8008ef0:	4b25      	ldr	r3, [pc, #148]	; (8008f88 <__swsetup_r+0xd4>)
 8008ef2:	429c      	cmp	r4, r3
 8008ef4:	d101      	bne.n	8008efa <__swsetup_r+0x46>
 8008ef6:	68ac      	ldr	r4, [r5, #8]
 8008ef8:	e7eb      	b.n	8008ed2 <__swsetup_r+0x1e>
 8008efa:	4b24      	ldr	r3, [pc, #144]	; (8008f8c <__swsetup_r+0xd8>)
 8008efc:	429c      	cmp	r4, r3
 8008efe:	bf08      	it	eq
 8008f00:	68ec      	ldreq	r4, [r5, #12]
 8008f02:	e7e6      	b.n	8008ed2 <__swsetup_r+0x1e>
 8008f04:	0758      	lsls	r0, r3, #29
 8008f06:	d512      	bpl.n	8008f2e <__swsetup_r+0x7a>
 8008f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f0a:	b141      	cbz	r1, 8008f1e <__swsetup_r+0x6a>
 8008f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f10:	4299      	cmp	r1, r3
 8008f12:	d002      	beq.n	8008f1a <__swsetup_r+0x66>
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7ff fb6f 	bl	80085f8 <_free_r>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	2300      	movs	r3, #0
 8008f28:	6063      	str	r3, [r4, #4]
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	f043 0308 	orr.w	r3, r3, #8
 8008f34:	81a3      	strh	r3, [r4, #12]
 8008f36:	6923      	ldr	r3, [r4, #16]
 8008f38:	b94b      	cbnz	r3, 8008f4e <__swsetup_r+0x9a>
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f44:	d003      	beq.n	8008f4e <__swsetup_r+0x9a>
 8008f46:	4621      	mov	r1, r4
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f000 fa07 	bl	800935c <__smakebuf_r>
 8008f4e:	89a0      	ldrh	r0, [r4, #12]
 8008f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f54:	f010 0301 	ands.w	r3, r0, #1
 8008f58:	d00a      	beq.n	8008f70 <__swsetup_r+0xbc>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60a3      	str	r3, [r4, #8]
 8008f5e:	6963      	ldr	r3, [r4, #20]
 8008f60:	425b      	negs	r3, r3
 8008f62:	61a3      	str	r3, [r4, #24]
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	b943      	cbnz	r3, 8008f7a <__swsetup_r+0xc6>
 8008f68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f6c:	d1ba      	bne.n	8008ee4 <__swsetup_r+0x30>
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}
 8008f70:	0781      	lsls	r1, r0, #30
 8008f72:	bf58      	it	pl
 8008f74:	6963      	ldrpl	r3, [r4, #20]
 8008f76:	60a3      	str	r3, [r4, #8]
 8008f78:	e7f4      	b.n	8008f64 <__swsetup_r+0xb0>
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	e7f7      	b.n	8008f6e <__swsetup_r+0xba>
 8008f7e:	bf00      	nop
 8008f80:	2000001c 	.word	0x2000001c
 8008f84:	0800af34 	.word	0x0800af34
 8008f88:	0800af54 	.word	0x0800af54
 8008f8c:	0800af14 	.word	0x0800af14

08008f90 <abort>:
 8008f90:	2006      	movs	r0, #6
 8008f92:	b508      	push	{r3, lr}
 8008f94:	f000 fa52 	bl	800943c <raise>
 8008f98:	2001      	movs	r0, #1
 8008f9a:	f7f8 fcb0 	bl	80018fe <_exit>
	...

08008fa0 <__sflush_r>:
 8008fa0:	898a      	ldrh	r2, [r1, #12]
 8008fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	0710      	lsls	r0, r2, #28
 8008faa:	460c      	mov	r4, r1
 8008fac:	d458      	bmi.n	8009060 <__sflush_r+0xc0>
 8008fae:	684b      	ldr	r3, [r1, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	dc05      	bgt.n	8008fc0 <__sflush_r+0x20>
 8008fb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	dc02      	bgt.n	8008fc0 <__sflush_r+0x20>
 8008fba:	2000      	movs	r0, #0
 8008fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fc2:	2e00      	cmp	r6, #0
 8008fc4:	d0f9      	beq.n	8008fba <__sflush_r+0x1a>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fcc:	682f      	ldr	r7, [r5, #0]
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	d032      	beq.n	8009038 <__sflush_r+0x98>
 8008fd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	075a      	lsls	r2, r3, #29
 8008fd8:	d505      	bpl.n	8008fe6 <__sflush_r+0x46>
 8008fda:	6863      	ldr	r3, [r4, #4]
 8008fdc:	1ac0      	subs	r0, r0, r3
 8008fde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fe0:	b10b      	cbz	r3, 8008fe6 <__sflush_r+0x46>
 8008fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fe4:	1ac0      	subs	r0, r0, r3
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4602      	mov	r2, r0
 8008fea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fec:	4628      	mov	r0, r5
 8008fee:	6a21      	ldr	r1, [r4, #32]
 8008ff0:	47b0      	blx	r6
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	d106      	bne.n	8009006 <__sflush_r+0x66>
 8008ff8:	6829      	ldr	r1, [r5, #0]
 8008ffa:	291d      	cmp	r1, #29
 8008ffc:	d82c      	bhi.n	8009058 <__sflush_r+0xb8>
 8008ffe:	4a2a      	ldr	r2, [pc, #168]	; (80090a8 <__sflush_r+0x108>)
 8009000:	40ca      	lsrs	r2, r1
 8009002:	07d6      	lsls	r6, r2, #31
 8009004:	d528      	bpl.n	8009058 <__sflush_r+0xb8>
 8009006:	2200      	movs	r2, #0
 8009008:	6062      	str	r2, [r4, #4]
 800900a:	6922      	ldr	r2, [r4, #16]
 800900c:	04d9      	lsls	r1, r3, #19
 800900e:	6022      	str	r2, [r4, #0]
 8009010:	d504      	bpl.n	800901c <__sflush_r+0x7c>
 8009012:	1c42      	adds	r2, r0, #1
 8009014:	d101      	bne.n	800901a <__sflush_r+0x7a>
 8009016:	682b      	ldr	r3, [r5, #0]
 8009018:	b903      	cbnz	r3, 800901c <__sflush_r+0x7c>
 800901a:	6560      	str	r0, [r4, #84]	; 0x54
 800901c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800901e:	602f      	str	r7, [r5, #0]
 8009020:	2900      	cmp	r1, #0
 8009022:	d0ca      	beq.n	8008fba <__sflush_r+0x1a>
 8009024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009028:	4299      	cmp	r1, r3
 800902a:	d002      	beq.n	8009032 <__sflush_r+0x92>
 800902c:	4628      	mov	r0, r5
 800902e:	f7ff fae3 	bl	80085f8 <_free_r>
 8009032:	2000      	movs	r0, #0
 8009034:	6360      	str	r0, [r4, #52]	; 0x34
 8009036:	e7c1      	b.n	8008fbc <__sflush_r+0x1c>
 8009038:	6a21      	ldr	r1, [r4, #32]
 800903a:	2301      	movs	r3, #1
 800903c:	4628      	mov	r0, r5
 800903e:	47b0      	blx	r6
 8009040:	1c41      	adds	r1, r0, #1
 8009042:	d1c7      	bne.n	8008fd4 <__sflush_r+0x34>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0c4      	beq.n	8008fd4 <__sflush_r+0x34>
 800904a:	2b1d      	cmp	r3, #29
 800904c:	d001      	beq.n	8009052 <__sflush_r+0xb2>
 800904e:	2b16      	cmp	r3, #22
 8009050:	d101      	bne.n	8009056 <__sflush_r+0xb6>
 8009052:	602f      	str	r7, [r5, #0]
 8009054:	e7b1      	b.n	8008fba <__sflush_r+0x1a>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	e7ad      	b.n	8008fbc <__sflush_r+0x1c>
 8009060:	690f      	ldr	r7, [r1, #16]
 8009062:	2f00      	cmp	r7, #0
 8009064:	d0a9      	beq.n	8008fba <__sflush_r+0x1a>
 8009066:	0793      	lsls	r3, r2, #30
 8009068:	bf18      	it	ne
 800906a:	2300      	movne	r3, #0
 800906c:	680e      	ldr	r6, [r1, #0]
 800906e:	bf08      	it	eq
 8009070:	694b      	ldreq	r3, [r1, #20]
 8009072:	eba6 0807 	sub.w	r8, r6, r7
 8009076:	600f      	str	r7, [r1, #0]
 8009078:	608b      	str	r3, [r1, #8]
 800907a:	f1b8 0f00 	cmp.w	r8, #0
 800907e:	dd9c      	ble.n	8008fba <__sflush_r+0x1a>
 8009080:	4643      	mov	r3, r8
 8009082:	463a      	mov	r2, r7
 8009084:	4628      	mov	r0, r5
 8009086:	6a21      	ldr	r1, [r4, #32]
 8009088:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800908a:	47b0      	blx	r6
 800908c:	2800      	cmp	r0, #0
 800908e:	dc06      	bgt.n	800909e <__sflush_r+0xfe>
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	f04f 30ff 	mov.w	r0, #4294967295
 8009096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	e78e      	b.n	8008fbc <__sflush_r+0x1c>
 800909e:	4407      	add	r7, r0
 80090a0:	eba8 0800 	sub.w	r8, r8, r0
 80090a4:	e7e9      	b.n	800907a <__sflush_r+0xda>
 80090a6:	bf00      	nop
 80090a8:	20400001 	.word	0x20400001

080090ac <_fflush_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	690b      	ldr	r3, [r1, #16]
 80090b0:	4605      	mov	r5, r0
 80090b2:	460c      	mov	r4, r1
 80090b4:	b913      	cbnz	r3, 80090bc <_fflush_r+0x10>
 80090b6:	2500      	movs	r5, #0
 80090b8:	4628      	mov	r0, r5
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	b118      	cbz	r0, 80090c6 <_fflush_r+0x1a>
 80090be:	6983      	ldr	r3, [r0, #24]
 80090c0:	b90b      	cbnz	r3, 80090c6 <_fflush_r+0x1a>
 80090c2:	f000 f887 	bl	80091d4 <__sinit>
 80090c6:	4b14      	ldr	r3, [pc, #80]	; (8009118 <_fflush_r+0x6c>)
 80090c8:	429c      	cmp	r4, r3
 80090ca:	d11b      	bne.n	8009104 <_fflush_r+0x58>
 80090cc:	686c      	ldr	r4, [r5, #4]
 80090ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0ef      	beq.n	80090b6 <_fflush_r+0xa>
 80090d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090d8:	07d0      	lsls	r0, r2, #31
 80090da:	d404      	bmi.n	80090e6 <_fflush_r+0x3a>
 80090dc:	0599      	lsls	r1, r3, #22
 80090de:	d402      	bmi.n	80090e6 <_fflush_r+0x3a>
 80090e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e2:	f000 f915 	bl	8009310 <__retarget_lock_acquire_recursive>
 80090e6:	4628      	mov	r0, r5
 80090e8:	4621      	mov	r1, r4
 80090ea:	f7ff ff59 	bl	8008fa0 <__sflush_r>
 80090ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090f0:	4605      	mov	r5, r0
 80090f2:	07da      	lsls	r2, r3, #31
 80090f4:	d4e0      	bmi.n	80090b8 <_fflush_r+0xc>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	059b      	lsls	r3, r3, #22
 80090fa:	d4dd      	bmi.n	80090b8 <_fflush_r+0xc>
 80090fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090fe:	f000 f908 	bl	8009312 <__retarget_lock_release_recursive>
 8009102:	e7d9      	b.n	80090b8 <_fflush_r+0xc>
 8009104:	4b05      	ldr	r3, [pc, #20]	; (800911c <_fflush_r+0x70>)
 8009106:	429c      	cmp	r4, r3
 8009108:	d101      	bne.n	800910e <_fflush_r+0x62>
 800910a:	68ac      	ldr	r4, [r5, #8]
 800910c:	e7df      	b.n	80090ce <_fflush_r+0x22>
 800910e:	4b04      	ldr	r3, [pc, #16]	; (8009120 <_fflush_r+0x74>)
 8009110:	429c      	cmp	r4, r3
 8009112:	bf08      	it	eq
 8009114:	68ec      	ldreq	r4, [r5, #12]
 8009116:	e7da      	b.n	80090ce <_fflush_r+0x22>
 8009118:	0800af34 	.word	0x0800af34
 800911c:	0800af54 	.word	0x0800af54
 8009120:	0800af14 	.word	0x0800af14

08009124 <std>:
 8009124:	2300      	movs	r3, #0
 8009126:	b510      	push	{r4, lr}
 8009128:	4604      	mov	r4, r0
 800912a:	e9c0 3300 	strd	r3, r3, [r0]
 800912e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009132:	6083      	str	r3, [r0, #8]
 8009134:	8181      	strh	r1, [r0, #12]
 8009136:	6643      	str	r3, [r0, #100]	; 0x64
 8009138:	81c2      	strh	r2, [r0, #14]
 800913a:	6183      	str	r3, [r0, #24]
 800913c:	4619      	mov	r1, r3
 800913e:	2208      	movs	r2, #8
 8009140:	305c      	adds	r0, #92	; 0x5c
 8009142:	f7fb fe33 	bl	8004dac <memset>
 8009146:	4b05      	ldr	r3, [pc, #20]	; (800915c <std+0x38>)
 8009148:	6224      	str	r4, [r4, #32]
 800914a:	6263      	str	r3, [r4, #36]	; 0x24
 800914c:	4b04      	ldr	r3, [pc, #16]	; (8009160 <std+0x3c>)
 800914e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009150:	4b04      	ldr	r3, [pc, #16]	; (8009164 <std+0x40>)
 8009152:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009154:	4b04      	ldr	r3, [pc, #16]	; (8009168 <std+0x44>)
 8009156:	6323      	str	r3, [r4, #48]	; 0x30
 8009158:	bd10      	pop	{r4, pc}
 800915a:	bf00      	nop
 800915c:	08009475 	.word	0x08009475
 8009160:	08009497 	.word	0x08009497
 8009164:	080094cf 	.word	0x080094cf
 8009168:	080094f3 	.word	0x080094f3

0800916c <_cleanup_r>:
 800916c:	4901      	ldr	r1, [pc, #4]	; (8009174 <_cleanup_r+0x8>)
 800916e:	f000 b8af 	b.w	80092d0 <_fwalk_reent>
 8009172:	bf00      	nop
 8009174:	080090ad 	.word	0x080090ad

08009178 <__sfmoreglue>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	2568      	movs	r5, #104	; 0x68
 800917c:	1e4a      	subs	r2, r1, #1
 800917e:	4355      	muls	r5, r2
 8009180:	460e      	mov	r6, r1
 8009182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009186:	f7ff fa83 	bl	8008690 <_malloc_r>
 800918a:	4604      	mov	r4, r0
 800918c:	b140      	cbz	r0, 80091a0 <__sfmoreglue+0x28>
 800918e:	2100      	movs	r1, #0
 8009190:	e9c0 1600 	strd	r1, r6, [r0]
 8009194:	300c      	adds	r0, #12
 8009196:	60a0      	str	r0, [r4, #8]
 8009198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800919c:	f7fb fe06 	bl	8004dac <memset>
 80091a0:	4620      	mov	r0, r4
 80091a2:	bd70      	pop	{r4, r5, r6, pc}

080091a4 <__sfp_lock_acquire>:
 80091a4:	4801      	ldr	r0, [pc, #4]	; (80091ac <__sfp_lock_acquire+0x8>)
 80091a6:	f000 b8b3 	b.w	8009310 <__retarget_lock_acquire_recursive>
 80091aa:	bf00      	nop
 80091ac:	2000085c 	.word	0x2000085c

080091b0 <__sfp_lock_release>:
 80091b0:	4801      	ldr	r0, [pc, #4]	; (80091b8 <__sfp_lock_release+0x8>)
 80091b2:	f000 b8ae 	b.w	8009312 <__retarget_lock_release_recursive>
 80091b6:	bf00      	nop
 80091b8:	2000085c 	.word	0x2000085c

080091bc <__sinit_lock_acquire>:
 80091bc:	4801      	ldr	r0, [pc, #4]	; (80091c4 <__sinit_lock_acquire+0x8>)
 80091be:	f000 b8a7 	b.w	8009310 <__retarget_lock_acquire_recursive>
 80091c2:	bf00      	nop
 80091c4:	20000857 	.word	0x20000857

080091c8 <__sinit_lock_release>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__sinit_lock_release+0x8>)
 80091ca:	f000 b8a2 	b.w	8009312 <__retarget_lock_release_recursive>
 80091ce:	bf00      	nop
 80091d0:	20000857 	.word	0x20000857

080091d4 <__sinit>:
 80091d4:	b510      	push	{r4, lr}
 80091d6:	4604      	mov	r4, r0
 80091d8:	f7ff fff0 	bl	80091bc <__sinit_lock_acquire>
 80091dc:	69a3      	ldr	r3, [r4, #24]
 80091de:	b11b      	cbz	r3, 80091e8 <__sinit+0x14>
 80091e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e4:	f7ff bff0 	b.w	80091c8 <__sinit_lock_release>
 80091e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091ec:	6523      	str	r3, [r4, #80]	; 0x50
 80091ee:	4b13      	ldr	r3, [pc, #76]	; (800923c <__sinit+0x68>)
 80091f0:	4a13      	ldr	r2, [pc, #76]	; (8009240 <__sinit+0x6c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	bf08      	it	eq
 80091fa:	2301      	moveq	r3, #1
 80091fc:	4620      	mov	r0, r4
 80091fe:	bf08      	it	eq
 8009200:	61a3      	streq	r3, [r4, #24]
 8009202:	f000 f81f 	bl	8009244 <__sfp>
 8009206:	6060      	str	r0, [r4, #4]
 8009208:	4620      	mov	r0, r4
 800920a:	f000 f81b 	bl	8009244 <__sfp>
 800920e:	60a0      	str	r0, [r4, #8]
 8009210:	4620      	mov	r0, r4
 8009212:	f000 f817 	bl	8009244 <__sfp>
 8009216:	2200      	movs	r2, #0
 8009218:	2104      	movs	r1, #4
 800921a:	60e0      	str	r0, [r4, #12]
 800921c:	6860      	ldr	r0, [r4, #4]
 800921e:	f7ff ff81 	bl	8009124 <std>
 8009222:	2201      	movs	r2, #1
 8009224:	2109      	movs	r1, #9
 8009226:	68a0      	ldr	r0, [r4, #8]
 8009228:	f7ff ff7c 	bl	8009124 <std>
 800922c:	2202      	movs	r2, #2
 800922e:	2112      	movs	r1, #18
 8009230:	68e0      	ldr	r0, [r4, #12]
 8009232:	f7ff ff77 	bl	8009124 <std>
 8009236:	2301      	movs	r3, #1
 8009238:	61a3      	str	r3, [r4, #24]
 800923a:	e7d1      	b.n	80091e0 <__sinit+0xc>
 800923c:	0800aac0 	.word	0x0800aac0
 8009240:	0800916d 	.word	0x0800916d

08009244 <__sfp>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	4607      	mov	r7, r0
 8009248:	f7ff ffac 	bl	80091a4 <__sfp_lock_acquire>
 800924c:	4b1e      	ldr	r3, [pc, #120]	; (80092c8 <__sfp+0x84>)
 800924e:	681e      	ldr	r6, [r3, #0]
 8009250:	69b3      	ldr	r3, [r6, #24]
 8009252:	b913      	cbnz	r3, 800925a <__sfp+0x16>
 8009254:	4630      	mov	r0, r6
 8009256:	f7ff ffbd 	bl	80091d4 <__sinit>
 800925a:	3648      	adds	r6, #72	; 0x48
 800925c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009260:	3b01      	subs	r3, #1
 8009262:	d503      	bpl.n	800926c <__sfp+0x28>
 8009264:	6833      	ldr	r3, [r6, #0]
 8009266:	b30b      	cbz	r3, 80092ac <__sfp+0x68>
 8009268:	6836      	ldr	r6, [r6, #0]
 800926a:	e7f7      	b.n	800925c <__sfp+0x18>
 800926c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009270:	b9d5      	cbnz	r5, 80092a8 <__sfp+0x64>
 8009272:	4b16      	ldr	r3, [pc, #88]	; (80092cc <__sfp+0x88>)
 8009274:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009278:	60e3      	str	r3, [r4, #12]
 800927a:	6665      	str	r5, [r4, #100]	; 0x64
 800927c:	f000 f847 	bl	800930e <__retarget_lock_init_recursive>
 8009280:	f7ff ff96 	bl	80091b0 <__sfp_lock_release>
 8009284:	2208      	movs	r2, #8
 8009286:	4629      	mov	r1, r5
 8009288:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800928c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009290:	6025      	str	r5, [r4, #0]
 8009292:	61a5      	str	r5, [r4, #24]
 8009294:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009298:	f7fb fd88 	bl	8004dac <memset>
 800929c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092a4:	4620      	mov	r0, r4
 80092a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a8:	3468      	adds	r4, #104	; 0x68
 80092aa:	e7d9      	b.n	8009260 <__sfp+0x1c>
 80092ac:	2104      	movs	r1, #4
 80092ae:	4638      	mov	r0, r7
 80092b0:	f7ff ff62 	bl	8009178 <__sfmoreglue>
 80092b4:	4604      	mov	r4, r0
 80092b6:	6030      	str	r0, [r6, #0]
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d1d5      	bne.n	8009268 <__sfp+0x24>
 80092bc:	f7ff ff78 	bl	80091b0 <__sfp_lock_release>
 80092c0:	230c      	movs	r3, #12
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	e7ee      	b.n	80092a4 <__sfp+0x60>
 80092c6:	bf00      	nop
 80092c8:	0800aac0 	.word	0x0800aac0
 80092cc:	ffff0001 	.word	0xffff0001

080092d0 <_fwalk_reent>:
 80092d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d4:	4606      	mov	r6, r0
 80092d6:	4688      	mov	r8, r1
 80092d8:	2700      	movs	r7, #0
 80092da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092e2:	f1b9 0901 	subs.w	r9, r9, #1
 80092e6:	d505      	bpl.n	80092f4 <_fwalk_reent+0x24>
 80092e8:	6824      	ldr	r4, [r4, #0]
 80092ea:	2c00      	cmp	r4, #0
 80092ec:	d1f7      	bne.n	80092de <_fwalk_reent+0xe>
 80092ee:	4638      	mov	r0, r7
 80092f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f4:	89ab      	ldrh	r3, [r5, #12]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d907      	bls.n	800930a <_fwalk_reent+0x3a>
 80092fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092fe:	3301      	adds	r3, #1
 8009300:	d003      	beq.n	800930a <_fwalk_reent+0x3a>
 8009302:	4629      	mov	r1, r5
 8009304:	4630      	mov	r0, r6
 8009306:	47c0      	blx	r8
 8009308:	4307      	orrs	r7, r0
 800930a:	3568      	adds	r5, #104	; 0x68
 800930c:	e7e9      	b.n	80092e2 <_fwalk_reent+0x12>

0800930e <__retarget_lock_init_recursive>:
 800930e:	4770      	bx	lr

08009310 <__retarget_lock_acquire_recursive>:
 8009310:	4770      	bx	lr

08009312 <__retarget_lock_release_recursive>:
 8009312:	4770      	bx	lr

08009314 <__swhatbuf_r>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	460e      	mov	r6, r1
 8009318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931c:	4614      	mov	r4, r2
 800931e:	2900      	cmp	r1, #0
 8009320:	461d      	mov	r5, r3
 8009322:	b096      	sub	sp, #88	; 0x58
 8009324:	da07      	bge.n	8009336 <__swhatbuf_r+0x22>
 8009326:	2300      	movs	r3, #0
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	89b3      	ldrh	r3, [r6, #12]
 800932c:	061a      	lsls	r2, r3, #24
 800932e:	d410      	bmi.n	8009352 <__swhatbuf_r+0x3e>
 8009330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009334:	e00e      	b.n	8009354 <__swhatbuf_r+0x40>
 8009336:	466a      	mov	r2, sp
 8009338:	f000 f902 	bl	8009540 <_fstat_r>
 800933c:	2800      	cmp	r0, #0
 800933e:	dbf2      	blt.n	8009326 <__swhatbuf_r+0x12>
 8009340:	9a01      	ldr	r2, [sp, #4]
 8009342:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009346:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800934a:	425a      	negs	r2, r3
 800934c:	415a      	adcs	r2, r3
 800934e:	602a      	str	r2, [r5, #0]
 8009350:	e7ee      	b.n	8009330 <__swhatbuf_r+0x1c>
 8009352:	2340      	movs	r3, #64	; 0x40
 8009354:	2000      	movs	r0, #0
 8009356:	6023      	str	r3, [r4, #0]
 8009358:	b016      	add	sp, #88	; 0x58
 800935a:	bd70      	pop	{r4, r5, r6, pc}

0800935c <__smakebuf_r>:
 800935c:	898b      	ldrh	r3, [r1, #12]
 800935e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009360:	079d      	lsls	r5, r3, #30
 8009362:	4606      	mov	r6, r0
 8009364:	460c      	mov	r4, r1
 8009366:	d507      	bpl.n	8009378 <__smakebuf_r+0x1c>
 8009368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	6123      	str	r3, [r4, #16]
 8009370:	2301      	movs	r3, #1
 8009372:	6163      	str	r3, [r4, #20]
 8009374:	b002      	add	sp, #8
 8009376:	bd70      	pop	{r4, r5, r6, pc}
 8009378:	466a      	mov	r2, sp
 800937a:	ab01      	add	r3, sp, #4
 800937c:	f7ff ffca 	bl	8009314 <__swhatbuf_r>
 8009380:	9900      	ldr	r1, [sp, #0]
 8009382:	4605      	mov	r5, r0
 8009384:	4630      	mov	r0, r6
 8009386:	f7ff f983 	bl	8008690 <_malloc_r>
 800938a:	b948      	cbnz	r0, 80093a0 <__smakebuf_r+0x44>
 800938c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009390:	059a      	lsls	r2, r3, #22
 8009392:	d4ef      	bmi.n	8009374 <__smakebuf_r+0x18>
 8009394:	f023 0303 	bic.w	r3, r3, #3
 8009398:	f043 0302 	orr.w	r3, r3, #2
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	e7e3      	b.n	8009368 <__smakebuf_r+0xc>
 80093a0:	4b0d      	ldr	r3, [pc, #52]	; (80093d8 <__smakebuf_r+0x7c>)
 80093a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	6020      	str	r0, [r4, #0]
 80093a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	9b00      	ldr	r3, [sp, #0]
 80093b0:	6120      	str	r0, [r4, #16]
 80093b2:	6163      	str	r3, [r4, #20]
 80093b4:	9b01      	ldr	r3, [sp, #4]
 80093b6:	b15b      	cbz	r3, 80093d0 <__smakebuf_r+0x74>
 80093b8:	4630      	mov	r0, r6
 80093ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093be:	f000 f8d1 	bl	8009564 <_isatty_r>
 80093c2:	b128      	cbz	r0, 80093d0 <__smakebuf_r+0x74>
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f023 0303 	bic.w	r3, r3, #3
 80093ca:	f043 0301 	orr.w	r3, r3, #1
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	89a0      	ldrh	r0, [r4, #12]
 80093d2:	4305      	orrs	r5, r0
 80093d4:	81a5      	strh	r5, [r4, #12]
 80093d6:	e7cd      	b.n	8009374 <__smakebuf_r+0x18>
 80093d8:	0800916d 	.word	0x0800916d

080093dc <_malloc_usable_size_r>:
 80093dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e0:	1f18      	subs	r0, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bfbc      	itt	lt
 80093e6:	580b      	ldrlt	r3, [r1, r0]
 80093e8:	18c0      	addlt	r0, r0, r3
 80093ea:	4770      	bx	lr

080093ec <_raise_r>:
 80093ec:	291f      	cmp	r1, #31
 80093ee:	b538      	push	{r3, r4, r5, lr}
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	d904      	bls.n	8009400 <_raise_r+0x14>
 80093f6:	2316      	movs	r3, #22
 80093f8:	6003      	str	r3, [r0, #0]
 80093fa:	f04f 30ff 	mov.w	r0, #4294967295
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009402:	b112      	cbz	r2, 800940a <_raise_r+0x1e>
 8009404:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009408:	b94b      	cbnz	r3, 800941e <_raise_r+0x32>
 800940a:	4620      	mov	r0, r4
 800940c:	f000 f830 	bl	8009470 <_getpid_r>
 8009410:	462a      	mov	r2, r5
 8009412:	4601      	mov	r1, r0
 8009414:	4620      	mov	r0, r4
 8009416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800941a:	f000 b817 	b.w	800944c <_kill_r>
 800941e:	2b01      	cmp	r3, #1
 8009420:	d00a      	beq.n	8009438 <_raise_r+0x4c>
 8009422:	1c59      	adds	r1, r3, #1
 8009424:	d103      	bne.n	800942e <_raise_r+0x42>
 8009426:	2316      	movs	r3, #22
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	2001      	movs	r0, #1
 800942c:	e7e7      	b.n	80093fe <_raise_r+0x12>
 800942e:	2400      	movs	r4, #0
 8009430:	4628      	mov	r0, r5
 8009432:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009436:	4798      	blx	r3
 8009438:	2000      	movs	r0, #0
 800943a:	e7e0      	b.n	80093fe <_raise_r+0x12>

0800943c <raise>:
 800943c:	4b02      	ldr	r3, [pc, #8]	; (8009448 <raise+0xc>)
 800943e:	4601      	mov	r1, r0
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	f7ff bfd3 	b.w	80093ec <_raise_r>
 8009446:	bf00      	nop
 8009448:	2000001c 	.word	0x2000001c

0800944c <_kill_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	2300      	movs	r3, #0
 8009450:	4d06      	ldr	r5, [pc, #24]	; (800946c <_kill_r+0x20>)
 8009452:	4604      	mov	r4, r0
 8009454:	4608      	mov	r0, r1
 8009456:	4611      	mov	r1, r2
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	f7f8 fa40 	bl	80018de <_kill>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	d102      	bne.n	8009468 <_kill_r+0x1c>
 8009462:	682b      	ldr	r3, [r5, #0]
 8009464:	b103      	cbz	r3, 8009468 <_kill_r+0x1c>
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	bd38      	pop	{r3, r4, r5, pc}
 800946a:	bf00      	nop
 800946c:	20000850 	.word	0x20000850

08009470 <_getpid_r>:
 8009470:	f7f8 ba2e 	b.w	80018d0 <_getpid>

08009474 <__sread>:
 8009474:	b510      	push	{r4, lr}
 8009476:	460c      	mov	r4, r1
 8009478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947c:	f000 f894 	bl	80095a8 <_read_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	bfab      	itete	ge
 8009484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009486:	89a3      	ldrhlt	r3, [r4, #12]
 8009488:	181b      	addge	r3, r3, r0
 800948a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800948e:	bfac      	ite	ge
 8009490:	6563      	strge	r3, [r4, #84]	; 0x54
 8009492:	81a3      	strhlt	r3, [r4, #12]
 8009494:	bd10      	pop	{r4, pc}

08009496 <__swrite>:
 8009496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	461f      	mov	r7, r3
 800949c:	898b      	ldrh	r3, [r1, #12]
 800949e:	4605      	mov	r5, r0
 80094a0:	05db      	lsls	r3, r3, #23
 80094a2:	460c      	mov	r4, r1
 80094a4:	4616      	mov	r6, r2
 80094a6:	d505      	bpl.n	80094b4 <__swrite+0x1e>
 80094a8:	2302      	movs	r3, #2
 80094aa:	2200      	movs	r2, #0
 80094ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b0:	f000 f868 	bl	8009584 <_lseek_r>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	4632      	mov	r2, r6
 80094b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	4628      	mov	r0, r5
 80094c0:	463b      	mov	r3, r7
 80094c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ca:	f000 b817 	b.w	80094fc <_write_r>

080094ce <__sseek>:
 80094ce:	b510      	push	{r4, lr}
 80094d0:	460c      	mov	r4, r1
 80094d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d6:	f000 f855 	bl	8009584 <_lseek_r>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	bf15      	itete	ne
 80094e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80094e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094ea:	81a3      	strheq	r3, [r4, #12]
 80094ec:	bf18      	it	ne
 80094ee:	81a3      	strhne	r3, [r4, #12]
 80094f0:	bd10      	pop	{r4, pc}

080094f2 <__sclose>:
 80094f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f6:	f000 b813 	b.w	8009520 <_close_r>
	...

080094fc <_write_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4604      	mov	r4, r0
 8009500:	4608      	mov	r0, r1
 8009502:	4611      	mov	r1, r2
 8009504:	2200      	movs	r2, #0
 8009506:	4d05      	ldr	r5, [pc, #20]	; (800951c <_write_r+0x20>)
 8009508:	602a      	str	r2, [r5, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	f7f8 fa1e 	bl	800194c <_write>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_write_r+0x1e>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_write_r+0x1e>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20000850 	.word	0x20000850

08009520 <_close_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	2300      	movs	r3, #0
 8009524:	4d05      	ldr	r5, [pc, #20]	; (800953c <_close_r+0x1c>)
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7f8 fa2a 	bl	8001984 <_close>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_close_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_close_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	20000850 	.word	0x20000850

08009540 <_fstat_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	2300      	movs	r3, #0
 8009544:	4d06      	ldr	r5, [pc, #24]	; (8009560 <_fstat_r+0x20>)
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	4611      	mov	r1, r2
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	f7f8 fa24 	bl	800199a <_fstat>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d102      	bne.n	800955c <_fstat_r+0x1c>
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	b103      	cbz	r3, 800955c <_fstat_r+0x1c>
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	bd38      	pop	{r3, r4, r5, pc}
 800955e:	bf00      	nop
 8009560:	20000850 	.word	0x20000850

08009564 <_isatty_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	2300      	movs	r3, #0
 8009568:	4d05      	ldr	r5, [pc, #20]	; (8009580 <_isatty_r+0x1c>)
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	f7f8 fa22 	bl	80019b8 <_isatty>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_isatty_r+0x1a>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_isatty_r+0x1a>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	20000850 	.word	0x20000850

08009584 <_lseek_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4604      	mov	r4, r0
 8009588:	4608      	mov	r0, r1
 800958a:	4611      	mov	r1, r2
 800958c:	2200      	movs	r2, #0
 800958e:	4d05      	ldr	r5, [pc, #20]	; (80095a4 <_lseek_r+0x20>)
 8009590:	602a      	str	r2, [r5, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f7f8 fa1a 	bl	80019cc <_lseek>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_lseek_r+0x1e>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_lseek_r+0x1e>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20000850 	.word	0x20000850

080095a8 <_read_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4604      	mov	r4, r0
 80095ac:	4608      	mov	r0, r1
 80095ae:	4611      	mov	r1, r2
 80095b0:	2200      	movs	r2, #0
 80095b2:	4d05      	ldr	r5, [pc, #20]	; (80095c8 <_read_r+0x20>)
 80095b4:	602a      	str	r2, [r5, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f7f8 f9ab 	bl	8001912 <_read>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_read_r+0x1e>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_read_r+0x1e>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	20000850 	.word	0x20000850

080095cc <_init>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	bf00      	nop
 80095d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d2:	bc08      	pop	{r3}
 80095d4:	469e      	mov	lr, r3
 80095d6:	4770      	bx	lr

080095d8 <_fini>:
 80095d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095da:	bf00      	nop
 80095dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095de:	bc08      	pop	{r3}
 80095e0:	469e      	mov	lr, r3
 80095e2:	4770      	bx	lr
