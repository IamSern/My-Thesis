
main_LVTN_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000998c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000198c  08009aa0  08009aa0  00019aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b42c  0800b42c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b42c  0800b42c  0001b42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b434  0800b434  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b434  0800b434  0001b434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b438  0800b438  0001b438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b43c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  200001f0  0800b62c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  0800b62c  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016491  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f13  00000000  00000000  000366aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  000395c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a59c  00000000  00000000  0003bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016748  00000000  00000000  0005606c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091869  00000000  00000000  0006c7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe01d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e8  00000000  00000000  000fe070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a84 	.word	0x08009a84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08009a84 	.word	0x08009a84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b9a6 	b.w	8000ecc <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f83e 	bl	8000c08 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2lz>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	4605      	mov	r5, r0
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f7ff ff09 	bl	80009bc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x20>
 8000bac:	4628      	mov	r0, r5
 8000bae:	4621      	mov	r1, r4
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fc7f 	bl	80004d8 <__aeabi_dmul>
 8000bda:	f7ff ff55 	bl	8000a88 <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc00 	bl	80003e4 <__aeabi_ui2d>
 8000be4:	2200      	movs	r2, #0
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <__aeabi_d2ulz+0x38>)
 8000be8:	f7ff fc76 	bl	80004d8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fab8 	bl	8000168 <__aeabi_dsub>
 8000bf8:	f7ff ff46 	bl	8000a88 <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	468e      	mov	lr, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f040 8083 	bne.w	8000d20 <__udivmoddi4+0x118>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4617      	mov	r7, r2
 8000c1e:	d947      	bls.n	8000cb0 <__udivmoddi4+0xa8>
 8000c20:	fab2 f382 	clz	r3, r2
 8000c24:	b14b      	cbz	r3, 8000c3a <__udivmoddi4+0x32>
 8000c26:	f1c3 0120 	rsb	r1, r3, #32
 8000c2a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	409f      	lsls	r7, r3
 8000c34:	ea41 0e0e 	orr.w	lr, r1, lr
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3e:	fbbe fcf8 	udiv	ip, lr, r8
 8000c42:	fa1f f987 	uxth.w	r9, r7
 8000c46:	fb08 e21c 	mls	r2, r8, ip, lr
 8000c4a:	fb0c f009 	mul.w	r0, ip, r9
 8000c4e:	0c21      	lsrs	r1, r4, #16
 8000c50:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x66>
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000c5e:	f080 8118 	bcs.w	8000e92 <__udivmoddi4+0x28a>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f240 8115 	bls.w	8000e92 <__udivmoddi4+0x28a>
 8000c68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c6c:	443a      	add	r2, r7
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	fbb2 f0f8 	udiv	r0, r2, r8
 8000c74:	fb08 2210 	mls	r2, r8, r0, r2
 8000c78:	fb00 f109 	mul.w	r1, r0, r9
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c82:	42a1      	cmp	r1, r4
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8c:	f080 8103 	bcs.w	8000e96 <__udivmoddi4+0x28e>
 8000c90:	42a1      	cmp	r1, r4
 8000c92:	f240 8100 	bls.w	8000e96 <__udivmoddi4+0x28e>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	1a64      	subs	r4, r4, r1
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	e9c6 4200 	strd	r4, r2, [r6]
 8000cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xac>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f382 	clz	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d14f      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cbc:	1a8d      	subs	r5, r1, r2
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cc4:	fa1f f882 	uxth.w	r8, r2
 8000cc8:	fbb5 fcfe 	udiv	ip, r5, lr
 8000ccc:	fb0e 551c 	mls	r5, lr, ip, r5
 8000cd0:	fb08 f00c 	mul.w	r0, r8, ip
 8000cd4:	0c22      	lsrs	r2, r4, #16
 8000cd6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000cda:	42a8      	cmp	r0, r5
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0xe6>
 8000cde:	197d      	adds	r5, r7, r5
 8000ce0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0xe4>
 8000ce6:	42a8      	cmp	r0, r5
 8000ce8:	f200 80e9 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000cec:	4694      	mov	ip, r2
 8000cee:	1a2d      	subs	r5, r5, r0
 8000cf0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000cf4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000cf8:	fb08 f800 	mul.w	r8, r8, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d02:	45a0      	cmp	r8, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x10e>
 8000d06:	193c      	adds	r4, r7, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x10c>
 8000d0e:	45a0      	cmp	r8, r4
 8000d10:	f200 80d9 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 0408 	sub.w	r4, r4, r8
 8000d1a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1e:	e7c0      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	f000 80b1 	beq.w	8000e8c <__udivmoddi4+0x284>
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e9c6 0500 	strd	r0, r5, [r6]
 8000d30:	4608      	mov	r0, r1
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d14b      	bne.n	8000dd6 <__udivmoddi4+0x1ce>
 8000d3e:	42ab      	cmp	r3, r5
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b9 	bhi.w	8000eba <__udivmoddi4+0x2b2>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb65 0303 	sbc.w	r3, r5, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	469e      	mov	lr, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0aa      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000d56:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d5a:	e7a7      	b.n	8000cac <__udivmoddi4+0xa4>
 8000d5c:	409f      	lsls	r7, r3
 8000d5e:	f1c3 0220 	rsb	r2, r3, #32
 8000d62:	40d1      	lsrs	r1, r2
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d74:	fa24 f202 	lsr.w	r2, r4, r2
 8000d78:	409d      	lsls	r5, r3
 8000d7a:	fb00 fc08 	mul.w	ip, r0, r8
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	0c15      	lsrs	r5, r2, #16
 8000d82:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d86:	45ac      	cmp	ip, r5
 8000d88:	fa04 f403 	lsl.w	r4, r4, r3
 8000d8c:	d909      	bls.n	8000da2 <__udivmoddi4+0x19a>
 8000d8e:	197d      	adds	r5, r7, r5
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	f080 808f 	bcs.w	8000eb6 <__udivmoddi4+0x2ae>
 8000d98:	45ac      	cmp	ip, r5
 8000d9a:	f240 808c 	bls.w	8000eb6 <__udivmoddi4+0x2ae>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	443d      	add	r5, r7
 8000da2:	eba5 050c 	sub.w	r5, r5, ip
 8000da6:	fbb5 f1fe 	udiv	r1, r5, lr
 8000daa:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000dae:	fb01 f908 	mul.w	r9, r1, r8
 8000db2:	b295      	uxth	r5, r2
 8000db4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000db8:	45a9      	cmp	r9, r5
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	197d      	adds	r5, r7, r5
 8000dbe:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dc2:	d274      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000dc4:	45a9      	cmp	r9, r5
 8000dc6:	d972      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000dc8:	3902      	subs	r1, #2
 8000dca:	443d      	add	r5, r7
 8000dcc:	eba5 0509 	sub.w	r5, r5, r9
 8000dd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd4:	e778      	b.n	8000cc8 <__udivmoddi4+0xc0>
 8000dd6:	f1c1 0720 	rsb	r7, r1, #32
 8000dda:	408b      	lsls	r3, r1
 8000ddc:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de0:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de4:	fa25 f407 	lsr.w	r4, r5, r7
 8000de8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dec:	fbb4 f9fe 	udiv	r9, r4, lr
 8000df0:	fa1f f88c 	uxth.w	r8, ip
 8000df4:	fb0e 4419 	mls	r4, lr, r9, r4
 8000df8:	fa20 f307 	lsr.w	r3, r0, r7
 8000dfc:	fb09 fa08 	mul.w	sl, r9, r8
 8000e00:	408d      	lsls	r5, r1
 8000e02:	431d      	orrs	r5, r3
 8000e04:	0c2b      	lsrs	r3, r5, #16
 8000e06:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e10:	fa00 f301 	lsl.w	r3, r0, r1
 8000e14:	d909      	bls.n	8000e2a <__udivmoddi4+0x222>
 8000e16:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1e:	d248      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e20:	45a2      	cmp	sl, r4
 8000e22:	d946      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e24:	f1a9 0902 	sub.w	r9, r9, #2
 8000e28:	4464      	add	r4, ip
 8000e2a:	eba4 040a 	sub.w	r4, r4, sl
 8000e2e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e32:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e36:	fb00 fa08 	mul.w	sl, r0, r8
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e40:	45a2      	cmp	sl, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x24e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e4c:	d22d      	bcs.n	8000eaa <__udivmoddi4+0x2a2>
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	d92b      	bls.n	8000eaa <__udivmoddi4+0x2a2>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	eba4 040a 	sub.w	r4, r4, sl
 8000e62:	454c      	cmp	r4, r9
 8000e64:	46c6      	mov	lr, r8
 8000e66:	464d      	mov	r5, r9
 8000e68:	d319      	bcc.n	8000e9e <__udivmoddi4+0x296>
 8000e6a:	d016      	beq.n	8000e9a <__udivmoddi4+0x292>
 8000e6c:	b15e      	cbz	r6, 8000e86 <__udivmoddi4+0x27e>
 8000e6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e72:	eb64 0405 	sbc.w	r4, r4, r5
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c6 7400 	strd	r7, r4, [r6]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e70c      	b.n	8000cac <__udivmoddi4+0xa4>
 8000e92:	468c      	mov	ip, r1
 8000e94:	e6eb      	b.n	8000c6e <__udivmoddi4+0x66>
 8000e96:	4610      	mov	r0, r2
 8000e98:	e6ff      	b.n	8000c9a <__udivmoddi4+0x92>
 8000e9a:	4543      	cmp	r3, r8
 8000e9c:	d2e6      	bcs.n	8000e6c <__udivmoddi4+0x264>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb69 050c 	sbc.w	r5, r9, ip
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7e0      	b.n	8000e6c <__udivmoddi4+0x264>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e7d3      	b.n	8000e56 <__udivmoddi4+0x24e>
 8000eae:	4611      	mov	r1, r2
 8000eb0:	e78c      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e7b9      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e773      	b.n	8000da2 <__udivmoddi4+0x19a>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e749      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebe:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec2:	443d      	add	r5, r7
 8000ec4:	e713      	b.n	8000cee <__udivmoddi4+0xe6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	e724      	b.n	8000d16 <__udivmoddi4+0x10e>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f1b      	ldrb	r3, [r3, #28]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	f040 8083 	bne.w	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000ee2:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11a      	bne.n	8000f20 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000eea:	2100      	movs	r1, #0
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f002 fed5 	bl	8003c9c <HAL_TIM_ReadCapturedValue>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a41      	ldr	r2, [pc, #260]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ef6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 020a 	bic.w	r2, r2, #10
 8000f0c:	621a      	str	r2, [r3, #32]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6a1a      	ldr	r2, [r3, #32]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0202 	orr.w	r2, r2, #2
 8000f1c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000f1e:	e063      	b.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d15f      	bne.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f002 feb6 	bl	8003c9c <HAL_TIM_ReadCapturedValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a33      	ldr	r2, [pc, #204]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f34:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d907      	bls.n	8000f5a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	4a2b      	ldr	r2, [pc, #172]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e00f      	b.n	8000f7a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d909      	bls.n	8000f7a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f74:	33ff      	adds	r3, #255	; 0xff
 8000f76:	4a23      	ldr	r2, [pc, #140]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f78:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa30 	bl	80003e4 <__aeabi_ui2d>
 8000f84:	a31a      	add	r3, pc, #104	; (adr r3, 8000ff0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff faa5 	bl	80004d8 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9e:	f7ff fbc5 	bl	800072c <__aeabi_ddiv>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fd6d 	bl	8000a88 <__aeabi_d2uiz>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fb4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6a1a      	ldr	r2, [r3, #32]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020a 	bic.w	r2, r2, #10
 8000fca:	621a      	str	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6a12      	ldr	r2, [r2, #32]
 8000fd6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0202 	bic.w	r2, r2, #2
 8000fe6:	60da      	str	r2, [r3, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	b020c49c 	.word	0xb020c49c
 8000ff4:	3fa16872 	.word	0x3fa16872
 8000ff8:	20000218 	.word	0x20000218
 8000ffc:	2000020c 	.word	0x2000020c
 8001000:	20000210 	.word	0x20000210
 8001004:	20000214 	.word	0x20000214
 8001008:	20000219 	.word	0x20000219
 800100c:	2000036c 	.word	0x2000036c

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b096      	sub	sp, #88	; 0x58
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t CardID[5];
	char bufCardID[50];
	//Temp
	  float Temp1 = 0;
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	657b      	str	r3, [r7, #84]	; 0x54
	  char bufTemp1[5];
	  // weight
	  float weight = 0;
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	653b      	str	r3, [r7, #80]	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001022:	f000 fd2f 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001026:	f000 f823 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 f9cf 	bl	80013cc <MX_GPIO_Init>
  MX_SPI1_Init();
 800102e:	f000 f893 	bl	8001158 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001032:	f000 f8c7 	bl	80011c4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001036:	f000 f8fb 	bl	8001230 <MX_TIM1_Init>
  MX_I2C1_Init();
 800103a:	f000 f85f 	bl	80010fc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800103e:	f000 f99b 	bl	8001378 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001042:	f000 f94b 	bl	80012dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  TimerDelay_Init();
 8001046:	f004 f869 	bl	800511c <TimerDelay_Init>
	MFRC522_Init();
 800104a:	f003 fed5 	bl	8004df8 <MFRC522_Init>
	ST7565_Init();
 800104e:	f003 fa9f 	bl	8004590 <ST7565_Init>
	HX711_init();
 8001052:	f003 ff13 	bl	8004e7c <HX711_init>

	HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	; 0x64
 8001058:	f000 fd76 	bl	8001b48 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800105c:	2100      	movs	r1, #0
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <main+0x5c>)
 8001060:	f002 fab6 	bl	80035d0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    UImeas_pressure();
 8001064:	f003 ffe4 	bl	8005030 <UImeas_pressure>
 8001068:	e7fc      	b.n	8001064 <main+0x54>
 800106a:	bf00      	nop
 800106c:	2000036c 	.word	0x2000036c

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b090      	sub	sp, #64	; 0x40
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	2228      	movs	r2, #40	; 0x28
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f004 f8f0 	bl	8005264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001092:	2301      	movs	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800109a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a4:	2302      	movs	r3, #2
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 f96f 	bl	800239c <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010c4:	f000 fa14 	bl	80014f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2302      	movs	r3, #2
 80010ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fbda 	bl	800289c <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010ee:	f000 f9ff 	bl	80014f0 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3740      	adds	r7, #64	; 0x40
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C1_Init+0x50>)
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <MX_I2C1_Init+0x54>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C1_Init+0x50>)
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <MX_I2C1_Init+0x58>)
 800110a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_I2C1_Init+0x50>)
 800111a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_I2C1_Init+0x50>)
 800113a:	f000 ffeb 	bl	8002114 <HAL_I2C_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 f9d4 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000314 	.word	0x20000314
 8001150:	40005400 	.word	0x40005400
 8001154:	000186a0 	.word	0x000186a0

08001158 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_SPI1_Init+0x64>)
 800115e:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <MX_SPI1_Init+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_SPI1_Init+0x64>)
 8001164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001168:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_SPI1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_SPI1_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_SPI1_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_SPI1_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_SPI1_Init+0x64>)
 8001184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001188:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_SPI1_Init+0x64>)
 800118c:	2208      	movs	r2, #8
 800118e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_SPI1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_SPI1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_SPI1_Init+0x64>)
 80011a4:	220a      	movs	r2, #10
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_SPI1_Init+0x64>)
 80011aa:	f001 fd11 	bl	8002bd0 <HAL_SPI_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011b4:	f000 f99c 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200003b4 	.word	0x200003b4
 80011c0:	40013000 	.word	0x40013000

080011c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_SPI2_Init+0x64>)
 80011ca:	4a18      	ldr	r2, [pc, #96]	; (800122c <MX_SPI2_Init+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_SPI2_Init+0x64>)
 80011d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_SPI2_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_SPI2_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_SPI2_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_SPI2_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_SPI2_Init+0x64>)
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_SPI2_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MX_SPI2_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_SPI2_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <MX_SPI2_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_SPI2_Init+0x64>)
 8001210:	220a      	movs	r2, #10
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_SPI2_Init+0x64>)
 8001216:	f001 fcdb 	bl	8002bd0 <HAL_SPI_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001220:	f000 f966 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000274 	.word	0x20000274
 800122c:	40003800 	.word	0x40003800

08001230 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_TIM1_Init+0xa4>)
 800124e:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <MX_TIM1_Init+0xa8>)
 8001250:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <MX_TIM1_Init+0xa4>)
 8001254:	2247      	movs	r2, #71	; 0x47
 8001256:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_TIM1_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_TIM1_Init+0xa4>)
 8001260:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001264:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_TIM1_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_TIM1_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_TIM1_Init+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001278:	4816      	ldr	r0, [pc, #88]	; (80012d4 <MX_TIM1_Init+0xa4>)
 800127a:	f002 f959 	bl	8003530 <HAL_TIM_IC_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001284:	f000 f934 	bl	80014f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <MX_TIM1_Init+0xa4>)
 8001298:	f002 ff92 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012a2:	f000 f925 	bl	80014f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012aa:	2301      	movs	r3, #1
 80012ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_TIM1_Init+0xa4>)
 80012be:	f002 fb95 	bl	80039ec <HAL_TIM_IC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80012c8:	f000 f912 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000036c 	.word	0x2000036c
 80012d8:	40012c00 	.word	0x40012c00

080012dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM4_Init+0x94>)
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <MX_TIM4_Init+0x98>)
 80012fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM4_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM4_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM4_Init+0x94>)
 800130c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001310:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_TIM4_Init+0x94>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM4_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_TIM4_Init+0x94>)
 8001320:	f002 f86c 	bl	80033fc <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800132a:	f000 f8e1 	bl	80014f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM4_Init+0x94>)
 800133c:	f002 fbea 	bl	8003b14 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001346:	f000 f8d3 	bl	80014f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM4_Init+0x94>)
 8001358:	f002 ff32 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001362:	f000 f8c5 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200002cc 	.word	0x200002cc
 8001374:	40000800 	.word	0x40000800

08001378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_USART2_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013b0:	f002 ff76 	bl	80042a0 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 f899 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000040c 	.word	0x2000040c
 80013c8:	40004400 	.word	0x40004400

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e0:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <MX_GPIO_Init+0x114>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a3e      	ldr	r2, [pc, #248]	; (80014e0 <MX_GPIO_Init+0x114>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <MX_GPIO_Init+0x114>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_GPIO_Init+0x114>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <MX_GPIO_Init+0x114>)
 80013fe:	f043 0320 	orr.w	r3, r3, #32
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_GPIO_Init+0x114>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_GPIO_Init+0x114>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <MX_GPIO_Init+0x114>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_GPIO_Init+0x114>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_GPIO_Init+0x114>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a2c      	ldr	r2, [pc, #176]	; (80014e0 <MX_GPIO_Init+0x114>)
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_GPIO_Init+0x114>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|Buzzer_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001446:	4827      	ldr	r0, [pc, #156]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001448:	f000 fe4b 	bl	80020e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|Pump_Pin|GPIO_PIN_10
 800144c:	2200      	movs	r2, #0
 800144e:	f641 6111 	movw	r1, #7697	; 0x1e11
 8001452:	4825      	ldr	r0, [pc, #148]	; (80014e8 <MX_GPIO_Init+0x11c>)
 8001454:	f000 fe45 	bl	80020e2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|Valve_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800145e:	4823      	ldr	r0, [pc, #140]	; (80014ec <MX_GPIO_Init+0x120>)
 8001460:	f000 fe3f 	bl	80020e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 Buzzer_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|Buzzer_Pin;
 8001464:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2302      	movs	r3, #2
 8001474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4619      	mov	r1, r3
 800147c:	4819      	ldr	r0, [pc, #100]	; (80014e4 <MX_GPIO_Init+0x118>)
 800147e:	f000 fc95 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 Pump_Pin PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|Pump_Pin|GPIO_PIN_10
 8001482:	f641 6311 	movw	r3, #7697	; 0x1e11
 8001486:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2302      	movs	r3, #2
 8001492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4619      	mov	r1, r3
 800149a:	4813      	ldr	r0, [pc, #76]	; (80014e8 <MX_GPIO_Init+0x11c>)
 800149c:	f000 fc86 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 Valve_Pin PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|Valve_Pin|GPIO_PIN_9;
 80014a0:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 80014a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	4619      	mov	r1, r3
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <MX_GPIO_Init+0x120>)
 80014ba:	f000 fc77 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_GPIO_Init+0x120>)
 80014d4:	f000 fc6a 	bl	8001dac <HAL_GPIO_Init>

}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40011000 	.word	0x40011000
 80014e8:	40010800 	.word	0x40010800
 80014ec:	40010c00 	.word	0x40010c00

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 80014f8:	e7fe      	b.n	80014f8 <Error_Handler+0x8>
	...

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_MspInit+0x5c>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_MspInit+0x5c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_MspInit+0x5c>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_MspInit+0x5c>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_MspInit+0x5c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_MspInit+0x5c>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_MspInit+0x60>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_MspInit+0x60>)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000

08001560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <HAL_I2C_MspInit+0x70>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d123      	bne.n	80015c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001598:	23c0      	movs	r3, #192	; 0xc0
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159c:	2312      	movs	r3, #18
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <HAL_I2C_MspInit+0x78>)
 80015ac:	f000 fbfe 	bl	8001dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 80015b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ba:	61d3      	str	r3, [r2, #28]
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40005400 	.word	0x40005400
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010c00 	.word	0x40010c00

080015dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0318 	add.w	r3, r7, #24
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a37      	ldr	r2, [pc, #220]	; (80016d4 <HAL_SPI_MspInit+0xf8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d130      	bne.n	800165e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a35      	ldr	r2, [pc, #212]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001602:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800162c:	23a0      	movs	r3, #160	; 0xa0
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	4619      	mov	r1, r3
 800163e:	4827      	ldr	r0, [pc, #156]	; (80016dc <HAL_SPI_MspInit+0x100>)
 8001640:	f000 fbb4 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001644:	2340      	movs	r3, #64	; 0x40
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	4619      	mov	r1, r3
 8001656:	4821      	ldr	r0, [pc, #132]	; (80016dc <HAL_SPI_MspInit+0x100>)
 8001658:	f000 fba8 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800165c:	e036      	b.n	80016cc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <HAL_SPI_MspInit+0x104>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d131      	bne.n	80016cc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 800166e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001672:	61d3      	str	r3, [r2, #28]
 8001674:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001698:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	4619      	mov	r1, r3
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <HAL_SPI_MspInit+0x108>)
 80016ae:	f000 fb7d 	bl	8001dac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0318 	add.w	r3, r7, #24
 80016c4:	4619      	mov	r1, r3
 80016c6:	4807      	ldr	r0, [pc, #28]	; (80016e4 <HAL_SPI_MspInit+0x108>)
 80016c8:	f000 fb70 	bl	8001dac <HAL_GPIO_Init>
}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40013000 	.word	0x40013000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010800 	.word	0x40010800
 80016e0:	40003800 	.word	0x40003800
 80016e4:	40010c00 	.word	0x40010c00

080016e8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1a      	ldr	r2, [pc, #104]	; (800176c <HAL_TIM_IC_MspInit+0x84>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d12c      	bne.n	8001762 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_TIM_IC_MspInit+0x88>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a18      	ldr	r2, [pc, #96]	; (8001770 <HAL_TIM_IC_MspInit+0x88>)
 800170e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_TIM_IC_MspInit+0x88>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_TIM_IC_MspInit+0x88>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_TIM_IC_MspInit+0x88>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_TIM_IC_MspInit+0x88>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	4619      	mov	r1, r3
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <HAL_TIM_IC_MspInit+0x8c>)
 800174e:	f000 fb2d 	bl	8001dac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	201b      	movs	r0, #27
 8001758:	f000 faf1 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800175c:	201b      	movs	r0, #27
 800175e:	f000 fb0a 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40012c00 	.word	0x40012c00
 8001770:	40021000 	.word	0x40021000
 8001774:	40010800 	.word	0x40010800

08001778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_TIM_Base_MspInit+0x34>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10b      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_TIM_Base_MspInit+0x38>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_TIM_Base_MspInit+0x38>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_TIM_Base_MspInit+0x38>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40000800 	.word	0x40000800
 80017b0:	40021000 	.word	0x40021000

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_UART_MspInit+0x88>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d12f      	bne.n	8001834 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017de:	61d3      	str	r3, [r2, #28]
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a13      	ldr	r2, [pc, #76]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001804:	2304      	movs	r3, #4
 8001806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4619      	mov	r1, r3
 8001816:	480b      	ldr	r0, [pc, #44]	; (8001844 <HAL_UART_MspInit+0x90>)
 8001818:	f000 fac8 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800181c:	2308      	movs	r3, #8
 800181e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4619      	mov	r1, r3
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_UART_MspInit+0x90>)
 8001830:	f000 fabc 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40004400 	.word	0x40004400
 8001840:	40021000 	.word	0x40021000
 8001844:	40010800 	.word	0x40010800

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler+0x4>

08001866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188e:	f000 f93f 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM1_CC_IRQHandler+0x10>)
 800189e:	f001 ff9d 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000036c 	.word	0x2000036c

080018ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <_kill>:

int _kill(int pid, int sig)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018c4:	f003 fca4 	bl	8005210 <__errno>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2216      	movs	r2, #22
 80018cc:	601a      	str	r2, [r3, #0]
	return -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_exit>:

void _exit (int status)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e2:	f04f 31ff 	mov.w	r1, #4294967295
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffe7 	bl	80018ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ec:	e7fe      	b.n	80018ec <_exit+0x12>

080018ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e00a      	b.n	8001916 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001900:	f3af 8000 	nop.w
 8001904:	4601      	mov	r1, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	60ba      	str	r2, [r7, #8]
 800190c:	b2ca      	uxtb	r2, r1
 800190e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	dbf0      	blt.n	8001900 <_read+0x12>
	}

return len;
 800191e:	687b      	ldr	r3, [r7, #4]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e009      	b.n	800194e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	60ba      	str	r2, [r7, #8]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	429a      	cmp	r2, r3
 8001954:	dbf1      	blt.n	800193a <_write+0x12>
	}
	return len;
 8001956:	687b      	ldr	r3, [r7, #4]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_close>:

int _close(int file)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001986:	605a      	str	r2, [r3, #4]
	return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <_isatty>:

int _isatty(int file)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	return 1;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <_sbrk+0x5c>)
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <_sbrk+0x60>)
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_sbrk+0x64>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <_sbrk+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f0:	f003 fc0e 	bl	8005210 <__errno>
 80019f4:	4603      	mov	r3, r0
 80019f6:	220c      	movs	r2, #12
 80019f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e009      	b.n	8001a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <_sbrk+0x64>)
 8001a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20005000 	.word	0x20005000
 8001a20:	00000400 	.word	0x00000400
 8001a24:	2000021c 	.word	0x2000021c
 8001a28:	20000860 	.word	0x20000860

08001a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a3a:	e003      	b.n	8001a44 <LoopCopyDataInit>

08001a3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a42:	3104      	adds	r1, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a44:	480a      	ldr	r0, [pc, #40]	; (8001a70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a4c:	d3f6      	bcc.n	8001a3c <CopyDataInit>
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a50:	e002      	b.n	8001a58 <LoopFillZerobss>

08001a52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a54:	f842 3b04 	str.w	r3, [r2], #4

08001a58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a5c:	d3f9      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a5e:	f7ff ffe5 	bl	8001a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a62:	f003 fbdb 	bl	800521c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a66:	f7ff fad3 	bl	8001010 <main>
  bx lr
 8001a6a:	4770      	bx	lr
  ldr r3, =_sidata
 8001a6c:	0800b43c 	.word	0x0800b43c
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a74:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8001a78:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8001a7c:	20000860 	.word	0x20000860

08001a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x28>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x28>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f947 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fd2c 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f95f 	bl	8001d92 <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f000 f927 	bl	8001d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_IncTick+0x1c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_IncTick+0x20>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <HAL_IncTick+0x20>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	2000044c 	.word	0x2000044c

08001b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b02      	ldr	r3, [pc, #8]	; (8001b44 <HAL_GetTick+0x10>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	2000044c 	.word	0x2000044c

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff fff0 	bl	8001b34 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d005      	beq.n	8001b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_Delay+0x44>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b6e:	bf00      	nop
 8001b70:	f7ff ffe0 	bl	8001b34 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d8f7      	bhi.n	8001b70 <HAL_Delay+0x28>
  {
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4906      	ldr	r1, [pc, #24]	; (8001c28 <__NVIC_EnableIRQ+0x34>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f7ff ff90 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff2d 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff42 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff90 	bl	8001c80 <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5f 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff35 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa2 	bl	8001ce4 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b08b      	sub	sp, #44	; 0x2c
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbe:	e169      	b.n	8002094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8158 	bne.w	800208e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a9a      	ldr	r2, [pc, #616]	; (800204c <HAL_GPIO_Init+0x2a0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d05e      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001de8:	4a98      	ldr	r2, [pc, #608]	; (800204c <HAL_GPIO_Init+0x2a0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d875      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001dee:	4a98      	ldr	r2, [pc, #608]	; (8002050 <HAL_GPIO_Init+0x2a4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d058      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001df4:	4a96      	ldr	r2, [pc, #600]	; (8002050 <HAL_GPIO_Init+0x2a4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d86f      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001dfa:	4a96      	ldr	r2, [pc, #600]	; (8002054 <HAL_GPIO_Init+0x2a8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d052      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e00:	4a94      	ldr	r2, [pc, #592]	; (8002054 <HAL_GPIO_Init+0x2a8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d869      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e06:	4a94      	ldr	r2, [pc, #592]	; (8002058 <HAL_GPIO_Init+0x2ac>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d04c      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e0c:	4a92      	ldr	r2, [pc, #584]	; (8002058 <HAL_GPIO_Init+0x2ac>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d863      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e12:	4a92      	ldr	r2, [pc, #584]	; (800205c <HAL_GPIO_Init+0x2b0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d046      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e18:	4a90      	ldr	r2, [pc, #576]	; (800205c <HAL_GPIO_Init+0x2b0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d85d      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d82a      	bhi.n	8001e78 <HAL_GPIO_Init+0xcc>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d859      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e26:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <HAL_GPIO_Init+0x80>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001ea7 	.word	0x08001ea7
 8001e30:	08001e81 	.word	0x08001e81
 8001e34:	08001e93 	.word	0x08001e93
 8001e38:	08001ed5 	.word	0x08001ed5
 8001e3c:	08001edb 	.word	0x08001edb
 8001e40:	08001edb 	.word	0x08001edb
 8001e44:	08001edb 	.word	0x08001edb
 8001e48:	08001edb 	.word	0x08001edb
 8001e4c:	08001edb 	.word	0x08001edb
 8001e50:	08001edb 	.word	0x08001edb
 8001e54:	08001edb 	.word	0x08001edb
 8001e58:	08001edb 	.word	0x08001edb
 8001e5c:	08001edb 	.word	0x08001edb
 8001e60:	08001edb 	.word	0x08001edb
 8001e64:	08001edb 	.word	0x08001edb
 8001e68:	08001edb 	.word	0x08001edb
 8001e6c:	08001edb 	.word	0x08001edb
 8001e70:	08001e89 	.word	0x08001e89
 8001e74:	08001e9d 	.word	0x08001e9d
 8001e78:	4a79      	ldr	r2, [pc, #484]	; (8002060 <HAL_GPIO_Init+0x2b4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e7e:	e02c      	b.n	8001eda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e029      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e024      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	3308      	adds	r3, #8
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e01f      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e01a      	b.n	8001edc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e013      	b.n	8001edc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	611a      	str	r2, [r3, #16]
          break;
 8001ec6:	e009      	b.n	8001edc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	615a      	str	r2, [r3, #20]
          break;
 8001ed2:	e003      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x130>
          break;
 8001eda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2bff      	cmp	r3, #255	; 0xff
 8001ee0:	d801      	bhi.n	8001ee6 <HAL_GPIO_Init+0x13a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_Init+0x13e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d802      	bhi.n	8001ef8 <HAL_GPIO_Init+0x14c>
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x152>
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	3b08      	subs	r3, #8
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	210f      	movs	r1, #15
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	401a      	ands	r2, r3
 8001f10:	6a39      	ldr	r1, [r7, #32]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80b1 	beq.w	800208e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a4c      	ldr	r2, [pc, #304]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_GPIO_Init+0x2bc>)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a40      	ldr	r2, [pc, #256]	; (800206c <HAL_GPIO_Init+0x2c0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_GPIO_Init+0x1ec>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3f      	ldr	r2, [pc, #252]	; (8002070 <HAL_GPIO_Init+0x2c4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00d      	beq.n	8001f94 <HAL_GPIO_Init+0x1e8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3e      	ldr	r2, [pc, #248]	; (8002074 <HAL_GPIO_Init+0x2c8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d007      	beq.n	8001f90 <HAL_GPIO_Init+0x1e4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3d      	ldr	r2, [pc, #244]	; (8002078 <HAL_GPIO_Init+0x2cc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_GPIO_Init+0x1e0>
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e006      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e004      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9c:	f002 0203 	and.w	r2, r2, #3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001faa:	492f      	ldr	r1, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x2bc>)
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	492c      	ldr	r1, [pc, #176]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4928      	ldr	r1, [pc, #160]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4922      	ldr	r1, [pc, #136]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	491e      	ldr	r1, [pc, #120]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002004:	4013      	ands	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4918      	ldr	r1, [pc, #96]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	43db      	mvns	r3, r3
 800202a:	4914      	ldr	r1, [pc, #80]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800202c:	4013      	ands	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d021      	beq.n	8002080 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	490e      	ldr	r1, [pc, #56]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	60cb      	str	r3, [r1, #12]
 8002048:	e021      	b.n	800208e <HAL_GPIO_Init+0x2e2>
 800204a:	bf00      	nop
 800204c:	10320000 	.word	0x10320000
 8002050:	10310000 	.word	0x10310000
 8002054:	10220000 	.word	0x10220000
 8002058:	10210000 	.word	0x10210000
 800205c:	10120000 	.word	0x10120000
 8002060:	10110000 	.word	0x10110000
 8002064:	40021000 	.word	0x40021000
 8002068:	40010000 	.word	0x40010000
 800206c:	40010800 	.word	0x40010800
 8002070:	40010c00 	.word	0x40010c00
 8002074:	40011000 	.word	0x40011000
 8002078:	40011400 	.word	0x40011400
 800207c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	43db      	mvns	r3, r3
 8002088:	4909      	ldr	r1, [pc, #36]	; (80020b0 <HAL_GPIO_Init+0x304>)
 800208a:	4013      	ands	r3, r2
 800208c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f47f ae8e 	bne.w	8001dc0 <HAL_GPIO_Init+0x14>
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	372c      	adds	r7, #44	; 0x2c
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e001      	b.n	80020d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]
 80020ee:	4613      	mov	r3, r2
 80020f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f2:	787b      	ldrb	r3, [r7, #1]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020fe:	e003      	b.n	8002108 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	041a      	lsls	r2, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	611a      	str	r2, [r3, #16]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
	...

08002114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e12b      	b.n	800237e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fa10 	bl	8001560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2224      	movs	r2, #36	; 0x24
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002166:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002176:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002178:	f000 fce4 	bl	8002b44 <HAL_RCC_GetPCLK1Freq>
 800217c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4a81      	ldr	r2, [pc, #516]	; (8002388 <HAL_I2C_Init+0x274>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d807      	bhi.n	8002198 <HAL_I2C_Init+0x84>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a80      	ldr	r2, [pc, #512]	; (800238c <HAL_I2C_Init+0x278>)
 800218c:	4293      	cmp	r3, r2
 800218e:	bf94      	ite	ls
 8002190:	2301      	movls	r3, #1
 8002192:	2300      	movhi	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e006      	b.n	80021a6 <HAL_I2C_Init+0x92>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4a7d      	ldr	r2, [pc, #500]	; (8002390 <HAL_I2C_Init+0x27c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	bf94      	ite	ls
 80021a0:	2301      	movls	r3, #1
 80021a2:	2300      	movhi	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0e7      	b.n	800237e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4a78      	ldr	r2, [pc, #480]	; (8002394 <HAL_I2C_Init+0x280>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0c9b      	lsrs	r3, r3, #18
 80021b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a6a      	ldr	r2, [pc, #424]	; (8002388 <HAL_I2C_Init+0x274>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d802      	bhi.n	80021e8 <HAL_I2C_Init+0xd4>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3301      	adds	r3, #1
 80021e6:	e009      	b.n	80021fc <HAL_I2C_Init+0xe8>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	4a69      	ldr	r2, [pc, #420]	; (8002398 <HAL_I2C_Init+0x284>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	3301      	adds	r3, #1
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	430b      	orrs	r3, r1
 8002202:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800220e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	495c      	ldr	r1, [pc, #368]	; (8002388 <HAL_I2C_Init+0x274>)
 8002218:	428b      	cmp	r3, r1
 800221a:	d819      	bhi.n	8002250 <HAL_I2C_Init+0x13c>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1e59      	subs	r1, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fbb1 f3f3 	udiv	r3, r1, r3
 800222a:	1c59      	adds	r1, r3, #1
 800222c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002230:	400b      	ands	r3, r1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_I2C_Init+0x138>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1e59      	subs	r1, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fbb1 f3f3 	udiv	r3, r1, r3
 8002244:	3301      	adds	r3, #1
 8002246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224a:	e051      	b.n	80022f0 <HAL_I2C_Init+0x1dc>
 800224c:	2304      	movs	r3, #4
 800224e:	e04f      	b.n	80022f0 <HAL_I2C_Init+0x1dc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d111      	bne.n	800227c <HAL_I2C_Init+0x168>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1e58      	subs	r0, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	440b      	add	r3, r1
 8002266:	fbb0 f3f3 	udiv	r3, r0, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e012      	b.n	80022a2 <HAL_I2C_Init+0x18e>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1e58      	subs	r0, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	0099      	lsls	r1, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002292:	3301      	adds	r3, #1
 8002294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Init+0x196>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e022      	b.n	80022f0 <HAL_I2C_Init+0x1dc>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10e      	bne.n	80022d0 <HAL_I2C_Init+0x1bc>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1e58      	subs	r0, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	440b      	add	r3, r1
 80022c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ce:	e00f      	b.n	80022f0 <HAL_I2C_Init+0x1dc>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1e58      	subs	r0, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	0099      	lsls	r1, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	6809      	ldr	r1, [r1, #0]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800231e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6911      	ldr	r1, [r2, #16]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68d2      	ldr	r2, [r2, #12]
 800232a:	4311      	orrs	r1, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	430b      	orrs	r3, r1
 8002332:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	000186a0 	.word	0x000186a0
 800238c:	001e847f 	.word	0x001e847f
 8002390:	003d08ff 	.word	0x003d08ff
 8002394:	431bde83 	.word	0x431bde83
 8002398:	10624dd3 	.word	0x10624dd3

0800239c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e26c      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8087 	beq.w	80024ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023bc:	4b92      	ldr	r3, [pc, #584]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d00c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c8:	4b8f      	ldr	r3, [pc, #572]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d112      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
 80023d4:	4b8c      	ldr	r3, [pc, #560]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d10b      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e2:	4b89      	ldr	r3, [pc, #548]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d06c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x12c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d168      	bne.n	80024c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e246      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x76>
 8002404:	4b80      	ldr	r3, [pc, #512]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a7f      	ldr	r2, [pc, #508]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e02e      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x98>
 800241a:	4b7b      	ldr	r3, [pc, #492]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7a      	ldr	r2, [pc, #488]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b78      	ldr	r3, [pc, #480]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a77      	ldr	r2, [pc, #476]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800242c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e01d      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0xbc>
 800243e:	4b72      	ldr	r3, [pc, #456]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a71      	ldr	r2, [pc, #452]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002458:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800245e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a67      	ldr	r2, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fb5c 	bl	8001b34 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff fb58 	bl	8001b34 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e1fa      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	4b5d      	ldr	r3, [pc, #372]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0xe4>
 800249e:	e014      	b.n	80024ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fb48 	bl	8001b34 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff fb44 	bl	8001b34 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1e6      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x10c>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d063      	beq.n	800259e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d6:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024e2:	4b49      	ldr	r3, [pc, #292]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x18c>
 80024ee:	4b46      	ldr	r3, [pc, #280]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x176>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1ba      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4939      	ldr	r1, [pc, #228]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e03a      	b.n	800259e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_RCC_OscConfig+0x270>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7ff fafd 	bl	8001b34 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253e:	f7ff faf9 	bl	8001b34 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e19b      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4927      	ldr	r1, [pc, #156]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <HAL_RCC_OscConfig+0x270>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fadc 	bl	8001b34 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002580:	f7ff fad8 	bl	8001b34 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e17a      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d03a      	beq.n	8002620 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d019      	beq.n	80025e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b8:	f7ff fabc 	bl	8001b34 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c0:	f7ff fab8 	bl	8001b34 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e15a      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025de:	2001      	movs	r0, #1
 80025e0:	f000 fad8 	bl	8002b94 <RCC_Delay>
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ec:	f7ff faa2 	bl	8001b34 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f2:	e00f      	b.n	8002614 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f4:	f7ff fa9e 	bl	8001b34 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d908      	bls.n	8002614 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e140      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	42420000 	.word	0x42420000
 8002610:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	4b9e      	ldr	r3, [pc, #632]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e9      	bne.n	80025f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a6 	beq.w	800277a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b97      	ldr	r3, [pc, #604]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a93      	ldr	r2, [pc, #588]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	61d3      	str	r3, [r2, #28]
 800264a:	4b91      	ldr	r3, [pc, #580]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002656:	2301      	movs	r3, #1
 8002658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4b8e      	ldr	r3, [pc, #568]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d118      	bne.n	8002698 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002666:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a8a      	ldr	r2, [pc, #552]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002672:	f7ff fa5f 	bl	8001b34 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267a:	f7ff fa5b 	bl	8001b34 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b64      	cmp	r3, #100	; 0x64
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e0fd      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x312>
 80026a0:	4b7b      	ldr	r3, [pc, #492]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4a7a      	ldr	r2, [pc, #488]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6213      	str	r3, [r2, #32]
 80026ac:	e02d      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x334>
 80026b6:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a75      	ldr	r2, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a72      	ldr	r2, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	e01c      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x356>
 80026d8:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a6c      	ldr	r2, [pc, #432]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a69      	ldr	r2, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	e00b      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026f2:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a66      	ldr	r2, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6213      	str	r3, [r2, #32]
 80026fe:	4b64      	ldr	r3, [pc, #400]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a63      	ldr	r2, [pc, #396]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d015      	beq.n	800273e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002712:	f7ff fa0f 	bl	8001b34 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7ff fa0b 	bl	8001b34 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	; 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0ab      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	4b57      	ldr	r3, [pc, #348]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ee      	beq.n	800271a <HAL_RCC_OscConfig+0x37e>
 800273c:	e014      	b.n	8002768 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7ff f9f9 	bl	8001b34 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7ff f9f5 	bl	8001b34 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e095      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ee      	bne.n	8002746 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d105      	bne.n	800277a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276e:	4b48      	ldr	r3, [pc, #288]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	4a47      	ldr	r2, [pc, #284]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002778:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8081 	beq.w	8002886 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002784:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d061      	beq.n	8002854 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d146      	bne.n	8002826 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <HAL_RCC_OscConfig+0x4fc>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7ff f9c9 	bl	8001b34 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7ff f9c5 	bl	8001b34 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e067      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b8:	4b35      	ldr	r3, [pc, #212]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d108      	bne.n	80027e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	492d      	ldr	r1, [pc, #180]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a19      	ldr	r1, [r3, #32]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	430b      	orrs	r3, r1
 80027f2:	4927      	ldr	r1, [pc, #156]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x4fc>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7ff f999 	bl	8001b34 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7ff f995 	bl	8001b34 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e037      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x46a>
 8002824:	e02f      	b.n	8002886 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_RCC_OscConfig+0x4fc>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff f982 	bl	8001b34 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff f97e 	bl	8001b34 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e020      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x498>
 8002852:	e018      	b.n	8002886 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e013      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	429a      	cmp	r2, r3
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
 8002898:	42420060 	.word	0x42420060

0800289c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0d0      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d910      	bls.n	80028e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 0207 	bic.w	r2, r3, #7
 80028c6:	4965      	ldr	r1, [pc, #404]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b63      	ldr	r3, [pc, #396]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0b8      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d020      	beq.n	800292e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f8:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a58      	ldr	r2, [pc, #352]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002902:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a52      	ldr	r2, [pc, #328]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800291a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291c:	4b50      	ldr	r3, [pc, #320]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	494d      	ldr	r1, [pc, #308]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d040      	beq.n	80029bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d115      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e07f      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e073      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06b      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297a:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f023 0203 	bic.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4936      	ldr	r1, [pc, #216]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800298c:	f7ff f8d2 	bl	8001b34 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7ff f8ce 	bl	8001b34 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e053      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 020c 	and.w	r2, r3, #12
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1eb      	bne.n	8002994 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d210      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	4922      	ldr	r1, [pc, #136]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e032      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4916      	ldr	r1, [pc, #88]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	490e      	ldr	r1, [pc, #56]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a2a:	f000 f821 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	490a      	ldr	r1, [pc, #40]	; (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	5ccb      	ldrb	r3, [r1, r3]
 8002a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a42:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <HAL_RCC_ClockConfig+0x1cc>)
 8002a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_ClockConfig+0x1d0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f830 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08009b1c 	.word	0x08009b1c
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000004 	.word	0x20000004

08002a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b490      	push	{r4, r7}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a78:	1d3c      	adds	r4, r7, #4
 8002a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a80:	f240 2301 	movw	r3, #513	; 0x201
 8002a84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x46>
 8002aae:	e02d      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab2:	623b      	str	r3, [r7, #32]
      break;
 8002ab4:	e02d      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	0c9b      	lsrs	r3, r3, #18
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ac8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ad4:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c5b      	lsrs	r3, r3, #17
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ae8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aee:	fb02 f203 	mul.w	r2, r2, r3
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	e004      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	623b      	str	r3, [r7, #32]
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b0e:	623b      	str	r3, [r7, #32]
      break;
 8002b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b12:	6a3b      	ldr	r3, [r7, #32]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3728      	adds	r7, #40	; 0x28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc90      	pop	{r4, r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	08009aa0 	.word	0x08009aa0
 8002b24:	40021000 	.word	0x40021000
 8002b28:	007a1200 	.word	0x007a1200
 8002b2c:	003d0900 	.word	0x003d0900

08002b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b34:	4b02      	ldr	r3, [pc, #8]	; (8002b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	20000000 	.word	0x20000000

08002b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b48:	f7ff fff2 	bl	8002b30 <HAL_RCC_GetHCLKFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	4903      	ldr	r1, [pc, #12]	; (8002b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08009b2c 	.word	0x08009b2c

08002b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b70:	f7ff ffde 	bl	8002b30 <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	0adb      	lsrs	r3, r3, #11
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4903      	ldr	r1, [pc, #12]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08009b2c 	.word	0x08009b2c

08002b94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <RCC_Delay+0x34>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <RCC_Delay+0x38>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	0a5b      	lsrs	r3, r3, #9
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bb0:	bf00      	nop
  }
  while (Delay --);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1e5a      	subs	r2, r3, #1
 8002bb6:	60fa      	str	r2, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f9      	bne.n	8002bb0 <RCC_Delay+0x1c>
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	10624dd3 	.word	0x10624dd3

08002bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e076      	b.n	8002cd0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bf2:	d009      	beq.n	8002c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
 8002bfa:	e005      	b.n	8002c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fcda 	bl	80015dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	ea42 0103 	orr.w	r1, r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	0c1a      	lsrs	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f002 0204 	and.w	r2, r2, #4
 8002cae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cbe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_SPI_Transmit+0x22>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e126      	b.n	8002f48 <HAL_SPI_Transmit+0x270>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d02:	f7fe ff17 	bl	8001b34 <HAL_GetTick>
 8002d06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d002      	beq.n	8002d1e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d1c:	e10b      	b.n	8002f36 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_SPI_Transmit+0x52>
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d2e:	e102      	b.n	8002f36 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2203      	movs	r2, #3
 8002d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d76:	d10f      	bne.n	8002d98 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b40      	cmp	r3, #64	; 0x40
 8002da4:	d007      	beq.n	8002db6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dbe:	d14b      	bne.n	8002e58 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_SPI_Transmit+0xf6>
 8002dc8:	8afb      	ldrh	r3, [r7, #22]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d13e      	bne.n	8002e4c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	881a      	ldrh	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	1c9a      	adds	r2, r3, #2
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002df2:	e02b      	b.n	8002e4c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d112      	bne.n	8002e28 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	1c9a      	adds	r2, r3, #2
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e26:	e011      	b.n	8002e4c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e28:	f7fe fe84 	bl	8001b34 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d803      	bhi.n	8002e40 <HAL_SPI_Transmit+0x168>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3e:	d102      	bne.n	8002e46 <HAL_SPI_Transmit+0x16e>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e4a:	e074      	b.n	8002f36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ce      	bne.n	8002df4 <HAL_SPI_Transmit+0x11c>
 8002e56:	e04c      	b.n	8002ef2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_SPI_Transmit+0x18e>
 8002e60:	8afb      	ldrh	r3, [r7, #22]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d140      	bne.n	8002ee8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e8c:	e02c      	b.n	8002ee8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d113      	bne.n	8002ec4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ec2:	e011      	b.n	8002ee8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec4:	f7fe fe36 	bl	8001b34 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d803      	bhi.n	8002edc <HAL_SPI_Transmit+0x204>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eda:	d102      	bne.n	8002ee2 <HAL_SPI_Transmit+0x20a>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ee6:	e026      	b.n	8002f36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1cd      	bne.n	8002e8e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fa62 	bl	80033c0 <SPI_EndRxTxTransaction>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e000      	b.n	8002f36 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f46:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3720      	adds	r7, #32
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08c      	sub	sp, #48	; 0x30
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_SPI_TransmitReceive+0x26>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e18a      	b.n	800328c <HAL_SPI_TransmitReceive+0x33c>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f7e:	f7fe fdd9 	bl	8001b34 <HAL_GetTick>
 8002f82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d00f      	beq.n	8002fc0 <HAL_SPI_TransmitReceive+0x70>
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa6:	d107      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d103      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x68>
 8002fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d003      	beq.n	8002fc0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fbe:	e15b      	b.n	8003278 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x82>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x82>
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fd8:	e14e      	b.n	8003278 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d003      	beq.n	8002fee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2205      	movs	r2, #5
 8002fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	887a      	ldrh	r2, [r7, #2]
 8002ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	887a      	ldrh	r2, [r7, #2]
 8003016:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d007      	beq.n	8003042 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304a:	d178      	bne.n	800313e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_SPI_TransmitReceive+0x10a>
 8003054:	8b7b      	ldrh	r3, [r7, #26]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d166      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	881a      	ldrh	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	1c9a      	adds	r2, r3, #2
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800307e:	e053      	b.n	8003128 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d11b      	bne.n	80030c6 <HAL_SPI_TransmitReceive+0x176>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x176>
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	2b01      	cmp	r3, #1
 800309c:	d113      	bne.n	80030c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	881a      	ldrh	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	1c9a      	adds	r2, r3, #2
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d119      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x1b8>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d014      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	b292      	uxth	r2, r2
 80030ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003104:	2301      	movs	r3, #1
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003108:	f7fe fd14 	bl	8001b34 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003114:	429a      	cmp	r2, r3
 8003116:	d807      	bhi.n	8003128 <HAL_SPI_TransmitReceive+0x1d8>
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d003      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003126:	e0a7      	b.n	8003278 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1a6      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x130>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1a1      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x130>
 800313c:	e07c      	b.n	8003238 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_SPI_TransmitReceive+0x1fc>
 8003146:	8b7b      	ldrh	r3, [r7, #26]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d16b      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	330c      	adds	r3, #12
 8003156:	7812      	ldrb	r2, [r2, #0]
 8003158:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003172:	e057      	b.n	8003224 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d11c      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x26c>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d017      	beq.n	80031bc <HAL_SPI_TransmitReceive+0x26c>
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	2b01      	cmp	r3, #1
 8003190:	d114      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	7812      	ldrb	r2, [r2, #0]
 800319e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d119      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x2ae>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d014      	beq.n	80031fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031fa:	2301      	movs	r3, #1
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031fe:	f7fe fc99 	bl	8001b34 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800320a:	429a      	cmp	r2, r3
 800320c:	d803      	bhi.n	8003216 <HAL_SPI_TransmitReceive+0x2c6>
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d102      	bne.n	800321c <HAL_SPI_TransmitReceive+0x2cc>
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003222:	e029      	b.n	8003278 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1a2      	bne.n	8003174 <HAL_SPI_TransmitReceive+0x224>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d19d      	bne.n	8003174 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f8bf 	bl	80033c0 <SPI_EndRxTxTransaction>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003254:	e010      	b.n	8003278 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	e000      	b.n	8003278 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003276:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800328c:	4618      	mov	r0, r3
 800328e:	3730      	adds	r7, #48	; 0x30
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a2:	b2db      	uxtb	r3, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
	...

080032b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032c0:	f7fe fc38 	bl	8001b34 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	4413      	add	r3, r2
 80032ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032d0:	f7fe fc30 	bl	8001b34 <HAL_GetTick>
 80032d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032d6:	4b39      	ldr	r3, [pc, #228]	; (80033bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	015b      	lsls	r3, r3, #5
 80032dc:	0d1b      	lsrs	r3, r3, #20
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e6:	e054      	b.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d050      	beq.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f0:	f7fe fc20 	bl	8001b34 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d902      	bls.n	8003306 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d13d      	bne.n	8003382 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003314:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331e:	d111      	bne.n	8003344 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003328:	d004      	beq.n	8003334 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d107      	bne.n	8003344 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003342:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334c:	d10f      	bne.n	800336e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800336c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e017      	b.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3b01      	subs	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4013      	ands	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d19b      	bne.n	80032e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000

080033c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2200      	movs	r2, #0
 80033d4:	2180      	movs	r1, #128	; 0x80
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff ff6a 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e000      	b.n	80033f4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e041      	b.n	8003492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe f9a8 	bl	8001778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f000 fc96 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d001      	beq.n	80034b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_TIM_Base_Start+0x88>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00e      	beq.n	80034e4 <HAL_TIM_Base_Start+0x48>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d009      	beq.n	80034e4 <HAL_TIM_Base_Start+0x48>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_TIM_Base_Start+0x8c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_TIM_Base_Start+0x48>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a13      	ldr	r2, [pc, #76]	; (800352c <HAL_TIM_Base_Start+0x90>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d111      	bne.n	8003508 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d010      	beq.n	8003518 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003506:	e007      	b.n	8003518 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800

08003530 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e041      	b.n	80035c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe f8c6 	bl	80016e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f000 fbfc 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <HAL_TIM_IC_Start_IT+0x1a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	e013      	b.n	8003612 <HAL_TIM_IC_Start_IT+0x42>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_IC_Start_IT+0x2a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	e00b      	b.n	8003612 <HAL_TIM_IC_Start_IT+0x42>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d104      	bne.n	800360a <HAL_TIM_IC_Start_IT+0x3a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e003      	b.n	8003612 <HAL_TIM_IC_Start_IT+0x42>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003610:	b2db      	uxtb	r3, r3
 8003612:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d104      	bne.n	8003624 <HAL_TIM_IC_Start_IT+0x54>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e013      	b.n	800364c <HAL_TIM_IC_Start_IT+0x7c>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b04      	cmp	r3, #4
 8003628:	d104      	bne.n	8003634 <HAL_TIM_IC_Start_IT+0x64>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e00b      	b.n	800364c <HAL_TIM_IC_Start_IT+0x7c>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b08      	cmp	r3, #8
 8003638:	d104      	bne.n	8003644 <HAL_TIM_IC_Start_IT+0x74>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e003      	b.n	800364c <HAL_TIM_IC_Start_IT+0x7c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800364a:	b2db      	uxtb	r3, r3
 800364c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d102      	bne.n	800365a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003654:	7bbb      	ldrb	r3, [r7, #14]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0b3      	b.n	80037c6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <HAL_TIM_IC_Start_IT+0x9e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366c:	e013      	b.n	8003696 <HAL_TIM_IC_Start_IT+0xc6>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d104      	bne.n	800367e <HAL_TIM_IC_Start_IT+0xae>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	e00b      	b.n	8003696 <HAL_TIM_IC_Start_IT+0xc6>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d104      	bne.n	800368e <HAL_TIM_IC_Start_IT+0xbe>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800368c:	e003      	b.n	8003696 <HAL_TIM_IC_Start_IT+0xc6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_IC_Start_IT+0xd6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a4:	e013      	b.n	80036ce <HAL_TIM_IC_Start_IT+0xfe>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d104      	bne.n	80036b6 <HAL_TIM_IC_Start_IT+0xe6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b4:	e00b      	b.n	80036ce <HAL_TIM_IC_Start_IT+0xfe>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d104      	bne.n	80036c6 <HAL_TIM_IC_Start_IT+0xf6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c4:	e003      	b.n	80036ce <HAL_TIM_IC_Start_IT+0xfe>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d841      	bhi.n	8003758 <HAL_TIM_IC_Start_IT+0x188>
 80036d4:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <HAL_TIM_IC_Start_IT+0x10c>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003759 	.word	0x08003759
 80036e4:	08003759 	.word	0x08003759
 80036e8:	08003759 	.word	0x08003759
 80036ec:	08003723 	.word	0x08003723
 80036f0:	08003759 	.word	0x08003759
 80036f4:	08003759 	.word	0x08003759
 80036f8:	08003759 	.word	0x08003759
 80036fc:	08003735 	.word	0x08003735
 8003700:	08003759 	.word	0x08003759
 8003704:	08003759 	.word	0x08003759
 8003708:	08003759 	.word	0x08003759
 800370c:	08003747 	.word	0x08003747
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0202 	orr.w	r2, r2, #2
 800371e:	60da      	str	r2, [r3, #12]
      break;
 8003720:	e01b      	b.n	800375a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0204 	orr.w	r2, r2, #4
 8003730:	60da      	str	r2, [r3, #12]
      break;
 8003732:	e012      	b.n	800375a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0208 	orr.w	r2, r2, #8
 8003742:	60da      	str	r2, [r3, #12]
      break;
 8003744:	e009      	b.n	800375a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0210 	orr.w	r2, r2, #16
 8003754:	60da      	str	r2, [r3, #12]
      break;
 8003756:	e000      	b.n	800375a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003758:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fd07 	bl	8004176 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_TIM_IC_Start_IT+0x200>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_TIM_IC_Start_IT+0x1c0>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377a:	d009      	beq.n	8003790 <HAL_TIM_IC_Start_IT+0x1c0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_TIM_IC_Start_IT+0x204>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_IC_Start_IT+0x1c0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <HAL_TIM_IC_Start_IT+0x208>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d111      	bne.n	80037b4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d010      	beq.n	80037c4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	e007      	b.n	80037c4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800

080037dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0202 	mvn.w	r2, #2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fb56 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fa85 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fa8b 	bl	8003d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0204 	mvn.w	r2, #4
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd fb2c 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fa5b 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fa61 	bl	8003d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0208 	mvn.w	r2, #8
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fb02 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa31 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fa37 	bl	8003d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2208      	movs	r2, #8
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd fad8 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa07 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fa0d 	bl	8003d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0201 	mvn.w	r2, #1
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9e2 	bl	8003d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fc81 	bl	800428e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f9d1 	bl	8003d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0220 	mvn.w	r2, #32
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fc4c 	bl	800427c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e082      	b.n	8003b0c <HAL_TIM_IC_ConfigChannel+0x120>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11b      	bne.n	8003a4c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6819      	ldr	r1, [r3, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f000 fa04 	bl	8003e30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 020c 	bic.w	r2, r2, #12
 8003a36:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	619a      	str	r2, [r3, #24]
 8003a4a:	e05a      	b.n	8003b02 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d11c      	bne.n	8003a8c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f000 fa6d 	bl	8003f40 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a74:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6999      	ldr	r1, [r3, #24]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	021a      	lsls	r2, r3, #8
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	619a      	str	r2, [r3, #24]
 8003a8a:	e03a      	b.n	8003b02 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d11b      	bne.n	8003aca <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f000 fab8 	bl	8004016 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 020c 	bic.w	r2, r2, #12
 8003ab4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69d9      	ldr	r1, [r3, #28]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	61da      	str	r2, [r3, #28]
 8003ac8:	e01b      	b.n	8003b02 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f000 fad7 	bl	800408c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003aec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69d9      	ldr	r1, [r3, #28]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	021a      	lsls	r2, r3, #8
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_TIM_ConfigClockSource+0x18>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e0b3      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x180>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b64:	d03e      	beq.n	8003be4 <HAL_TIM_ConfigClockSource+0xd0>
 8003b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6a:	f200 8087 	bhi.w	8003c7c <HAL_TIM_ConfigClockSource+0x168>
 8003b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b72:	f000 8085 	beq.w	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	d87f      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x168>
 8003b7c:	2b70      	cmp	r3, #112	; 0x70
 8003b7e:	d01a      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0xa2>
 8003b80:	2b70      	cmp	r3, #112	; 0x70
 8003b82:	d87b      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x168>
 8003b84:	2b60      	cmp	r3, #96	; 0x60
 8003b86:	d050      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x116>
 8003b88:	2b60      	cmp	r3, #96	; 0x60
 8003b8a:	d877      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x168>
 8003b8c:	2b50      	cmp	r3, #80	; 0x50
 8003b8e:	d03c      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0xf6>
 8003b90:	2b50      	cmp	r3, #80	; 0x50
 8003b92:	d873      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x168>
 8003b94:	2b40      	cmp	r3, #64	; 0x40
 8003b96:	d058      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x136>
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	d86f      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x168>
 8003b9c:	2b30      	cmp	r3, #48	; 0x30
 8003b9e:	d064      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x156>
 8003ba0:	2b30      	cmp	r3, #48	; 0x30
 8003ba2:	d86b      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x168>
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d060      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x156>
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d867      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x168>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d05c      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x156>
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d05a      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003bb4:	e062      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6899      	ldr	r1, [r3, #8]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f000 fab7 	bl	8004138 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	609a      	str	r2, [r3, #8]
      break;
 8003be2:	e04e      	b.n	8003c82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	6899      	ldr	r1, [r3, #8]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f000 faa0 	bl	8004138 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c06:	609a      	str	r2, [r3, #8]
      break;
 8003c08:	e03b      	b.n	8003c82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f000 f964 	bl	8003ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2150      	movs	r1, #80	; 0x50
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fa6e 	bl	8004104 <TIM_ITRx_SetConfig>
      break;
 8003c28:	e02b      	b.n	8003c82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f000 f9be 	bl	8003fb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2160      	movs	r1, #96	; 0x60
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fa5e 	bl	8004104 <TIM_ITRx_SetConfig>
      break;
 8003c48:	e01b      	b.n	8003c82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6859      	ldr	r1, [r3, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	461a      	mov	r2, r3
 8003c58:	f000 f944 	bl	8003ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2140      	movs	r1, #64	; 0x40
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fa4e 	bl	8004104 <TIM_ITRx_SetConfig>
      break;
 8003c68:	e00b      	b.n	8003c82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f000 fa45 	bl	8004104 <TIM_ITRx_SetConfig>
        break;
 8003c7a:	e002      	b.n	8003c82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d831      	bhi.n	8003d14 <HAL_TIM_ReadCapturedValue+0x78>
 8003cb0:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003d15 	.word	0x08003d15
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003d15 	.word	0x08003d15
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003d15 	.word	0x08003d15
 8003cd0:	08003d15 	.word	0x08003d15
 8003cd4:	08003d15 	.word	0x08003d15
 8003cd8:	08003d01 	.word	0x08003d01
 8003cdc:	08003d15 	.word	0x08003d15
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	08003d15 	.word	0x08003d15
 8003ce8:	08003d0b 	.word	0x08003d0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	60fb      	str	r3, [r7, #12]

      break;
 8003cf4:	e00f      	b.n	8003d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	60fb      	str	r3, [r7, #12]

      break;
 8003cfe:	e00a      	b.n	8003d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	60fb      	str	r3, [r7, #12]

      break;
 8003d08:	e005      	b.n	8003d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	60fb      	str	r3, [r7, #12]

      break;
 8003d12:	e000      	b.n	8003d16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d14:	bf00      	nop
  }

  return tmpreg;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <TIM_Base_SetConfig+0xb8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00b      	beq.n	8003d9c <TIM_Base_SetConfig+0x30>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d007      	beq.n	8003d9c <TIM_Base_SetConfig+0x30>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a26      	ldr	r2, [pc, #152]	; (8003e28 <TIM_Base_SetConfig+0xbc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_Base_SetConfig+0x30>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a25      	ldr	r2, [pc, #148]	; (8003e2c <TIM_Base_SetConfig+0xc0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d108      	bne.n	8003dae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1c      	ldr	r2, [pc, #112]	; (8003e24 <TIM_Base_SetConfig+0xb8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <TIM_Base_SetConfig+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbc:	d007      	beq.n	8003dce <TIM_Base_SetConfig+0x62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <TIM_Base_SetConfig+0xbc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_Base_SetConfig+0x62>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <TIM_Base_SetConfig+0xc0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d108      	bne.n	8003de0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a07      	ldr	r2, [pc, #28]	; (8003e24 <TIM_Base_SetConfig+0xb8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d103      	bne.n	8003e14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	615a      	str	r2, [r3, #20]
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800

08003e30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <TIM_TI1_SetConfig+0xa8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00b      	beq.n	8003e76 <TIM_TI1_SetConfig+0x46>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d007      	beq.n	8003e76 <TIM_TI1_SetConfig+0x46>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <TIM_TI1_SetConfig+0xac>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <TIM_TI1_SetConfig+0x46>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <TIM_TI1_SetConfig+0xb0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <TIM_TI1_SetConfig+0x4a>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <TIM_TI1_SetConfig+0x4c>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e003      	b.n	8003e9a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f023 030a 	bic.w	r3, r3, #10
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f003 030a 	and.w	r3, r3, #10
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800

08003ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f023 0201 	bic.w	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f023 030a 	bic.w	r3, r3, #10
 8003f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f023 0210 	bic.w	r2, r3, #16
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	031b      	lsls	r3, r3, #12
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f023 0210 	bic.w	r2, r3, #16
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	031b      	lsls	r3, r3, #12
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ff4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	621a      	str	r2, [r3, #32]
}
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004016:	b480      	push	{r7}
 8004018:	b087      	sub	sp, #28
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004052:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	b2db      	uxtb	r3, r3
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004066:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	031b      	lsls	r3, r3, #12
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	031b      	lsls	r3, r3, #12
 80040e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	f043 0307 	orr.w	r3, r3, #7
 8004126:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	609a      	str	r2, [r3, #8]
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	021a      	lsls	r2, r3, #8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	431a      	orrs	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4313      	orrs	r3, r2
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004176:	b480      	push	{r7}
 8004178:	b087      	sub	sp, #28
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2201      	movs	r2, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	43db      	mvns	r3, r3
 8004198:	401a      	ands	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1a      	ldr	r2, [r3, #32]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	431a      	orrs	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	621a      	str	r2, [r3, #32]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e046      	b.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d009      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a12      	ldr	r2, [pc, #72]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a10      	ldr	r2, [pc, #64]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10c      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4313      	orrs	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40000400 	.word	0x40000400
 8004278:	40000800 	.word	0x40000800

0800427c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e03f      	b.n	8004332 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd fa74 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f829 	bl	800433c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004376:	f023 030c 	bic.w	r3, r3, #12
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	430b      	orrs	r3, r1
 8004382:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2c      	ldr	r2, [pc, #176]	; (8004450 <UART_SetConfig+0x114>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d103      	bne.n	80043ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043a4:	f7fe fbe2 	bl	8002b6c <HAL_RCC_GetPCLK2Freq>
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	e002      	b.n	80043b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7fe fbca 	bl	8002b44 <HAL_RCC_GetPCLK1Freq>
 80043b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009a      	lsls	r2, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	4a22      	ldr	r2, [pc, #136]	; (8004454 <UART_SetConfig+0x118>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	0119      	lsls	r1, r3, #4
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009a      	lsls	r2, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e8:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <UART_SetConfig+0x118>)
 80043ea:	fba3 0302 	umull	r0, r3, r3, r2
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2064      	movs	r0, #100	; 0x64
 80043f2:	fb00 f303 	mul.w	r3, r0, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	3332      	adds	r3, #50	; 0x32
 80043fc:	4a15      	ldr	r2, [pc, #84]	; (8004454 <UART_SetConfig+0x118>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004408:	4419      	add	r1, r3
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009a      	lsls	r2, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <UART_SetConfig+0x118>)
 8004422:	fba3 0302 	umull	r0, r3, r3, r2
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2064      	movs	r0, #100	; 0x64
 800442a:	fb00 f303 	mul.w	r3, r0, r3
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	3332      	adds	r3, #50	; 0x32
 8004434:	4a07      	ldr	r2, [pc, #28]	; (8004454 <UART_SetConfig+0x118>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	f003 020f 	and.w	r2, r3, #15
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	440a      	add	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40013800 	.word	0x40013800
 8004454:	51eb851f 	.word	0x51eb851f

08004458 <ST7565_Select>:


uint8_t ST7565_buffer[SCREEN_WIDTH * SCREEN_HEIGHT / 8];
// extern enum {WHITE = 0, BLACK = 1} color_t;

void ST7565_Select(void) {
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <ST7565_Unselect>:
void ST7565_Unselect(void) {
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
					 CS_GPIO_Port->BSRR = CS_Pin;
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <ST7565_Reset>:

void ST7565_Reset( void ){  
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 8004474:	2200      	movs	r2, #0
 8004476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800447a:	4808      	ldr	r0, [pc, #32]	; (800449c <ST7565_Reset+0x2c>)
 800447c:	f7fd fe31 	bl	80020e2 <HAL_GPIO_WritePin>
 HAL_Delay( 10 ); 
 8004480:	200a      	movs	r0, #10
 8004482:	f7fd fb61 	bl	8001b48 <HAL_Delay>
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 8004486:	2201      	movs	r2, #1
 8004488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800448c:	4803      	ldr	r0, [pc, #12]	; (800449c <ST7565_Reset+0x2c>)
 800448e:	f7fd fe28 	bl	80020e2 <HAL_GPIO_WritePin>
 HAL_Delay( 10 );  
 8004492:	200a      	movs	r0, #10
 8004494:	f7fd fb58 	bl	8001b48 <HAL_Delay>
}
 8004498:	bf00      	nop
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40010800 	.word	0x40010800

080044a0 <ST7565_w_dat>:

void ST7565_w_dat( uint8_t Dat ){  
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
	
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Dat, 1, HAL_MAX_DELAY);
 80044aa:	1df9      	adds	r1, r7, #7
 80044ac:	f04f 33ff 	mov.w	r3, #4294967295
 80044b0:	2201      	movs	r2, #1
 80044b2:	4807      	ldr	r0, [pc, #28]	; (80044d0 <ST7565_w_dat+0x30>)
 80044b4:	f7fe fc10 	bl	8002cd8 <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 80044b8:	bf00      	nop
 80044ba:	4805      	ldr	r0, [pc, #20]	; (80044d0 <ST7565_w_dat+0x30>)
 80044bc:	f7fe feea 	bl	8003294 <HAL_SPI_GetState>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d1f9      	bne.n	80044ba <ST7565_w_dat+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------
	
}  
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000274 	.word	0x20000274

080044d4 <ST7565_w_cmd>:

void ST7565_w_cmd( uint8_t Command ){  
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
		
		// pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80044de:	2200      	movs	r2, #0
 80044e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80044e4:	480d      	ldr	r0, [pc, #52]	; (800451c <ST7565_w_cmd+0x48>)
 80044e6:	f7fd fdfc 	bl	80020e2 <HAL_GPIO_WritePin>
		 
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Command, 1, HAL_MAX_DELAY);
 80044ea:	1df9      	adds	r1, r7, #7
 80044ec:	f04f 33ff 	mov.w	r3, #4294967295
 80044f0:	2201      	movs	r2, #1
 80044f2:	480b      	ldr	r0, [pc, #44]	; (8004520 <ST7565_w_cmd+0x4c>)
 80044f4:	f7fe fbf0 	bl	8002cd8 <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 80044f8:	bf00      	nop
 80044fa:	4809      	ldr	r0, [pc, #36]	; (8004520 <ST7565_w_cmd+0x4c>)
 80044fc:	f7fe feca 	bl	8003294 <HAL_SPI_GetState>
 8004500:	4603      	mov	r3, r0
 8004502:	2b01      	cmp	r3, #1
 8004504:	d1f9      	bne.n	80044fa <ST7565_w_cmd+0x26>
		 
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8004506:	2201      	movs	r2, #1
 8004508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800450c:	4803      	ldr	r0, [pc, #12]	; (800451c <ST7565_w_cmd+0x48>)
 800450e:	f7fd fde8 	bl	80020e2 <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
		
	#endif
	//-----------------------------------------------------------------------------------
	
} 
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40010800 	.word	0x40010800
 8004520:	20000274 	.word	0x20000274

08004524 <ST7565_Display_fill>:

void ST7565_Display_fill( uint8_t fill ){  
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	71fb      	strb	r3, [r7, #7]
	
	uint8_t page,column;  
	
	memset( ST7565_buffer, (uint8_t)fill, ( SCREEN_WIDTH * SCREEN_HEIGHT / 8 ) );	// отчистка памяти заполняем массив значением 0x00
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004534:	4619      	mov	r1, r3
 8004536:	4815      	ldr	r0, [pc, #84]	; (800458c <ST7565_Display_fill+0x68>)
 8004538:	f000 fe94 	bl	8005264 <memset>
	
	ST7565_Select();
 800453c:	f7ff ff8c 	bl	8004458 <ST7565_Select>
	
	for( page=0xB7; page>=0xB0; page-- ){
 8004540:	23b7      	movs	r3, #183	; 0xb7
 8004542:	73fb      	strb	r3, [r7, #15]
 8004544:	e019      	b.n	800457a <ST7565_Display_fill+0x56>
		
		ST7565_w_cmd(page);  //set page address   
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff ffc3 	bl	80044d4 <ST7565_w_cmd>
		ST7565_w_cmd(0x10);  //set Column address MSB   
 800454e:	2010      	movs	r0, #16
 8004550:	f7ff ffc0 	bl	80044d4 <ST7565_w_cmd>
		ST7565_w_cmd(0x00);  //set column address LSB   
 8004554:	2000      	movs	r0, #0
 8004556:	f7ff ffbd 	bl	80044d4 <ST7565_w_cmd>
		for( column=0; column<131; column++ ){  
 800455a:	2300      	movs	r3, #0
 800455c:	73bb      	strb	r3, [r7, #14]
 800455e:	e006      	b.n	800456e <ST7565_Display_fill+0x4a>
			ST7565_w_dat(fill);  
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ff9c 	bl	80044a0 <ST7565_w_dat>
		for( column=0; column<131; column++ ){  
 8004568:	7bbb      	ldrb	r3, [r7, #14]
 800456a:	3301      	adds	r3, #1
 800456c:	73bb      	strb	r3, [r7, #14]
 800456e:	7bbb      	ldrb	r3, [r7, #14]
 8004570:	2b82      	cmp	r3, #130	; 0x82
 8004572:	d9f5      	bls.n	8004560 <ST7565_Display_fill+0x3c>
	for( page=0xB7; page>=0xB0; page-- ){
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	3b01      	subs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2baf      	cmp	r3, #175	; 0xaf
 800457e:	d8e2      	bhi.n	8004546 <ST7565_Display_fill+0x22>
        }  
    }
		
	ST7565_Unselect();
 8004580:	f7ff ff70 	bl	8004464 <ST7565_Unselect>
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000450 	.word	0x20000450

08004590 <ST7565_Init>:

void ST7565_Init( void ){  
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	
	ST7565_Select();
 8004594:	f7ff ff60 	bl	8004458 <ST7565_Select>
	
	ST7565_Reset();
 8004598:	f7ff ff6a 	bl	8004470 <ST7565_Reset>

	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея	
	ST7565_w_cmd( CMD_SET_BIAS_9 );    // CMD_SET_BIAS_7   1/7    CMD_SET_BIAS_9  1/9
 800459c:	20a2      	movs	r0, #162	; 0xa2
 800459e:	f7ff ff99 	bl	80044d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80045a2:	2001      	movs	r0, #1
 80045a4:	f7fd fad0 	bl	8001b48 <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	#if defined (SCREEN_ORIENTATION_180)
		ST7565_w_cmd( CMD_SET_ADC_REVERSE );    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		ST7565_w_cmd( CMD_SET_COM_NORMAL );    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#else
		ST7565_w_cmd( CMD_SET_ADC_NORMAL );    		//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
 80045a8:	20a0      	movs	r0, #160	; 0xa0
 80045aa:	f7ff ff93 	bl	80044d4 <ST7565_w_cmd>
		ST7565_w_cmd( CMD_SET_COM_REVERSE );    	//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
 80045ae:	20c8      	movs	r0, #200	; 0xc8
 80045b0:	f7ff ff90 	bl	80044d4 <ST7565_w_cmd>
	#endif		
	//---------------------------------------------------------------------------------------------	
	
	HAL_Delay(1);
 80045b4:	2001      	movs	r0, #1
 80045b6:	f7fd fac7 	bl	8001b48 <HAL_Delay>
	
	// делитель внутреннего резистора установлен на 7 (от 0..7)	
	ST7565_w_cmd( CMD_SET_RESISTOR_RATIO | 0x7 );    //Regulator Resistor Selection   
 80045ba:	2027      	movs	r0, #39	; 0x27
 80045bc:	f7ff ff8a 	bl	80044d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80045c0:	2001      	movs	r0, #1
 80045c2:	f7fd fac1 	bl	8001b48 <HAL_Delay>
	
	// управление питанием, все внутренние блоки включены	(от 0..7)
	ST7565_w_cmd( CMD_SET_POWER_CONTROL | 0x7 );
 80045c6:	202f      	movs	r0, #47	; 0x2f
 80045c8:	f7ff ff84 	bl	80044d4 <ST7565_w_cmd>
		
	HAL_Delay(1);
 80045cc:	2001      	movs	r0, #1
 80045ce:	f7fd fabb 	bl	8001b48 <HAL_Delay>

	// войти в режим динамического контраста	
	ST7565_w_cmd( CMD_SET_VOLUME_FIRST );    //Electronic Volume   
 80045d2:	2081      	movs	r0, #129	; 0x81
 80045d4:	f7ff ff7e 	bl	80044d4 <ST7565_w_cmd>
	ST7565_w_cmd( 19 );	// устанавливает контраст от 0..63.
 80045d8:	2013      	movs	r0, #19
 80045da:	f7ff ff7b 	bl	80044d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80045de:	2001      	movs	r0, #1
 80045e0:	f7fd fab2 	bl	8001b48 <HAL_Delay>
	
	ST7565_w_cmd( CMD_SET_DISP_START_LINE );
 80045e4:	2040      	movs	r0, #64	; 0x40
 80045e6:	f7ff ff75 	bl	80044d4 <ST7565_w_cmd>
 
	HAL_Delay(1);
 80045ea:	2001      	movs	r0, #1
 80045ec:	f7fd faac 	bl	8001b48 <HAL_Delay>

	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	ST7565_w_cmd( CMD_DISPLAY_ON );    		//Display on   
 80045f0:	20af      	movs	r0, #175	; 0xaf
 80045f2:	f7ff ff6f 	bl	80044d4 <ST7565_w_cmd>
 
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd( CMD_SET_DISP_NORMAL );
 80045f6:	20a6      	movs	r0, #166	; 0xa6
 80045f8:	f7ff ff6c 	bl	80044d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80045fc:	2001      	movs	r0, #1
 80045fe:	f7fd faa3 	bl	8001b48 <HAL_Delay>
	
	ST7565_Display_fill( 0x00 );
 8004602:	2000      	movs	r0, #0
 8004604:	f7ff ff8e 	bl	8004524 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8004608:	f7ff ff2c 	bl	8004464 <ST7565_Unselect>
   
}
 800460c:	bf00      	nop
 800460e:	bd80      	pop	{r7, pc}

08004610 <ST7565_Draw_pixel>:
  
  
  ST7565_Unselect();
}

void ST7565_Draw_pixel(int16_t x, int16_t y, color_t color){
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	80fb      	strh	r3, [r7, #6]
 800461a:	460b      	mov	r3, r1
 800461c:	80bb      	strh	r3, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	70fb      	strb	r3, [r7, #3]
	
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 8004622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	f300 808b 	bgt.w	8004742 <ST7565_Draw_pixel+0x132>
 800462c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004630:	2b00      	cmp	r3, #0
 8004632:	f2c0 8086 	blt.w	8004742 <ST7565_Draw_pixel+0x132>
 8004636:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	f300 8081 	bgt.w	8004742 <ST7565_Draw_pixel+0x132>
 8004640:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	db7c      	blt.n	8004742 <ST7565_Draw_pixel+0x132>

    // Real screen coordinates are 0-63, not 1-64.
    x -= 1;
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	3b01      	subs	r3, #1
 800464c:	b29b      	uxth	r3, r3
 800464e:	80fb      	strh	r3, [r7, #6]
    y -= 1;
 8004650:	88bb      	ldrh	r3, [r7, #4]
 8004652:	3b01      	subs	r3, #1
 8004654:	b29b      	uxth	r3, r3
 8004656:	80bb      	strh	r3, [r7, #4]

    uint16_t array_pos = x + ((y / 8) * SCREEN_WIDTH );
 8004658:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	da00      	bge.n	8004662 <ST7565_Draw_pixel+0x52>
 8004660:	3307      	adds	r3, #7
 8004662:	10db      	asrs	r3, r3, #3
 8004664:	b21b      	sxth	r3, r3
 8004666:	b29b      	uxth	r3, r3
 8004668:	01db      	lsls	r3, r3, #7
 800466a:	b29a      	uxth	r2, r3
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	4413      	add	r3, r2
 8004670:	81fb      	strh	r3, [r7, #14]


    if ( color ) {
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d018      	beq.n	80046aa <ST7565_Draw_pixel+0x9a>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8004678:	89fb      	ldrh	r3, [r7, #14]
 800467a:	4a34      	ldr	r2, [pc, #208]	; (800474c <ST7565_Draw_pixel+0x13c>)
 800467c:	5cd3      	ldrb	r3, [r2, r3]
 800467e:	b25a      	sxtb	r2, r3
 8004680:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004684:	4259      	negs	r1, r3
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	f001 0107 	and.w	r1, r1, #7
 800468e:	bf58      	it	pl
 8004690:	424b      	negpl	r3, r1
 8004692:	b21b      	sxth	r3, r3
 8004694:	4619      	mov	r1, r3
 8004696:	2301      	movs	r3, #1
 8004698:	408b      	lsls	r3, r1
 800469a:	b25b      	sxtb	r3, r3
 800469c:	4313      	orrs	r3, r2
 800469e:	b25a      	sxtb	r2, r3
 80046a0:	89fb      	ldrh	r3, [r7, #14]
 80046a2:	b2d1      	uxtb	r1, r2
 80046a4:	4a29      	ldr	r2, [pc, #164]	; (800474c <ST7565_Draw_pixel+0x13c>)
 80046a6:	54d1      	strb	r1, [r2, r3]
 80046a8:	e019      	b.n	80046de <ST7565_Draw_pixel+0xce>
    } 
	else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80046aa:	89fb      	ldrh	r3, [r7, #14]
 80046ac:	4a27      	ldr	r2, [pc, #156]	; (800474c <ST7565_Draw_pixel+0x13c>)
 80046ae:	5cd3      	ldrb	r3, [r2, r3]
 80046b0:	b25a      	sxtb	r2, r3
 80046b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80046b6:	4259      	negs	r1, r3
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	f001 0107 	and.w	r1, r1, #7
 80046c0:	bf58      	it	pl
 80046c2:	424b      	negpl	r3, r1
 80046c4:	b21b      	sxth	r3, r3
 80046c6:	4619      	mov	r1, r3
 80046c8:	2301      	movs	r3, #1
 80046ca:	408b      	lsls	r3, r1
 80046cc:	b25b      	sxtb	r3, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	b25b      	sxtb	r3, r3
 80046d2:	4013      	ands	r3, r2
 80046d4:	b25a      	sxtb	r2, r3
 80046d6:	89fb      	ldrh	r3, [r7, #14]
 80046d8:	b2d1      	uxtb	r1, r2
 80046da:	4a1c      	ldr	r2, [pc, #112]	; (800474c <ST7565_Draw_pixel+0x13c>)
 80046dc:	54d1      	strb	r1, [r2, r3]
    }
	
	ST7565_Select();
 80046de:	f7ff febb 	bl	8004458 <ST7565_Select>
	
	ST7565_SetX(x);	
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	111b      	asrs	r3, r3, #4
 80046e6:	b25b      	sxtb	r3, r3
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	b25b      	sxtb	r3, r3
 80046ee:	f043 0310 	orr.w	r3, r3, #16
 80046f2:	b25b      	sxtb	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff feec 	bl	80044d4 <ST7565_w_cmd>
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	b2db      	uxtb	r3, r3
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fee4 	bl	80044d4 <ST7565_w_cmd>
	
	// page 0xB0 0xB1 0xB2 0xB3 0xB4 0xB5 0xB6 0xB7
	ST7565_SetY( (int16_t)y/8 );	// ST7565_SetY(y) 		ST7565_w_cmd( ( (y) & 0x07 ) | 0xB0 )
 800470c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	da00      	bge.n	8004716 <ST7565_Draw_pixel+0x106>
 8004714:	3307      	adds	r3, #7
 8004716:	10db      	asrs	r3, r3, #3
 8004718:	b21b      	sxth	r3, r3
 800471a:	b25b      	sxtb	r3, r3
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	b25b      	sxtb	r3, r3
 8004722:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004726:	b25b      	sxtb	r3, r3
 8004728:	b2db      	uxtb	r3, r3
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fed2 	bl	80044d4 <ST7565_w_cmd>
		
	ST7565_w_dat( ST7565_buffer[array_pos] ); 
 8004730:	89fb      	ldrh	r3, [r7, #14]
 8004732:	4a06      	ldr	r2, [pc, #24]	; (800474c <ST7565_Draw_pixel+0x13c>)
 8004734:	5cd3      	ldrb	r3, [r2, r3]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff feb2 	bl	80044a0 <ST7565_w_dat>
	
	ST7565_Unselect();
 800473c:	f7ff fe92 	bl	8004464 <ST7565_Unselect>
 8004740:	e000      	b.n	8004744 <ST7565_Draw_pixel+0x134>
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 8004742:	bf00      	nop
}
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000450 	.word	0x20000450

08004750 <ST7565_DrawChar>:
            if(byte & 0x80){ ST7565_Draw_pixel(x+i, y, color); }
        }
    }	
}

void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	4603      	mov	r3, r0
 800475a:	81fb      	strh	r3, [r7, #14]
 800475c:	460b      	mov	r3, r1
 800475e:	81bb      	strh	r3, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	72fb      	strb	r3, [r7, #11]
	
	uint16_t i, j;
	
	uint16_t b;
	
	int16_t X = x, Y = y;
 8004764:	89fb      	ldrh	r3, [r7, #14]
 8004766:	833b      	strh	r3, [r7, #24]
 8004768:	89bb      	ldrh	r3, [r7, #12]
 800476a:	82fb      	strh	r3, [r7, #22]
	
	int16_t xx, yy;
	
	if( multiplier < 1 ){
 800476c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <ST7565_DrawChar+0x2a>
		multiplier = 1;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	/* Check available space in LCD */
	if ( SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)){
 800477a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	7812      	ldrb	r2, [r2, #0]
 8004782:	4413      	add	r3, r2
 8004784:	2b80      	cmp	r3, #128	; 0x80
 8004786:	dd07      	ble.n	8004798 <ST7565_DrawChar+0x48>
 8004788:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	7852      	ldrb	r2, [r2, #1]
 8004790:	4413      	add	r3, r2
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	f300 80dc 	bgt.w	8004950 <ST7565_DrawChar+0x200>
	
		/* Go through font */
		for (i = 0; i < Font->FontHeight; i++) {
 8004798:	2300      	movs	r3, #0
 800479a:	83fb      	strh	r3, [r7, #30]
 800479c:	e0d1      	b.n	8004942 <ST7565_DrawChar+0x1f2>
			
			if( ch < 127 ){			
 800479e:	7afb      	ldrb	r3, [r7, #11]
 80047a0:	2b7e      	cmp	r3, #126	; 0x7e
 80047a2:	d80e      	bhi.n	80047c2 <ST7565_DrawChar+0x72>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	3b20      	subs	r3, #32
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	7849      	ldrb	r1, [r1, #1]
 80047b0:	fb01 f103 	mul.w	r1, r1, r3
 80047b4:	8bfb      	ldrh	r3, [r7, #30]
 80047b6:	440b      	add	r3, r1
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	4413      	add	r3, r2
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	837b      	strh	r3, [r7, #26]
 80047c0:	e038      	b.n	8004834 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch > 191 ){
 80047c2:	7afb      	ldrb	r3, [r7, #11]
 80047c4:	2bbf      	cmp	r3, #191	; 0xbf
 80047c6:	d90e      	bls.n	80047e6 <ST7565_DrawChar+0x96>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	7afb      	ldrb	r3, [r7, #11]
 80047ce:	3b60      	subs	r3, #96	; 0x60
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	7849      	ldrb	r1, [r1, #1]
 80047d4:	fb01 f103 	mul.w	r1, r1, r3
 80047d8:	8bfb      	ldrh	r3, [r7, #30]
 80047da:	440b      	add	r3, r1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	837b      	strh	r3, [r7, #26]
 80047e4:	e026      	b.n	8004834 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	2ba8      	cmp	r3, #168	; 0xa8
 80047ea:	d110      	bne.n	800480e <ST7565_DrawChar+0xbe>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[( 160 ) * Font->FontHeight + i];
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	4619      	mov	r1, r3
 80047f6:	460b      	mov	r3, r1
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	015b      	lsls	r3, r3, #5
 80047fe:	4619      	mov	r1, r3
 8004800:	8bfb      	ldrh	r3, [r7, #30]
 8004802:	440b      	add	r3, r1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	837b      	strh	r3, [r7, #26]
 800480c:	e012      	b.n	8004834 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 800480e:	7afb      	ldrb	r3, [r7, #11]
 8004810:	2bb8      	cmp	r3, #184	; 0xb8
 8004812:	d10f      	bne.n	8004834 <ST7565_DrawChar+0xe4>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[( 161 ) * Font->FontHeight + i];
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	461a      	mov	r2, r3
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	015b      	lsls	r3, r3, #5
 8004826:	441a      	add	r2, r3
 8004828:	8bfb      	ldrh	r3, [r7, #30]
 800482a:	4413      	add	r3, r2
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	440b      	add	r3, r1
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	837b      	strh	r3, [r7, #26]
			}
			//-------------------------------------------------------------------------------
			
			
			for (j = 0; j < Font->FontWidth; j++) {
 8004834:	2300      	movs	r3, #0
 8004836:	83bb      	strh	r3, [r7, #28]
 8004838:	e071      	b.n	800491e <ST7565_DrawChar+0x1ce>
				
				if ((b << j) & 0x8000) {
 800483a:	8b7a      	ldrh	r2, [r7, #26]
 800483c:	8bbb      	ldrh	r3, [r7, #28]
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02d      	beq.n	80048a6 <ST7565_DrawChar+0x156>
					
					for (yy = 0; yy < multiplier; yy++){
 800484a:	2300      	movs	r3, #0
 800484c:	827b      	strh	r3, [r7, #18]
 800484e:	e023      	b.n	8004898 <ST7565_DrawChar+0x148>
						for (xx = 0; xx < multiplier; xx++){
 8004850:	2300      	movs	r3, #0
 8004852:	82bb      	strh	r3, [r7, #20]
 8004854:	e014      	b.n	8004880 <ST7565_DrawChar+0x130>
								ST7565_Draw_pixel(X+xx, Y+yy, color);
 8004856:	8b3a      	ldrh	r2, [r7, #24]
 8004858:	8abb      	ldrh	r3, [r7, #20]
 800485a:	4413      	add	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	b218      	sxth	r0, r3
 8004860:	8afa      	ldrh	r2, [r7, #22]
 8004862:	8a7b      	ldrh	r3, [r7, #18]
 8004864:	4413      	add	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	b21b      	sxth	r3, r3
 800486a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800486e:	4619      	mov	r1, r3
 8004870:	f7ff fece 	bl	8004610 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8004874:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004878:	b29b      	uxth	r3, r3
 800487a:	3301      	adds	r3, #1
 800487c:	b29b      	uxth	r3, r3
 800487e:	82bb      	strh	r3, [r7, #20]
 8004880:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004884:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004888:	429a      	cmp	r2, r3
 800488a:	dbe4      	blt.n	8004856 <ST7565_DrawChar+0x106>
					for (yy = 0; yy < multiplier; yy++){
 800488c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004890:	b29b      	uxth	r3, r3
 8004892:	3301      	adds	r3, #1
 8004894:	b29b      	uxth	r3, r3
 8004896:	827b      	strh	r3, [r7, #18]
 8004898:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800489c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048a0:	429a      	cmp	r2, r3
 80048a2:	dbd5      	blt.n	8004850 <ST7565_DrawChar+0x100>
 80048a4:	e031      	b.n	800490a <ST7565_DrawChar+0x1ba>
				}
				// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть --------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				else{
					
					for (yy = 0; yy < multiplier; yy++){
 80048a6:	2300      	movs	r3, #0
 80048a8:	827b      	strh	r3, [r7, #18]
 80048aa:	e028      	b.n	80048fe <ST7565_DrawChar+0x1ae>
						for (xx = 0; xx < multiplier; xx++){
 80048ac:	2300      	movs	r3, #0
 80048ae:	82bb      	strh	r3, [r7, #20]
 80048b0:	e019      	b.n	80048e6 <ST7565_DrawChar+0x196>
								ST7565_Draw_pixel(X+xx, Y+yy, !color);
 80048b2:	8b3a      	ldrh	r2, [r7, #24]
 80048b4:	8abb      	ldrh	r3, [r7, #20]
 80048b6:	4413      	add	r3, r2
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	b218      	sxth	r0, r3
 80048bc:	8afa      	ldrh	r2, [r7, #22]
 80048be:	8a7b      	ldrh	r3, [r7, #18]
 80048c0:	4413      	add	r3, r2
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	b219      	sxth	r1, r3
 80048c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	f7ff fe9b 	bl	8004610 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80048da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3301      	adds	r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	82bb      	strh	r3, [r7, #20]
 80048e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80048ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ee:	429a      	cmp	r2, r3
 80048f0:	dbdf      	blt.n	80048b2 <ST7565_DrawChar+0x162>
					for (yy = 0; yy < multiplier; yy++){
 80048f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3301      	adds	r3, #1
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	827b      	strh	r3, [r7, #18]
 80048fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004902:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004906:	429a      	cmp	r2, r3
 8004908:	dbd0      	blt.n	80048ac <ST7565_DrawChar+0x15c>
					}
				}
				//-----------------------------------------------------------------------------------------------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				
				X = X + multiplier;
 800490a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800490e:	b29a      	uxth	r2, r3
 8004910:	8b3b      	ldrh	r3, [r7, #24]
 8004912:	4413      	add	r3, r2
 8004914:	b29b      	uxth	r3, r3
 8004916:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8004918:	8bbb      	ldrh	r3, [r7, #28]
 800491a:	3301      	adds	r3, #1
 800491c:	83bb      	strh	r3, [r7, #28]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	8bba      	ldrh	r2, [r7, #28]
 8004926:	429a      	cmp	r2, r3
 8004928:	d387      	bcc.n	800483a <ST7565_DrawChar+0xea>
			}
			
			X = x;
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	833b      	strh	r3, [r7, #24]
			Y = Y + multiplier;
 800492e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004932:	b29a      	uxth	r2, r3
 8004934:	8afb      	ldrh	r3, [r7, #22]
 8004936:	4413      	add	r3, r2
 8004938:	b29b      	uxth	r3, r3
 800493a:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 800493c:	8bfb      	ldrh	r3, [r7, #30]
 800493e:	3301      	adds	r3, #1
 8004940:	83fb      	strh	r3, [r7, #30]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	b29b      	uxth	r3, r3
 8004948:	8bfa      	ldrh	r2, [r7, #30]
 800494a:	429a      	cmp	r2, r3
 800494c:	f4ff af27 	bcc.w	800479e <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8004950:	bf00      	nop
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <ST7565_Print>:

void ST7565_Print(int16_t x, int16_t y, char* str, FontDef_t* Font, uint8_t multiplier, color_t color) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af02      	add	r7, sp, #8
 800495e:	60ba      	str	r2, [r7, #8]
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	4603      	mov	r3, r0
 8004964:	81fb      	strh	r3, [r7, #14]
 8004966:	460b      	mov	r3, r1
 8004968:	81bb      	strh	r3, [r7, #12]
	
	if( multiplier < 1 ){
 800496a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <ST7565_Print+0x20>
		multiplier = 1;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 3020 	strb.w	r3, [r7, #32]
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	f7fb fbe9 	bl	8000150 <strlen>
 800497e:	4603      	mov	r3, r0
 8004980:	82bb      	strh	r3, [r7, #20]
	
	while (len--) {
 8004982:	e06d      	b.n	8004a60 <ST7565_Print+0x108>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2bbf      	cmp	r3, #191	; 0xbf
 800498a:	d94a      	bls.n	8004a22 <ST7565_Print+0xca>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2bd0      	cmp	r3, #208	; 0xd0
 8004992:	d002      	beq.n	800499a <ST7565_Print+0x42>
 8004994:	2bd1      	cmp	r3, #209	; 0xd1
 8004996:	d017      	beq.n	80049c8 <ST7565_Print+0x70>
 8004998:	e031      	b.n	80049fe <ST7565_Print+0xa6>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	3301      	adds	r3, #1
 800499e:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b81      	cmp	r3, #129	; 0x81
 80049a6:	d102      	bne.n	80049ae <ST7565_Print+0x56>
 80049a8:	23a8      	movs	r3, #168	; 0xa8
 80049aa:	75fb      	strb	r3, [r7, #23]
 80049ac:	e027      	b.n	80049fe <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b8f      	cmp	r3, #143	; 0x8f
 80049b4:	d920      	bls.n	80049f8 <ST7565_Print+0xa0>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2bbf      	cmp	r3, #191	; 0xbf
 80049bc:	d81c      	bhi.n	80049f8 <ST7565_Print+0xa0>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	3330      	adds	r3, #48	; 0x30
 80049c4:	75fb      	strb	r3, [r7, #23]
					break;
 80049c6:	e017      	b.n	80049f8 <ST7565_Print+0xa0>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	3301      	adds	r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b91      	cmp	r3, #145	; 0x91
 80049d4:	d102      	bne.n	80049dc <ST7565_Print+0x84>
 80049d6:	23b8      	movs	r3, #184	; 0xb8
 80049d8:	75fb      	strb	r3, [r7, #23]
 80049da:	e010      	b.n	80049fe <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	b25b      	sxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da0a      	bge.n	80049fc <ST7565_Print+0xa4>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b8f      	cmp	r3, #143	; 0x8f
 80049ec:	d806      	bhi.n	80049fc <ST7565_Print+0xa4>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	3370      	adds	r3, #112	; 0x70
 80049f4:	75fb      	strb	r3, [r7, #23]
					break;
 80049f6:	e001      	b.n	80049fc <ST7565_Print+0xa4>
					break;
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <ST7565_Print+0xa6>
					break;
 80049fc:	bf00      	nop
				}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 80049fe:	8abb      	ldrh	r3, [r7, #20]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	82bb      	strh	r3, [r7, #20]
			
			ST7565_DrawChar( x, y, buff_char, Font, multiplier, color);
 8004a04:	7dfa      	ldrb	r2, [r7, #23]
 8004a06:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004a0a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004a0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f7ff fe98 	bl	8004750 <ST7565_DrawChar>
 8004a20:	e00e      	b.n	8004a40 <ST7565_Print+0xe8>
		}
		//---------------------------------------------------------------------
		else{			
			ST7565_DrawChar( x, y, *str, Font, multiplier, color);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004a2a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004a2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f7ff fe88 	bl	8004750 <ST7565_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	89fb      	ldrh	r3, [r7, #14]
 8004a54:	4413      	add	r3, r2
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	81fb      	strh	r3, [r7, #14]
		/* Increase string pointer */
		str++;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8004a60:	8abb      	ldrh	r3, [r7, #20]
 8004a62:	1e5a      	subs	r2, r3, #1
 8004a64:	82ba      	strh	r2, [r7, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d18c      	bne.n	8004984 <ST7565_Print+0x2c>
	}
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <ST7565_DrawLine>:

void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color) {
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	4623      	mov	r3, r4
 8004a84:	80fb      	strh	r3, [r7, #6]
 8004a86:	4603      	mov	r3, r0
 8004a88:	80bb      	strh	r3, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	807b      	strh	r3, [r7, #2]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	803b      	strh	r3, [r7, #0]
	
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH) {
 8004a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a96:	2b7f      	cmp	r3, #127	; 0x7f
 8004a98:	dd01      	ble.n	8004a9e <ST7565_DrawLine+0x2a>
		x0 = SCREEN_WIDTH - 1;
 8004a9a:	237f      	movs	r3, #127	; 0x7f
 8004a9c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SCREEN_WIDTH) {
 8004a9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa4:	dd01      	ble.n	8004aaa <ST7565_DrawLine+0x36>
		x1 = SCREEN_WIDTH - 1;
 8004aa6:	237f      	movs	r3, #127	; 0x7f
 8004aa8:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SCREEN_HEIGHT) {
 8004aaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004aae:	2b3f      	cmp	r3, #63	; 0x3f
 8004ab0:	dd01      	ble.n	8004ab6 <ST7565_DrawLine+0x42>
		y0 = SCREEN_HEIGHT - 1;
 8004ab2:	233f      	movs	r3, #63	; 0x3f
 8004ab4:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SCREEN_HEIGHT) {
 8004ab6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004aba:	2b3f      	cmp	r3, #63	; 0x3f
 8004abc:	dd01      	ble.n	8004ac2 <ST7565_DrawLine+0x4e>
		y1 = SCREEN_HEIGHT - 1;
 8004abe:	233f      	movs	r3, #63	; 0x3f
 8004ac0:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8004ac2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ac6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	da05      	bge.n	8004ada <ST7565_DrawLine+0x66>
 8004ace:	887a      	ldrh	r2, [r7, #2]
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	b21b      	sxth	r3, r3
 8004ad8:	e004      	b.n	8004ae4 <ST7565_DrawLine+0x70>
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	887b      	ldrh	r3, [r7, #2]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	b21b      	sxth	r3, r3
 8004ae4:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8004ae6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004aea:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	da05      	bge.n	8004afe <ST7565_DrawLine+0x8a>
 8004af2:	883a      	ldrh	r2, [r7, #0]
 8004af4:	88bb      	ldrh	r3, [r7, #4]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	b21b      	sxth	r3, r3
 8004afc:	e004      	b.n	8004b08 <ST7565_DrawLine+0x94>
 8004afe:	88ba      	ldrh	r2, [r7, #4]
 8004b00:	883b      	ldrh	r3, [r7, #0]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	b21b      	sxth	r3, r3
 8004b08:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8004b0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	da01      	bge.n	8004b1a <ST7565_DrawLine+0xa6>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e001      	b.n	8004b1e <ST7565_DrawLine+0xaa>
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8004b20:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004b24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	da01      	bge.n	8004b30 <ST7565_DrawLine+0xbc>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e001      	b.n	8004b34 <ST7565_DrawLine+0xc0>
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295
 8004b34:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8004b36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004b3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	dd06      	ble.n	8004b50 <ST7565_DrawLine+0xdc>
 8004b42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b46:	0fda      	lsrs	r2, r3, #31
 8004b48:	4413      	add	r3, r2
 8004b4a:	105b      	asrs	r3, r3, #1
 8004b4c:	b21b      	sxth	r3, r3
 8004b4e:	e006      	b.n	8004b5e <ST7565_DrawLine+0xea>
 8004b50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b54:	0fda      	lsrs	r2, r3, #31
 8004b56:	4413      	add	r3, r2
 8004b58:	105b      	asrs	r3, r3, #1
 8004b5a:	425b      	negs	r3, r3
 8004b5c:	b21b      	sxth	r3, r3
 8004b5e:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8004b60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d130      	bne.n	8004bca <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 8004b68:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004b6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	da05      	bge.n	8004b80 <ST7565_DrawLine+0x10c>
			tmp = y1;
 8004b74:	883b      	ldrh	r3, [r7, #0]
 8004b76:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8004b78:	88bb      	ldrh	r3, [r7, #4]
 8004b7a:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8004b7c:	893b      	ldrh	r3, [r7, #8]
 8004b7e:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8004b80:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	da05      	bge.n	8004b98 <ST7565_DrawLine+0x124>
			tmp = x1;
 8004b8c:	887b      	ldrh	r3, [r7, #2]
 8004b8e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8004b98:	88bb      	ldrh	r3, [r7, #4]
 8004b9a:	82bb      	strh	r3, [r7, #20]
 8004b9c:	e00e      	b.n	8004bbc <ST7565_DrawLine+0x148>
			ST7565_Draw_pixel(x0, i, color);
 8004b9e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004ba2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8004ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fd30 	bl	8004610 <ST7565_Draw_pixel>
		for (i = y0; i <= y1; i++) {
 8004bb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	82bb      	strh	r3, [r7, #20]
 8004bbc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004bc0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	ddea      	ble.n	8004b9e <ST7565_DrawLine+0x12a>
		}
		
		/* Return from function */
		return;
 8004bc8:	e06e      	b.n	8004ca8 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8004bca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d130      	bne.n	8004c34 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8004bd2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004bd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	da05      	bge.n	8004bea <ST7565_DrawLine+0x176>
			tmp = y1;
 8004bde:	883b      	ldrh	r3, [r7, #0]
 8004be0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8004be2:	88bb      	ldrh	r3, [r7, #4]
 8004be4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8004be6:	893b      	ldrh	r3, [r7, #8]
 8004be8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8004bea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	da05      	bge.n	8004c02 <ST7565_DrawLine+0x18e>
			tmp = x1;
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8004bfa:	88fb      	ldrh	r3, [r7, #6]
 8004bfc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8004bfe:	893b      	ldrh	r3, [r7, #8]
 8004c00:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	82bb      	strh	r3, [r7, #20]
 8004c06:	e00e      	b.n	8004c26 <ST7565_DrawLine+0x1b2>
			ST7565_Draw_pixel(i, y0, color);
 8004c08:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004c0c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fcfb 	bl	8004610 <ST7565_Draw_pixel>
		for (i = x0; i <= x1; i++) {
 8004c1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3301      	adds	r3, #1
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	82bb      	strh	r3, [r7, #20]
 8004c26:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	ddea      	ble.n	8004c08 <ST7565_DrawLine+0x194>
		}
		
		/* Return from function */
		return;
 8004c32:	e039      	b.n	8004ca8 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, color);
 8004c34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004c38:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fce5 	bl	8004610 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) {
 8004c46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d105      	bne.n	8004c5e <ST7565_DrawLine+0x1ea>
 8004c52:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004c56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d023      	beq.n	8004ca6 <ST7565_DrawLine+0x232>
			break;
		}
		e2 = err; 
 8004c5e:	8afb      	ldrh	r3, [r7, #22]
 8004c60:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8004c62:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004c66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c6a:	425b      	negs	r3, r3
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	dd09      	ble.n	8004c84 <ST7565_DrawLine+0x210>
			err -= dy;
 8004c70:	8afa      	ldrh	r2, [r7, #22]
 8004c72:	8a3b      	ldrh	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	89fb      	ldrh	r3, [r7, #14]
 8004c7e:	4413      	add	r3, r2
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8004c84:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004c88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	dad1      	bge.n	8004c34 <ST7565_DrawLine+0x1c0>
			err += dx;
 8004c90:	8afa      	ldrh	r2, [r7, #22]
 8004c92:	8a7b      	ldrh	r3, [r7, #18]
 8004c94:	4413      	add	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8004c9a:	88ba      	ldrh	r2, [r7, #4]
 8004c9c:	89bb      	ldrh	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, color);
 8004ca4:	e7c6      	b.n	8004c34 <ST7565_DrawLine+0x1c0>
			break;
 8004ca6:	bf00      	nop
		} 
	}
}
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd90      	pop	{r4, r7, pc}
	...

08004cb0 <SPI1SendByte>:
#include "stm32f1xx_hal.h"
#include "rc522.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPI1SendByte(uint8_t data) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8004cbe:	f107 0208 	add.w	r2, r7, #8
 8004cc2:	f107 010c 	add.w	r1, r7, #12
 8004cc6:	230a      	movs	r3, #10
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4803      	ldr	r0, [pc, #12]	; (8004cdc <SPI1SendByte+0x2c>)
 8004cce:	f7fe f93f 	bl	8002f50 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8004cd2:	7a3b      	ldrb	r3, [r7, #8]

}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	200003b4 	.word	0x200003b4

08004ce0 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	460a      	mov	r2, r1
 8004cea:	71fb      	strb	r3, [r7, #7]
 8004cec:	4613      	mov	r3, r2
 8004cee:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2110      	movs	r1, #16
 8004cf4:	4809      	ldr	r0, [pc, #36]	; (8004d1c <SPI1_WriteReg+0x3c>)
 8004cf6:	f7fd f9f4 	bl	80020e2 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ffd7 	bl	8004cb0 <SPI1SendByte>
	SPI1SendByte(value);
 8004d02:	79bb      	ldrb	r3, [r7, #6]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ffd3 	bl	8004cb0 <SPI1SendByte>
	cs_set();
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	2110      	movs	r1, #16
 8004d0e:	4803      	ldr	r0, [pc, #12]	; (8004d1c <SPI1_WriteReg+0x3c>)
 8004d10:	f7fd f9e7 	bl	80020e2 <HAL_GPIO_WritePin>
}
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40010800 	.word	0x40010800

08004d20 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2110      	movs	r1, #16
 8004d2e:	480b      	ldr	r0, [pc, #44]	; (8004d5c <SPI1_ReadReg+0x3c>)
 8004d30:	f7fd f9d7 	bl	80020e2 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff ffba 	bl	8004cb0 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f7ff ffb7 	bl	8004cb0 <SPI1SendByte>
 8004d42:	4603      	mov	r3, r0
 8004d44:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004d46:	2201      	movs	r2, #1
 8004d48:	2110      	movs	r1, #16
 8004d4a:	4804      	ldr	r0, [pc, #16]	; (8004d5c <SPI1_ReadReg+0x3c>)
 8004d4c:	f7fd f9c9 	bl	80020e2 <HAL_GPIO_WritePin>
	return val;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40010800 	.word	0x40010800

08004d60 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	460a      	mov	r2, r1
 8004d6a:	71fb      	strb	r3, [r7, #7]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004d7a:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8004d7c:	79ba      	ldrb	r2, [r7, #6]
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff ffac 	bl	8004ce0 <SPI1_WriteReg>
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	b25b      	sxtb	r3, r3
 8004da0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004daa:	b25b      	sxtb	r3, r3
 8004dac:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff ffb5 	bl	8004d20 <SPI1_ReadReg>
 8004db6:	4603      	mov	r3, r0
 8004db8:	73fb      	strb	r3, [r7, #15]
	return val;	
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460a      	mov	r2, r1
 8004dce:	71fb      	strb	r3, [r7, #7]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff ffda 	bl	8004d90 <MFRC522_ReadRegister>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	461a      	mov	r2, r3
 8004de0:	79bb      	ldrb	r3, [r7, #6]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff ffb8 	bl	8004d60 <MFRC522_WriteRegister>
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8004dfc:	f000 f820 	bl	8004e40 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8004e00:	218d      	movs	r1, #141	; 0x8d
 8004e02:	202a      	movs	r0, #42	; 0x2a
 8004e04:	f7ff ffac 	bl	8004d60 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8004e08:	213e      	movs	r1, #62	; 0x3e
 8004e0a:	202b      	movs	r0, #43	; 0x2b
 8004e0c:	f7ff ffa8 	bl	8004d60 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8004e10:	211e      	movs	r1, #30
 8004e12:	202d      	movs	r0, #45	; 0x2d
 8004e14:	f7ff ffa4 	bl	8004d60 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8004e18:	2100      	movs	r1, #0
 8004e1a:	202c      	movs	r0, #44	; 0x2c
 8004e1c:	f7ff ffa0 	bl	8004d60 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8004e20:	2170      	movs	r1, #112	; 0x70
 8004e22:	2026      	movs	r0, #38	; 0x26
 8004e24:	f7ff ff9c 	bl	8004d60 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8004e28:	2140      	movs	r1, #64	; 0x40
 8004e2a:	2015      	movs	r0, #21
 8004e2c:	f7ff ff98 	bl	8004d60 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8004e30:	213d      	movs	r1, #61	; 0x3d
 8004e32:	2011      	movs	r0, #17
 8004e34:	f7ff ff94 	bl	8004d60 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8004e38:	f000 f80a 	bl	8004e50 <MFRC522_AntennaOn>
}
 8004e3c:	bf00      	nop
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8004e44:	210f      	movs	r1, #15
 8004e46:	2001      	movs	r0, #1
 8004e48:	f7ff ff8a 	bl	8004d60 <MFRC522_WriteRegister>
}
 8004e4c:	bf00      	nop
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8004e56:	2014      	movs	r0, #20
 8004e58:	f7ff ff9a 	bl	8004d90 <MFRC522_ReadRegister>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <MFRC522_AntennaOn+0x22>
 8004e6a:	2103      	movs	r1, #3
 8004e6c:	2014      	movs	r0, #20
 8004e6e:	f7ff ffa9 	bl	8004dc4 <MFRC522_SetBitMask>
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HX711_init>:
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
}
//#############################################################################################
void  HX711_init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8004e82:	2301      	movs	r3, #1
 8004e84:	607b      	str	r3, [r7, #4]
  gpio.Pull = GPIO_NOPULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	60fb      	str	r3, [r7, #12]
  gpio.Pin = _HX711_SCK_PIN;
 8004e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e92:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(_HX711_SCK_GPIO, &gpio);
 8004e94:	463b      	mov	r3, r7
 8004e96:	4619      	mov	r1, r3
 8004e98:	4818      	ldr	r0, [pc, #96]	; (8004efc <HX711_init+0x80>)
 8004e9a:	f7fc ff87 	bl	8001dac <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
  gpio.Pull = GPIO_NOPULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	60fb      	str	r3, [r7, #12]
  gpio.Pin = _HX711_DI_PIN;
 8004eaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004eae:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(_HX711_DI_GPIO, &gpio);
 8004eb0:	463b      	mov	r3, r7
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4811      	ldr	r0, [pc, #68]	; (8004efc <HX711_init+0x80>)
 8004eb6:	f7fc ff79 	bl	8001dac <HAL_GPIO_Init>
  HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_SET);
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ec0:	480e      	ldr	r0, [pc, #56]	; (8004efc <HX711_init+0x80>)
 8004ec2:	f7fd f90e 	bl	80020e2 <HAL_GPIO_WritePin>
  HX711_delay(10);
 8004ec6:	200a      	movs	r0, #10
 8004ec8:	f7fc fe3e 	bl	8001b48 <HAL_Delay>
  HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_RESET);
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed2:	480a      	ldr	r0, [pc, #40]	; (8004efc <HX711_init+0x80>)
 8004ed4:	f7fd f905 	bl	80020e2 <HAL_GPIO_WritePin>
  HX711_delay(10);
 8004ed8:	200a      	movs	r0, #10
 8004eda:	f7fc fe35 	bl	8001b48 <HAL_Delay>
  HX711_valueAve(8, Channel_A);
 8004ede:	2118      	movs	r1, #24
 8004ee0:	2008      	movs	r0, #8
 8004ee2:	f000 f873 	bl	8004fcc <HX711_valueAve>
  HX711_delay(10);
 8004ee6:	200a      	movs	r0, #10
 8004ee8:	f7fc fe2e 	bl	8001b48 <HAL_Delay>
  HX711_valueAve(8, Channel_B);
 8004eec:	2119      	movs	r1, #25
 8004eee:	2008      	movs	r0, #8
 8004ef0:	f000 f86c 	bl	8004fcc <HX711_valueAve>
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40010c00 	.word	0x40010c00

08004f00 <HX711_value>:

uint32_t HX711_value(int Channel)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8004f0c:	f7fc fe12 	bl	8001b34 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(_HX711_DI_GPIO, _HX711_DI_PIN) == GPIO_PIN_SET)
 8004f12:	e008      	b.n	8004f26 <HX711_value+0x26>
  {
    if(HAL_GetTick() - startTime > 150)
 8004f14:	f7fc fe0e 	bl	8001b34 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b96      	cmp	r3, #150	; 0x96
 8004f20:	d901      	bls.n	8004f26 <HX711_value+0x26>
      return 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e04c      	b.n	8004fc0 <HX711_value+0xc0>
  while(HAL_GPIO_ReadPin(_HX711_DI_GPIO, _HX711_DI_PIN) == GPIO_PIN_SET)
 8004f26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f2a:	4827      	ldr	r0, [pc, #156]	; (8004fc8 <HX711_value+0xc8>)
 8004f2c:	f7fd f8c2 	bl	80020b4 <HAL_GPIO_ReadPin>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d0ee      	beq.n	8004f14 <HX711_value+0x14>
  }
  for(int8_t i=0; i < Channel ; i++)
 8004f36:	2300      	movs	r3, #0
 8004f38:	74fb      	strb	r3, [r7, #19]
 8004f3a:	e025      	b.n	8004f88 <HX711_value+0x88>
  {
    HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_SET);
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f42:	4821      	ldr	r0, [pc, #132]	; (8004fc8 <HX711_value+0xc8>)
 8004f44:	f7fd f8cd 	bl	80020e2 <HAL_GPIO_WritePin>
    delay_us(1);
 8004f48:	2001      	movs	r0, #1
 8004f4a:	f000 f947 	bl	80051dc <delay_us>
//    HX711_delay_us(1);
    data = data << 1;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
    HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_RESET);
 8004f54:	2200      	movs	r2, #0
 8004f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f5a:	481b      	ldr	r0, [pc, #108]	; (8004fc8 <HX711_value+0xc8>)
 8004f5c:	f7fd f8c1 	bl	80020e2 <HAL_GPIO_WritePin>
    delay_us(1);
 8004f60:	2001      	movs	r0, #1
 8004f62:	f000 f93b 	bl	80051dc <delay_us>
//    HX711_delay_us(1);
    if(HAL_GPIO_ReadPin(_HX711_DI_GPIO, _HX711_DI_PIN) == GPIO_PIN_SET)
 8004f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f6a:	4817      	ldr	r0, [pc, #92]	; (8004fc8 <HX711_value+0xc8>)
 8004f6c:	f7fd f8a2 	bl	80020b4 <HAL_GPIO_ReadPin>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d102      	bne.n	8004f7c <HX711_value+0x7c>
      data ++;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i < Channel ; i++)
 8004f7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	3301      	adds	r3, #1
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	74fb      	strb	r3, [r7, #19]
 8004f88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	dcd4      	bgt.n	8004f3c <HX711_value+0x3c>
  }
  data = data ^ 0x800000;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8004f98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_SET);
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fa0:	4809      	ldr	r0, [pc, #36]	; (8004fc8 <HX711_value+0xc8>)
 8004fa2:	f7fd f89e 	bl	80020e2 <HAL_GPIO_WritePin>
  delay_us(1);
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	f000 f918 	bl	80051dc <delay_us>
//  HX711_delay_us(1);
  HAL_GPIO_WritePin(_HX711_SCK_GPIO, _HX711_SCK_PIN, GPIO_PIN_RESET);
 8004fac:	2200      	movs	r2, #0
 8004fae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fb2:	4805      	ldr	r0, [pc, #20]	; (8004fc8 <HX711_value+0xc8>)
 8004fb4:	f7fd f895 	bl	80020e2 <HAL_GPIO_WritePin>
  delay_us(1);
 8004fb8:	2001      	movs	r0, #1
 8004fba:	f000 f90f 	bl	80051dc <delay_us>
//  HX711_delay_us(1);
  return data;
 8004fbe:	697b      	ldr	r3, [r7, #20]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40010c00 	.word	0x40010c00

08004fcc <HX711_valueAve>:
//#############################################################################################
uint32_t HX711_valueAve(uint16_t sample, int Channel)
{
 8004fcc:	b5b0      	push	{r4, r5, r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	6039      	str	r1, [r7, #0]
 8004fd6:	80fb      	strh	r3, [r7, #6]
  uint64_t  ave = 0;
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	e9c7 2304 	strd	r2, r3, [r7, #16]

  for(uint16_t i=0 ; i < sample ; i++)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	81fb      	strh	r3, [r7, #14]
 8004fe8:	e010      	b.n	800500c <HX711_valueAve+0x40>
    ave += HX711_value(Channel);
 8004fea:	6838      	ldr	r0, [r7, #0]
 8004fec:	f7ff ff88 	bl	8004f00 <HX711_value>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ffc:	1884      	adds	r4, r0, r2
 8004ffe:	eb41 0503 	adc.w	r5, r1, r3
 8005002:	e9c7 4504 	strd	r4, r5, [r7, #16]
  for(uint16_t i=0 ; i < sample ; i++)
 8005006:	89fb      	ldrh	r3, [r7, #14]
 8005008:	3301      	adds	r3, #1
 800500a:	81fb      	strh	r3, [r7, #14]
 800500c:	89fa      	ldrh	r2, [r7, #14]
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	429a      	cmp	r2, r3
 8005012:	d3ea      	bcc.n	8004fea <HX711_valueAve+0x1e>
  return (int32_t)(ave / sample);
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800501e:	f7fb fda3 	bl	8000b68 <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4613      	mov	r3, r2
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bdb0      	pop	{r4, r5, r7, pc}

08005030 <UImeas_pressure>:
{

}

void UImeas_pressure(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af02      	add	r7, sp, #8
    ST7565_Print(1, 1, "SYS", &Font_11x18, 1, BLACK);
 8005036:	2301      	movs	r3, #1
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	2301      	movs	r3, #1
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <UImeas_pressure+0xcc>)
 8005040:	4a2f      	ldr	r2, [pc, #188]	; (8005100 <UImeas_pressure+0xd0>)
 8005042:	2101      	movs	r1, #1
 8005044:	2001      	movs	r0, #1
 8005046:	f7ff fc87 	bl	8004958 <ST7565_Print>
    ST7565_Print(1, 20, "DIA", &Font_11x18, 1, BLACK);
 800504a:	2301      	movs	r3, #1
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	2301      	movs	r3, #1
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	4b2a      	ldr	r3, [pc, #168]	; (80050fc <UImeas_pressure+0xcc>)
 8005054:	4a2b      	ldr	r2, [pc, #172]	; (8005104 <UImeas_pressure+0xd4>)
 8005056:	2114      	movs	r1, #20
 8005058:	2001      	movs	r0, #1
 800505a:	f7ff fc7d 	bl	8004958 <ST7565_Print>
    ST7565_Print(1, 40, "PULSE", &Font_11x18, 1, BLACK);
 800505e:	2301      	movs	r3, #1
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	2301      	movs	r3, #1
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	4b25      	ldr	r3, [pc, #148]	; (80050fc <UImeas_pressure+0xcc>)
 8005068:	4a27      	ldr	r2, [pc, #156]	; (8005108 <UImeas_pressure+0xd8>)
 800506a:	2128      	movs	r1, #40	; 0x28
 800506c:	2001      	movs	r0, #1
 800506e:	f7ff fc73 	bl	8004958 <ST7565_Print>
    // duong ke doc
    ST7565_DrawLine(109, 1, 109, 64, BLACK);
 8005072:	2301      	movs	r3, #1
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2340      	movs	r3, #64	; 0x40
 8005078:	226d      	movs	r2, #109	; 0x6d
 800507a:	2101      	movs	r1, #1
 800507c:	206d      	movs	r0, #109	; 0x6d
 800507e:	f7ff fcf9 	bl	8004a74 <ST7565_DrawLine>
    ST7565_DrawLine(110, 1, 110, 64, BLACK);
 8005082:	2301      	movs	r3, #1
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2340      	movs	r3, #64	; 0x40
 8005088:	226e      	movs	r2, #110	; 0x6e
 800508a:	2101      	movs	r1, #1
 800508c:	206e      	movs	r0, #110	; 0x6e
 800508e:	f7ff fcf1 	bl	8004a74 <ST7565_DrawLine>

    // ket qua SYS
    ST7565_Print(44, 1, "..8", &Font_11x18, 1, BLACK);
 8005092:	2301      	movs	r3, #1
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	2301      	movs	r3, #1
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4b18      	ldr	r3, [pc, #96]	; (80050fc <UImeas_pressure+0xcc>)
 800509c:	4a1b      	ldr	r2, [pc, #108]	; (800510c <UImeas_pressure+0xdc>)
 800509e:	2101      	movs	r1, #1
 80050a0:	202c      	movs	r0, #44	; 0x2c
 80050a2:	f7ff fc59 	bl	8004958 <ST7565_Print>
    ST7565_Print(80, 9, "mmHg", &Font_7x9, 1, BLACK);
 80050a6:	2301      	movs	r3, #1
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	2301      	movs	r3, #1
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <UImeas_pressure+0xe0>)
 80050b0:	4a18      	ldr	r2, [pc, #96]	; (8005114 <UImeas_pressure+0xe4>)
 80050b2:	2109      	movs	r1, #9
 80050b4:	2050      	movs	r0, #80	; 0x50
 80050b6:	f7ff fc4f 	bl	8004958 <ST7565_Print>
    // ket qua DIA
    ST7565_Print(44, 20, "..8", &Font_11x18, 1, BLACK);
 80050ba:	2301      	movs	r3, #1
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	2301      	movs	r3, #1
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <UImeas_pressure+0xcc>)
 80050c4:	4a11      	ldr	r2, [pc, #68]	; (800510c <UImeas_pressure+0xdc>)
 80050c6:	2114      	movs	r1, #20
 80050c8:	202c      	movs	r0, #44	; 0x2c
 80050ca:	f7ff fc45 	bl	8004958 <ST7565_Print>
    ST7565_Print(80, 28, "mmHg", &Font_7x9, 1, BLACK);
 80050ce:	2301      	movs	r3, #1
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	2301      	movs	r3, #1
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <UImeas_pressure+0xe0>)
 80050d8:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <UImeas_pressure+0xe4>)
 80050da:	211c      	movs	r1, #28
 80050dc:	2050      	movs	r0, #80	; 0x50
 80050de:	f7ff fc3b 	bl	8004958 <ST7565_Print>
    // ket qua PULSE
    ST7565_Print(66, 40, "..", &Font_11x18, 1, BLACK);
 80050e2:	2301      	movs	r3, #1
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	2301      	movs	r3, #1
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <UImeas_pressure+0xcc>)
 80050ec:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <UImeas_pressure+0xe8>)
 80050ee:	2128      	movs	r1, #40	; 0x28
 80050f0:	2042      	movs	r0, #66	; 0x42
 80050f2:	f7ff fc31 	bl	8004958 <ST7565_Print>
    //
}
 80050f6:	bf00      	nop
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000014 	.word	0x20000014
 8005100:	08009afc 	.word	0x08009afc
 8005104:	08009b00 	.word	0x08009b00
 8005108:	08009b04 	.word	0x08009b04
 800510c:	08009b0c 	.word	0x08009b0c
 8005110:	2000000c 	.word	0x2000000c
 8005114:	08009b10 	.word	0x08009b10
 8005118:	08009b18 	.word	0x08009b18

0800511c <TimerDelay_Init>:
#define TIMER  TIM4
volatile static TIM_HandleTypeDef HTIMx;
volatile static uint32_t gu32_ticks = 0;

void TimerDelay_Init(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8005122:	f7fd fd05 	bl	8002b30 <HAL_RCC_GetHCLKFreq>
 8005126:	4603      	mov	r3, r0
 8005128:	4a28      	ldr	r2, [pc, #160]	; (80051cc <TimerDelay_Init+0xb0>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	0c9b      	lsrs	r3, r3, #18
 8005130:	4a27      	ldr	r2, [pc, #156]	; (80051d0 <TimerDelay_Init+0xb4>)
 8005132:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8005134:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <TimerDelay_Init+0xb8>)
 8005136:	4a28      	ldr	r2, [pc, #160]	; (80051d8 <TimerDelay_Init+0xbc>)
 8005138:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800513a:	f107 0308 	add.w	r3, r7, #8
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	605a      	str	r2, [r3, #4]
 8005144:	609a      	str	r2, [r3, #8]
 8005146:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005148:	463b      	mov	r3, r7
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 8005150:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <TimerDelay_Init+0xb4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3b01      	subs	r3, #1
 8005156:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <TimerDelay_Init+0xb8>)
 8005158:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 800515a:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <TimerDelay_Init+0xb8>)
 800515c:	2200      	movs	r2, #0
 800515e:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 8005160:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <TimerDelay_Init+0xb8>)
 8005162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005166:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005168:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <TimerDelay_Init+0xb8>)
 800516a:	2200      	movs	r2, #0
 800516c:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800516e:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <TimerDelay_Init+0xb8>)
 8005170:	2280      	movs	r2, #128	; 0x80
 8005172:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 8005174:	4817      	ldr	r0, [pc, #92]	; (80051d4 <TimerDelay_Init+0xb8>)
 8005176:	f7fe f941 	bl	80033fc <HAL_TIM_Base_Init>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <TimerDelay_Init+0x68>
    {
      Error_Handler();
 8005180:	f7fc f9b6 	bl	80014f0 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005188:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	4619      	mov	r1, r3
 8005190:	4810      	ldr	r0, [pc, #64]	; (80051d4 <TimerDelay_Init+0xb8>)
 8005192:	f7fe fcbf 	bl	8003b14 <HAL_TIM_ConfigClockSource>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <TimerDelay_Init+0x84>
    {
      Error_Handler();
 800519c:	f7fc f9a8 	bl	80014f0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051a0:	2300      	movs	r3, #0
 80051a2:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 80051a8:	463b      	mov	r3, r7
 80051aa:	4619      	mov	r1, r3
 80051ac:	4809      	ldr	r0, [pc, #36]	; (80051d4 <TimerDelay_Init+0xb8>)
 80051ae:	f7ff f807 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 80051b8:	f7fc f99a 	bl	80014f0 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 80051bc:	4805      	ldr	r0, [pc, #20]	; (80051d4 <TimerDelay_Init+0xb8>)
 80051be:	f7fe f96d 	bl	800349c <HAL_TIM_Base_Start>

}
 80051c2:	bf00      	nop
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	431bde83 	.word	0x431bde83
 80051d0:	20000268 	.word	0x20000268
 80051d4:	20000220 	.word	0x20000220
 80051d8:	40000800 	.word	0x40000800

080051dc <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 80051e6:	4b09      	ldr	r3, [pc, #36]	; (800520c <delay_us+0x30>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2200      	movs	r2, #0
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24
	while (HTIMx.Instance->CNT < au16_us);
 80051ee:	bf00      	nop
 80051f0:	4b06      	ldr	r3, [pc, #24]	; (800520c <delay_us+0x30>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	b292      	uxth	r2, r2
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d3f8      	bcc.n	80051f0 <delay_us+0x14>
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20000220 	.word	0x20000220

08005210 <__errno>:
 8005210:	4b01      	ldr	r3, [pc, #4]	; (8005218 <__errno+0x8>)
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	2000001c 	.word	0x2000001c

0800521c <__libc_init_array>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	2600      	movs	r6, #0
 8005220:	4d0c      	ldr	r5, [pc, #48]	; (8005254 <__libc_init_array+0x38>)
 8005222:	4c0d      	ldr	r4, [pc, #52]	; (8005258 <__libc_init_array+0x3c>)
 8005224:	1b64      	subs	r4, r4, r5
 8005226:	10a4      	asrs	r4, r4, #2
 8005228:	42a6      	cmp	r6, r4
 800522a:	d109      	bne.n	8005240 <__libc_init_array+0x24>
 800522c:	f004 fc2a 	bl	8009a84 <_init>
 8005230:	2600      	movs	r6, #0
 8005232:	4d0a      	ldr	r5, [pc, #40]	; (800525c <__libc_init_array+0x40>)
 8005234:	4c0a      	ldr	r4, [pc, #40]	; (8005260 <__libc_init_array+0x44>)
 8005236:	1b64      	subs	r4, r4, r5
 8005238:	10a4      	asrs	r4, r4, #2
 800523a:	42a6      	cmp	r6, r4
 800523c:	d105      	bne.n	800524a <__libc_init_array+0x2e>
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	f855 3b04 	ldr.w	r3, [r5], #4
 8005244:	4798      	blx	r3
 8005246:	3601      	adds	r6, #1
 8005248:	e7ee      	b.n	8005228 <__libc_init_array+0xc>
 800524a:	f855 3b04 	ldr.w	r3, [r5], #4
 800524e:	4798      	blx	r3
 8005250:	3601      	adds	r6, #1
 8005252:	e7f2      	b.n	800523a <__libc_init_array+0x1e>
 8005254:	0800b434 	.word	0x0800b434
 8005258:	0800b434 	.word	0x0800b434
 800525c:	0800b434 	.word	0x0800b434
 8005260:	0800b438 	.word	0x0800b438

08005264 <memset>:
 8005264:	4603      	mov	r3, r0
 8005266:	4402      	add	r2, r0
 8005268:	4293      	cmp	r3, r2
 800526a:	d100      	bne.n	800526e <memset+0xa>
 800526c:	4770      	bx	lr
 800526e:	f803 1b01 	strb.w	r1, [r3], #1
 8005272:	e7f9      	b.n	8005268 <memset+0x4>

08005274 <__cvt>:
 8005274:	2b00      	cmp	r3, #0
 8005276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800527a:	461f      	mov	r7, r3
 800527c:	bfbb      	ittet	lt
 800527e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005282:	461f      	movlt	r7, r3
 8005284:	2300      	movge	r3, #0
 8005286:	232d      	movlt	r3, #45	; 0x2d
 8005288:	b088      	sub	sp, #32
 800528a:	4614      	mov	r4, r2
 800528c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800528e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005290:	7013      	strb	r3, [r2, #0]
 8005292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005294:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005298:	f023 0820 	bic.w	r8, r3, #32
 800529c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052a0:	d005      	beq.n	80052ae <__cvt+0x3a>
 80052a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052a6:	d100      	bne.n	80052aa <__cvt+0x36>
 80052a8:	3501      	adds	r5, #1
 80052aa:	2302      	movs	r3, #2
 80052ac:	e000      	b.n	80052b0 <__cvt+0x3c>
 80052ae:	2303      	movs	r3, #3
 80052b0:	aa07      	add	r2, sp, #28
 80052b2:	9204      	str	r2, [sp, #16]
 80052b4:	aa06      	add	r2, sp, #24
 80052b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80052ba:	e9cd 3500 	strd	r3, r5, [sp]
 80052be:	4622      	mov	r2, r4
 80052c0:	463b      	mov	r3, r7
 80052c2:	f001 fda1 	bl	8006e08 <_dtoa_r>
 80052c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052ca:	4606      	mov	r6, r0
 80052cc:	d102      	bne.n	80052d4 <__cvt+0x60>
 80052ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052d0:	07db      	lsls	r3, r3, #31
 80052d2:	d522      	bpl.n	800531a <__cvt+0xa6>
 80052d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052d8:	eb06 0905 	add.w	r9, r6, r5
 80052dc:	d110      	bne.n	8005300 <__cvt+0x8c>
 80052de:	7833      	ldrb	r3, [r6, #0]
 80052e0:	2b30      	cmp	r3, #48	; 0x30
 80052e2:	d10a      	bne.n	80052fa <__cvt+0x86>
 80052e4:	2200      	movs	r2, #0
 80052e6:	2300      	movs	r3, #0
 80052e8:	4620      	mov	r0, r4
 80052ea:	4639      	mov	r1, r7
 80052ec:	f7fb fb5c 	bl	80009a8 <__aeabi_dcmpeq>
 80052f0:	b918      	cbnz	r0, 80052fa <__cvt+0x86>
 80052f2:	f1c5 0501 	rsb	r5, r5, #1
 80052f6:	f8ca 5000 	str.w	r5, [sl]
 80052fa:	f8da 3000 	ldr.w	r3, [sl]
 80052fe:	4499      	add	r9, r3
 8005300:	2200      	movs	r2, #0
 8005302:	2300      	movs	r3, #0
 8005304:	4620      	mov	r0, r4
 8005306:	4639      	mov	r1, r7
 8005308:	f7fb fb4e 	bl	80009a8 <__aeabi_dcmpeq>
 800530c:	b108      	cbz	r0, 8005312 <__cvt+0x9e>
 800530e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005312:	2230      	movs	r2, #48	; 0x30
 8005314:	9b07      	ldr	r3, [sp, #28]
 8005316:	454b      	cmp	r3, r9
 8005318:	d307      	bcc.n	800532a <__cvt+0xb6>
 800531a:	4630      	mov	r0, r6
 800531c:	9b07      	ldr	r3, [sp, #28]
 800531e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005320:	1b9b      	subs	r3, r3, r6
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	b008      	add	sp, #32
 8005326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532a:	1c59      	adds	r1, r3, #1
 800532c:	9107      	str	r1, [sp, #28]
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e7f0      	b.n	8005314 <__cvt+0xa0>

08005332 <__exponent>:
 8005332:	4603      	mov	r3, r0
 8005334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005336:	2900      	cmp	r1, #0
 8005338:	f803 2b02 	strb.w	r2, [r3], #2
 800533c:	bfb6      	itet	lt
 800533e:	222d      	movlt	r2, #45	; 0x2d
 8005340:	222b      	movge	r2, #43	; 0x2b
 8005342:	4249      	neglt	r1, r1
 8005344:	2909      	cmp	r1, #9
 8005346:	7042      	strb	r2, [r0, #1]
 8005348:	dd2b      	ble.n	80053a2 <__exponent+0x70>
 800534a:	f10d 0407 	add.w	r4, sp, #7
 800534e:	46a4      	mov	ip, r4
 8005350:	270a      	movs	r7, #10
 8005352:	fb91 f6f7 	sdiv	r6, r1, r7
 8005356:	460a      	mov	r2, r1
 8005358:	46a6      	mov	lr, r4
 800535a:	fb07 1516 	mls	r5, r7, r6, r1
 800535e:	2a63      	cmp	r2, #99	; 0x63
 8005360:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005364:	4631      	mov	r1, r6
 8005366:	f104 34ff 	add.w	r4, r4, #4294967295
 800536a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800536e:	dcf0      	bgt.n	8005352 <__exponent+0x20>
 8005370:	3130      	adds	r1, #48	; 0x30
 8005372:	f1ae 0502 	sub.w	r5, lr, #2
 8005376:	f804 1c01 	strb.w	r1, [r4, #-1]
 800537a:	4629      	mov	r1, r5
 800537c:	1c44      	adds	r4, r0, #1
 800537e:	4561      	cmp	r1, ip
 8005380:	d30a      	bcc.n	8005398 <__exponent+0x66>
 8005382:	f10d 0209 	add.w	r2, sp, #9
 8005386:	eba2 020e 	sub.w	r2, r2, lr
 800538a:	4565      	cmp	r5, ip
 800538c:	bf88      	it	hi
 800538e:	2200      	movhi	r2, #0
 8005390:	4413      	add	r3, r2
 8005392:	1a18      	subs	r0, r3, r0
 8005394:	b003      	add	sp, #12
 8005396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005398:	f811 2b01 	ldrb.w	r2, [r1], #1
 800539c:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053a0:	e7ed      	b.n	800537e <__exponent+0x4c>
 80053a2:	2330      	movs	r3, #48	; 0x30
 80053a4:	3130      	adds	r1, #48	; 0x30
 80053a6:	7083      	strb	r3, [r0, #2]
 80053a8:	70c1      	strb	r1, [r0, #3]
 80053aa:	1d03      	adds	r3, r0, #4
 80053ac:	e7f1      	b.n	8005392 <__exponent+0x60>
	...

080053b0 <_printf_float>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	b091      	sub	sp, #68	; 0x44
 80053b6:	460c      	mov	r4, r1
 80053b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80053bc:	4616      	mov	r6, r2
 80053be:	461f      	mov	r7, r3
 80053c0:	4605      	mov	r5, r0
 80053c2:	f002 fe75 	bl	80080b0 <_localeconv_r>
 80053c6:	6803      	ldr	r3, [r0, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	9309      	str	r3, [sp, #36]	; 0x24
 80053cc:	f7fa fec0 	bl	8000150 <strlen>
 80053d0:	2300      	movs	r3, #0
 80053d2:	930e      	str	r3, [sp, #56]	; 0x38
 80053d4:	f8d8 3000 	ldr.w	r3, [r8]
 80053d8:	900a      	str	r0, [sp, #40]	; 0x28
 80053da:	3307      	adds	r3, #7
 80053dc:	f023 0307 	bic.w	r3, r3, #7
 80053e0:	f103 0208 	add.w	r2, r3, #8
 80053e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80053e8:	f8d4 b000 	ldr.w	fp, [r4]
 80053ec:	f8c8 2000 	str.w	r2, [r8]
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053f8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80053fc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005400:	930b      	str	r3, [sp, #44]	; 0x2c
 8005402:	f04f 32ff 	mov.w	r2, #4294967295
 8005406:	4640      	mov	r0, r8
 8005408:	4b9c      	ldr	r3, [pc, #624]	; (800567c <_printf_float+0x2cc>)
 800540a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800540c:	f7fb fafe 	bl	8000a0c <__aeabi_dcmpun>
 8005410:	bb70      	cbnz	r0, 8005470 <_printf_float+0xc0>
 8005412:	f04f 32ff 	mov.w	r2, #4294967295
 8005416:	4640      	mov	r0, r8
 8005418:	4b98      	ldr	r3, [pc, #608]	; (800567c <_printf_float+0x2cc>)
 800541a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800541c:	f7fb fad8 	bl	80009d0 <__aeabi_dcmple>
 8005420:	bb30      	cbnz	r0, 8005470 <_printf_float+0xc0>
 8005422:	2200      	movs	r2, #0
 8005424:	2300      	movs	r3, #0
 8005426:	4640      	mov	r0, r8
 8005428:	4651      	mov	r1, sl
 800542a:	f7fb fac7 	bl	80009bc <__aeabi_dcmplt>
 800542e:	b110      	cbz	r0, 8005436 <_printf_float+0x86>
 8005430:	232d      	movs	r3, #45	; 0x2d
 8005432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005436:	4b92      	ldr	r3, [pc, #584]	; (8005680 <_printf_float+0x2d0>)
 8005438:	4892      	ldr	r0, [pc, #584]	; (8005684 <_printf_float+0x2d4>)
 800543a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800543e:	bf94      	ite	ls
 8005440:	4698      	movls	r8, r3
 8005442:	4680      	movhi	r8, r0
 8005444:	2303      	movs	r3, #3
 8005446:	f04f 0a00 	mov.w	sl, #0
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	f02b 0304 	bic.w	r3, fp, #4
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	4633      	mov	r3, r6
 8005454:	4621      	mov	r1, r4
 8005456:	4628      	mov	r0, r5
 8005458:	9700      	str	r7, [sp, #0]
 800545a:	aa0f      	add	r2, sp, #60	; 0x3c
 800545c:	f000 f9d4 	bl	8005808 <_printf_common>
 8005460:	3001      	adds	r0, #1
 8005462:	f040 8090 	bne.w	8005586 <_printf_float+0x1d6>
 8005466:	f04f 30ff 	mov.w	r0, #4294967295
 800546a:	b011      	add	sp, #68	; 0x44
 800546c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005470:	4642      	mov	r2, r8
 8005472:	4653      	mov	r3, sl
 8005474:	4640      	mov	r0, r8
 8005476:	4651      	mov	r1, sl
 8005478:	f7fb fac8 	bl	8000a0c <__aeabi_dcmpun>
 800547c:	b148      	cbz	r0, 8005492 <_printf_float+0xe2>
 800547e:	f1ba 0f00 	cmp.w	sl, #0
 8005482:	bfb8      	it	lt
 8005484:	232d      	movlt	r3, #45	; 0x2d
 8005486:	4880      	ldr	r0, [pc, #512]	; (8005688 <_printf_float+0x2d8>)
 8005488:	bfb8      	it	lt
 800548a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800548e:	4b7f      	ldr	r3, [pc, #508]	; (800568c <_printf_float+0x2dc>)
 8005490:	e7d3      	b.n	800543a <_printf_float+0x8a>
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	d142      	bne.n	8005522 <_printf_float+0x172>
 800549c:	2306      	movs	r3, #6
 800549e:	6063      	str	r3, [r4, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	9206      	str	r2, [sp, #24]
 80054a4:	aa0e      	add	r2, sp, #56	; 0x38
 80054a6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80054aa:	aa0d      	add	r2, sp, #52	; 0x34
 80054ac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80054b0:	9203      	str	r2, [sp, #12]
 80054b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80054b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80054ba:	6023      	str	r3, [r4, #0]
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	4642      	mov	r2, r8
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	4628      	mov	r0, r5
 80054c4:	4653      	mov	r3, sl
 80054c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80054c8:	f7ff fed4 	bl	8005274 <__cvt>
 80054cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054ce:	4680      	mov	r8, r0
 80054d0:	2947      	cmp	r1, #71	; 0x47
 80054d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054d4:	d108      	bne.n	80054e8 <_printf_float+0x138>
 80054d6:	1cc8      	adds	r0, r1, #3
 80054d8:	db02      	blt.n	80054e0 <_printf_float+0x130>
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	4299      	cmp	r1, r3
 80054de:	dd40      	ble.n	8005562 <_printf_float+0x1b2>
 80054e0:	f1a9 0902 	sub.w	r9, r9, #2
 80054e4:	fa5f f989 	uxtb.w	r9, r9
 80054e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054ec:	d81f      	bhi.n	800552e <_printf_float+0x17e>
 80054ee:	464a      	mov	r2, r9
 80054f0:	3901      	subs	r1, #1
 80054f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054f6:	910d      	str	r1, [sp, #52]	; 0x34
 80054f8:	f7ff ff1b 	bl	8005332 <__exponent>
 80054fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054fe:	4682      	mov	sl, r0
 8005500:	1813      	adds	r3, r2, r0
 8005502:	2a01      	cmp	r2, #1
 8005504:	6123      	str	r3, [r4, #16]
 8005506:	dc02      	bgt.n	800550e <_printf_float+0x15e>
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	07d2      	lsls	r2, r2, #31
 800550c:	d501      	bpl.n	8005512 <_printf_float+0x162>
 800550e:	3301      	adds	r3, #1
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005516:	2b00      	cmp	r3, #0
 8005518:	d09b      	beq.n	8005452 <_printf_float+0xa2>
 800551a:	232d      	movs	r3, #45	; 0x2d
 800551c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005520:	e797      	b.n	8005452 <_printf_float+0xa2>
 8005522:	2947      	cmp	r1, #71	; 0x47
 8005524:	d1bc      	bne.n	80054a0 <_printf_float+0xf0>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ba      	bne.n	80054a0 <_printf_float+0xf0>
 800552a:	2301      	movs	r3, #1
 800552c:	e7b7      	b.n	800549e <_printf_float+0xee>
 800552e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005532:	d118      	bne.n	8005566 <_printf_float+0x1b6>
 8005534:	2900      	cmp	r1, #0
 8005536:	6863      	ldr	r3, [r4, #4]
 8005538:	dd0b      	ble.n	8005552 <_printf_float+0x1a2>
 800553a:	6121      	str	r1, [r4, #16]
 800553c:	b913      	cbnz	r3, 8005544 <_printf_float+0x194>
 800553e:	6822      	ldr	r2, [r4, #0]
 8005540:	07d0      	lsls	r0, r2, #31
 8005542:	d502      	bpl.n	800554a <_printf_float+0x19a>
 8005544:	3301      	adds	r3, #1
 8005546:	440b      	add	r3, r1
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	f04f 0a00 	mov.w	sl, #0
 800554e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005550:	e7df      	b.n	8005512 <_printf_float+0x162>
 8005552:	b913      	cbnz	r3, 800555a <_printf_float+0x1aa>
 8005554:	6822      	ldr	r2, [r4, #0]
 8005556:	07d2      	lsls	r2, r2, #31
 8005558:	d501      	bpl.n	800555e <_printf_float+0x1ae>
 800555a:	3302      	adds	r3, #2
 800555c:	e7f4      	b.n	8005548 <_printf_float+0x198>
 800555e:	2301      	movs	r3, #1
 8005560:	e7f2      	b.n	8005548 <_printf_float+0x198>
 8005562:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005568:	4299      	cmp	r1, r3
 800556a:	db05      	blt.n	8005578 <_printf_float+0x1c8>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	6121      	str	r1, [r4, #16]
 8005570:	07d8      	lsls	r0, r3, #31
 8005572:	d5ea      	bpl.n	800554a <_printf_float+0x19a>
 8005574:	1c4b      	adds	r3, r1, #1
 8005576:	e7e7      	b.n	8005548 <_printf_float+0x198>
 8005578:	2900      	cmp	r1, #0
 800557a:	bfcc      	ite	gt
 800557c:	2201      	movgt	r2, #1
 800557e:	f1c1 0202 	rsble	r2, r1, #2
 8005582:	4413      	add	r3, r2
 8005584:	e7e0      	b.n	8005548 <_printf_float+0x198>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	055a      	lsls	r2, r3, #21
 800558a:	d407      	bmi.n	800559c <_printf_float+0x1ec>
 800558c:	6923      	ldr	r3, [r4, #16]
 800558e:	4642      	mov	r2, r8
 8005590:	4631      	mov	r1, r6
 8005592:	4628      	mov	r0, r5
 8005594:	47b8      	blx	r7
 8005596:	3001      	adds	r0, #1
 8005598:	d12b      	bne.n	80055f2 <_printf_float+0x242>
 800559a:	e764      	b.n	8005466 <_printf_float+0xb6>
 800559c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055a0:	f240 80dd 	bls.w	800575e <_printf_float+0x3ae>
 80055a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055a8:	2200      	movs	r2, #0
 80055aa:	2300      	movs	r3, #0
 80055ac:	f7fb f9fc 	bl	80009a8 <__aeabi_dcmpeq>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d033      	beq.n	800561c <_printf_float+0x26c>
 80055b4:	2301      	movs	r3, #1
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	4a35      	ldr	r2, [pc, #212]	; (8005690 <_printf_float+0x2e0>)
 80055bc:	47b8      	blx	r7
 80055be:	3001      	adds	r0, #1
 80055c0:	f43f af51 	beq.w	8005466 <_printf_float+0xb6>
 80055c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055c8:	429a      	cmp	r2, r3
 80055ca:	db02      	blt.n	80055d2 <_printf_float+0x222>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	07d8      	lsls	r0, r3, #31
 80055d0:	d50f      	bpl.n	80055f2 <_printf_float+0x242>
 80055d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f af42 	beq.w	8005466 <_printf_float+0xb6>
 80055e2:	f04f 0800 	mov.w	r8, #0
 80055e6:	f104 091a 	add.w	r9, r4, #26
 80055ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055ec:	3b01      	subs	r3, #1
 80055ee:	4543      	cmp	r3, r8
 80055f0:	dc09      	bgt.n	8005606 <_printf_float+0x256>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	079b      	lsls	r3, r3, #30
 80055f6:	f100 8102 	bmi.w	80057fe <_printf_float+0x44e>
 80055fa:	68e0      	ldr	r0, [r4, #12]
 80055fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055fe:	4298      	cmp	r0, r3
 8005600:	bfb8      	it	lt
 8005602:	4618      	movlt	r0, r3
 8005604:	e731      	b.n	800546a <_printf_float+0xba>
 8005606:	2301      	movs	r3, #1
 8005608:	464a      	mov	r2, r9
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	f43f af28 	beq.w	8005466 <_printf_float+0xb6>
 8005616:	f108 0801 	add.w	r8, r8, #1
 800561a:	e7e6      	b.n	80055ea <_printf_float+0x23a>
 800561c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800561e:	2b00      	cmp	r3, #0
 8005620:	dc38      	bgt.n	8005694 <_printf_float+0x2e4>
 8005622:	2301      	movs	r3, #1
 8005624:	4631      	mov	r1, r6
 8005626:	4628      	mov	r0, r5
 8005628:	4a19      	ldr	r2, [pc, #100]	; (8005690 <_printf_float+0x2e0>)
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	f43f af1a 	beq.w	8005466 <_printf_float+0xb6>
 8005632:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005636:	4313      	orrs	r3, r2
 8005638:	d102      	bne.n	8005640 <_printf_float+0x290>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	07d9      	lsls	r1, r3, #31
 800563e:	d5d8      	bpl.n	80055f2 <_printf_float+0x242>
 8005640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005644:	4631      	mov	r1, r6
 8005646:	4628      	mov	r0, r5
 8005648:	47b8      	blx	r7
 800564a:	3001      	adds	r0, #1
 800564c:	f43f af0b 	beq.w	8005466 <_printf_float+0xb6>
 8005650:	f04f 0900 	mov.w	r9, #0
 8005654:	f104 0a1a 	add.w	sl, r4, #26
 8005658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800565a:	425b      	negs	r3, r3
 800565c:	454b      	cmp	r3, r9
 800565e:	dc01      	bgt.n	8005664 <_printf_float+0x2b4>
 8005660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005662:	e794      	b.n	800558e <_printf_float+0x1de>
 8005664:	2301      	movs	r3, #1
 8005666:	4652      	mov	r2, sl
 8005668:	4631      	mov	r1, r6
 800566a:	4628      	mov	r0, r5
 800566c:	47b8      	blx	r7
 800566e:	3001      	adds	r0, #1
 8005670:	f43f aef9 	beq.w	8005466 <_printf_float+0xb6>
 8005674:	f109 0901 	add.w	r9, r9, #1
 8005678:	e7ee      	b.n	8005658 <_printf_float+0x2a8>
 800567a:	bf00      	nop
 800567c:	7fefffff 	.word	0x7fefffff
 8005680:	0800af78 	.word	0x0800af78
 8005684:	0800af7c 	.word	0x0800af7c
 8005688:	0800af84 	.word	0x0800af84
 800568c:	0800af80 	.word	0x0800af80
 8005690:	0800af88 	.word	0x0800af88
 8005694:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005698:	429a      	cmp	r2, r3
 800569a:	bfa8      	it	ge
 800569c:	461a      	movge	r2, r3
 800569e:	2a00      	cmp	r2, #0
 80056a0:	4691      	mov	r9, r2
 80056a2:	dc37      	bgt.n	8005714 <_printf_float+0x364>
 80056a4:	f04f 0b00 	mov.w	fp, #0
 80056a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ac:	f104 021a 	add.w	r2, r4, #26
 80056b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80056b4:	ebaa 0309 	sub.w	r3, sl, r9
 80056b8:	455b      	cmp	r3, fp
 80056ba:	dc33      	bgt.n	8005724 <_printf_float+0x374>
 80056bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056c0:	429a      	cmp	r2, r3
 80056c2:	db3b      	blt.n	800573c <_printf_float+0x38c>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	07da      	lsls	r2, r3, #31
 80056c8:	d438      	bmi.n	800573c <_printf_float+0x38c>
 80056ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056ce:	eba2 030a 	sub.w	r3, r2, sl
 80056d2:	eba2 0901 	sub.w	r9, r2, r1
 80056d6:	4599      	cmp	r9, r3
 80056d8:	bfa8      	it	ge
 80056da:	4699      	movge	r9, r3
 80056dc:	f1b9 0f00 	cmp.w	r9, #0
 80056e0:	dc34      	bgt.n	800574c <_printf_float+0x39c>
 80056e2:	f04f 0800 	mov.w	r8, #0
 80056e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ea:	f104 0a1a 	add.w	sl, r4, #26
 80056ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	eba3 0309 	sub.w	r3, r3, r9
 80056f8:	4543      	cmp	r3, r8
 80056fa:	f77f af7a 	ble.w	80055f2 <_printf_float+0x242>
 80056fe:	2301      	movs	r3, #1
 8005700:	4652      	mov	r2, sl
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	f43f aeac 	beq.w	8005466 <_printf_float+0xb6>
 800570e:	f108 0801 	add.w	r8, r8, #1
 8005712:	e7ec      	b.n	80056ee <_printf_float+0x33e>
 8005714:	4613      	mov	r3, r2
 8005716:	4631      	mov	r1, r6
 8005718:	4642      	mov	r2, r8
 800571a:	4628      	mov	r0, r5
 800571c:	47b8      	blx	r7
 800571e:	3001      	adds	r0, #1
 8005720:	d1c0      	bne.n	80056a4 <_printf_float+0x2f4>
 8005722:	e6a0      	b.n	8005466 <_printf_float+0xb6>
 8005724:	2301      	movs	r3, #1
 8005726:	4631      	mov	r1, r6
 8005728:	4628      	mov	r0, r5
 800572a:	920b      	str	r2, [sp, #44]	; 0x2c
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	f43f ae99 	beq.w	8005466 <_printf_float+0xb6>
 8005734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005736:	f10b 0b01 	add.w	fp, fp, #1
 800573a:	e7b9      	b.n	80056b0 <_printf_float+0x300>
 800573c:	4631      	mov	r1, r6
 800573e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005742:	4628      	mov	r0, r5
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	d1bf      	bne.n	80056ca <_printf_float+0x31a>
 800574a:	e68c      	b.n	8005466 <_printf_float+0xb6>
 800574c:	464b      	mov	r3, r9
 800574e:	4631      	mov	r1, r6
 8005750:	4628      	mov	r0, r5
 8005752:	eb08 020a 	add.w	r2, r8, sl
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	d1c2      	bne.n	80056e2 <_printf_float+0x332>
 800575c:	e683      	b.n	8005466 <_printf_float+0xb6>
 800575e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005760:	2a01      	cmp	r2, #1
 8005762:	dc01      	bgt.n	8005768 <_printf_float+0x3b8>
 8005764:	07db      	lsls	r3, r3, #31
 8005766:	d537      	bpl.n	80057d8 <_printf_float+0x428>
 8005768:	2301      	movs	r3, #1
 800576a:	4642      	mov	r2, r8
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	f43f ae77 	beq.w	8005466 <_printf_float+0xb6>
 8005778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800577c:	4631      	mov	r1, r6
 800577e:	4628      	mov	r0, r5
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	f43f ae6f 	beq.w	8005466 <_printf_float+0xb6>
 8005788:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800578c:	2200      	movs	r2, #0
 800578e:	2300      	movs	r3, #0
 8005790:	f7fb f90a 	bl	80009a8 <__aeabi_dcmpeq>
 8005794:	b9d8      	cbnz	r0, 80057ce <_printf_float+0x41e>
 8005796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005798:	f108 0201 	add.w	r2, r8, #1
 800579c:	3b01      	subs	r3, #1
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	d10e      	bne.n	80057c6 <_printf_float+0x416>
 80057a8:	e65d      	b.n	8005466 <_printf_float+0xb6>
 80057aa:	2301      	movs	r3, #1
 80057ac:	464a      	mov	r2, r9
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	f43f ae56 	beq.w	8005466 <_printf_float+0xb6>
 80057ba:	f108 0801 	add.w	r8, r8, #1
 80057be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057c0:	3b01      	subs	r3, #1
 80057c2:	4543      	cmp	r3, r8
 80057c4:	dcf1      	bgt.n	80057aa <_printf_float+0x3fa>
 80057c6:	4653      	mov	r3, sl
 80057c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057cc:	e6e0      	b.n	8005590 <_printf_float+0x1e0>
 80057ce:	f04f 0800 	mov.w	r8, #0
 80057d2:	f104 091a 	add.w	r9, r4, #26
 80057d6:	e7f2      	b.n	80057be <_printf_float+0x40e>
 80057d8:	2301      	movs	r3, #1
 80057da:	4642      	mov	r2, r8
 80057dc:	e7df      	b.n	800579e <_printf_float+0x3ee>
 80057de:	2301      	movs	r3, #1
 80057e0:	464a      	mov	r2, r9
 80057e2:	4631      	mov	r1, r6
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b8      	blx	r7
 80057e8:	3001      	adds	r0, #1
 80057ea:	f43f ae3c 	beq.w	8005466 <_printf_float+0xb6>
 80057ee:	f108 0801 	add.w	r8, r8, #1
 80057f2:	68e3      	ldr	r3, [r4, #12]
 80057f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80057f6:	1a5b      	subs	r3, r3, r1
 80057f8:	4543      	cmp	r3, r8
 80057fa:	dcf0      	bgt.n	80057de <_printf_float+0x42e>
 80057fc:	e6fd      	b.n	80055fa <_printf_float+0x24a>
 80057fe:	f04f 0800 	mov.w	r8, #0
 8005802:	f104 0919 	add.w	r9, r4, #25
 8005806:	e7f4      	b.n	80057f2 <_printf_float+0x442>

08005808 <_printf_common>:
 8005808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	4616      	mov	r6, r2
 800580e:	4699      	mov	r9, r3
 8005810:	688a      	ldr	r2, [r1, #8]
 8005812:	690b      	ldr	r3, [r1, #16]
 8005814:	4607      	mov	r7, r0
 8005816:	4293      	cmp	r3, r2
 8005818:	bfb8      	it	lt
 800581a:	4613      	movlt	r3, r2
 800581c:	6033      	str	r3, [r6, #0]
 800581e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005822:	460c      	mov	r4, r1
 8005824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005828:	b10a      	cbz	r2, 800582e <_printf_common+0x26>
 800582a:	3301      	adds	r3, #1
 800582c:	6033      	str	r3, [r6, #0]
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	0699      	lsls	r1, r3, #26
 8005832:	bf42      	ittt	mi
 8005834:	6833      	ldrmi	r3, [r6, #0]
 8005836:	3302      	addmi	r3, #2
 8005838:	6033      	strmi	r3, [r6, #0]
 800583a:	6825      	ldr	r5, [r4, #0]
 800583c:	f015 0506 	ands.w	r5, r5, #6
 8005840:	d106      	bne.n	8005850 <_printf_common+0x48>
 8005842:	f104 0a19 	add.w	sl, r4, #25
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	6832      	ldr	r2, [r6, #0]
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	42ab      	cmp	r3, r5
 800584e:	dc28      	bgt.n	80058a2 <_printf_common+0x9a>
 8005850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005854:	1e13      	subs	r3, r2, #0
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	bf18      	it	ne
 800585a:	2301      	movne	r3, #1
 800585c:	0692      	lsls	r2, r2, #26
 800585e:	d42d      	bmi.n	80058bc <_printf_common+0xb4>
 8005860:	4649      	mov	r1, r9
 8005862:	4638      	mov	r0, r7
 8005864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005868:	47c0      	blx	r8
 800586a:	3001      	adds	r0, #1
 800586c:	d020      	beq.n	80058b0 <_printf_common+0xa8>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	68e5      	ldr	r5, [r4, #12]
 8005872:	f003 0306 	and.w	r3, r3, #6
 8005876:	2b04      	cmp	r3, #4
 8005878:	bf18      	it	ne
 800587a:	2500      	movne	r5, #0
 800587c:	6832      	ldr	r2, [r6, #0]
 800587e:	f04f 0600 	mov.w	r6, #0
 8005882:	68a3      	ldr	r3, [r4, #8]
 8005884:	bf08      	it	eq
 8005886:	1aad      	subeq	r5, r5, r2
 8005888:	6922      	ldr	r2, [r4, #16]
 800588a:	bf08      	it	eq
 800588c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005890:	4293      	cmp	r3, r2
 8005892:	bfc4      	itt	gt
 8005894:	1a9b      	subgt	r3, r3, r2
 8005896:	18ed      	addgt	r5, r5, r3
 8005898:	341a      	adds	r4, #26
 800589a:	42b5      	cmp	r5, r6
 800589c:	d11a      	bne.n	80058d4 <_printf_common+0xcc>
 800589e:	2000      	movs	r0, #0
 80058a0:	e008      	b.n	80058b4 <_printf_common+0xac>
 80058a2:	2301      	movs	r3, #1
 80058a4:	4652      	mov	r2, sl
 80058a6:	4649      	mov	r1, r9
 80058a8:	4638      	mov	r0, r7
 80058aa:	47c0      	blx	r8
 80058ac:	3001      	adds	r0, #1
 80058ae:	d103      	bne.n	80058b8 <_printf_common+0xb0>
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b8:	3501      	adds	r5, #1
 80058ba:	e7c4      	b.n	8005846 <_printf_common+0x3e>
 80058bc:	2030      	movs	r0, #48	; 0x30
 80058be:	18e1      	adds	r1, r4, r3
 80058c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058ca:	4422      	add	r2, r4
 80058cc:	3302      	adds	r3, #2
 80058ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058d2:	e7c5      	b.n	8005860 <_printf_common+0x58>
 80058d4:	2301      	movs	r3, #1
 80058d6:	4622      	mov	r2, r4
 80058d8:	4649      	mov	r1, r9
 80058da:	4638      	mov	r0, r7
 80058dc:	47c0      	blx	r8
 80058de:	3001      	adds	r0, #1
 80058e0:	d0e6      	beq.n	80058b0 <_printf_common+0xa8>
 80058e2:	3601      	adds	r6, #1
 80058e4:	e7d9      	b.n	800589a <_printf_common+0x92>
	...

080058e8 <_printf_i>:
 80058e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058ec:	460c      	mov	r4, r1
 80058ee:	7e27      	ldrb	r7, [r4, #24]
 80058f0:	4691      	mov	r9, r2
 80058f2:	2f78      	cmp	r7, #120	; 0x78
 80058f4:	4680      	mov	r8, r0
 80058f6:	469a      	mov	sl, r3
 80058f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058fe:	d807      	bhi.n	8005910 <_printf_i+0x28>
 8005900:	2f62      	cmp	r7, #98	; 0x62
 8005902:	d80a      	bhi.n	800591a <_printf_i+0x32>
 8005904:	2f00      	cmp	r7, #0
 8005906:	f000 80d9 	beq.w	8005abc <_printf_i+0x1d4>
 800590a:	2f58      	cmp	r7, #88	; 0x58
 800590c:	f000 80a4 	beq.w	8005a58 <_printf_i+0x170>
 8005910:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005918:	e03a      	b.n	8005990 <_printf_i+0xa8>
 800591a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800591e:	2b15      	cmp	r3, #21
 8005920:	d8f6      	bhi.n	8005910 <_printf_i+0x28>
 8005922:	a001      	add	r0, pc, #4	; (adr r0, 8005928 <_printf_i+0x40>)
 8005924:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005928:	08005981 	.word	0x08005981
 800592c:	08005995 	.word	0x08005995
 8005930:	08005911 	.word	0x08005911
 8005934:	08005911 	.word	0x08005911
 8005938:	08005911 	.word	0x08005911
 800593c:	08005911 	.word	0x08005911
 8005940:	08005995 	.word	0x08005995
 8005944:	08005911 	.word	0x08005911
 8005948:	08005911 	.word	0x08005911
 800594c:	08005911 	.word	0x08005911
 8005950:	08005911 	.word	0x08005911
 8005954:	08005aa3 	.word	0x08005aa3
 8005958:	080059c5 	.word	0x080059c5
 800595c:	08005a85 	.word	0x08005a85
 8005960:	08005911 	.word	0x08005911
 8005964:	08005911 	.word	0x08005911
 8005968:	08005ac5 	.word	0x08005ac5
 800596c:	08005911 	.word	0x08005911
 8005970:	080059c5 	.word	0x080059c5
 8005974:	08005911 	.word	0x08005911
 8005978:	08005911 	.word	0x08005911
 800597c:	08005a8d 	.word	0x08005a8d
 8005980:	680b      	ldr	r3, [r1, #0]
 8005982:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005986:	1d1a      	adds	r2, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	600a      	str	r2, [r1, #0]
 800598c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005990:	2301      	movs	r3, #1
 8005992:	e0a4      	b.n	8005ade <_printf_i+0x1f6>
 8005994:	6825      	ldr	r5, [r4, #0]
 8005996:	6808      	ldr	r0, [r1, #0]
 8005998:	062e      	lsls	r6, r5, #24
 800599a:	f100 0304 	add.w	r3, r0, #4
 800599e:	d50a      	bpl.n	80059b6 <_printf_i+0xce>
 80059a0:	6805      	ldr	r5, [r0, #0]
 80059a2:	600b      	str	r3, [r1, #0]
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	da03      	bge.n	80059b0 <_printf_i+0xc8>
 80059a8:	232d      	movs	r3, #45	; 0x2d
 80059aa:	426d      	negs	r5, r5
 80059ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b0:	230a      	movs	r3, #10
 80059b2:	485e      	ldr	r0, [pc, #376]	; (8005b2c <_printf_i+0x244>)
 80059b4:	e019      	b.n	80059ea <_printf_i+0x102>
 80059b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80059ba:	6805      	ldr	r5, [r0, #0]
 80059bc:	600b      	str	r3, [r1, #0]
 80059be:	bf18      	it	ne
 80059c0:	b22d      	sxthne	r5, r5
 80059c2:	e7ef      	b.n	80059a4 <_printf_i+0xbc>
 80059c4:	680b      	ldr	r3, [r1, #0]
 80059c6:	6825      	ldr	r5, [r4, #0]
 80059c8:	1d18      	adds	r0, r3, #4
 80059ca:	6008      	str	r0, [r1, #0]
 80059cc:	0628      	lsls	r0, r5, #24
 80059ce:	d501      	bpl.n	80059d4 <_printf_i+0xec>
 80059d0:	681d      	ldr	r5, [r3, #0]
 80059d2:	e002      	b.n	80059da <_printf_i+0xf2>
 80059d4:	0669      	lsls	r1, r5, #25
 80059d6:	d5fb      	bpl.n	80059d0 <_printf_i+0xe8>
 80059d8:	881d      	ldrh	r5, [r3, #0]
 80059da:	2f6f      	cmp	r7, #111	; 0x6f
 80059dc:	bf0c      	ite	eq
 80059de:	2308      	moveq	r3, #8
 80059e0:	230a      	movne	r3, #10
 80059e2:	4852      	ldr	r0, [pc, #328]	; (8005b2c <_printf_i+0x244>)
 80059e4:	2100      	movs	r1, #0
 80059e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ea:	6866      	ldr	r6, [r4, #4]
 80059ec:	2e00      	cmp	r6, #0
 80059ee:	bfa8      	it	ge
 80059f0:	6821      	ldrge	r1, [r4, #0]
 80059f2:	60a6      	str	r6, [r4, #8]
 80059f4:	bfa4      	itt	ge
 80059f6:	f021 0104 	bicge.w	r1, r1, #4
 80059fa:	6021      	strge	r1, [r4, #0]
 80059fc:	b90d      	cbnz	r5, 8005a02 <_printf_i+0x11a>
 80059fe:	2e00      	cmp	r6, #0
 8005a00:	d04d      	beq.n	8005a9e <_printf_i+0x1b6>
 8005a02:	4616      	mov	r6, r2
 8005a04:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a08:	fb03 5711 	mls	r7, r3, r1, r5
 8005a0c:	5dc7      	ldrb	r7, [r0, r7]
 8005a0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a12:	462f      	mov	r7, r5
 8005a14:	42bb      	cmp	r3, r7
 8005a16:	460d      	mov	r5, r1
 8005a18:	d9f4      	bls.n	8005a04 <_printf_i+0x11c>
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d10b      	bne.n	8005a36 <_printf_i+0x14e>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	07df      	lsls	r7, r3, #31
 8005a22:	d508      	bpl.n	8005a36 <_printf_i+0x14e>
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	6861      	ldr	r1, [r4, #4]
 8005a28:	4299      	cmp	r1, r3
 8005a2a:	bfde      	ittt	le
 8005a2c:	2330      	movle	r3, #48	; 0x30
 8005a2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a36:	1b92      	subs	r2, r2, r6
 8005a38:	6122      	str	r2, [r4, #16]
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4640      	mov	r0, r8
 8005a40:	f8cd a000 	str.w	sl, [sp]
 8005a44:	aa03      	add	r2, sp, #12
 8005a46:	f7ff fedf 	bl	8005808 <_printf_common>
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d14c      	bne.n	8005ae8 <_printf_i+0x200>
 8005a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a52:	b004      	add	sp, #16
 8005a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a58:	4834      	ldr	r0, [pc, #208]	; (8005b2c <_printf_i+0x244>)
 8005a5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a5e:	680e      	ldr	r6, [r1, #0]
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a66:	061f      	lsls	r7, r3, #24
 8005a68:	600e      	str	r6, [r1, #0]
 8005a6a:	d514      	bpl.n	8005a96 <_printf_i+0x1ae>
 8005a6c:	07d9      	lsls	r1, r3, #31
 8005a6e:	bf44      	itt	mi
 8005a70:	f043 0320 	orrmi.w	r3, r3, #32
 8005a74:	6023      	strmi	r3, [r4, #0]
 8005a76:	b91d      	cbnz	r5, 8005a80 <_printf_i+0x198>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	f023 0320 	bic.w	r3, r3, #32
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	2310      	movs	r3, #16
 8005a82:	e7af      	b.n	80059e4 <_printf_i+0xfc>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	f043 0320 	orr.w	r3, r3, #32
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	2378      	movs	r3, #120	; 0x78
 8005a8e:	4828      	ldr	r0, [pc, #160]	; (8005b30 <_printf_i+0x248>)
 8005a90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a94:	e7e3      	b.n	8005a5e <_printf_i+0x176>
 8005a96:	065e      	lsls	r6, r3, #25
 8005a98:	bf48      	it	mi
 8005a9a:	b2ad      	uxthmi	r5, r5
 8005a9c:	e7e6      	b.n	8005a6c <_printf_i+0x184>
 8005a9e:	4616      	mov	r6, r2
 8005aa0:	e7bb      	b.n	8005a1a <_printf_i+0x132>
 8005aa2:	680b      	ldr	r3, [r1, #0]
 8005aa4:	6826      	ldr	r6, [r4, #0]
 8005aa6:	1d1d      	adds	r5, r3, #4
 8005aa8:	6960      	ldr	r0, [r4, #20]
 8005aaa:	600d      	str	r5, [r1, #0]
 8005aac:	0635      	lsls	r5, r6, #24
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	d501      	bpl.n	8005ab6 <_printf_i+0x1ce>
 8005ab2:	6018      	str	r0, [r3, #0]
 8005ab4:	e002      	b.n	8005abc <_printf_i+0x1d4>
 8005ab6:	0671      	lsls	r1, r6, #25
 8005ab8:	d5fb      	bpl.n	8005ab2 <_printf_i+0x1ca>
 8005aba:	8018      	strh	r0, [r3, #0]
 8005abc:	2300      	movs	r3, #0
 8005abe:	4616      	mov	r6, r2
 8005ac0:	6123      	str	r3, [r4, #16]
 8005ac2:	e7ba      	b.n	8005a3a <_printf_i+0x152>
 8005ac4:	680b      	ldr	r3, [r1, #0]
 8005ac6:	1d1a      	adds	r2, r3, #4
 8005ac8:	600a      	str	r2, [r1, #0]
 8005aca:	681e      	ldr	r6, [r3, #0]
 8005acc:	2100      	movs	r1, #0
 8005ace:	4630      	mov	r0, r6
 8005ad0:	6862      	ldr	r2, [r4, #4]
 8005ad2:	f002 fb0b 	bl	80080ec <memchr>
 8005ad6:	b108      	cbz	r0, 8005adc <_printf_i+0x1f4>
 8005ad8:	1b80      	subs	r0, r0, r6
 8005ada:	6060      	str	r0, [r4, #4]
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae6:	e7a8      	b.n	8005a3a <_printf_i+0x152>
 8005ae8:	4632      	mov	r2, r6
 8005aea:	4649      	mov	r1, r9
 8005aec:	4640      	mov	r0, r8
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	47d0      	blx	sl
 8005af2:	3001      	adds	r0, #1
 8005af4:	d0ab      	beq.n	8005a4e <_printf_i+0x166>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	079b      	lsls	r3, r3, #30
 8005afa:	d413      	bmi.n	8005b24 <_printf_i+0x23c>
 8005afc:	68e0      	ldr	r0, [r4, #12]
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	4298      	cmp	r0, r3
 8005b02:	bfb8      	it	lt
 8005b04:	4618      	movlt	r0, r3
 8005b06:	e7a4      	b.n	8005a52 <_printf_i+0x16a>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	4632      	mov	r2, r6
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4640      	mov	r0, r8
 8005b10:	47d0      	blx	sl
 8005b12:	3001      	adds	r0, #1
 8005b14:	d09b      	beq.n	8005a4e <_printf_i+0x166>
 8005b16:	3501      	adds	r5, #1
 8005b18:	68e3      	ldr	r3, [r4, #12]
 8005b1a:	9903      	ldr	r1, [sp, #12]
 8005b1c:	1a5b      	subs	r3, r3, r1
 8005b1e:	42ab      	cmp	r3, r5
 8005b20:	dcf2      	bgt.n	8005b08 <_printf_i+0x220>
 8005b22:	e7eb      	b.n	8005afc <_printf_i+0x214>
 8005b24:	2500      	movs	r5, #0
 8005b26:	f104 0619 	add.w	r6, r4, #25
 8005b2a:	e7f5      	b.n	8005b18 <_printf_i+0x230>
 8005b2c:	0800af8a 	.word	0x0800af8a
 8005b30:	0800af9b 	.word	0x0800af9b

08005b34 <_scanf_float>:
 8005b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b38:	b087      	sub	sp, #28
 8005b3a:	9303      	str	r3, [sp, #12]
 8005b3c:	688b      	ldr	r3, [r1, #8]
 8005b3e:	4617      	mov	r7, r2
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005b46:	bf85      	ittet	hi
 8005b48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005b4c:	195b      	addhi	r3, r3, r5
 8005b4e:	2300      	movls	r3, #0
 8005b50:	9302      	strhi	r3, [sp, #8]
 8005b52:	bf88      	it	hi
 8005b54:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005b58:	468b      	mov	fp, r1
 8005b5a:	f04f 0500 	mov.w	r5, #0
 8005b5e:	bf8c      	ite	hi
 8005b60:	608b      	strhi	r3, [r1, #8]
 8005b62:	9302      	strls	r3, [sp, #8]
 8005b64:	680b      	ldr	r3, [r1, #0]
 8005b66:	4680      	mov	r8, r0
 8005b68:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005b6c:	f84b 3b1c 	str.w	r3, [fp], #28
 8005b70:	460c      	mov	r4, r1
 8005b72:	465e      	mov	r6, fp
 8005b74:	46aa      	mov	sl, r5
 8005b76:	46a9      	mov	r9, r5
 8005b78:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b7c:	9501      	str	r5, [sp, #4]
 8005b7e:	68a2      	ldr	r2, [r4, #8]
 8005b80:	b152      	cbz	r2, 8005b98 <_scanf_float+0x64>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b4e      	cmp	r3, #78	; 0x4e
 8005b88:	d864      	bhi.n	8005c54 <_scanf_float+0x120>
 8005b8a:	2b40      	cmp	r3, #64	; 0x40
 8005b8c:	d83c      	bhi.n	8005c08 <_scanf_float+0xd4>
 8005b8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005b92:	b2c8      	uxtb	r0, r1
 8005b94:	280e      	cmp	r0, #14
 8005b96:	d93a      	bls.n	8005c0e <_scanf_float+0xda>
 8005b98:	f1b9 0f00 	cmp.w	r9, #0
 8005b9c:	d003      	beq.n	8005ba6 <_scanf_float+0x72>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005baa:	f1ba 0f01 	cmp.w	sl, #1
 8005bae:	f200 8113 	bhi.w	8005dd8 <_scanf_float+0x2a4>
 8005bb2:	455e      	cmp	r6, fp
 8005bb4:	f200 8105 	bhi.w	8005dc2 <_scanf_float+0x28e>
 8005bb8:	2501      	movs	r5, #1
 8005bba:	4628      	mov	r0, r5
 8005bbc:	b007      	add	sp, #28
 8005bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005bc6:	2a0d      	cmp	r2, #13
 8005bc8:	d8e6      	bhi.n	8005b98 <_scanf_float+0x64>
 8005bca:	a101      	add	r1, pc, #4	; (adr r1, 8005bd0 <_scanf_float+0x9c>)
 8005bcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005bd0:	08005d0f 	.word	0x08005d0f
 8005bd4:	08005b99 	.word	0x08005b99
 8005bd8:	08005b99 	.word	0x08005b99
 8005bdc:	08005b99 	.word	0x08005b99
 8005be0:	08005d6f 	.word	0x08005d6f
 8005be4:	08005d47 	.word	0x08005d47
 8005be8:	08005b99 	.word	0x08005b99
 8005bec:	08005b99 	.word	0x08005b99
 8005bf0:	08005d1d 	.word	0x08005d1d
 8005bf4:	08005b99 	.word	0x08005b99
 8005bf8:	08005b99 	.word	0x08005b99
 8005bfc:	08005b99 	.word	0x08005b99
 8005c00:	08005b99 	.word	0x08005b99
 8005c04:	08005cd5 	.word	0x08005cd5
 8005c08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005c0c:	e7db      	b.n	8005bc6 <_scanf_float+0x92>
 8005c0e:	290e      	cmp	r1, #14
 8005c10:	d8c2      	bhi.n	8005b98 <_scanf_float+0x64>
 8005c12:	a001      	add	r0, pc, #4	; (adr r0, 8005c18 <_scanf_float+0xe4>)
 8005c14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c18:	08005cc7 	.word	0x08005cc7
 8005c1c:	08005b99 	.word	0x08005b99
 8005c20:	08005cc7 	.word	0x08005cc7
 8005c24:	08005d5b 	.word	0x08005d5b
 8005c28:	08005b99 	.word	0x08005b99
 8005c2c:	08005c75 	.word	0x08005c75
 8005c30:	08005cb1 	.word	0x08005cb1
 8005c34:	08005cb1 	.word	0x08005cb1
 8005c38:	08005cb1 	.word	0x08005cb1
 8005c3c:	08005cb1 	.word	0x08005cb1
 8005c40:	08005cb1 	.word	0x08005cb1
 8005c44:	08005cb1 	.word	0x08005cb1
 8005c48:	08005cb1 	.word	0x08005cb1
 8005c4c:	08005cb1 	.word	0x08005cb1
 8005c50:	08005cb1 	.word	0x08005cb1
 8005c54:	2b6e      	cmp	r3, #110	; 0x6e
 8005c56:	d809      	bhi.n	8005c6c <_scanf_float+0x138>
 8005c58:	2b60      	cmp	r3, #96	; 0x60
 8005c5a:	d8b2      	bhi.n	8005bc2 <_scanf_float+0x8e>
 8005c5c:	2b54      	cmp	r3, #84	; 0x54
 8005c5e:	d077      	beq.n	8005d50 <_scanf_float+0x21c>
 8005c60:	2b59      	cmp	r3, #89	; 0x59
 8005c62:	d199      	bne.n	8005b98 <_scanf_float+0x64>
 8005c64:	2d07      	cmp	r5, #7
 8005c66:	d197      	bne.n	8005b98 <_scanf_float+0x64>
 8005c68:	2508      	movs	r5, #8
 8005c6a:	e029      	b.n	8005cc0 <_scanf_float+0x18c>
 8005c6c:	2b74      	cmp	r3, #116	; 0x74
 8005c6e:	d06f      	beq.n	8005d50 <_scanf_float+0x21c>
 8005c70:	2b79      	cmp	r3, #121	; 0x79
 8005c72:	e7f6      	b.n	8005c62 <_scanf_float+0x12e>
 8005c74:	6821      	ldr	r1, [r4, #0]
 8005c76:	05c8      	lsls	r0, r1, #23
 8005c78:	d51a      	bpl.n	8005cb0 <_scanf_float+0x17c>
 8005c7a:	9b02      	ldr	r3, [sp, #8]
 8005c7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005c80:	6021      	str	r1, [r4, #0]
 8005c82:	f109 0901 	add.w	r9, r9, #1
 8005c86:	b11b      	cbz	r3, 8005c90 <_scanf_float+0x15c>
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	3201      	adds	r2, #1
 8005c8c:	9302      	str	r3, [sp, #8]
 8005c8e:	60a2      	str	r2, [r4, #8]
 8005c90:	68a3      	ldr	r3, [r4, #8]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	60a3      	str	r3, [r4, #8]
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	f340 8084 	ble.w	8005db0 <_scanf_float+0x27c>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	3301      	adds	r3, #1
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	e766      	b.n	8005b7e <_scanf_float+0x4a>
 8005cb0:	eb1a 0f05 	cmn.w	sl, r5
 8005cb4:	f47f af70 	bne.w	8005b98 <_scanf_float+0x64>
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005cbe:	6022      	str	r2, [r4, #0]
 8005cc0:	f806 3b01 	strb.w	r3, [r6], #1
 8005cc4:	e7e4      	b.n	8005c90 <_scanf_float+0x15c>
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	0610      	lsls	r0, r2, #24
 8005cca:	f57f af65 	bpl.w	8005b98 <_scanf_float+0x64>
 8005cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cd2:	e7f4      	b.n	8005cbe <_scanf_float+0x18a>
 8005cd4:	f1ba 0f00 	cmp.w	sl, #0
 8005cd8:	d10e      	bne.n	8005cf8 <_scanf_float+0x1c4>
 8005cda:	f1b9 0f00 	cmp.w	r9, #0
 8005cde:	d10e      	bne.n	8005cfe <_scanf_float+0x1ca>
 8005ce0:	6822      	ldr	r2, [r4, #0]
 8005ce2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ce6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005cea:	d108      	bne.n	8005cfe <_scanf_float+0x1ca>
 8005cec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005cf0:	f04f 0a01 	mov.w	sl, #1
 8005cf4:	6022      	str	r2, [r4, #0]
 8005cf6:	e7e3      	b.n	8005cc0 <_scanf_float+0x18c>
 8005cf8:	f1ba 0f02 	cmp.w	sl, #2
 8005cfc:	d055      	beq.n	8005daa <_scanf_float+0x276>
 8005cfe:	2d01      	cmp	r5, #1
 8005d00:	d002      	beq.n	8005d08 <_scanf_float+0x1d4>
 8005d02:	2d04      	cmp	r5, #4
 8005d04:	f47f af48 	bne.w	8005b98 <_scanf_float+0x64>
 8005d08:	3501      	adds	r5, #1
 8005d0a:	b2ed      	uxtb	r5, r5
 8005d0c:	e7d8      	b.n	8005cc0 <_scanf_float+0x18c>
 8005d0e:	f1ba 0f01 	cmp.w	sl, #1
 8005d12:	f47f af41 	bne.w	8005b98 <_scanf_float+0x64>
 8005d16:	f04f 0a02 	mov.w	sl, #2
 8005d1a:	e7d1      	b.n	8005cc0 <_scanf_float+0x18c>
 8005d1c:	b97d      	cbnz	r5, 8005d3e <_scanf_float+0x20a>
 8005d1e:	f1b9 0f00 	cmp.w	r9, #0
 8005d22:	f47f af3c 	bne.w	8005b9e <_scanf_float+0x6a>
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005d2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005d30:	f47f af39 	bne.w	8005ba6 <_scanf_float+0x72>
 8005d34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d38:	2501      	movs	r5, #1
 8005d3a:	6022      	str	r2, [r4, #0]
 8005d3c:	e7c0      	b.n	8005cc0 <_scanf_float+0x18c>
 8005d3e:	2d03      	cmp	r5, #3
 8005d40:	d0e2      	beq.n	8005d08 <_scanf_float+0x1d4>
 8005d42:	2d05      	cmp	r5, #5
 8005d44:	e7de      	b.n	8005d04 <_scanf_float+0x1d0>
 8005d46:	2d02      	cmp	r5, #2
 8005d48:	f47f af26 	bne.w	8005b98 <_scanf_float+0x64>
 8005d4c:	2503      	movs	r5, #3
 8005d4e:	e7b7      	b.n	8005cc0 <_scanf_float+0x18c>
 8005d50:	2d06      	cmp	r5, #6
 8005d52:	f47f af21 	bne.w	8005b98 <_scanf_float+0x64>
 8005d56:	2507      	movs	r5, #7
 8005d58:	e7b2      	b.n	8005cc0 <_scanf_float+0x18c>
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	0591      	lsls	r1, r2, #22
 8005d5e:	f57f af1b 	bpl.w	8005b98 <_scanf_float+0x64>
 8005d62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005d66:	6022      	str	r2, [r4, #0]
 8005d68:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d6c:	e7a8      	b.n	8005cc0 <_scanf_float+0x18c>
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005d74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005d78:	d006      	beq.n	8005d88 <_scanf_float+0x254>
 8005d7a:	0550      	lsls	r0, r2, #21
 8005d7c:	f57f af0c 	bpl.w	8005b98 <_scanf_float+0x64>
 8005d80:	f1b9 0f00 	cmp.w	r9, #0
 8005d84:	f43f af0f 	beq.w	8005ba6 <_scanf_float+0x72>
 8005d88:	0591      	lsls	r1, r2, #22
 8005d8a:	bf58      	it	pl
 8005d8c:	9901      	ldrpl	r1, [sp, #4]
 8005d8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d92:	bf58      	it	pl
 8005d94:	eba9 0101 	subpl.w	r1, r9, r1
 8005d98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005d9c:	f04f 0900 	mov.w	r9, #0
 8005da0:	bf58      	it	pl
 8005da2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005da6:	6022      	str	r2, [r4, #0]
 8005da8:	e78a      	b.n	8005cc0 <_scanf_float+0x18c>
 8005daa:	f04f 0a03 	mov.w	sl, #3
 8005dae:	e787      	b.n	8005cc0 <_scanf_float+0x18c>
 8005db0:	4639      	mov	r1, r7
 8005db2:	4640      	mov	r0, r8
 8005db4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005db8:	4798      	blx	r3
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	f43f aedf 	beq.w	8005b7e <_scanf_float+0x4a>
 8005dc0:	e6ea      	b.n	8005b98 <_scanf_float+0x64>
 8005dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dc6:	463a      	mov	r2, r7
 8005dc8:	4640      	mov	r0, r8
 8005dca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dce:	4798      	blx	r3
 8005dd0:	6923      	ldr	r3, [r4, #16]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	6123      	str	r3, [r4, #16]
 8005dd6:	e6ec      	b.n	8005bb2 <_scanf_float+0x7e>
 8005dd8:	1e6b      	subs	r3, r5, #1
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d825      	bhi.n	8005e2a <_scanf_float+0x2f6>
 8005dde:	2d02      	cmp	r5, #2
 8005de0:	d836      	bhi.n	8005e50 <_scanf_float+0x31c>
 8005de2:	455e      	cmp	r6, fp
 8005de4:	f67f aee8 	bls.w	8005bb8 <_scanf_float+0x84>
 8005de8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dec:	463a      	mov	r2, r7
 8005dee:	4640      	mov	r0, r8
 8005df0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005df4:	4798      	blx	r3
 8005df6:	6923      	ldr	r3, [r4, #16]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	e7f1      	b.n	8005de2 <_scanf_float+0x2ae>
 8005dfe:	9802      	ldr	r0, [sp, #8]
 8005e00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005e08:	463a      	mov	r2, r7
 8005e0a:	9002      	str	r0, [sp, #8]
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4798      	blx	r3
 8005e10:	6923      	ldr	r3, [r4, #16]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e1a:	fa5f fa8a 	uxtb.w	sl, sl
 8005e1e:	f1ba 0f02 	cmp.w	sl, #2
 8005e22:	d1ec      	bne.n	8005dfe <_scanf_float+0x2ca>
 8005e24:	3d03      	subs	r5, #3
 8005e26:	b2ed      	uxtb	r5, r5
 8005e28:	1b76      	subs	r6, r6, r5
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	05da      	lsls	r2, r3, #23
 8005e2e:	d52f      	bpl.n	8005e90 <_scanf_float+0x35c>
 8005e30:	055b      	lsls	r3, r3, #21
 8005e32:	d510      	bpl.n	8005e56 <_scanf_float+0x322>
 8005e34:	455e      	cmp	r6, fp
 8005e36:	f67f aebf 	bls.w	8005bb8 <_scanf_float+0x84>
 8005e3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e3e:	463a      	mov	r2, r7
 8005e40:	4640      	mov	r0, r8
 8005e42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e46:	4798      	blx	r3
 8005e48:	6923      	ldr	r3, [r4, #16]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	e7f1      	b.n	8005e34 <_scanf_float+0x300>
 8005e50:	46aa      	mov	sl, r5
 8005e52:	9602      	str	r6, [sp, #8]
 8005e54:	e7df      	b.n	8005e16 <_scanf_float+0x2e2>
 8005e56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	2965      	cmp	r1, #101	; 0x65
 8005e5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e62:	f106 35ff 	add.w	r5, r6, #4294967295
 8005e66:	6123      	str	r3, [r4, #16]
 8005e68:	d00c      	beq.n	8005e84 <_scanf_float+0x350>
 8005e6a:	2945      	cmp	r1, #69	; 0x45
 8005e6c:	d00a      	beq.n	8005e84 <_scanf_float+0x350>
 8005e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e72:	463a      	mov	r2, r7
 8005e74:	4640      	mov	r0, r8
 8005e76:	4798      	blx	r3
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	1eb5      	subs	r5, r6, #2
 8005e82:	6123      	str	r3, [r4, #16]
 8005e84:	463a      	mov	r2, r7
 8005e86:	4640      	mov	r0, r8
 8005e88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e8c:	4798      	blx	r3
 8005e8e:	462e      	mov	r6, r5
 8005e90:	6825      	ldr	r5, [r4, #0]
 8005e92:	f015 0510 	ands.w	r5, r5, #16
 8005e96:	d159      	bne.n	8005f4c <_scanf_float+0x418>
 8005e98:	7035      	strb	r5, [r6, #0]
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea4:	d11c      	bne.n	8005ee0 <_scanf_float+0x3ac>
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	454b      	cmp	r3, r9
 8005eaa:	eba3 0209 	sub.w	r2, r3, r9
 8005eae:	d124      	bne.n	8005efa <_scanf_float+0x3c6>
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	f000 fe8b 	bl	8006bd0 <_strtod_r>
 8005eba:	f8d4 c000 	ldr.w	ip, [r4]
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	f01c 0f02 	tst.w	ip, #2
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	460f      	mov	r7, r1
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	d021      	beq.n	8005f10 <_scanf_float+0x3dc>
 8005ecc:	9903      	ldr	r1, [sp, #12]
 8005ece:	1d1a      	adds	r2, r3, #4
 8005ed0:	600a      	str	r2, [r1, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	e9c3 6700 	strd	r6, r7, [r3]
 8005ed8:	68e3      	ldr	r3, [r4, #12]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60e3      	str	r3, [r4, #12]
 8005ede:	e66c      	b.n	8005bba <_scanf_float+0x86>
 8005ee0:	9b04      	ldr	r3, [sp, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0e4      	beq.n	8005eb0 <_scanf_float+0x37c>
 8005ee6:	9905      	ldr	r1, [sp, #20]
 8005ee8:	230a      	movs	r3, #10
 8005eea:	462a      	mov	r2, r5
 8005eec:	4640      	mov	r0, r8
 8005eee:	3101      	adds	r1, #1
 8005ef0:	f000 fefa 	bl	8006ce8 <_strtol_r>
 8005ef4:	9b04      	ldr	r3, [sp, #16]
 8005ef6:	9e05      	ldr	r6, [sp, #20]
 8005ef8:	1ac2      	subs	r2, r0, r3
 8005efa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005efe:	429e      	cmp	r6, r3
 8005f00:	bf28      	it	cs
 8005f02:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005f06:	4630      	mov	r0, r6
 8005f08:	4911      	ldr	r1, [pc, #68]	; (8005f50 <_scanf_float+0x41c>)
 8005f0a:	f000 f829 	bl	8005f60 <siprintf>
 8005f0e:	e7cf      	b.n	8005eb0 <_scanf_float+0x37c>
 8005f10:	f01c 0f04 	tst.w	ip, #4
 8005f14:	f103 0e04 	add.w	lr, r3, #4
 8005f18:	d003      	beq.n	8005f22 <_scanf_float+0x3ee>
 8005f1a:	9903      	ldr	r1, [sp, #12]
 8005f1c:	f8c1 e000 	str.w	lr, [r1]
 8005f20:	e7d7      	b.n	8005ed2 <_scanf_float+0x39e>
 8005f22:	9a03      	ldr	r2, [sp, #12]
 8005f24:	f8c2 e000 	str.w	lr, [r2]
 8005f28:	f8d3 8000 	ldr.w	r8, [r3]
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	f7fa fd6c 	bl	8000a0c <__aeabi_dcmpun>
 8005f34:	b128      	cbz	r0, 8005f42 <_scanf_float+0x40e>
 8005f36:	4807      	ldr	r0, [pc, #28]	; (8005f54 <_scanf_float+0x420>)
 8005f38:	f000 f80e 	bl	8005f58 <nanf>
 8005f3c:	f8c8 0000 	str.w	r0, [r8]
 8005f40:	e7ca      	b.n	8005ed8 <_scanf_float+0x3a4>
 8005f42:	4630      	mov	r0, r6
 8005f44:	4639      	mov	r1, r7
 8005f46:	f7fa fdbf 	bl	8000ac8 <__aeabi_d2f>
 8005f4a:	e7f7      	b.n	8005f3c <_scanf_float+0x408>
 8005f4c:	2500      	movs	r5, #0
 8005f4e:	e634      	b.n	8005bba <_scanf_float+0x86>
 8005f50:	0800afac 	.word	0x0800afac
 8005f54:	0800b3c8 	.word	0x0800b3c8

08005f58 <nanf>:
 8005f58:	4800      	ldr	r0, [pc, #0]	; (8005f5c <nanf+0x4>)
 8005f5a:	4770      	bx	lr
 8005f5c:	7fc00000 	.word	0x7fc00000

08005f60 <siprintf>:
 8005f60:	b40e      	push	{r1, r2, r3}
 8005f62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f66:	b500      	push	{lr}
 8005f68:	b09c      	sub	sp, #112	; 0x70
 8005f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f6c:	9002      	str	r0, [sp, #8]
 8005f6e:	9006      	str	r0, [sp, #24]
 8005f70:	9107      	str	r1, [sp, #28]
 8005f72:	9104      	str	r1, [sp, #16]
 8005f74:	4808      	ldr	r0, [pc, #32]	; (8005f98 <siprintf+0x38>)
 8005f76:	4909      	ldr	r1, [pc, #36]	; (8005f9c <siprintf+0x3c>)
 8005f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f7c:	9105      	str	r1, [sp, #20]
 8005f7e:	6800      	ldr	r0, [r0, #0]
 8005f80:	a902      	add	r1, sp, #8
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	f002 fe96 	bl	8008cb4 <_svfiprintf_r>
 8005f88:	2200      	movs	r2, #0
 8005f8a:	9b02      	ldr	r3, [sp, #8]
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	b01c      	add	sp, #112	; 0x70
 8005f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f94:	b003      	add	sp, #12
 8005f96:	4770      	bx	lr
 8005f98:	2000001c 	.word	0x2000001c
 8005f9c:	ffff0208 	.word	0xffff0208

08005fa0 <sulp>:
 8005fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	4690      	mov	r8, r2
 8005fa8:	f002 fc2c 	bl	8008804 <__ulp>
 8005fac:	4604      	mov	r4, r0
 8005fae:	460d      	mov	r5, r1
 8005fb0:	f1b8 0f00 	cmp.w	r8, #0
 8005fb4:	d011      	beq.n	8005fda <sulp+0x3a>
 8005fb6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005fba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	dd0b      	ble.n	8005fda <sulp+0x3a>
 8005fc2:	2400      	movs	r4, #0
 8005fc4:	051b      	lsls	r3, r3, #20
 8005fc6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005fca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005fce:	4622      	mov	r2, r4
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	f7fa fa81 	bl	80004d8 <__aeabi_dmul>
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	460d      	mov	r5, r1
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4629      	mov	r1, r5
 8005fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe2:	0000      	movs	r0, r0
 8005fe4:	0000      	movs	r0, r0
	...

08005fe8 <_strtod_l>:
 8005fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	469b      	mov	fp, r3
 8005fee:	2300      	movs	r3, #0
 8005ff0:	b0a1      	sub	sp, #132	; 0x84
 8005ff2:	931c      	str	r3, [sp, #112]	; 0x70
 8005ff4:	4ba1      	ldr	r3, [pc, #644]	; (800627c <_strtod_l+0x294>)
 8005ff6:	4682      	mov	sl, r0
 8005ff8:	681f      	ldr	r7, [r3, #0]
 8005ffa:	460e      	mov	r6, r1
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	9217      	str	r2, [sp, #92]	; 0x5c
 8006000:	f7fa f8a6 	bl	8000150 <strlen>
 8006004:	f04f 0800 	mov.w	r8, #0
 8006008:	4604      	mov	r4, r0
 800600a:	f04f 0900 	mov.w	r9, #0
 800600e:	961b      	str	r6, [sp, #108]	; 0x6c
 8006010:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006012:	781a      	ldrb	r2, [r3, #0]
 8006014:	2a2b      	cmp	r2, #43	; 0x2b
 8006016:	d04c      	beq.n	80060b2 <_strtod_l+0xca>
 8006018:	d83a      	bhi.n	8006090 <_strtod_l+0xa8>
 800601a:	2a0d      	cmp	r2, #13
 800601c:	d833      	bhi.n	8006086 <_strtod_l+0x9e>
 800601e:	2a08      	cmp	r2, #8
 8006020:	d833      	bhi.n	800608a <_strtod_l+0xa2>
 8006022:	2a00      	cmp	r2, #0
 8006024:	d03d      	beq.n	80060a2 <_strtod_l+0xba>
 8006026:	2300      	movs	r3, #0
 8006028:	930c      	str	r3, [sp, #48]	; 0x30
 800602a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800602c:	782b      	ldrb	r3, [r5, #0]
 800602e:	2b30      	cmp	r3, #48	; 0x30
 8006030:	f040 80af 	bne.w	8006192 <_strtod_l+0x1aa>
 8006034:	786b      	ldrb	r3, [r5, #1]
 8006036:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800603a:	2b58      	cmp	r3, #88	; 0x58
 800603c:	d16c      	bne.n	8006118 <_strtod_l+0x130>
 800603e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006040:	4650      	mov	r0, sl
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	ab1c      	add	r3, sp, #112	; 0x70
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	4a8d      	ldr	r2, [pc, #564]	; (8006280 <_strtod_l+0x298>)
 800604a:	f8cd b008 	str.w	fp, [sp, #8]
 800604e:	ab1d      	add	r3, sp, #116	; 0x74
 8006050:	a91b      	add	r1, sp, #108	; 0x6c
 8006052:	f001 fd2f 	bl	8007ab4 <__gethex>
 8006056:	f010 0607 	ands.w	r6, r0, #7
 800605a:	4604      	mov	r4, r0
 800605c:	d005      	beq.n	800606a <_strtod_l+0x82>
 800605e:	2e06      	cmp	r6, #6
 8006060:	d129      	bne.n	80060b6 <_strtod_l+0xce>
 8006062:	2300      	movs	r3, #0
 8006064:	3501      	adds	r5, #1
 8006066:	951b      	str	r5, [sp, #108]	; 0x6c
 8006068:	930c      	str	r3, [sp, #48]	; 0x30
 800606a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800606c:	2b00      	cmp	r3, #0
 800606e:	f040 8596 	bne.w	8006b9e <_strtod_l+0xbb6>
 8006072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006074:	b1d3      	cbz	r3, 80060ac <_strtod_l+0xc4>
 8006076:	4642      	mov	r2, r8
 8006078:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800607c:	4610      	mov	r0, r2
 800607e:	4619      	mov	r1, r3
 8006080:	b021      	add	sp, #132	; 0x84
 8006082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006086:	2a20      	cmp	r2, #32
 8006088:	d1cd      	bne.n	8006026 <_strtod_l+0x3e>
 800608a:	3301      	adds	r3, #1
 800608c:	931b      	str	r3, [sp, #108]	; 0x6c
 800608e:	e7bf      	b.n	8006010 <_strtod_l+0x28>
 8006090:	2a2d      	cmp	r2, #45	; 0x2d
 8006092:	d1c8      	bne.n	8006026 <_strtod_l+0x3e>
 8006094:	2201      	movs	r2, #1
 8006096:	920c      	str	r2, [sp, #48]	; 0x30
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	921b      	str	r2, [sp, #108]	; 0x6c
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1c3      	bne.n	800602a <_strtod_l+0x42>
 80060a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060a4:	961b      	str	r6, [sp, #108]	; 0x6c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 8577 	bne.w	8006b9a <_strtod_l+0xbb2>
 80060ac:	4642      	mov	r2, r8
 80060ae:	464b      	mov	r3, r9
 80060b0:	e7e4      	b.n	800607c <_strtod_l+0x94>
 80060b2:	2200      	movs	r2, #0
 80060b4:	e7ef      	b.n	8006096 <_strtod_l+0xae>
 80060b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80060b8:	b13a      	cbz	r2, 80060ca <_strtod_l+0xe2>
 80060ba:	2135      	movs	r1, #53	; 0x35
 80060bc:	a81e      	add	r0, sp, #120	; 0x78
 80060be:	f002 fca5 	bl	8008a0c <__copybits>
 80060c2:	4650      	mov	r0, sl
 80060c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060c6:	f002 f86d 	bl	80081a4 <_Bfree>
 80060ca:	3e01      	subs	r6, #1
 80060cc:	2e05      	cmp	r6, #5
 80060ce:	d807      	bhi.n	80060e0 <_strtod_l+0xf8>
 80060d0:	e8df f006 	tbb	[pc, r6]
 80060d4:	1d180b0e 	.word	0x1d180b0e
 80060d8:	030e      	.short	0x030e
 80060da:	f04f 0900 	mov.w	r9, #0
 80060de:	46c8      	mov	r8, r9
 80060e0:	0721      	lsls	r1, r4, #28
 80060e2:	d5c2      	bpl.n	800606a <_strtod_l+0x82>
 80060e4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80060e8:	e7bf      	b.n	800606a <_strtod_l+0x82>
 80060ea:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80060ee:	e7f7      	b.n	80060e0 <_strtod_l+0xf8>
 80060f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80060f2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80060f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80060fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060fe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006102:	e7ed      	b.n	80060e0 <_strtod_l+0xf8>
 8006104:	f04f 0800 	mov.w	r8, #0
 8006108:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006284 <_strtod_l+0x29c>
 800610c:	e7e8      	b.n	80060e0 <_strtod_l+0xf8>
 800610e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006112:	f04f 38ff 	mov.w	r8, #4294967295
 8006116:	e7e3      	b.n	80060e0 <_strtod_l+0xf8>
 8006118:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	921b      	str	r2, [sp, #108]	; 0x6c
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d0f9      	beq.n	8006118 <_strtod_l+0x130>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0a0      	beq.n	800606a <_strtod_l+0x82>
 8006128:	2301      	movs	r3, #1
 800612a:	9307      	str	r3, [sp, #28]
 800612c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800612e:	220a      	movs	r2, #10
 8006130:	9308      	str	r3, [sp, #32]
 8006132:	2300      	movs	r3, #0
 8006134:	469b      	mov	fp, r3
 8006136:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800613a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800613c:	7805      	ldrb	r5, [r0, #0]
 800613e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006142:	b2d9      	uxtb	r1, r3
 8006144:	2909      	cmp	r1, #9
 8006146:	d926      	bls.n	8006196 <_strtod_l+0x1ae>
 8006148:	4622      	mov	r2, r4
 800614a:	4639      	mov	r1, r7
 800614c:	f002 fec8 	bl	8008ee0 <strncmp>
 8006150:	2800      	cmp	r0, #0
 8006152:	d032      	beq.n	80061ba <_strtod_l+0x1d2>
 8006154:	2000      	movs	r0, #0
 8006156:	462b      	mov	r3, r5
 8006158:	465c      	mov	r4, fp
 800615a:	4602      	mov	r2, r0
 800615c:	9004      	str	r0, [sp, #16]
 800615e:	2b65      	cmp	r3, #101	; 0x65
 8006160:	d001      	beq.n	8006166 <_strtod_l+0x17e>
 8006162:	2b45      	cmp	r3, #69	; 0x45
 8006164:	d113      	bne.n	800618e <_strtod_l+0x1a6>
 8006166:	b91c      	cbnz	r4, 8006170 <_strtod_l+0x188>
 8006168:	9b07      	ldr	r3, [sp, #28]
 800616a:	4303      	orrs	r3, r0
 800616c:	d099      	beq.n	80060a2 <_strtod_l+0xba>
 800616e:	2400      	movs	r4, #0
 8006170:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006172:	1c73      	adds	r3, r6, #1
 8006174:	931b      	str	r3, [sp, #108]	; 0x6c
 8006176:	7873      	ldrb	r3, [r6, #1]
 8006178:	2b2b      	cmp	r3, #43	; 0x2b
 800617a:	d078      	beq.n	800626e <_strtod_l+0x286>
 800617c:	2b2d      	cmp	r3, #45	; 0x2d
 800617e:	d07b      	beq.n	8006278 <_strtod_l+0x290>
 8006180:	2700      	movs	r7, #0
 8006182:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006186:	2909      	cmp	r1, #9
 8006188:	f240 8082 	bls.w	8006290 <_strtod_l+0x2a8>
 800618c:	961b      	str	r6, [sp, #108]	; 0x6c
 800618e:	2500      	movs	r5, #0
 8006190:	e09e      	b.n	80062d0 <_strtod_l+0x2e8>
 8006192:	2300      	movs	r3, #0
 8006194:	e7c9      	b.n	800612a <_strtod_l+0x142>
 8006196:	f1bb 0f08 	cmp.w	fp, #8
 800619a:	bfd5      	itete	le
 800619c:	9906      	ldrle	r1, [sp, #24]
 800619e:	9905      	ldrgt	r1, [sp, #20]
 80061a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80061a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80061a8:	f100 0001 	add.w	r0, r0, #1
 80061ac:	bfd4      	ite	le
 80061ae:	9306      	strle	r3, [sp, #24]
 80061b0:	9305      	strgt	r3, [sp, #20]
 80061b2:	f10b 0b01 	add.w	fp, fp, #1
 80061b6:	901b      	str	r0, [sp, #108]	; 0x6c
 80061b8:	e7bf      	b.n	800613a <_strtod_l+0x152>
 80061ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061bc:	191a      	adds	r2, r3, r4
 80061be:	921b      	str	r2, [sp, #108]	; 0x6c
 80061c0:	5d1b      	ldrb	r3, [r3, r4]
 80061c2:	f1bb 0f00 	cmp.w	fp, #0
 80061c6:	d036      	beq.n	8006236 <_strtod_l+0x24e>
 80061c8:	465c      	mov	r4, fp
 80061ca:	9004      	str	r0, [sp, #16]
 80061cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80061d0:	2a09      	cmp	r2, #9
 80061d2:	d912      	bls.n	80061fa <_strtod_l+0x212>
 80061d4:	2201      	movs	r2, #1
 80061d6:	e7c2      	b.n	800615e <_strtod_l+0x176>
 80061d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061da:	3001      	adds	r0, #1
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	921b      	str	r2, [sp, #108]	; 0x6c
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	2b30      	cmp	r3, #48	; 0x30
 80061e4:	d0f8      	beq.n	80061d8 <_strtod_l+0x1f0>
 80061e6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80061ea:	2a08      	cmp	r2, #8
 80061ec:	f200 84dc 	bhi.w	8006ba8 <_strtod_l+0xbc0>
 80061f0:	9004      	str	r0, [sp, #16]
 80061f2:	2000      	movs	r0, #0
 80061f4:	4604      	mov	r4, r0
 80061f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80061f8:	9208      	str	r2, [sp, #32]
 80061fa:	3b30      	subs	r3, #48	; 0x30
 80061fc:	f100 0201 	add.w	r2, r0, #1
 8006200:	d013      	beq.n	800622a <_strtod_l+0x242>
 8006202:	9904      	ldr	r1, [sp, #16]
 8006204:	1905      	adds	r5, r0, r4
 8006206:	4411      	add	r1, r2
 8006208:	9104      	str	r1, [sp, #16]
 800620a:	4622      	mov	r2, r4
 800620c:	210a      	movs	r1, #10
 800620e:	42aa      	cmp	r2, r5
 8006210:	d113      	bne.n	800623a <_strtod_l+0x252>
 8006212:	1822      	adds	r2, r4, r0
 8006214:	2a08      	cmp	r2, #8
 8006216:	f104 0401 	add.w	r4, r4, #1
 800621a:	4404      	add	r4, r0
 800621c:	dc1b      	bgt.n	8006256 <_strtod_l+0x26e>
 800621e:	220a      	movs	r2, #10
 8006220:	9906      	ldr	r1, [sp, #24]
 8006222:	fb02 3301 	mla	r3, r2, r1, r3
 8006226:	9306      	str	r3, [sp, #24]
 8006228:	2200      	movs	r2, #0
 800622a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800622c:	4610      	mov	r0, r2
 800622e:	1c59      	adds	r1, r3, #1
 8006230:	911b      	str	r1, [sp, #108]	; 0x6c
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	e7ca      	b.n	80061cc <_strtod_l+0x1e4>
 8006236:	4658      	mov	r0, fp
 8006238:	e7d3      	b.n	80061e2 <_strtod_l+0x1fa>
 800623a:	2a08      	cmp	r2, #8
 800623c:	dc04      	bgt.n	8006248 <_strtod_l+0x260>
 800623e:	9f06      	ldr	r7, [sp, #24]
 8006240:	434f      	muls	r7, r1
 8006242:	9706      	str	r7, [sp, #24]
 8006244:	3201      	adds	r2, #1
 8006246:	e7e2      	b.n	800620e <_strtod_l+0x226>
 8006248:	1c57      	adds	r7, r2, #1
 800624a:	2f10      	cmp	r7, #16
 800624c:	bfde      	ittt	le
 800624e:	9f05      	ldrle	r7, [sp, #20]
 8006250:	434f      	mulle	r7, r1
 8006252:	9705      	strle	r7, [sp, #20]
 8006254:	e7f6      	b.n	8006244 <_strtod_l+0x25c>
 8006256:	2c10      	cmp	r4, #16
 8006258:	bfdf      	itttt	le
 800625a:	220a      	movle	r2, #10
 800625c:	9905      	ldrle	r1, [sp, #20]
 800625e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006262:	9305      	strle	r3, [sp, #20]
 8006264:	e7e0      	b.n	8006228 <_strtod_l+0x240>
 8006266:	2300      	movs	r3, #0
 8006268:	2201      	movs	r2, #1
 800626a:	9304      	str	r3, [sp, #16]
 800626c:	e77c      	b.n	8006168 <_strtod_l+0x180>
 800626e:	2700      	movs	r7, #0
 8006270:	1cb3      	adds	r3, r6, #2
 8006272:	931b      	str	r3, [sp, #108]	; 0x6c
 8006274:	78b3      	ldrb	r3, [r6, #2]
 8006276:	e784      	b.n	8006182 <_strtod_l+0x19a>
 8006278:	2701      	movs	r7, #1
 800627a:	e7f9      	b.n	8006270 <_strtod_l+0x288>
 800627c:	0800b208 	.word	0x0800b208
 8006280:	0800afb4 	.word	0x0800afb4
 8006284:	7ff00000 	.word	0x7ff00000
 8006288:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800628a:	1c59      	adds	r1, r3, #1
 800628c:	911b      	str	r1, [sp, #108]	; 0x6c
 800628e:	785b      	ldrb	r3, [r3, #1]
 8006290:	2b30      	cmp	r3, #48	; 0x30
 8006292:	d0f9      	beq.n	8006288 <_strtod_l+0x2a0>
 8006294:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006298:	2908      	cmp	r1, #8
 800629a:	f63f af78 	bhi.w	800618e <_strtod_l+0x1a6>
 800629e:	f04f 0e0a 	mov.w	lr, #10
 80062a2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80062a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062a8:	9309      	str	r3, [sp, #36]	; 0x24
 80062aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062ac:	1c59      	adds	r1, r3, #1
 80062ae:	911b      	str	r1, [sp, #108]	; 0x6c
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80062b6:	2d09      	cmp	r5, #9
 80062b8:	d935      	bls.n	8006326 <_strtod_l+0x33e>
 80062ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80062bc:	1b49      	subs	r1, r1, r5
 80062be:	2908      	cmp	r1, #8
 80062c0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80062c4:	dc02      	bgt.n	80062cc <_strtod_l+0x2e4>
 80062c6:	4565      	cmp	r5, ip
 80062c8:	bfa8      	it	ge
 80062ca:	4665      	movge	r5, ip
 80062cc:	b107      	cbz	r7, 80062d0 <_strtod_l+0x2e8>
 80062ce:	426d      	negs	r5, r5
 80062d0:	2c00      	cmp	r4, #0
 80062d2:	d14c      	bne.n	800636e <_strtod_l+0x386>
 80062d4:	9907      	ldr	r1, [sp, #28]
 80062d6:	4301      	orrs	r1, r0
 80062d8:	f47f aec7 	bne.w	800606a <_strtod_l+0x82>
 80062dc:	2a00      	cmp	r2, #0
 80062de:	f47f aee0 	bne.w	80060a2 <_strtod_l+0xba>
 80062e2:	2b69      	cmp	r3, #105	; 0x69
 80062e4:	d026      	beq.n	8006334 <_strtod_l+0x34c>
 80062e6:	dc23      	bgt.n	8006330 <_strtod_l+0x348>
 80062e8:	2b49      	cmp	r3, #73	; 0x49
 80062ea:	d023      	beq.n	8006334 <_strtod_l+0x34c>
 80062ec:	2b4e      	cmp	r3, #78	; 0x4e
 80062ee:	f47f aed8 	bne.w	80060a2 <_strtod_l+0xba>
 80062f2:	499c      	ldr	r1, [pc, #624]	; (8006564 <_strtod_l+0x57c>)
 80062f4:	a81b      	add	r0, sp, #108	; 0x6c
 80062f6:	f001 fe2b 	bl	8007f50 <__match>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f43f aed1 	beq.w	80060a2 <_strtod_l+0xba>
 8006300:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b28      	cmp	r3, #40	; 0x28
 8006306:	d12c      	bne.n	8006362 <_strtod_l+0x37a>
 8006308:	4997      	ldr	r1, [pc, #604]	; (8006568 <_strtod_l+0x580>)
 800630a:	aa1e      	add	r2, sp, #120	; 0x78
 800630c:	a81b      	add	r0, sp, #108	; 0x6c
 800630e:	f001 fe33 	bl	8007f78 <__hexnan>
 8006312:	2805      	cmp	r0, #5
 8006314:	d125      	bne.n	8006362 <_strtod_l+0x37a>
 8006316:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006318:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800631c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006320:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006324:	e6a1      	b.n	800606a <_strtod_l+0x82>
 8006326:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800632a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800632e:	e7bc      	b.n	80062aa <_strtod_l+0x2c2>
 8006330:	2b6e      	cmp	r3, #110	; 0x6e
 8006332:	e7dc      	b.n	80062ee <_strtod_l+0x306>
 8006334:	498d      	ldr	r1, [pc, #564]	; (800656c <_strtod_l+0x584>)
 8006336:	a81b      	add	r0, sp, #108	; 0x6c
 8006338:	f001 fe0a 	bl	8007f50 <__match>
 800633c:	2800      	cmp	r0, #0
 800633e:	f43f aeb0 	beq.w	80060a2 <_strtod_l+0xba>
 8006342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006344:	498a      	ldr	r1, [pc, #552]	; (8006570 <_strtod_l+0x588>)
 8006346:	3b01      	subs	r3, #1
 8006348:	a81b      	add	r0, sp, #108	; 0x6c
 800634a:	931b      	str	r3, [sp, #108]	; 0x6c
 800634c:	f001 fe00 	bl	8007f50 <__match>
 8006350:	b910      	cbnz	r0, 8006358 <_strtod_l+0x370>
 8006352:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006354:	3301      	adds	r3, #1
 8006356:	931b      	str	r3, [sp, #108]	; 0x6c
 8006358:	f04f 0800 	mov.w	r8, #0
 800635c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006580 <_strtod_l+0x598>
 8006360:	e683      	b.n	800606a <_strtod_l+0x82>
 8006362:	4884      	ldr	r0, [pc, #528]	; (8006574 <_strtod_l+0x58c>)
 8006364:	f002 fda6 	bl	8008eb4 <nan>
 8006368:	4680      	mov	r8, r0
 800636a:	4689      	mov	r9, r1
 800636c:	e67d      	b.n	800606a <_strtod_l+0x82>
 800636e:	9b04      	ldr	r3, [sp, #16]
 8006370:	f1bb 0f00 	cmp.w	fp, #0
 8006374:	bf08      	it	eq
 8006376:	46a3      	moveq	fp, r4
 8006378:	1aeb      	subs	r3, r5, r3
 800637a:	2c10      	cmp	r4, #16
 800637c:	9806      	ldr	r0, [sp, #24]
 800637e:	4626      	mov	r6, r4
 8006380:	9307      	str	r3, [sp, #28]
 8006382:	bfa8      	it	ge
 8006384:	2610      	movge	r6, #16
 8006386:	f7fa f82d 	bl	80003e4 <__aeabi_ui2d>
 800638a:	2c09      	cmp	r4, #9
 800638c:	4680      	mov	r8, r0
 800638e:	4689      	mov	r9, r1
 8006390:	dd13      	ble.n	80063ba <_strtod_l+0x3d2>
 8006392:	4b79      	ldr	r3, [pc, #484]	; (8006578 <_strtod_l+0x590>)
 8006394:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006398:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800639c:	f7fa f89c 	bl	80004d8 <__aeabi_dmul>
 80063a0:	4680      	mov	r8, r0
 80063a2:	9805      	ldr	r0, [sp, #20]
 80063a4:	4689      	mov	r9, r1
 80063a6:	f7fa f81d 	bl	80003e4 <__aeabi_ui2d>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4640      	mov	r0, r8
 80063b0:	4649      	mov	r1, r9
 80063b2:	f7f9 fedb 	bl	800016c <__adddf3>
 80063b6:	4680      	mov	r8, r0
 80063b8:	4689      	mov	r9, r1
 80063ba:	2c0f      	cmp	r4, #15
 80063bc:	dc36      	bgt.n	800642c <_strtod_l+0x444>
 80063be:	9b07      	ldr	r3, [sp, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f43f ae52 	beq.w	800606a <_strtod_l+0x82>
 80063c6:	dd22      	ble.n	800640e <_strtod_l+0x426>
 80063c8:	2b16      	cmp	r3, #22
 80063ca:	dc09      	bgt.n	80063e0 <_strtod_l+0x3f8>
 80063cc:	4c6a      	ldr	r4, [pc, #424]	; (8006578 <_strtod_l+0x590>)
 80063ce:	4642      	mov	r2, r8
 80063d0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80063d4:	464b      	mov	r3, r9
 80063d6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80063da:	f7fa f87d 	bl	80004d8 <__aeabi_dmul>
 80063de:	e7c3      	b.n	8006368 <_strtod_l+0x380>
 80063e0:	9a07      	ldr	r2, [sp, #28]
 80063e2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80063e6:	4293      	cmp	r3, r2
 80063e8:	db20      	blt.n	800642c <_strtod_l+0x444>
 80063ea:	4d63      	ldr	r5, [pc, #396]	; (8006578 <_strtod_l+0x590>)
 80063ec:	f1c4 040f 	rsb	r4, r4, #15
 80063f0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80063f4:	4642      	mov	r2, r8
 80063f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063fa:	464b      	mov	r3, r9
 80063fc:	f7fa f86c 	bl	80004d8 <__aeabi_dmul>
 8006400:	9b07      	ldr	r3, [sp, #28]
 8006402:	1b1c      	subs	r4, r3, r4
 8006404:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006408:	e9d5 2300 	ldrd	r2, r3, [r5]
 800640c:	e7e5      	b.n	80063da <_strtod_l+0x3f2>
 800640e:	9b07      	ldr	r3, [sp, #28]
 8006410:	3316      	adds	r3, #22
 8006412:	db0b      	blt.n	800642c <_strtod_l+0x444>
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	4a58      	ldr	r2, [pc, #352]	; (8006578 <_strtod_l+0x590>)
 8006418:	1b5d      	subs	r5, r3, r5
 800641a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800641e:	4640      	mov	r0, r8
 8006420:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006424:	4649      	mov	r1, r9
 8006426:	f7fa f981 	bl	800072c <__aeabi_ddiv>
 800642a:	e79d      	b.n	8006368 <_strtod_l+0x380>
 800642c:	9b07      	ldr	r3, [sp, #28]
 800642e:	1ba6      	subs	r6, r4, r6
 8006430:	441e      	add	r6, r3
 8006432:	2e00      	cmp	r6, #0
 8006434:	dd71      	ble.n	800651a <_strtod_l+0x532>
 8006436:	f016 030f 	ands.w	r3, r6, #15
 800643a:	d00a      	beq.n	8006452 <_strtod_l+0x46a>
 800643c:	494e      	ldr	r1, [pc, #312]	; (8006578 <_strtod_l+0x590>)
 800643e:	4642      	mov	r2, r8
 8006440:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006448:	464b      	mov	r3, r9
 800644a:	f7fa f845 	bl	80004d8 <__aeabi_dmul>
 800644e:	4680      	mov	r8, r0
 8006450:	4689      	mov	r9, r1
 8006452:	f036 060f 	bics.w	r6, r6, #15
 8006456:	d050      	beq.n	80064fa <_strtod_l+0x512>
 8006458:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800645c:	dd27      	ble.n	80064ae <_strtod_l+0x4c6>
 800645e:	f04f 0b00 	mov.w	fp, #0
 8006462:	f8cd b010 	str.w	fp, [sp, #16]
 8006466:	f8cd b020 	str.w	fp, [sp, #32]
 800646a:	f8cd b018 	str.w	fp, [sp, #24]
 800646e:	2322      	movs	r3, #34	; 0x22
 8006470:	f04f 0800 	mov.w	r8, #0
 8006474:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006580 <_strtod_l+0x598>
 8006478:	f8ca 3000 	str.w	r3, [sl]
 800647c:	9b08      	ldr	r3, [sp, #32]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f43f adf3 	beq.w	800606a <_strtod_l+0x82>
 8006484:	4650      	mov	r0, sl
 8006486:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006488:	f001 fe8c 	bl	80081a4 <_Bfree>
 800648c:	4650      	mov	r0, sl
 800648e:	9906      	ldr	r1, [sp, #24]
 8006490:	f001 fe88 	bl	80081a4 <_Bfree>
 8006494:	4650      	mov	r0, sl
 8006496:	9904      	ldr	r1, [sp, #16]
 8006498:	f001 fe84 	bl	80081a4 <_Bfree>
 800649c:	4650      	mov	r0, sl
 800649e:	9908      	ldr	r1, [sp, #32]
 80064a0:	f001 fe80 	bl	80081a4 <_Bfree>
 80064a4:	4659      	mov	r1, fp
 80064a6:	4650      	mov	r0, sl
 80064a8:	f001 fe7c 	bl	80081a4 <_Bfree>
 80064ac:	e5dd      	b.n	800606a <_strtod_l+0x82>
 80064ae:	2300      	movs	r3, #0
 80064b0:	4640      	mov	r0, r8
 80064b2:	4649      	mov	r1, r9
 80064b4:	461f      	mov	r7, r3
 80064b6:	1136      	asrs	r6, r6, #4
 80064b8:	2e01      	cmp	r6, #1
 80064ba:	dc21      	bgt.n	8006500 <_strtod_l+0x518>
 80064bc:	b10b      	cbz	r3, 80064c2 <_strtod_l+0x4da>
 80064be:	4680      	mov	r8, r0
 80064c0:	4689      	mov	r9, r1
 80064c2:	4b2e      	ldr	r3, [pc, #184]	; (800657c <_strtod_l+0x594>)
 80064c4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80064c8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80064cc:	4642      	mov	r2, r8
 80064ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064d2:	464b      	mov	r3, r9
 80064d4:	f7fa f800 	bl	80004d8 <__aeabi_dmul>
 80064d8:	4b29      	ldr	r3, [pc, #164]	; (8006580 <_strtod_l+0x598>)
 80064da:	460a      	mov	r2, r1
 80064dc:	400b      	ands	r3, r1
 80064de:	4929      	ldr	r1, [pc, #164]	; (8006584 <_strtod_l+0x59c>)
 80064e0:	4680      	mov	r8, r0
 80064e2:	428b      	cmp	r3, r1
 80064e4:	d8bb      	bhi.n	800645e <_strtod_l+0x476>
 80064e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80064ea:	428b      	cmp	r3, r1
 80064ec:	bf86      	itte	hi
 80064ee:	f04f 38ff 	movhi.w	r8, #4294967295
 80064f2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006588 <_strtod_l+0x5a0>
 80064f6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80064fa:	2300      	movs	r3, #0
 80064fc:	9305      	str	r3, [sp, #20]
 80064fe:	e07e      	b.n	80065fe <_strtod_l+0x616>
 8006500:	07f2      	lsls	r2, r6, #31
 8006502:	d507      	bpl.n	8006514 <_strtod_l+0x52c>
 8006504:	4b1d      	ldr	r3, [pc, #116]	; (800657c <_strtod_l+0x594>)
 8006506:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f7f9 ffe3 	bl	80004d8 <__aeabi_dmul>
 8006512:	2301      	movs	r3, #1
 8006514:	3701      	adds	r7, #1
 8006516:	1076      	asrs	r6, r6, #1
 8006518:	e7ce      	b.n	80064b8 <_strtod_l+0x4d0>
 800651a:	d0ee      	beq.n	80064fa <_strtod_l+0x512>
 800651c:	4276      	negs	r6, r6
 800651e:	f016 020f 	ands.w	r2, r6, #15
 8006522:	d00a      	beq.n	800653a <_strtod_l+0x552>
 8006524:	4b14      	ldr	r3, [pc, #80]	; (8006578 <_strtod_l+0x590>)
 8006526:	4640      	mov	r0, r8
 8006528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800652c:	4649      	mov	r1, r9
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f7fa f8fb 	bl	800072c <__aeabi_ddiv>
 8006536:	4680      	mov	r8, r0
 8006538:	4689      	mov	r9, r1
 800653a:	1136      	asrs	r6, r6, #4
 800653c:	d0dd      	beq.n	80064fa <_strtod_l+0x512>
 800653e:	2e1f      	cmp	r6, #31
 8006540:	dd24      	ble.n	800658c <_strtod_l+0x5a4>
 8006542:	f04f 0b00 	mov.w	fp, #0
 8006546:	f8cd b010 	str.w	fp, [sp, #16]
 800654a:	f8cd b020 	str.w	fp, [sp, #32]
 800654e:	f8cd b018 	str.w	fp, [sp, #24]
 8006552:	2322      	movs	r3, #34	; 0x22
 8006554:	f04f 0800 	mov.w	r8, #0
 8006558:	f04f 0900 	mov.w	r9, #0
 800655c:	f8ca 3000 	str.w	r3, [sl]
 8006560:	e78c      	b.n	800647c <_strtod_l+0x494>
 8006562:	bf00      	nop
 8006564:	0800af85 	.word	0x0800af85
 8006568:	0800afc8 	.word	0x0800afc8
 800656c:	0800af7d 	.word	0x0800af7d
 8006570:	0800b10c 	.word	0x0800b10c
 8006574:	0800b3c8 	.word	0x0800b3c8
 8006578:	0800b2a8 	.word	0x0800b2a8
 800657c:	0800b280 	.word	0x0800b280
 8006580:	7ff00000 	.word	0x7ff00000
 8006584:	7ca00000 	.word	0x7ca00000
 8006588:	7fefffff 	.word	0x7fefffff
 800658c:	f016 0310 	ands.w	r3, r6, #16
 8006590:	bf18      	it	ne
 8006592:	236a      	movne	r3, #106	; 0x6a
 8006594:	4640      	mov	r0, r8
 8006596:	9305      	str	r3, [sp, #20]
 8006598:	4649      	mov	r1, r9
 800659a:	2300      	movs	r3, #0
 800659c:	4fb2      	ldr	r7, [pc, #712]	; (8006868 <_strtod_l+0x880>)
 800659e:	07f2      	lsls	r2, r6, #31
 80065a0:	d504      	bpl.n	80065ac <_strtod_l+0x5c4>
 80065a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065a6:	f7f9 ff97 	bl	80004d8 <__aeabi_dmul>
 80065aa:	2301      	movs	r3, #1
 80065ac:	1076      	asrs	r6, r6, #1
 80065ae:	f107 0708 	add.w	r7, r7, #8
 80065b2:	d1f4      	bne.n	800659e <_strtod_l+0x5b6>
 80065b4:	b10b      	cbz	r3, 80065ba <_strtod_l+0x5d2>
 80065b6:	4680      	mov	r8, r0
 80065b8:	4689      	mov	r9, r1
 80065ba:	9b05      	ldr	r3, [sp, #20]
 80065bc:	b1bb      	cbz	r3, 80065ee <_strtod_l+0x606>
 80065be:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80065c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	4649      	mov	r1, r9
 80065ca:	dd10      	ble.n	80065ee <_strtod_l+0x606>
 80065cc:	2b1f      	cmp	r3, #31
 80065ce:	f340 812b 	ble.w	8006828 <_strtod_l+0x840>
 80065d2:	2b34      	cmp	r3, #52	; 0x34
 80065d4:	bfd8      	it	le
 80065d6:	f04f 32ff 	movle.w	r2, #4294967295
 80065da:	f04f 0800 	mov.w	r8, #0
 80065de:	bfcf      	iteee	gt
 80065e0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80065e4:	3b20      	suble	r3, #32
 80065e6:	fa02 f303 	lslle.w	r3, r2, r3
 80065ea:	ea03 0901 	andle.w	r9, r3, r1
 80065ee:	2200      	movs	r2, #0
 80065f0:	2300      	movs	r3, #0
 80065f2:	4640      	mov	r0, r8
 80065f4:	4649      	mov	r1, r9
 80065f6:	f7fa f9d7 	bl	80009a8 <__aeabi_dcmpeq>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d1a1      	bne.n	8006542 <_strtod_l+0x55a>
 80065fe:	9b06      	ldr	r3, [sp, #24]
 8006600:	465a      	mov	r2, fp
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	4650      	mov	r0, sl
 8006606:	4623      	mov	r3, r4
 8006608:	9908      	ldr	r1, [sp, #32]
 800660a:	f001 fe37 	bl	800827c <__s2b>
 800660e:	9008      	str	r0, [sp, #32]
 8006610:	2800      	cmp	r0, #0
 8006612:	f43f af24 	beq.w	800645e <_strtod_l+0x476>
 8006616:	9b04      	ldr	r3, [sp, #16]
 8006618:	f04f 0b00 	mov.w	fp, #0
 800661c:	1b5d      	subs	r5, r3, r5
 800661e:	9b07      	ldr	r3, [sp, #28]
 8006620:	f8cd b010 	str.w	fp, [sp, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	bfb4      	ite	lt
 8006628:	462b      	movlt	r3, r5
 800662a:	2300      	movge	r3, #0
 800662c:	930e      	str	r3, [sp, #56]	; 0x38
 800662e:	9b07      	ldr	r3, [sp, #28]
 8006630:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006634:	9316      	str	r3, [sp, #88]	; 0x58
 8006636:	9b08      	ldr	r3, [sp, #32]
 8006638:	4650      	mov	r0, sl
 800663a:	6859      	ldr	r1, [r3, #4]
 800663c:	f001 fd72 	bl	8008124 <_Balloc>
 8006640:	9006      	str	r0, [sp, #24]
 8006642:	2800      	cmp	r0, #0
 8006644:	f43f af13 	beq.w	800646e <_strtod_l+0x486>
 8006648:	9b08      	ldr	r3, [sp, #32]
 800664a:	300c      	adds	r0, #12
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	f103 010c 	add.w	r1, r3, #12
 8006652:	3202      	adds	r2, #2
 8006654:	0092      	lsls	r2, r2, #2
 8006656:	f001 fd57 	bl	8008108 <memcpy>
 800665a:	ab1e      	add	r3, sp, #120	; 0x78
 800665c:	9301      	str	r3, [sp, #4]
 800665e:	ab1d      	add	r3, sp, #116	; 0x74
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	4642      	mov	r2, r8
 8006664:	464b      	mov	r3, r9
 8006666:	4650      	mov	r0, sl
 8006668:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800666c:	f002 f944 	bl	80088f8 <__d2b>
 8006670:	901c      	str	r0, [sp, #112]	; 0x70
 8006672:	2800      	cmp	r0, #0
 8006674:	f43f aefb 	beq.w	800646e <_strtod_l+0x486>
 8006678:	2101      	movs	r1, #1
 800667a:	4650      	mov	r0, sl
 800667c:	f001 fe96 	bl	80083ac <__i2b>
 8006680:	4603      	mov	r3, r0
 8006682:	9004      	str	r0, [sp, #16]
 8006684:	2800      	cmp	r0, #0
 8006686:	f43f aef2 	beq.w	800646e <_strtod_l+0x486>
 800668a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800668c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800668e:	2d00      	cmp	r5, #0
 8006690:	bfab      	itete	ge
 8006692:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006694:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006696:	18ee      	addge	r6, r5, r3
 8006698:	1b5c      	sublt	r4, r3, r5
 800669a:	9b05      	ldr	r3, [sp, #20]
 800669c:	bfa8      	it	ge
 800669e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80066a0:	eba5 0503 	sub.w	r5, r5, r3
 80066a4:	4415      	add	r5, r2
 80066a6:	4b71      	ldr	r3, [pc, #452]	; (800686c <_strtod_l+0x884>)
 80066a8:	f105 35ff 	add.w	r5, r5, #4294967295
 80066ac:	bfb8      	it	lt
 80066ae:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80066b0:	429d      	cmp	r5, r3
 80066b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80066b6:	f280 80c9 	bge.w	800684c <_strtod_l+0x864>
 80066ba:	1b5b      	subs	r3, r3, r5
 80066bc:	2b1f      	cmp	r3, #31
 80066be:	f04f 0701 	mov.w	r7, #1
 80066c2:	eba2 0203 	sub.w	r2, r2, r3
 80066c6:	f300 80b6 	bgt.w	8006836 <_strtod_l+0x84e>
 80066ca:	2500      	movs	r5, #0
 80066cc:	fa07 f303 	lsl.w	r3, r7, r3
 80066d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80066d2:	18b7      	adds	r7, r6, r2
 80066d4:	9b05      	ldr	r3, [sp, #20]
 80066d6:	42be      	cmp	r6, r7
 80066d8:	4414      	add	r4, r2
 80066da:	441c      	add	r4, r3
 80066dc:	4633      	mov	r3, r6
 80066de:	bfa8      	it	ge
 80066e0:	463b      	movge	r3, r7
 80066e2:	42a3      	cmp	r3, r4
 80066e4:	bfa8      	it	ge
 80066e6:	4623      	movge	r3, r4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bfc2      	ittt	gt
 80066ec:	1aff      	subgt	r7, r7, r3
 80066ee:	1ae4      	subgt	r4, r4, r3
 80066f0:	1af6      	subgt	r6, r6, r3
 80066f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dd17      	ble.n	8006728 <_strtod_l+0x740>
 80066f8:	461a      	mov	r2, r3
 80066fa:	4650      	mov	r0, sl
 80066fc:	9904      	ldr	r1, [sp, #16]
 80066fe:	f001 ff0f 	bl	8008520 <__pow5mult>
 8006702:	9004      	str	r0, [sp, #16]
 8006704:	2800      	cmp	r0, #0
 8006706:	f43f aeb2 	beq.w	800646e <_strtod_l+0x486>
 800670a:	4601      	mov	r1, r0
 800670c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800670e:	4650      	mov	r0, sl
 8006710:	f001 fe62 	bl	80083d8 <__multiply>
 8006714:	9009      	str	r0, [sp, #36]	; 0x24
 8006716:	2800      	cmp	r0, #0
 8006718:	f43f aea9 	beq.w	800646e <_strtod_l+0x486>
 800671c:	4650      	mov	r0, sl
 800671e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006720:	f001 fd40 	bl	80081a4 <_Bfree>
 8006724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006726:	931c      	str	r3, [sp, #112]	; 0x70
 8006728:	2f00      	cmp	r7, #0
 800672a:	f300 8093 	bgt.w	8006854 <_strtod_l+0x86c>
 800672e:	9b07      	ldr	r3, [sp, #28]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dd08      	ble.n	8006746 <_strtod_l+0x75e>
 8006734:	4650      	mov	r0, sl
 8006736:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006738:	9906      	ldr	r1, [sp, #24]
 800673a:	f001 fef1 	bl	8008520 <__pow5mult>
 800673e:	9006      	str	r0, [sp, #24]
 8006740:	2800      	cmp	r0, #0
 8006742:	f43f ae94 	beq.w	800646e <_strtod_l+0x486>
 8006746:	2c00      	cmp	r4, #0
 8006748:	dd08      	ble.n	800675c <_strtod_l+0x774>
 800674a:	4622      	mov	r2, r4
 800674c:	4650      	mov	r0, sl
 800674e:	9906      	ldr	r1, [sp, #24]
 8006750:	f001 ff40 	bl	80085d4 <__lshift>
 8006754:	9006      	str	r0, [sp, #24]
 8006756:	2800      	cmp	r0, #0
 8006758:	f43f ae89 	beq.w	800646e <_strtod_l+0x486>
 800675c:	2e00      	cmp	r6, #0
 800675e:	dd08      	ble.n	8006772 <_strtod_l+0x78a>
 8006760:	4632      	mov	r2, r6
 8006762:	4650      	mov	r0, sl
 8006764:	9904      	ldr	r1, [sp, #16]
 8006766:	f001 ff35 	bl	80085d4 <__lshift>
 800676a:	9004      	str	r0, [sp, #16]
 800676c:	2800      	cmp	r0, #0
 800676e:	f43f ae7e 	beq.w	800646e <_strtod_l+0x486>
 8006772:	4650      	mov	r0, sl
 8006774:	9a06      	ldr	r2, [sp, #24]
 8006776:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006778:	f001 ffb4 	bl	80086e4 <__mdiff>
 800677c:	4683      	mov	fp, r0
 800677e:	2800      	cmp	r0, #0
 8006780:	f43f ae75 	beq.w	800646e <_strtod_l+0x486>
 8006784:	2400      	movs	r4, #0
 8006786:	68c3      	ldr	r3, [r0, #12]
 8006788:	9904      	ldr	r1, [sp, #16]
 800678a:	60c4      	str	r4, [r0, #12]
 800678c:	930d      	str	r3, [sp, #52]	; 0x34
 800678e:	f001 ff8d 	bl	80086ac <__mcmp>
 8006792:	42a0      	cmp	r0, r4
 8006794:	da70      	bge.n	8006878 <_strtod_l+0x890>
 8006796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006798:	ea53 0308 	orrs.w	r3, r3, r8
 800679c:	f040 8096 	bne.w	80068cc <_strtod_l+0x8e4>
 80067a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f040 8091 	bne.w	80068cc <_strtod_l+0x8e4>
 80067aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067ae:	0d1b      	lsrs	r3, r3, #20
 80067b0:	051b      	lsls	r3, r3, #20
 80067b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80067b6:	f240 8089 	bls.w	80068cc <_strtod_l+0x8e4>
 80067ba:	f8db 3014 	ldr.w	r3, [fp, #20]
 80067be:	b923      	cbnz	r3, 80067ca <_strtod_l+0x7e2>
 80067c0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	f340 8081 	ble.w	80068cc <_strtod_l+0x8e4>
 80067ca:	4659      	mov	r1, fp
 80067cc:	2201      	movs	r2, #1
 80067ce:	4650      	mov	r0, sl
 80067d0:	f001 ff00 	bl	80085d4 <__lshift>
 80067d4:	9904      	ldr	r1, [sp, #16]
 80067d6:	4683      	mov	fp, r0
 80067d8:	f001 ff68 	bl	80086ac <__mcmp>
 80067dc:	2800      	cmp	r0, #0
 80067de:	dd75      	ble.n	80068cc <_strtod_l+0x8e4>
 80067e0:	9905      	ldr	r1, [sp, #20]
 80067e2:	464b      	mov	r3, r9
 80067e4:	4a22      	ldr	r2, [pc, #136]	; (8006870 <_strtod_l+0x888>)
 80067e6:	2900      	cmp	r1, #0
 80067e8:	f000 8091 	beq.w	800690e <_strtod_l+0x926>
 80067ec:	ea02 0109 	and.w	r1, r2, r9
 80067f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80067f4:	f300 808b 	bgt.w	800690e <_strtod_l+0x926>
 80067f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80067fc:	f77f aea9 	ble.w	8006552 <_strtod_l+0x56a>
 8006800:	2300      	movs	r3, #0
 8006802:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <_strtod_l+0x88c>)
 8006804:	4640      	mov	r0, r8
 8006806:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800680a:	4649      	mov	r1, r9
 800680c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006810:	f7f9 fe62 	bl	80004d8 <__aeabi_dmul>
 8006814:	460b      	mov	r3, r1
 8006816:	4303      	orrs	r3, r0
 8006818:	bf08      	it	eq
 800681a:	2322      	moveq	r3, #34	; 0x22
 800681c:	4680      	mov	r8, r0
 800681e:	4689      	mov	r9, r1
 8006820:	bf08      	it	eq
 8006822:	f8ca 3000 	streq.w	r3, [sl]
 8006826:	e62d      	b.n	8006484 <_strtod_l+0x49c>
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	ea03 0808 	and.w	r8, r3, r8
 8006834:	e6db      	b.n	80065ee <_strtod_l+0x606>
 8006836:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800683a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800683e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006842:	35e2      	adds	r5, #226	; 0xe2
 8006844:	fa07 f505 	lsl.w	r5, r7, r5
 8006848:	970f      	str	r7, [sp, #60]	; 0x3c
 800684a:	e742      	b.n	80066d2 <_strtod_l+0x6ea>
 800684c:	2301      	movs	r3, #1
 800684e:	2500      	movs	r5, #0
 8006850:	930f      	str	r3, [sp, #60]	; 0x3c
 8006852:	e73e      	b.n	80066d2 <_strtod_l+0x6ea>
 8006854:	463a      	mov	r2, r7
 8006856:	4650      	mov	r0, sl
 8006858:	991c      	ldr	r1, [sp, #112]	; 0x70
 800685a:	f001 febb 	bl	80085d4 <__lshift>
 800685e:	901c      	str	r0, [sp, #112]	; 0x70
 8006860:	2800      	cmp	r0, #0
 8006862:	f47f af64 	bne.w	800672e <_strtod_l+0x746>
 8006866:	e602      	b.n	800646e <_strtod_l+0x486>
 8006868:	0800afe0 	.word	0x0800afe0
 800686c:	fffffc02 	.word	0xfffffc02
 8006870:	7ff00000 	.word	0x7ff00000
 8006874:	39500000 	.word	0x39500000
 8006878:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800687c:	d166      	bne.n	800694c <_strtod_l+0x964>
 800687e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006884:	b35a      	cbz	r2, 80068de <_strtod_l+0x8f6>
 8006886:	4a9c      	ldr	r2, [pc, #624]	; (8006af8 <_strtod_l+0xb10>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d12c      	bne.n	80068e6 <_strtod_l+0x8fe>
 800688c:	9b05      	ldr	r3, [sp, #20]
 800688e:	4640      	mov	r0, r8
 8006890:	b303      	cbz	r3, 80068d4 <_strtod_l+0x8ec>
 8006892:	464b      	mov	r3, r9
 8006894:	4a99      	ldr	r2, [pc, #612]	; (8006afc <_strtod_l+0xb14>)
 8006896:	f04f 31ff 	mov.w	r1, #4294967295
 800689a:	401a      	ands	r2, r3
 800689c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80068a0:	d81b      	bhi.n	80068da <_strtod_l+0x8f2>
 80068a2:	0d12      	lsrs	r2, r2, #20
 80068a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80068a8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ac:	4298      	cmp	r0, r3
 80068ae:	d11a      	bne.n	80068e6 <_strtod_l+0x8fe>
 80068b0:	4b93      	ldr	r3, [pc, #588]	; (8006b00 <_strtod_l+0xb18>)
 80068b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d102      	bne.n	80068be <_strtod_l+0x8d6>
 80068b8:	3001      	adds	r0, #1
 80068ba:	f43f add8 	beq.w	800646e <_strtod_l+0x486>
 80068be:	f04f 0800 	mov.w	r8, #0
 80068c2:	4b8e      	ldr	r3, [pc, #568]	; (8006afc <_strtod_l+0xb14>)
 80068c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c6:	401a      	ands	r2, r3
 80068c8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80068cc:	9b05      	ldr	r3, [sp, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d196      	bne.n	8006800 <_strtod_l+0x818>
 80068d2:	e5d7      	b.n	8006484 <_strtod_l+0x49c>
 80068d4:	f04f 33ff 	mov.w	r3, #4294967295
 80068d8:	e7e8      	b.n	80068ac <_strtod_l+0x8c4>
 80068da:	460b      	mov	r3, r1
 80068dc:	e7e6      	b.n	80068ac <_strtod_l+0x8c4>
 80068de:	ea53 0308 	orrs.w	r3, r3, r8
 80068e2:	f43f af7d 	beq.w	80067e0 <_strtod_l+0x7f8>
 80068e6:	b1e5      	cbz	r5, 8006922 <_strtod_l+0x93a>
 80068e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ea:	421d      	tst	r5, r3
 80068ec:	d0ee      	beq.n	80068cc <_strtod_l+0x8e4>
 80068ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068f0:	4640      	mov	r0, r8
 80068f2:	4649      	mov	r1, r9
 80068f4:	9a05      	ldr	r2, [sp, #20]
 80068f6:	b1c3      	cbz	r3, 800692a <_strtod_l+0x942>
 80068f8:	f7ff fb52 	bl	8005fa0 <sulp>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006904:	f7f9 fc32 	bl	800016c <__adddf3>
 8006908:	4680      	mov	r8, r0
 800690a:	4689      	mov	r9, r1
 800690c:	e7de      	b.n	80068cc <_strtod_l+0x8e4>
 800690e:	4013      	ands	r3, r2
 8006910:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006914:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006918:	f04f 38ff 	mov.w	r8, #4294967295
 800691c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006920:	e7d4      	b.n	80068cc <_strtod_l+0x8e4>
 8006922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006924:	ea13 0f08 	tst.w	r3, r8
 8006928:	e7e0      	b.n	80068ec <_strtod_l+0x904>
 800692a:	f7ff fb39 	bl	8005fa0 <sulp>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006936:	f7f9 fc17 	bl	8000168 <__aeabi_dsub>
 800693a:	2200      	movs	r2, #0
 800693c:	2300      	movs	r3, #0
 800693e:	4680      	mov	r8, r0
 8006940:	4689      	mov	r9, r1
 8006942:	f7fa f831 	bl	80009a8 <__aeabi_dcmpeq>
 8006946:	2800      	cmp	r0, #0
 8006948:	d0c0      	beq.n	80068cc <_strtod_l+0x8e4>
 800694a:	e602      	b.n	8006552 <_strtod_l+0x56a>
 800694c:	4658      	mov	r0, fp
 800694e:	9904      	ldr	r1, [sp, #16]
 8006950:	f002 f82e 	bl	80089b0 <__ratio>
 8006954:	2200      	movs	r2, #0
 8006956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800695a:	4606      	mov	r6, r0
 800695c:	460f      	mov	r7, r1
 800695e:	f7fa f837 	bl	80009d0 <__aeabi_dcmple>
 8006962:	2800      	cmp	r0, #0
 8006964:	d075      	beq.n	8006a52 <_strtod_l+0xa6a>
 8006966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006968:	2b00      	cmp	r3, #0
 800696a:	d047      	beq.n	80069fc <_strtod_l+0xa14>
 800696c:	2600      	movs	r6, #0
 800696e:	4f65      	ldr	r7, [pc, #404]	; (8006b04 <_strtod_l+0xb1c>)
 8006970:	4d64      	ldr	r5, [pc, #400]	; (8006b04 <_strtod_l+0xb1c>)
 8006972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006978:	0d1b      	lsrs	r3, r3, #20
 800697a:	051b      	lsls	r3, r3, #20
 800697c:	930f      	str	r3, [sp, #60]	; 0x3c
 800697e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006980:	4b61      	ldr	r3, [pc, #388]	; (8006b08 <_strtod_l+0xb20>)
 8006982:	429a      	cmp	r2, r3
 8006984:	f040 80c8 	bne.w	8006b18 <_strtod_l+0xb30>
 8006988:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800698c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006992:	4640      	mov	r0, r8
 8006994:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006998:	4649      	mov	r1, r9
 800699a:	f001 ff33 	bl	8008804 <__ulp>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4630      	mov	r0, r6
 80069a4:	4639      	mov	r1, r7
 80069a6:	f7f9 fd97 	bl	80004d8 <__aeabi_dmul>
 80069aa:	4642      	mov	r2, r8
 80069ac:	464b      	mov	r3, r9
 80069ae:	f7f9 fbdd 	bl	800016c <__adddf3>
 80069b2:	460b      	mov	r3, r1
 80069b4:	4951      	ldr	r1, [pc, #324]	; (8006afc <_strtod_l+0xb14>)
 80069b6:	4a55      	ldr	r2, [pc, #340]	; (8006b0c <_strtod_l+0xb24>)
 80069b8:	4019      	ands	r1, r3
 80069ba:	4291      	cmp	r1, r2
 80069bc:	4680      	mov	r8, r0
 80069be:	d95e      	bls.n	8006a7e <_strtod_l+0xa96>
 80069c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d103      	bne.n	80069d2 <_strtod_l+0x9ea>
 80069ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069cc:	3301      	adds	r3, #1
 80069ce:	f43f ad4e 	beq.w	800646e <_strtod_l+0x486>
 80069d2:	f04f 38ff 	mov.w	r8, #4294967295
 80069d6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006b00 <_strtod_l+0xb18>
 80069da:	4650      	mov	r0, sl
 80069dc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80069de:	f001 fbe1 	bl	80081a4 <_Bfree>
 80069e2:	4650      	mov	r0, sl
 80069e4:	9906      	ldr	r1, [sp, #24]
 80069e6:	f001 fbdd 	bl	80081a4 <_Bfree>
 80069ea:	4650      	mov	r0, sl
 80069ec:	9904      	ldr	r1, [sp, #16]
 80069ee:	f001 fbd9 	bl	80081a4 <_Bfree>
 80069f2:	4659      	mov	r1, fp
 80069f4:	4650      	mov	r0, sl
 80069f6:	f001 fbd5 	bl	80081a4 <_Bfree>
 80069fa:	e61c      	b.n	8006636 <_strtod_l+0x64e>
 80069fc:	f1b8 0f00 	cmp.w	r8, #0
 8006a00:	d119      	bne.n	8006a36 <_strtod_l+0xa4e>
 8006a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a08:	b9e3      	cbnz	r3, 8006a44 <_strtod_l+0xa5c>
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	4639      	mov	r1, r7
 8006a10:	4b3c      	ldr	r3, [pc, #240]	; (8006b04 <_strtod_l+0xb1c>)
 8006a12:	f7f9 ffd3 	bl	80009bc <__aeabi_dcmplt>
 8006a16:	b9c8      	cbnz	r0, 8006a4c <_strtod_l+0xa64>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	4b3c      	ldr	r3, [pc, #240]	; (8006b10 <_strtod_l+0xb28>)
 8006a20:	f7f9 fd5a 	bl	80004d8 <__aeabi_dmul>
 8006a24:	4604      	mov	r4, r0
 8006a26:	460d      	mov	r5, r1
 8006a28:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006a2c:	9418      	str	r4, [sp, #96]	; 0x60
 8006a2e:	9319      	str	r3, [sp, #100]	; 0x64
 8006a30:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006a34:	e79d      	b.n	8006972 <_strtod_l+0x98a>
 8006a36:	f1b8 0f01 	cmp.w	r8, #1
 8006a3a:	d103      	bne.n	8006a44 <_strtod_l+0xa5c>
 8006a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f43f ad87 	beq.w	8006552 <_strtod_l+0x56a>
 8006a44:	2600      	movs	r6, #0
 8006a46:	2400      	movs	r4, #0
 8006a48:	4f32      	ldr	r7, [pc, #200]	; (8006b14 <_strtod_l+0xb2c>)
 8006a4a:	e791      	b.n	8006970 <_strtod_l+0x988>
 8006a4c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006a4e:	4d30      	ldr	r5, [pc, #192]	; (8006b10 <_strtod_l+0xb28>)
 8006a50:	e7ea      	b.n	8006a28 <_strtod_l+0xa40>
 8006a52:	4b2f      	ldr	r3, [pc, #188]	; (8006b10 <_strtod_l+0xb28>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	4630      	mov	r0, r6
 8006a58:	4639      	mov	r1, r7
 8006a5a:	f7f9 fd3d 	bl	80004d8 <__aeabi_dmul>
 8006a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a60:	4604      	mov	r4, r0
 8006a62:	460d      	mov	r5, r1
 8006a64:	b933      	cbnz	r3, 8006a74 <_strtod_l+0xa8c>
 8006a66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a6a:	9010      	str	r0, [sp, #64]	; 0x40
 8006a6c:	9311      	str	r3, [sp, #68]	; 0x44
 8006a6e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a72:	e77e      	b.n	8006972 <_strtod_l+0x98a>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006a7c:	e7f7      	b.n	8006a6e <_strtod_l+0xa86>
 8006a7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006a82:	9b05      	ldr	r3, [sp, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1a8      	bne.n	80069da <_strtod_l+0x9f2>
 8006a88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a8e:	0d1b      	lsrs	r3, r3, #20
 8006a90:	051b      	lsls	r3, r3, #20
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d1a1      	bne.n	80069da <_strtod_l+0x9f2>
 8006a96:	4620      	mov	r0, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7fa f87d 	bl	8000b98 <__aeabi_d2lz>
 8006a9e:	f7f9 fced 	bl	800047c <__aeabi_l2d>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	f7f9 fb5d 	bl	8000168 <__aeabi_dsub>
 8006aae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ab4:	ea43 0308 	orr.w	r3, r3, r8
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	4604      	mov	r4, r0
 8006abc:	460d      	mov	r5, r1
 8006abe:	d066      	beq.n	8006b8e <_strtod_l+0xba6>
 8006ac0:	a309      	add	r3, pc, #36	; (adr r3, 8006ae8 <_strtod_l+0xb00>)
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f7f9 ff79 	bl	80009bc <__aeabi_dcmplt>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	f47f acda 	bne.w	8006484 <_strtod_l+0x49c>
 8006ad0:	a307      	add	r3, pc, #28	; (adr r3, 8006af0 <_strtod_l+0xb08>)
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	4629      	mov	r1, r5
 8006ada:	f7f9 ff8d 	bl	80009f8 <__aeabi_dcmpgt>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	f43f af7b 	beq.w	80069da <_strtod_l+0x9f2>
 8006ae4:	e4ce      	b.n	8006484 <_strtod_l+0x49c>
 8006ae6:	bf00      	nop
 8006ae8:	94a03595 	.word	0x94a03595
 8006aec:	3fdfffff 	.word	0x3fdfffff
 8006af0:	35afe535 	.word	0x35afe535
 8006af4:	3fe00000 	.word	0x3fe00000
 8006af8:	000fffff 	.word	0x000fffff
 8006afc:	7ff00000 	.word	0x7ff00000
 8006b00:	7fefffff 	.word	0x7fefffff
 8006b04:	3ff00000 	.word	0x3ff00000
 8006b08:	7fe00000 	.word	0x7fe00000
 8006b0c:	7c9fffff 	.word	0x7c9fffff
 8006b10:	3fe00000 	.word	0x3fe00000
 8006b14:	bff00000 	.word	0xbff00000
 8006b18:	9b05      	ldr	r3, [sp, #20]
 8006b1a:	b313      	cbz	r3, 8006b62 <_strtod_l+0xb7a>
 8006b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b22:	d81e      	bhi.n	8006b62 <_strtod_l+0xb7a>
 8006b24:	a326      	add	r3, pc, #152	; (adr r3, 8006bc0 <_strtod_l+0xbd8>)
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7f9 ff4f 	bl	80009d0 <__aeabi_dcmple>
 8006b32:	b190      	cbz	r0, 8006b5a <_strtod_l+0xb72>
 8006b34:	4629      	mov	r1, r5
 8006b36:	4620      	mov	r0, r4
 8006b38:	f7f9 ffa6 	bl	8000a88 <__aeabi_d2uiz>
 8006b3c:	2801      	cmp	r0, #1
 8006b3e:	bf38      	it	cc
 8006b40:	2001      	movcc	r0, #1
 8006b42:	f7f9 fc4f 	bl	80003e4 <__aeabi_ui2d>
 8006b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b48:	4604      	mov	r4, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	b9d3      	cbnz	r3, 8006b84 <_strtod_l+0xb9c>
 8006b4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b52:	9012      	str	r0, [sp, #72]	; 0x48
 8006b54:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b56:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006b5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b5c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006b60:	1a9f      	subs	r7, r3, r2
 8006b62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b66:	f001 fe4d 	bl	8008804 <__ulp>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4630      	mov	r0, r6
 8006b70:	4639      	mov	r1, r7
 8006b72:	f7f9 fcb1 	bl	80004d8 <__aeabi_dmul>
 8006b76:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b7a:	f7f9 faf7 	bl	800016c <__adddf3>
 8006b7e:	4680      	mov	r8, r0
 8006b80:	4689      	mov	r9, r1
 8006b82:	e77e      	b.n	8006a82 <_strtod_l+0xa9a>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006b8c:	e7e3      	b.n	8006b56 <_strtod_l+0xb6e>
 8006b8e:	a30e      	add	r3, pc, #56	; (adr r3, 8006bc8 <_strtod_l+0xbe0>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f7f9 ff12 	bl	80009bc <__aeabi_dcmplt>
 8006b98:	e7a1      	b.n	8006ade <_strtod_l+0xaf6>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	930c      	str	r3, [sp, #48]	; 0x30
 8006b9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ba0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	f7ff ba65 	b.w	8006072 <_strtod_l+0x8a>
 8006ba8:	2b65      	cmp	r3, #101	; 0x65
 8006baa:	f43f ab5c 	beq.w	8006266 <_strtod_l+0x27e>
 8006bae:	2b45      	cmp	r3, #69	; 0x45
 8006bb0:	f43f ab59 	beq.w	8006266 <_strtod_l+0x27e>
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f7ff bb8d 	b.w	80062d4 <_strtod_l+0x2ec>
 8006bba:	bf00      	nop
 8006bbc:	f3af 8000 	nop.w
 8006bc0:	ffc00000 	.word	0xffc00000
 8006bc4:	41dfffff 	.word	0x41dfffff
 8006bc8:	94a03595 	.word	0x94a03595
 8006bcc:	3fcfffff 	.word	0x3fcfffff

08006bd0 <_strtod_r>:
 8006bd0:	4b01      	ldr	r3, [pc, #4]	; (8006bd8 <_strtod_r+0x8>)
 8006bd2:	f7ff ba09 	b.w	8005fe8 <_strtod_l>
 8006bd6:	bf00      	nop
 8006bd8:	20000084 	.word	0x20000084

08006bdc <_strtol_l.isra.0>:
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be2:	4686      	mov	lr, r0
 8006be4:	d001      	beq.n	8006bea <_strtol_l.isra.0+0xe>
 8006be6:	2b24      	cmp	r3, #36	; 0x24
 8006be8:	d906      	bls.n	8006bf8 <_strtol_l.isra.0+0x1c>
 8006bea:	f7fe fb11 	bl	8005210 <__errno>
 8006bee:	2316      	movs	r3, #22
 8006bf0:	6003      	str	r3, [r0, #0]
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf8:	468c      	mov	ip, r1
 8006bfa:	4e3a      	ldr	r6, [pc, #232]	; (8006ce4 <_strtol_l.isra.0+0x108>)
 8006bfc:	4660      	mov	r0, ip
 8006bfe:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006c02:	5da5      	ldrb	r5, [r4, r6]
 8006c04:	f015 0508 	ands.w	r5, r5, #8
 8006c08:	d1f8      	bne.n	8006bfc <_strtol_l.isra.0+0x20>
 8006c0a:	2c2d      	cmp	r4, #45	; 0x2d
 8006c0c:	d133      	bne.n	8006c76 <_strtol_l.isra.0+0x9a>
 8006c0e:	f04f 0801 	mov.w	r8, #1
 8006c12:	f89c 4000 	ldrb.w	r4, [ip]
 8006c16:	f100 0c02 	add.w	ip, r0, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d05d      	beq.n	8006cda <_strtol_l.isra.0+0xfe>
 8006c1e:	2b10      	cmp	r3, #16
 8006c20:	d10c      	bne.n	8006c3c <_strtol_l.isra.0+0x60>
 8006c22:	2c30      	cmp	r4, #48	; 0x30
 8006c24:	d10a      	bne.n	8006c3c <_strtol_l.isra.0+0x60>
 8006c26:	f89c 0000 	ldrb.w	r0, [ip]
 8006c2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006c2e:	2858      	cmp	r0, #88	; 0x58
 8006c30:	d14e      	bne.n	8006cd0 <_strtol_l.isra.0+0xf4>
 8006c32:	2310      	movs	r3, #16
 8006c34:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006c38:	f10c 0c02 	add.w	ip, ip, #2
 8006c3c:	2500      	movs	r5, #0
 8006c3e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006c42:	3f01      	subs	r7, #1
 8006c44:	fbb7 f9f3 	udiv	r9, r7, r3
 8006c48:	4628      	mov	r0, r5
 8006c4a:	fb03 7a19 	mls	sl, r3, r9, r7
 8006c4e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006c52:	2e09      	cmp	r6, #9
 8006c54:	d818      	bhi.n	8006c88 <_strtol_l.isra.0+0xac>
 8006c56:	4634      	mov	r4, r6
 8006c58:	42a3      	cmp	r3, r4
 8006c5a:	dd24      	ble.n	8006ca6 <_strtol_l.isra.0+0xca>
 8006c5c:	2d00      	cmp	r5, #0
 8006c5e:	db1f      	blt.n	8006ca0 <_strtol_l.isra.0+0xc4>
 8006c60:	4581      	cmp	r9, r0
 8006c62:	d31d      	bcc.n	8006ca0 <_strtol_l.isra.0+0xc4>
 8006c64:	d101      	bne.n	8006c6a <_strtol_l.isra.0+0x8e>
 8006c66:	45a2      	cmp	sl, r4
 8006c68:	db1a      	blt.n	8006ca0 <_strtol_l.isra.0+0xc4>
 8006c6a:	2501      	movs	r5, #1
 8006c6c:	fb00 4003 	mla	r0, r0, r3, r4
 8006c70:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006c74:	e7eb      	b.n	8006c4e <_strtol_l.isra.0+0x72>
 8006c76:	2c2b      	cmp	r4, #43	; 0x2b
 8006c78:	bf08      	it	eq
 8006c7a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006c7e:	46a8      	mov	r8, r5
 8006c80:	bf08      	it	eq
 8006c82:	f100 0c02 	addeq.w	ip, r0, #2
 8006c86:	e7c8      	b.n	8006c1a <_strtol_l.isra.0+0x3e>
 8006c88:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006c8c:	2e19      	cmp	r6, #25
 8006c8e:	d801      	bhi.n	8006c94 <_strtol_l.isra.0+0xb8>
 8006c90:	3c37      	subs	r4, #55	; 0x37
 8006c92:	e7e1      	b.n	8006c58 <_strtol_l.isra.0+0x7c>
 8006c94:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006c98:	2e19      	cmp	r6, #25
 8006c9a:	d804      	bhi.n	8006ca6 <_strtol_l.isra.0+0xca>
 8006c9c:	3c57      	subs	r4, #87	; 0x57
 8006c9e:	e7db      	b.n	8006c58 <_strtol_l.isra.0+0x7c>
 8006ca0:	f04f 35ff 	mov.w	r5, #4294967295
 8006ca4:	e7e4      	b.n	8006c70 <_strtol_l.isra.0+0x94>
 8006ca6:	2d00      	cmp	r5, #0
 8006ca8:	da08      	bge.n	8006cbc <_strtol_l.isra.0+0xe0>
 8006caa:	2322      	movs	r3, #34	; 0x22
 8006cac:	4638      	mov	r0, r7
 8006cae:	f8ce 3000 	str.w	r3, [lr]
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	d09e      	beq.n	8006bf4 <_strtol_l.isra.0+0x18>
 8006cb6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006cba:	e007      	b.n	8006ccc <_strtol_l.isra.0+0xf0>
 8006cbc:	f1b8 0f00 	cmp.w	r8, #0
 8006cc0:	d000      	beq.n	8006cc4 <_strtol_l.isra.0+0xe8>
 8006cc2:	4240      	negs	r0, r0
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	d095      	beq.n	8006bf4 <_strtol_l.isra.0+0x18>
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	d1f4      	bne.n	8006cb6 <_strtol_l.isra.0+0xda>
 8006ccc:	6011      	str	r1, [r2, #0]
 8006cce:	e791      	b.n	8006bf4 <_strtol_l.isra.0+0x18>
 8006cd0:	2430      	movs	r4, #48	; 0x30
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1b2      	bne.n	8006c3c <_strtol_l.isra.0+0x60>
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	e7b0      	b.n	8006c3c <_strtol_l.isra.0+0x60>
 8006cda:	2c30      	cmp	r4, #48	; 0x30
 8006cdc:	d0a3      	beq.n	8006c26 <_strtol_l.isra.0+0x4a>
 8006cde:	230a      	movs	r3, #10
 8006ce0:	e7ac      	b.n	8006c3c <_strtol_l.isra.0+0x60>
 8006ce2:	bf00      	nop
 8006ce4:	0800b009 	.word	0x0800b009

08006ce8 <_strtol_r>:
 8006ce8:	f7ff bf78 	b.w	8006bdc <_strtol_l.isra.0>

08006cec <quorem>:
 8006cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	6903      	ldr	r3, [r0, #16]
 8006cf2:	690c      	ldr	r4, [r1, #16]
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	42a3      	cmp	r3, r4
 8006cf8:	f2c0 8083 	blt.w	8006e02 <quorem+0x116>
 8006cfc:	3c01      	subs	r4, #1
 8006cfe:	f100 0514 	add.w	r5, r0, #20
 8006d02:	f101 0814 	add.w	r8, r1, #20
 8006d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d14:	3301      	adds	r3, #1
 8006d16:	429a      	cmp	r2, r3
 8006d18:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d24:	d332      	bcc.n	8006d8c <quorem+0xa0>
 8006d26:	f04f 0e00 	mov.w	lr, #0
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	46ac      	mov	ip, r5
 8006d2e:	46f2      	mov	sl, lr
 8006d30:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d34:	b293      	uxth	r3, r2
 8006d36:	fb06 e303 	mla	r3, r6, r3, lr
 8006d3a:	0c12      	lsrs	r2, r2, #16
 8006d3c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d40:	fb06 e202 	mla	r2, r6, r2, lr
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	ebaa 0303 	sub.w	r3, sl, r3
 8006d4a:	f8dc a000 	ldr.w	sl, [ip]
 8006d4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d52:	fa1f fa8a 	uxth.w	sl, sl
 8006d56:	4453      	add	r3, sl
 8006d58:	fa1f fa82 	uxth.w	sl, r2
 8006d5c:	f8dc 2000 	ldr.w	r2, [ip]
 8006d60:	4581      	cmp	r9, r0
 8006d62:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006d66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d70:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d74:	f84c 3b04 	str.w	r3, [ip], #4
 8006d78:	d2da      	bcs.n	8006d30 <quorem+0x44>
 8006d7a:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d7e:	b92b      	cbnz	r3, 8006d8c <quorem+0xa0>
 8006d80:	9b01      	ldr	r3, [sp, #4]
 8006d82:	3b04      	subs	r3, #4
 8006d84:	429d      	cmp	r5, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	d32f      	bcc.n	8006dea <quorem+0xfe>
 8006d8a:	613c      	str	r4, [r7, #16]
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f001 fc8d 	bl	80086ac <__mcmp>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	db25      	blt.n	8006de2 <quorem+0xf6>
 8006d96:	4628      	mov	r0, r5
 8006d98:	f04f 0c00 	mov.w	ip, #0
 8006d9c:	3601      	adds	r6, #1
 8006d9e:	f858 1b04 	ldr.w	r1, [r8], #4
 8006da2:	f8d0 e000 	ldr.w	lr, [r0]
 8006da6:	b28b      	uxth	r3, r1
 8006da8:	ebac 0303 	sub.w	r3, ip, r3
 8006dac:	fa1f f28e 	uxth.w	r2, lr
 8006db0:	4413      	add	r3, r2
 8006db2:	0c0a      	lsrs	r2, r1, #16
 8006db4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006db8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dc2:	45c1      	cmp	r9, r8
 8006dc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006dc8:	f840 3b04 	str.w	r3, [r0], #4
 8006dcc:	d2e7      	bcs.n	8006d9e <quorem+0xb2>
 8006dce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dd6:	b922      	cbnz	r2, 8006de2 <quorem+0xf6>
 8006dd8:	3b04      	subs	r3, #4
 8006dda:	429d      	cmp	r5, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	d30a      	bcc.n	8006df6 <quorem+0x10a>
 8006de0:	613c      	str	r4, [r7, #16]
 8006de2:	4630      	mov	r0, r6
 8006de4:	b003      	add	sp, #12
 8006de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dea:	6812      	ldr	r2, [r2, #0]
 8006dec:	3b04      	subs	r3, #4
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	d1cb      	bne.n	8006d8a <quorem+0x9e>
 8006df2:	3c01      	subs	r4, #1
 8006df4:	e7c6      	b.n	8006d84 <quorem+0x98>
 8006df6:	6812      	ldr	r2, [r2, #0]
 8006df8:	3b04      	subs	r3, #4
 8006dfa:	2a00      	cmp	r2, #0
 8006dfc:	d1f0      	bne.n	8006de0 <quorem+0xf4>
 8006dfe:	3c01      	subs	r4, #1
 8006e00:	e7eb      	b.n	8006dda <quorem+0xee>
 8006e02:	2000      	movs	r0, #0
 8006e04:	e7ee      	b.n	8006de4 <quorem+0xf8>
	...

08006e08 <_dtoa_r>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	461f      	mov	r7, r3
 8006e10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e12:	b099      	sub	sp, #100	; 0x64
 8006e14:	4605      	mov	r5, r0
 8006e16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006e1e:	b974      	cbnz	r4, 8006e3e <_dtoa_r+0x36>
 8006e20:	2010      	movs	r0, #16
 8006e22:	f001 f949 	bl	80080b8 <malloc>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6268      	str	r0, [r5, #36]	; 0x24
 8006e2a:	b920      	cbnz	r0, 8006e36 <_dtoa_r+0x2e>
 8006e2c:	21ea      	movs	r1, #234	; 0xea
 8006e2e:	4bae      	ldr	r3, [pc, #696]	; (80070e8 <_dtoa_r+0x2e0>)
 8006e30:	48ae      	ldr	r0, [pc, #696]	; (80070ec <_dtoa_r+0x2e4>)
 8006e32:	f002 f875 	bl	8008f20 <__assert_func>
 8006e36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e3a:	6004      	str	r4, [r0, #0]
 8006e3c:	60c4      	str	r4, [r0, #12]
 8006e3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e40:	6819      	ldr	r1, [r3, #0]
 8006e42:	b151      	cbz	r1, 8006e5a <_dtoa_r+0x52>
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	2301      	movs	r3, #1
 8006e48:	4093      	lsls	r3, r2
 8006e4a:	604a      	str	r2, [r1, #4]
 8006e4c:	608b      	str	r3, [r1, #8]
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f001 f9a8 	bl	80081a4 <_Bfree>
 8006e54:	2200      	movs	r2, #0
 8006e56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	1e3b      	subs	r3, r7, #0
 8006e5c:	bfaf      	iteee	ge
 8006e5e:	2300      	movge	r3, #0
 8006e60:	2201      	movlt	r2, #1
 8006e62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e66:	9305      	strlt	r3, [sp, #20]
 8006e68:	bfa8      	it	ge
 8006e6a:	f8c8 3000 	strge.w	r3, [r8]
 8006e6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006e72:	4b9f      	ldr	r3, [pc, #636]	; (80070f0 <_dtoa_r+0x2e8>)
 8006e74:	bfb8      	it	lt
 8006e76:	f8c8 2000 	strlt.w	r2, [r8]
 8006e7a:	ea33 0309 	bics.w	r3, r3, r9
 8006e7e:	d119      	bne.n	8006eb4 <_dtoa_r+0xac>
 8006e80:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e8c:	4333      	orrs	r3, r6
 8006e8e:	f000 8580 	beq.w	8007992 <_dtoa_r+0xb8a>
 8006e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e94:	b953      	cbnz	r3, 8006eac <_dtoa_r+0xa4>
 8006e96:	4b97      	ldr	r3, [pc, #604]	; (80070f4 <_dtoa_r+0x2ec>)
 8006e98:	e022      	b.n	8006ee0 <_dtoa_r+0xd8>
 8006e9a:	4b97      	ldr	r3, [pc, #604]	; (80070f8 <_dtoa_r+0x2f0>)
 8006e9c:	9308      	str	r3, [sp, #32]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	9808      	ldr	r0, [sp, #32]
 8006ea6:	b019      	add	sp, #100	; 0x64
 8006ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eac:	4b91      	ldr	r3, [pc, #580]	; (80070f4 <_dtoa_r+0x2ec>)
 8006eae:	9308      	str	r3, [sp, #32]
 8006eb0:	3303      	adds	r3, #3
 8006eb2:	e7f5      	b.n	8006ea0 <_dtoa_r+0x98>
 8006eb4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006eb8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f7f9 fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8006ec8:	4680      	mov	r8, r0
 8006eca:	b158      	cbz	r0, 8006ee4 <_dtoa_r+0xdc>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8559 	beq.w	800798c <_dtoa_r+0xb84>
 8006eda:	4888      	ldr	r0, [pc, #544]	; (80070fc <_dtoa_r+0x2f4>)
 8006edc:	6018      	str	r0, [r3, #0]
 8006ede:	1e43      	subs	r3, r0, #1
 8006ee0:	9308      	str	r3, [sp, #32]
 8006ee2:	e7df      	b.n	8006ea4 <_dtoa_r+0x9c>
 8006ee4:	ab16      	add	r3, sp, #88	; 0x58
 8006ee6:	9301      	str	r3, [sp, #4]
 8006ee8:	ab17      	add	r3, sp, #92	; 0x5c
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	4628      	mov	r0, r5
 8006eee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ef2:	f001 fd01 	bl	80088f8 <__d2b>
 8006ef6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006efa:	4682      	mov	sl, r0
 8006efc:	2c00      	cmp	r4, #0
 8006efe:	d07e      	beq.n	8006ffe <_dtoa_r+0x1f6>
 8006f00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f06:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006f0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006f12:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006f16:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	4b78      	ldr	r3, [pc, #480]	; (8007100 <_dtoa_r+0x2f8>)
 8006f1e:	f7f9 f923 	bl	8000168 <__aeabi_dsub>
 8006f22:	a36b      	add	r3, pc, #428	; (adr r3, 80070d0 <_dtoa_r+0x2c8>)
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	f7f9 fad6 	bl	80004d8 <__aeabi_dmul>
 8006f2c:	a36a      	add	r3, pc, #424	; (adr r3, 80070d8 <_dtoa_r+0x2d0>)
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	f7f9 f91b 	bl	800016c <__adddf3>
 8006f36:	4606      	mov	r6, r0
 8006f38:	4620      	mov	r0, r4
 8006f3a:	460f      	mov	r7, r1
 8006f3c:	f7f9 fa62 	bl	8000404 <__aeabi_i2d>
 8006f40:	a367      	add	r3, pc, #412	; (adr r3, 80070e0 <_dtoa_r+0x2d8>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 fac7 	bl	80004d8 <__aeabi_dmul>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4630      	mov	r0, r6
 8006f50:	4639      	mov	r1, r7
 8006f52:	f7f9 f90b 	bl	800016c <__adddf3>
 8006f56:	4606      	mov	r6, r0
 8006f58:	460f      	mov	r7, r1
 8006f5a:	f7f9 fd6d 	bl	8000a38 <__aeabi_d2iz>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4681      	mov	r9, r0
 8006f62:	2300      	movs	r3, #0
 8006f64:	4630      	mov	r0, r6
 8006f66:	4639      	mov	r1, r7
 8006f68:	f7f9 fd28 	bl	80009bc <__aeabi_dcmplt>
 8006f6c:	b148      	cbz	r0, 8006f82 <_dtoa_r+0x17a>
 8006f6e:	4648      	mov	r0, r9
 8006f70:	f7f9 fa48 	bl	8000404 <__aeabi_i2d>
 8006f74:	4632      	mov	r2, r6
 8006f76:	463b      	mov	r3, r7
 8006f78:	f7f9 fd16 	bl	80009a8 <__aeabi_dcmpeq>
 8006f7c:	b908      	cbnz	r0, 8006f82 <_dtoa_r+0x17a>
 8006f7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f82:	f1b9 0f16 	cmp.w	r9, #22
 8006f86:	d857      	bhi.n	8007038 <_dtoa_r+0x230>
 8006f88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f8c:	4b5d      	ldr	r3, [pc, #372]	; (8007104 <_dtoa_r+0x2fc>)
 8006f8e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 fd11 	bl	80009bc <__aeabi_dcmplt>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d04e      	beq.n	800703c <_dtoa_r+0x234>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f109 39ff 	add.w	r9, r9, #4294967295
 8006fa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fa6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006fa8:	1b1c      	subs	r4, r3, r4
 8006faa:	1e63      	subs	r3, r4, #1
 8006fac:	9309      	str	r3, [sp, #36]	; 0x24
 8006fae:	bf49      	itett	mi
 8006fb0:	f1c4 0301 	rsbmi	r3, r4, #1
 8006fb4:	2300      	movpl	r3, #0
 8006fb6:	9306      	strmi	r3, [sp, #24]
 8006fb8:	2300      	movmi	r3, #0
 8006fba:	bf54      	ite	pl
 8006fbc:	9306      	strpl	r3, [sp, #24]
 8006fbe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006fc0:	f1b9 0f00 	cmp.w	r9, #0
 8006fc4:	db3c      	blt.n	8007040 <_dtoa_r+0x238>
 8006fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006fcc:	444b      	add	r3, r9
 8006fce:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8006fd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fd6:	2b09      	cmp	r3, #9
 8006fd8:	d86c      	bhi.n	80070b4 <_dtoa_r+0x2ac>
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	bfc4      	itt	gt
 8006fde:	3b04      	subgt	r3, #4
 8006fe0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006fe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fe4:	bfc8      	it	gt
 8006fe6:	2400      	movgt	r4, #0
 8006fe8:	f1a3 0302 	sub.w	r3, r3, #2
 8006fec:	bfd8      	it	le
 8006fee:	2401      	movle	r4, #1
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	f200 808b 	bhi.w	800710c <_dtoa_r+0x304>
 8006ff6:	e8df f003 	tbb	[pc, r3]
 8006ffa:	4f2d      	.short	0x4f2d
 8006ffc:	5b4d      	.short	0x5b4d
 8006ffe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007002:	441c      	add	r4, r3
 8007004:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007008:	2b20      	cmp	r3, #32
 800700a:	bfc3      	ittte	gt
 800700c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007010:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007014:	fa09 f303 	lslgt.w	r3, r9, r3
 8007018:	f1c3 0320 	rsble	r3, r3, #32
 800701c:	bfc6      	itte	gt
 800701e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007022:	4318      	orrgt	r0, r3
 8007024:	fa06 f003 	lslle.w	r0, r6, r3
 8007028:	f7f9 f9dc 	bl	80003e4 <__aeabi_ui2d>
 800702c:	2301      	movs	r3, #1
 800702e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007032:	3c01      	subs	r4, #1
 8007034:	9313      	str	r3, [sp, #76]	; 0x4c
 8007036:	e770      	b.n	8006f1a <_dtoa_r+0x112>
 8007038:	2301      	movs	r3, #1
 800703a:	e7b3      	b.n	8006fa4 <_dtoa_r+0x19c>
 800703c:	900f      	str	r0, [sp, #60]	; 0x3c
 800703e:	e7b2      	b.n	8006fa6 <_dtoa_r+0x19e>
 8007040:	9b06      	ldr	r3, [sp, #24]
 8007042:	eba3 0309 	sub.w	r3, r3, r9
 8007046:	9306      	str	r3, [sp, #24]
 8007048:	f1c9 0300 	rsb	r3, r9, #0
 800704c:	930a      	str	r3, [sp, #40]	; 0x28
 800704e:	2300      	movs	r3, #0
 8007050:	930e      	str	r3, [sp, #56]	; 0x38
 8007052:	e7bf      	b.n	8006fd4 <_dtoa_r+0x1cc>
 8007054:	2300      	movs	r3, #0
 8007056:	930b      	str	r3, [sp, #44]	; 0x2c
 8007058:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800705a:	2b00      	cmp	r3, #0
 800705c:	dc59      	bgt.n	8007112 <_dtoa_r+0x30a>
 800705e:	f04f 0b01 	mov.w	fp, #1
 8007062:	465b      	mov	r3, fp
 8007064:	f8cd b008 	str.w	fp, [sp, #8]
 8007068:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800706c:	2200      	movs	r2, #0
 800706e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007070:	6042      	str	r2, [r0, #4]
 8007072:	2204      	movs	r2, #4
 8007074:	f102 0614 	add.w	r6, r2, #20
 8007078:	429e      	cmp	r6, r3
 800707a:	6841      	ldr	r1, [r0, #4]
 800707c:	d94f      	bls.n	800711e <_dtoa_r+0x316>
 800707e:	4628      	mov	r0, r5
 8007080:	f001 f850 	bl	8008124 <_Balloc>
 8007084:	9008      	str	r0, [sp, #32]
 8007086:	2800      	cmp	r0, #0
 8007088:	d14d      	bne.n	8007126 <_dtoa_r+0x31e>
 800708a:	4602      	mov	r2, r0
 800708c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007090:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <_dtoa_r+0x300>)
 8007092:	e6cd      	b.n	8006e30 <_dtoa_r+0x28>
 8007094:	2301      	movs	r3, #1
 8007096:	e7de      	b.n	8007056 <_dtoa_r+0x24e>
 8007098:	2300      	movs	r3, #0
 800709a:	930b      	str	r3, [sp, #44]	; 0x2c
 800709c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800709e:	eb09 0b03 	add.w	fp, r9, r3
 80070a2:	f10b 0301 	add.w	r3, fp, #1
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	9302      	str	r3, [sp, #8]
 80070aa:	bfb8      	it	lt
 80070ac:	2301      	movlt	r3, #1
 80070ae:	e7dd      	b.n	800706c <_dtoa_r+0x264>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e7f2      	b.n	800709a <_dtoa_r+0x292>
 80070b4:	2401      	movs	r4, #1
 80070b6:	2300      	movs	r3, #0
 80070b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80070ba:	9322      	str	r3, [sp, #136]	; 0x88
 80070bc:	f04f 3bff 	mov.w	fp, #4294967295
 80070c0:	2200      	movs	r2, #0
 80070c2:	2312      	movs	r3, #18
 80070c4:	f8cd b008 	str.w	fp, [sp, #8]
 80070c8:	9223      	str	r2, [sp, #140]	; 0x8c
 80070ca:	e7cf      	b.n	800706c <_dtoa_r+0x264>
 80070cc:	f3af 8000 	nop.w
 80070d0:	636f4361 	.word	0x636f4361
 80070d4:	3fd287a7 	.word	0x3fd287a7
 80070d8:	8b60c8b3 	.word	0x8b60c8b3
 80070dc:	3fc68a28 	.word	0x3fc68a28
 80070e0:	509f79fb 	.word	0x509f79fb
 80070e4:	3fd34413 	.word	0x3fd34413
 80070e8:	0800b116 	.word	0x0800b116
 80070ec:	0800b12d 	.word	0x0800b12d
 80070f0:	7ff00000 	.word	0x7ff00000
 80070f4:	0800b112 	.word	0x0800b112
 80070f8:	0800b109 	.word	0x0800b109
 80070fc:	0800af89 	.word	0x0800af89
 8007100:	3ff80000 	.word	0x3ff80000
 8007104:	0800b2a8 	.word	0x0800b2a8
 8007108:	0800b18c 	.word	0x0800b18c
 800710c:	2301      	movs	r3, #1
 800710e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007110:	e7d4      	b.n	80070bc <_dtoa_r+0x2b4>
 8007112:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007116:	465b      	mov	r3, fp
 8007118:	f8cd b008 	str.w	fp, [sp, #8]
 800711c:	e7a6      	b.n	800706c <_dtoa_r+0x264>
 800711e:	3101      	adds	r1, #1
 8007120:	6041      	str	r1, [r0, #4]
 8007122:	0052      	lsls	r2, r2, #1
 8007124:	e7a6      	b.n	8007074 <_dtoa_r+0x26c>
 8007126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007128:	9a08      	ldr	r2, [sp, #32]
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	9b02      	ldr	r3, [sp, #8]
 800712e:	2b0e      	cmp	r3, #14
 8007130:	f200 80a8 	bhi.w	8007284 <_dtoa_r+0x47c>
 8007134:	2c00      	cmp	r4, #0
 8007136:	f000 80a5 	beq.w	8007284 <_dtoa_r+0x47c>
 800713a:	f1b9 0f00 	cmp.w	r9, #0
 800713e:	dd34      	ble.n	80071aa <_dtoa_r+0x3a2>
 8007140:	4a9a      	ldr	r2, [pc, #616]	; (80073ac <_dtoa_r+0x5a4>)
 8007142:	f009 030f 	and.w	r3, r9, #15
 8007146:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800714a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800714e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007152:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007156:	ea4f 1429 	mov.w	r4, r9, asr #4
 800715a:	d016      	beq.n	800718a <_dtoa_r+0x382>
 800715c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007160:	4b93      	ldr	r3, [pc, #588]	; (80073b0 <_dtoa_r+0x5a8>)
 8007162:	2703      	movs	r7, #3
 8007164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007168:	f7f9 fae0 	bl	800072c <__aeabi_ddiv>
 800716c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007170:	f004 040f 	and.w	r4, r4, #15
 8007174:	4e8e      	ldr	r6, [pc, #568]	; (80073b0 <_dtoa_r+0x5a8>)
 8007176:	b954      	cbnz	r4, 800718e <_dtoa_r+0x386>
 8007178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800717c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007180:	f7f9 fad4 	bl	800072c <__aeabi_ddiv>
 8007184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007188:	e029      	b.n	80071de <_dtoa_r+0x3d6>
 800718a:	2702      	movs	r7, #2
 800718c:	e7f2      	b.n	8007174 <_dtoa_r+0x36c>
 800718e:	07e1      	lsls	r1, r4, #31
 8007190:	d508      	bpl.n	80071a4 <_dtoa_r+0x39c>
 8007192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007196:	e9d6 2300 	ldrd	r2, r3, [r6]
 800719a:	f7f9 f99d 	bl	80004d8 <__aeabi_dmul>
 800719e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071a2:	3701      	adds	r7, #1
 80071a4:	1064      	asrs	r4, r4, #1
 80071a6:	3608      	adds	r6, #8
 80071a8:	e7e5      	b.n	8007176 <_dtoa_r+0x36e>
 80071aa:	f000 80a5 	beq.w	80072f8 <_dtoa_r+0x4f0>
 80071ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b2:	f1c9 0400 	rsb	r4, r9, #0
 80071b6:	4b7d      	ldr	r3, [pc, #500]	; (80073ac <_dtoa_r+0x5a4>)
 80071b8:	f004 020f 	and.w	r2, r4, #15
 80071bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f7f9 f988 	bl	80004d8 <__aeabi_dmul>
 80071c8:	2702      	movs	r7, #2
 80071ca:	2300      	movs	r3, #0
 80071cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071d0:	4e77      	ldr	r6, [pc, #476]	; (80073b0 <_dtoa_r+0x5a8>)
 80071d2:	1124      	asrs	r4, r4, #4
 80071d4:	2c00      	cmp	r4, #0
 80071d6:	f040 8084 	bne.w	80072e2 <_dtoa_r+0x4da>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1d2      	bne.n	8007184 <_dtoa_r+0x37c>
 80071de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 808b 	beq.w	80072fc <_dtoa_r+0x4f4>
 80071e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80071ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80071ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071f2:	2200      	movs	r2, #0
 80071f4:	4b6f      	ldr	r3, [pc, #444]	; (80073b4 <_dtoa_r+0x5ac>)
 80071f6:	f7f9 fbe1 	bl	80009bc <__aeabi_dcmplt>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d07e      	beq.n	80072fc <_dtoa_r+0x4f4>
 80071fe:	9b02      	ldr	r3, [sp, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d07b      	beq.n	80072fc <_dtoa_r+0x4f4>
 8007204:	f1bb 0f00 	cmp.w	fp, #0
 8007208:	dd38      	ble.n	800727c <_dtoa_r+0x474>
 800720a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800720e:	2200      	movs	r2, #0
 8007210:	4b69      	ldr	r3, [pc, #420]	; (80073b8 <_dtoa_r+0x5b0>)
 8007212:	f7f9 f961 	bl	80004d8 <__aeabi_dmul>
 8007216:	465c      	mov	r4, fp
 8007218:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800721c:	f109 38ff 	add.w	r8, r9, #4294967295
 8007220:	3701      	adds	r7, #1
 8007222:	4638      	mov	r0, r7
 8007224:	f7f9 f8ee 	bl	8000404 <__aeabi_i2d>
 8007228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800722c:	f7f9 f954 	bl	80004d8 <__aeabi_dmul>
 8007230:	2200      	movs	r2, #0
 8007232:	4b62      	ldr	r3, [pc, #392]	; (80073bc <_dtoa_r+0x5b4>)
 8007234:	f7f8 ff9a 	bl	800016c <__adddf3>
 8007238:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800723c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007240:	9611      	str	r6, [sp, #68]	; 0x44
 8007242:	2c00      	cmp	r4, #0
 8007244:	d15d      	bne.n	8007302 <_dtoa_r+0x4fa>
 8007246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800724a:	2200      	movs	r2, #0
 800724c:	4b5c      	ldr	r3, [pc, #368]	; (80073c0 <_dtoa_r+0x5b8>)
 800724e:	f7f8 ff8b 	bl	8000168 <__aeabi_dsub>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800725a:	4633      	mov	r3, r6
 800725c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800725e:	f7f9 fbcb 	bl	80009f8 <__aeabi_dcmpgt>
 8007262:	2800      	cmp	r0, #0
 8007264:	f040 829e 	bne.w	80077a4 <_dtoa_r+0x99c>
 8007268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800726c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800726e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007272:	f7f9 fba3 	bl	80009bc <__aeabi_dcmplt>
 8007276:	2800      	cmp	r0, #0
 8007278:	f040 8292 	bne.w	80077a0 <_dtoa_r+0x998>
 800727c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007280:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007284:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007286:	2b00      	cmp	r3, #0
 8007288:	f2c0 8153 	blt.w	8007532 <_dtoa_r+0x72a>
 800728c:	f1b9 0f0e 	cmp.w	r9, #14
 8007290:	f300 814f 	bgt.w	8007532 <_dtoa_r+0x72a>
 8007294:	4b45      	ldr	r3, [pc, #276]	; (80073ac <_dtoa_r+0x5a4>)
 8007296:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800729a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800729e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80072a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f280 80db 	bge.w	8007460 <_dtoa_r+0x658>
 80072aa:	9b02      	ldr	r3, [sp, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f300 80d7 	bgt.w	8007460 <_dtoa_r+0x658>
 80072b2:	f040 8274 	bne.w	800779e <_dtoa_r+0x996>
 80072b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072ba:	2200      	movs	r2, #0
 80072bc:	4b40      	ldr	r3, [pc, #256]	; (80073c0 <_dtoa_r+0x5b8>)
 80072be:	f7f9 f90b 	bl	80004d8 <__aeabi_dmul>
 80072c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072c6:	f7f9 fb8d 	bl	80009e4 <__aeabi_dcmpge>
 80072ca:	9c02      	ldr	r4, [sp, #8]
 80072cc:	4626      	mov	r6, r4
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f040 824a 	bne.w	8007768 <_dtoa_r+0x960>
 80072d4:	2331      	movs	r3, #49	; 0x31
 80072d6:	9f08      	ldr	r7, [sp, #32]
 80072d8:	f109 0901 	add.w	r9, r9, #1
 80072dc:	f807 3b01 	strb.w	r3, [r7], #1
 80072e0:	e246      	b.n	8007770 <_dtoa_r+0x968>
 80072e2:	07e2      	lsls	r2, r4, #31
 80072e4:	d505      	bpl.n	80072f2 <_dtoa_r+0x4ea>
 80072e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072ea:	f7f9 f8f5 	bl	80004d8 <__aeabi_dmul>
 80072ee:	2301      	movs	r3, #1
 80072f0:	3701      	adds	r7, #1
 80072f2:	1064      	asrs	r4, r4, #1
 80072f4:	3608      	adds	r6, #8
 80072f6:	e76d      	b.n	80071d4 <_dtoa_r+0x3cc>
 80072f8:	2702      	movs	r7, #2
 80072fa:	e770      	b.n	80071de <_dtoa_r+0x3d6>
 80072fc:	46c8      	mov	r8, r9
 80072fe:	9c02      	ldr	r4, [sp, #8]
 8007300:	e78f      	b.n	8007222 <_dtoa_r+0x41a>
 8007302:	9908      	ldr	r1, [sp, #32]
 8007304:	4b29      	ldr	r3, [pc, #164]	; (80073ac <_dtoa_r+0x5a4>)
 8007306:	4421      	add	r1, r4
 8007308:	9112      	str	r1, [sp, #72]	; 0x48
 800730a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800730c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007310:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007314:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007318:	2900      	cmp	r1, #0
 800731a:	d055      	beq.n	80073c8 <_dtoa_r+0x5c0>
 800731c:	2000      	movs	r0, #0
 800731e:	4929      	ldr	r1, [pc, #164]	; (80073c4 <_dtoa_r+0x5bc>)
 8007320:	f7f9 fa04 	bl	800072c <__aeabi_ddiv>
 8007324:	463b      	mov	r3, r7
 8007326:	4632      	mov	r2, r6
 8007328:	f7f8 ff1e 	bl	8000168 <__aeabi_dsub>
 800732c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007330:	9f08      	ldr	r7, [sp, #32]
 8007332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007336:	f7f9 fb7f 	bl	8000a38 <__aeabi_d2iz>
 800733a:	4604      	mov	r4, r0
 800733c:	f7f9 f862 	bl	8000404 <__aeabi_i2d>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007348:	f7f8 ff0e 	bl	8000168 <__aeabi_dsub>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	3430      	adds	r4, #48	; 0x30
 8007352:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007356:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800735a:	f807 4b01 	strb.w	r4, [r7], #1
 800735e:	f7f9 fb2d 	bl	80009bc <__aeabi_dcmplt>
 8007362:	2800      	cmp	r0, #0
 8007364:	d174      	bne.n	8007450 <_dtoa_r+0x648>
 8007366:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800736a:	2000      	movs	r0, #0
 800736c:	4911      	ldr	r1, [pc, #68]	; (80073b4 <_dtoa_r+0x5ac>)
 800736e:	f7f8 fefb 	bl	8000168 <__aeabi_dsub>
 8007372:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007376:	f7f9 fb21 	bl	80009bc <__aeabi_dcmplt>
 800737a:	2800      	cmp	r0, #0
 800737c:	f040 80b6 	bne.w	80074ec <_dtoa_r+0x6e4>
 8007380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007382:	429f      	cmp	r7, r3
 8007384:	f43f af7a 	beq.w	800727c <_dtoa_r+0x474>
 8007388:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800738c:	2200      	movs	r2, #0
 800738e:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <_dtoa_r+0x5b0>)
 8007390:	f7f9 f8a2 	bl	80004d8 <__aeabi_dmul>
 8007394:	2200      	movs	r2, #0
 8007396:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800739a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800739e:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <_dtoa_r+0x5b0>)
 80073a0:	f7f9 f89a 	bl	80004d8 <__aeabi_dmul>
 80073a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a8:	e7c3      	b.n	8007332 <_dtoa_r+0x52a>
 80073aa:	bf00      	nop
 80073ac:	0800b2a8 	.word	0x0800b2a8
 80073b0:	0800b280 	.word	0x0800b280
 80073b4:	3ff00000 	.word	0x3ff00000
 80073b8:	40240000 	.word	0x40240000
 80073bc:	401c0000 	.word	0x401c0000
 80073c0:	40140000 	.word	0x40140000
 80073c4:	3fe00000 	.word	0x3fe00000
 80073c8:	4630      	mov	r0, r6
 80073ca:	4639      	mov	r1, r7
 80073cc:	f7f9 f884 	bl	80004d8 <__aeabi_dmul>
 80073d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073d6:	9c08      	ldr	r4, [sp, #32]
 80073d8:	9314      	str	r3, [sp, #80]	; 0x50
 80073da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073de:	f7f9 fb2b 	bl	8000a38 <__aeabi_d2iz>
 80073e2:	9015      	str	r0, [sp, #84]	; 0x54
 80073e4:	f7f9 f80e 	bl	8000404 <__aeabi_i2d>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f0:	f7f8 feba 	bl	8000168 <__aeabi_dsub>
 80073f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073f6:	4606      	mov	r6, r0
 80073f8:	3330      	adds	r3, #48	; 0x30
 80073fa:	f804 3b01 	strb.w	r3, [r4], #1
 80073fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007400:	460f      	mov	r7, r1
 8007402:	429c      	cmp	r4, r3
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	d124      	bne.n	8007454 <_dtoa_r+0x64c>
 800740a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800740e:	4bb3      	ldr	r3, [pc, #716]	; (80076dc <_dtoa_r+0x8d4>)
 8007410:	f7f8 feac 	bl	800016c <__adddf3>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4630      	mov	r0, r6
 800741a:	4639      	mov	r1, r7
 800741c:	f7f9 faec 	bl	80009f8 <__aeabi_dcmpgt>
 8007420:	2800      	cmp	r0, #0
 8007422:	d162      	bne.n	80074ea <_dtoa_r+0x6e2>
 8007424:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007428:	2000      	movs	r0, #0
 800742a:	49ac      	ldr	r1, [pc, #688]	; (80076dc <_dtoa_r+0x8d4>)
 800742c:	f7f8 fe9c 	bl	8000168 <__aeabi_dsub>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4630      	mov	r0, r6
 8007436:	4639      	mov	r1, r7
 8007438:	f7f9 fac0 	bl	80009bc <__aeabi_dcmplt>
 800743c:	2800      	cmp	r0, #0
 800743e:	f43f af1d 	beq.w	800727c <_dtoa_r+0x474>
 8007442:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007444:	1e7b      	subs	r3, r7, #1
 8007446:	9314      	str	r3, [sp, #80]	; 0x50
 8007448:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800744c:	2b30      	cmp	r3, #48	; 0x30
 800744e:	d0f8      	beq.n	8007442 <_dtoa_r+0x63a>
 8007450:	46c1      	mov	r9, r8
 8007452:	e03a      	b.n	80074ca <_dtoa_r+0x6c2>
 8007454:	4ba2      	ldr	r3, [pc, #648]	; (80076e0 <_dtoa_r+0x8d8>)
 8007456:	f7f9 f83f 	bl	80004d8 <__aeabi_dmul>
 800745a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800745e:	e7bc      	b.n	80073da <_dtoa_r+0x5d2>
 8007460:	9f08      	ldr	r7, [sp, #32]
 8007462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800746a:	f7f9 f95f 	bl	800072c <__aeabi_ddiv>
 800746e:	f7f9 fae3 	bl	8000a38 <__aeabi_d2iz>
 8007472:	4604      	mov	r4, r0
 8007474:	f7f8 ffc6 	bl	8000404 <__aeabi_i2d>
 8007478:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800747c:	f7f9 f82c 	bl	80004d8 <__aeabi_dmul>
 8007480:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007484:	460b      	mov	r3, r1
 8007486:	4602      	mov	r2, r0
 8007488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800748c:	f7f8 fe6c 	bl	8000168 <__aeabi_dsub>
 8007490:	f807 6b01 	strb.w	r6, [r7], #1
 8007494:	9e08      	ldr	r6, [sp, #32]
 8007496:	9b02      	ldr	r3, [sp, #8]
 8007498:	1bbe      	subs	r6, r7, r6
 800749a:	42b3      	cmp	r3, r6
 800749c:	d13a      	bne.n	8007514 <_dtoa_r+0x70c>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	f7f8 fe63 	bl	800016c <__adddf3>
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074b2:	f7f9 faa1 	bl	80009f8 <__aeabi_dcmpgt>
 80074b6:	bb58      	cbnz	r0, 8007510 <_dtoa_r+0x708>
 80074b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074c0:	f7f9 fa72 	bl	80009a8 <__aeabi_dcmpeq>
 80074c4:	b108      	cbz	r0, 80074ca <_dtoa_r+0x6c2>
 80074c6:	07e1      	lsls	r1, r4, #31
 80074c8:	d422      	bmi.n	8007510 <_dtoa_r+0x708>
 80074ca:	4628      	mov	r0, r5
 80074cc:	4651      	mov	r1, sl
 80074ce:	f000 fe69 	bl	80081a4 <_Bfree>
 80074d2:	2300      	movs	r3, #0
 80074d4:	703b      	strb	r3, [r7, #0]
 80074d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80074d8:	f109 0001 	add.w	r0, r9, #1
 80074dc:	6018      	str	r0, [r3, #0]
 80074de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f43f acdf 	beq.w	8006ea4 <_dtoa_r+0x9c>
 80074e6:	601f      	str	r7, [r3, #0]
 80074e8:	e4dc      	b.n	8006ea4 <_dtoa_r+0x9c>
 80074ea:	4627      	mov	r7, r4
 80074ec:	463b      	mov	r3, r7
 80074ee:	461f      	mov	r7, r3
 80074f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074f4:	2a39      	cmp	r2, #57	; 0x39
 80074f6:	d107      	bne.n	8007508 <_dtoa_r+0x700>
 80074f8:	9a08      	ldr	r2, [sp, #32]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d1f7      	bne.n	80074ee <_dtoa_r+0x6e6>
 80074fe:	2230      	movs	r2, #48	; 0x30
 8007500:	9908      	ldr	r1, [sp, #32]
 8007502:	f108 0801 	add.w	r8, r8, #1
 8007506:	700a      	strb	r2, [r1, #0]
 8007508:	781a      	ldrb	r2, [r3, #0]
 800750a:	3201      	adds	r2, #1
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	e79f      	b.n	8007450 <_dtoa_r+0x648>
 8007510:	46c8      	mov	r8, r9
 8007512:	e7eb      	b.n	80074ec <_dtoa_r+0x6e4>
 8007514:	2200      	movs	r2, #0
 8007516:	4b72      	ldr	r3, [pc, #456]	; (80076e0 <_dtoa_r+0x8d8>)
 8007518:	f7f8 ffde 	bl	80004d8 <__aeabi_dmul>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007524:	2200      	movs	r2, #0
 8007526:	2300      	movs	r3, #0
 8007528:	f7f9 fa3e 	bl	80009a8 <__aeabi_dcmpeq>
 800752c:	2800      	cmp	r0, #0
 800752e:	d098      	beq.n	8007462 <_dtoa_r+0x65a>
 8007530:	e7cb      	b.n	80074ca <_dtoa_r+0x6c2>
 8007532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007534:	2a00      	cmp	r2, #0
 8007536:	f000 80cd 	beq.w	80076d4 <_dtoa_r+0x8cc>
 800753a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800753c:	2a01      	cmp	r2, #1
 800753e:	f300 80af 	bgt.w	80076a0 <_dtoa_r+0x898>
 8007542:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007544:	2a00      	cmp	r2, #0
 8007546:	f000 80a7 	beq.w	8007698 <_dtoa_r+0x890>
 800754a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800754e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007550:	9f06      	ldr	r7, [sp, #24]
 8007552:	9a06      	ldr	r2, [sp, #24]
 8007554:	2101      	movs	r1, #1
 8007556:	441a      	add	r2, r3
 8007558:	9206      	str	r2, [sp, #24]
 800755a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800755c:	4628      	mov	r0, r5
 800755e:	441a      	add	r2, r3
 8007560:	9209      	str	r2, [sp, #36]	; 0x24
 8007562:	f000 ff23 	bl	80083ac <__i2b>
 8007566:	4606      	mov	r6, r0
 8007568:	2f00      	cmp	r7, #0
 800756a:	dd0c      	ble.n	8007586 <_dtoa_r+0x77e>
 800756c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756e:	2b00      	cmp	r3, #0
 8007570:	dd09      	ble.n	8007586 <_dtoa_r+0x77e>
 8007572:	42bb      	cmp	r3, r7
 8007574:	bfa8      	it	ge
 8007576:	463b      	movge	r3, r7
 8007578:	9a06      	ldr	r2, [sp, #24]
 800757a:	1aff      	subs	r7, r7, r3
 800757c:	1ad2      	subs	r2, r2, r3
 800757e:	9206      	str	r2, [sp, #24]
 8007580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	9309      	str	r3, [sp, #36]	; 0x24
 8007586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007588:	b1f3      	cbz	r3, 80075c8 <_dtoa_r+0x7c0>
 800758a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 80a9 	beq.w	80076e4 <_dtoa_r+0x8dc>
 8007592:	2c00      	cmp	r4, #0
 8007594:	dd10      	ble.n	80075b8 <_dtoa_r+0x7b0>
 8007596:	4631      	mov	r1, r6
 8007598:	4622      	mov	r2, r4
 800759a:	4628      	mov	r0, r5
 800759c:	f000 ffc0 	bl	8008520 <__pow5mult>
 80075a0:	4652      	mov	r2, sl
 80075a2:	4601      	mov	r1, r0
 80075a4:	4606      	mov	r6, r0
 80075a6:	4628      	mov	r0, r5
 80075a8:	f000 ff16 	bl	80083d8 <__multiply>
 80075ac:	4680      	mov	r8, r0
 80075ae:	4651      	mov	r1, sl
 80075b0:	4628      	mov	r0, r5
 80075b2:	f000 fdf7 	bl	80081a4 <_Bfree>
 80075b6:	46c2      	mov	sl, r8
 80075b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ba:	1b1a      	subs	r2, r3, r4
 80075bc:	d004      	beq.n	80075c8 <_dtoa_r+0x7c0>
 80075be:	4651      	mov	r1, sl
 80075c0:	4628      	mov	r0, r5
 80075c2:	f000 ffad 	bl	8008520 <__pow5mult>
 80075c6:	4682      	mov	sl, r0
 80075c8:	2101      	movs	r1, #1
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 feee 	bl	80083ac <__i2b>
 80075d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075d2:	4604      	mov	r4, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f340 8087 	ble.w	80076e8 <_dtoa_r+0x8e0>
 80075da:	461a      	mov	r2, r3
 80075dc:	4601      	mov	r1, r0
 80075de:	4628      	mov	r0, r5
 80075e0:	f000 ff9e 	bl	8008520 <__pow5mult>
 80075e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075e6:	4604      	mov	r4, r0
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	f340 8080 	ble.w	80076ee <_dtoa_r+0x8e6>
 80075ee:	f04f 0800 	mov.w	r8, #0
 80075f2:	6923      	ldr	r3, [r4, #16]
 80075f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075f8:	6918      	ldr	r0, [r3, #16]
 80075fa:	f000 fe89 	bl	8008310 <__hi0bits>
 80075fe:	f1c0 0020 	rsb	r0, r0, #32
 8007602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007604:	4418      	add	r0, r3
 8007606:	f010 001f 	ands.w	r0, r0, #31
 800760a:	f000 8092 	beq.w	8007732 <_dtoa_r+0x92a>
 800760e:	f1c0 0320 	rsb	r3, r0, #32
 8007612:	2b04      	cmp	r3, #4
 8007614:	f340 808a 	ble.w	800772c <_dtoa_r+0x924>
 8007618:	f1c0 001c 	rsb	r0, r0, #28
 800761c:	9b06      	ldr	r3, [sp, #24]
 800761e:	4407      	add	r7, r0
 8007620:	4403      	add	r3, r0
 8007622:	9306      	str	r3, [sp, #24]
 8007624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007626:	4403      	add	r3, r0
 8007628:	9309      	str	r3, [sp, #36]	; 0x24
 800762a:	9b06      	ldr	r3, [sp, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	dd05      	ble.n	800763c <_dtoa_r+0x834>
 8007630:	4651      	mov	r1, sl
 8007632:	461a      	mov	r2, r3
 8007634:	4628      	mov	r0, r5
 8007636:	f000 ffcd 	bl	80085d4 <__lshift>
 800763a:	4682      	mov	sl, r0
 800763c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800763e:	2b00      	cmp	r3, #0
 8007640:	dd05      	ble.n	800764e <_dtoa_r+0x846>
 8007642:	4621      	mov	r1, r4
 8007644:	461a      	mov	r2, r3
 8007646:	4628      	mov	r0, r5
 8007648:	f000 ffc4 	bl	80085d4 <__lshift>
 800764c:	4604      	mov	r4, r0
 800764e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d070      	beq.n	8007736 <_dtoa_r+0x92e>
 8007654:	4621      	mov	r1, r4
 8007656:	4650      	mov	r0, sl
 8007658:	f001 f828 	bl	80086ac <__mcmp>
 800765c:	2800      	cmp	r0, #0
 800765e:	da6a      	bge.n	8007736 <_dtoa_r+0x92e>
 8007660:	2300      	movs	r3, #0
 8007662:	4651      	mov	r1, sl
 8007664:	220a      	movs	r2, #10
 8007666:	4628      	mov	r0, r5
 8007668:	f000 fdbe 	bl	80081e8 <__multadd>
 800766c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800766e:	4682      	mov	sl, r0
 8007670:	f109 39ff 	add.w	r9, r9, #4294967295
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 8193 	beq.w	80079a0 <_dtoa_r+0xb98>
 800767a:	4631      	mov	r1, r6
 800767c:	2300      	movs	r3, #0
 800767e:	220a      	movs	r2, #10
 8007680:	4628      	mov	r0, r5
 8007682:	f000 fdb1 	bl	80081e8 <__multadd>
 8007686:	f1bb 0f00 	cmp.w	fp, #0
 800768a:	4606      	mov	r6, r0
 800768c:	f300 8093 	bgt.w	80077b6 <_dtoa_r+0x9ae>
 8007690:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007692:	2b02      	cmp	r3, #2
 8007694:	dc57      	bgt.n	8007746 <_dtoa_r+0x93e>
 8007696:	e08e      	b.n	80077b6 <_dtoa_r+0x9ae>
 8007698:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800769a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800769e:	e756      	b.n	800754e <_dtoa_r+0x746>
 80076a0:	9b02      	ldr	r3, [sp, #8]
 80076a2:	1e5c      	subs	r4, r3, #1
 80076a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a6:	42a3      	cmp	r3, r4
 80076a8:	bfb7      	itett	lt
 80076aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80076ac:	1b1c      	subge	r4, r3, r4
 80076ae:	1ae2      	sublt	r2, r4, r3
 80076b0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80076b2:	bfbe      	ittt	lt
 80076b4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80076b6:	189b      	addlt	r3, r3, r2
 80076b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80076ba:	9b02      	ldr	r3, [sp, #8]
 80076bc:	bfb8      	it	lt
 80076be:	2400      	movlt	r4, #0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bfbb      	ittet	lt
 80076c4:	9b06      	ldrlt	r3, [sp, #24]
 80076c6:	9a02      	ldrlt	r2, [sp, #8]
 80076c8:	9f06      	ldrge	r7, [sp, #24]
 80076ca:	1a9f      	sublt	r7, r3, r2
 80076cc:	bfac      	ite	ge
 80076ce:	9b02      	ldrge	r3, [sp, #8]
 80076d0:	2300      	movlt	r3, #0
 80076d2:	e73e      	b.n	8007552 <_dtoa_r+0x74a>
 80076d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80076d6:	9f06      	ldr	r7, [sp, #24]
 80076d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80076da:	e745      	b.n	8007568 <_dtoa_r+0x760>
 80076dc:	3fe00000 	.word	0x3fe00000
 80076e0:	40240000 	.word	0x40240000
 80076e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e6:	e76a      	b.n	80075be <_dtoa_r+0x7b6>
 80076e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	dc19      	bgt.n	8007722 <_dtoa_r+0x91a>
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	b9bb      	cbnz	r3, 8007722 <_dtoa_r+0x91a>
 80076f2:	9b05      	ldr	r3, [sp, #20]
 80076f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076f8:	b99b      	cbnz	r3, 8007722 <_dtoa_r+0x91a>
 80076fa:	9b05      	ldr	r3, [sp, #20]
 80076fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007700:	0d1b      	lsrs	r3, r3, #20
 8007702:	051b      	lsls	r3, r3, #20
 8007704:	b183      	cbz	r3, 8007728 <_dtoa_r+0x920>
 8007706:	f04f 0801 	mov.w	r8, #1
 800770a:	9b06      	ldr	r3, [sp, #24]
 800770c:	3301      	adds	r3, #1
 800770e:	9306      	str	r3, [sp, #24]
 8007710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007712:	3301      	adds	r3, #1
 8007714:	9309      	str	r3, [sp, #36]	; 0x24
 8007716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007718:	2b00      	cmp	r3, #0
 800771a:	f47f af6a 	bne.w	80075f2 <_dtoa_r+0x7ea>
 800771e:	2001      	movs	r0, #1
 8007720:	e76f      	b.n	8007602 <_dtoa_r+0x7fa>
 8007722:	f04f 0800 	mov.w	r8, #0
 8007726:	e7f6      	b.n	8007716 <_dtoa_r+0x90e>
 8007728:	4698      	mov	r8, r3
 800772a:	e7f4      	b.n	8007716 <_dtoa_r+0x90e>
 800772c:	f43f af7d 	beq.w	800762a <_dtoa_r+0x822>
 8007730:	4618      	mov	r0, r3
 8007732:	301c      	adds	r0, #28
 8007734:	e772      	b.n	800761c <_dtoa_r+0x814>
 8007736:	9b02      	ldr	r3, [sp, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	dc36      	bgt.n	80077aa <_dtoa_r+0x9a2>
 800773c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800773e:	2b02      	cmp	r3, #2
 8007740:	dd33      	ble.n	80077aa <_dtoa_r+0x9a2>
 8007742:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007746:	f1bb 0f00 	cmp.w	fp, #0
 800774a:	d10d      	bne.n	8007768 <_dtoa_r+0x960>
 800774c:	4621      	mov	r1, r4
 800774e:	465b      	mov	r3, fp
 8007750:	2205      	movs	r2, #5
 8007752:	4628      	mov	r0, r5
 8007754:	f000 fd48 	bl	80081e8 <__multadd>
 8007758:	4601      	mov	r1, r0
 800775a:	4604      	mov	r4, r0
 800775c:	4650      	mov	r0, sl
 800775e:	f000 ffa5 	bl	80086ac <__mcmp>
 8007762:	2800      	cmp	r0, #0
 8007764:	f73f adb6 	bgt.w	80072d4 <_dtoa_r+0x4cc>
 8007768:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800776a:	9f08      	ldr	r7, [sp, #32]
 800776c:	ea6f 0903 	mvn.w	r9, r3
 8007770:	f04f 0800 	mov.w	r8, #0
 8007774:	4621      	mov	r1, r4
 8007776:	4628      	mov	r0, r5
 8007778:	f000 fd14 	bl	80081a4 <_Bfree>
 800777c:	2e00      	cmp	r6, #0
 800777e:	f43f aea4 	beq.w	80074ca <_dtoa_r+0x6c2>
 8007782:	f1b8 0f00 	cmp.w	r8, #0
 8007786:	d005      	beq.n	8007794 <_dtoa_r+0x98c>
 8007788:	45b0      	cmp	r8, r6
 800778a:	d003      	beq.n	8007794 <_dtoa_r+0x98c>
 800778c:	4641      	mov	r1, r8
 800778e:	4628      	mov	r0, r5
 8007790:	f000 fd08 	bl	80081a4 <_Bfree>
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	f000 fd04 	bl	80081a4 <_Bfree>
 800779c:	e695      	b.n	80074ca <_dtoa_r+0x6c2>
 800779e:	2400      	movs	r4, #0
 80077a0:	4626      	mov	r6, r4
 80077a2:	e7e1      	b.n	8007768 <_dtoa_r+0x960>
 80077a4:	46c1      	mov	r9, r8
 80077a6:	4626      	mov	r6, r4
 80077a8:	e594      	b.n	80072d4 <_dtoa_r+0x4cc>
 80077aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ac:	f8dd b008 	ldr.w	fp, [sp, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 80fc 	beq.w	80079ae <_dtoa_r+0xba6>
 80077b6:	2f00      	cmp	r7, #0
 80077b8:	dd05      	ble.n	80077c6 <_dtoa_r+0x9be>
 80077ba:	4631      	mov	r1, r6
 80077bc:	463a      	mov	r2, r7
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 ff08 	bl	80085d4 <__lshift>
 80077c4:	4606      	mov	r6, r0
 80077c6:	f1b8 0f00 	cmp.w	r8, #0
 80077ca:	d05c      	beq.n	8007886 <_dtoa_r+0xa7e>
 80077cc:	4628      	mov	r0, r5
 80077ce:	6871      	ldr	r1, [r6, #4]
 80077d0:	f000 fca8 	bl	8008124 <_Balloc>
 80077d4:	4607      	mov	r7, r0
 80077d6:	b928      	cbnz	r0, 80077e4 <_dtoa_r+0x9dc>
 80077d8:	4602      	mov	r2, r0
 80077da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80077de:	4b7e      	ldr	r3, [pc, #504]	; (80079d8 <_dtoa_r+0xbd0>)
 80077e0:	f7ff bb26 	b.w	8006e30 <_dtoa_r+0x28>
 80077e4:	6932      	ldr	r2, [r6, #16]
 80077e6:	f106 010c 	add.w	r1, r6, #12
 80077ea:	3202      	adds	r2, #2
 80077ec:	0092      	lsls	r2, r2, #2
 80077ee:	300c      	adds	r0, #12
 80077f0:	f000 fc8a 	bl	8008108 <memcpy>
 80077f4:	2201      	movs	r2, #1
 80077f6:	4639      	mov	r1, r7
 80077f8:	4628      	mov	r0, r5
 80077fa:	f000 feeb 	bl	80085d4 <__lshift>
 80077fe:	46b0      	mov	r8, r6
 8007800:	4606      	mov	r6, r0
 8007802:	9b08      	ldr	r3, [sp, #32]
 8007804:	3301      	adds	r3, #1
 8007806:	9302      	str	r3, [sp, #8]
 8007808:	9b08      	ldr	r3, [sp, #32]
 800780a:	445b      	add	r3, fp
 800780c:	930a      	str	r3, [sp, #40]	; 0x28
 800780e:	9b04      	ldr	r3, [sp, #16]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	9309      	str	r3, [sp, #36]	; 0x24
 8007816:	9b02      	ldr	r3, [sp, #8]
 8007818:	4621      	mov	r1, r4
 800781a:	4650      	mov	r0, sl
 800781c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007820:	f7ff fa64 	bl	8006cec <quorem>
 8007824:	4603      	mov	r3, r0
 8007826:	4641      	mov	r1, r8
 8007828:	3330      	adds	r3, #48	; 0x30
 800782a:	9004      	str	r0, [sp, #16]
 800782c:	4650      	mov	r0, sl
 800782e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007830:	f000 ff3c 	bl	80086ac <__mcmp>
 8007834:	4632      	mov	r2, r6
 8007836:	9006      	str	r0, [sp, #24]
 8007838:	4621      	mov	r1, r4
 800783a:	4628      	mov	r0, r5
 800783c:	f000 ff52 	bl	80086e4 <__mdiff>
 8007840:	68c2      	ldr	r2, [r0, #12]
 8007842:	4607      	mov	r7, r0
 8007844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007846:	bb02      	cbnz	r2, 800788a <_dtoa_r+0xa82>
 8007848:	4601      	mov	r1, r0
 800784a:	4650      	mov	r0, sl
 800784c:	f000 ff2e 	bl	80086ac <__mcmp>
 8007850:	4602      	mov	r2, r0
 8007852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007854:	4639      	mov	r1, r7
 8007856:	4628      	mov	r0, r5
 8007858:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800785c:	f000 fca2 	bl	80081a4 <_Bfree>
 8007860:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007864:	9f02      	ldr	r7, [sp, #8]
 8007866:	ea43 0102 	orr.w	r1, r3, r2
 800786a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786c:	430b      	orrs	r3, r1
 800786e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007870:	d10d      	bne.n	800788e <_dtoa_r+0xa86>
 8007872:	2b39      	cmp	r3, #57	; 0x39
 8007874:	d027      	beq.n	80078c6 <_dtoa_r+0xabe>
 8007876:	9a06      	ldr	r2, [sp, #24]
 8007878:	2a00      	cmp	r2, #0
 800787a:	dd01      	ble.n	8007880 <_dtoa_r+0xa78>
 800787c:	9b04      	ldr	r3, [sp, #16]
 800787e:	3331      	adds	r3, #49	; 0x31
 8007880:	f88b 3000 	strb.w	r3, [fp]
 8007884:	e776      	b.n	8007774 <_dtoa_r+0x96c>
 8007886:	4630      	mov	r0, r6
 8007888:	e7b9      	b.n	80077fe <_dtoa_r+0x9f6>
 800788a:	2201      	movs	r2, #1
 800788c:	e7e2      	b.n	8007854 <_dtoa_r+0xa4c>
 800788e:	9906      	ldr	r1, [sp, #24]
 8007890:	2900      	cmp	r1, #0
 8007892:	db04      	blt.n	800789e <_dtoa_r+0xa96>
 8007894:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007896:	4301      	orrs	r1, r0
 8007898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800789a:	4301      	orrs	r1, r0
 800789c:	d120      	bne.n	80078e0 <_dtoa_r+0xad8>
 800789e:	2a00      	cmp	r2, #0
 80078a0:	ddee      	ble.n	8007880 <_dtoa_r+0xa78>
 80078a2:	4651      	mov	r1, sl
 80078a4:	2201      	movs	r2, #1
 80078a6:	4628      	mov	r0, r5
 80078a8:	9302      	str	r3, [sp, #8]
 80078aa:	f000 fe93 	bl	80085d4 <__lshift>
 80078ae:	4621      	mov	r1, r4
 80078b0:	4682      	mov	sl, r0
 80078b2:	f000 fefb 	bl	80086ac <__mcmp>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	dc02      	bgt.n	80078c2 <_dtoa_r+0xaba>
 80078bc:	d1e0      	bne.n	8007880 <_dtoa_r+0xa78>
 80078be:	07da      	lsls	r2, r3, #31
 80078c0:	d5de      	bpl.n	8007880 <_dtoa_r+0xa78>
 80078c2:	2b39      	cmp	r3, #57	; 0x39
 80078c4:	d1da      	bne.n	800787c <_dtoa_r+0xa74>
 80078c6:	2339      	movs	r3, #57	; 0x39
 80078c8:	f88b 3000 	strb.w	r3, [fp]
 80078cc:	463b      	mov	r3, r7
 80078ce:	461f      	mov	r7, r3
 80078d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	2a39      	cmp	r2, #57	; 0x39
 80078d8:	d050      	beq.n	800797c <_dtoa_r+0xb74>
 80078da:	3201      	adds	r2, #1
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	e749      	b.n	8007774 <_dtoa_r+0x96c>
 80078e0:	2a00      	cmp	r2, #0
 80078e2:	dd03      	ble.n	80078ec <_dtoa_r+0xae4>
 80078e4:	2b39      	cmp	r3, #57	; 0x39
 80078e6:	d0ee      	beq.n	80078c6 <_dtoa_r+0xabe>
 80078e8:	3301      	adds	r3, #1
 80078ea:	e7c9      	b.n	8007880 <_dtoa_r+0xa78>
 80078ec:	9a02      	ldr	r2, [sp, #8]
 80078ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078f4:	428a      	cmp	r2, r1
 80078f6:	d02a      	beq.n	800794e <_dtoa_r+0xb46>
 80078f8:	4651      	mov	r1, sl
 80078fa:	2300      	movs	r3, #0
 80078fc:	220a      	movs	r2, #10
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 fc72 	bl	80081e8 <__multadd>
 8007904:	45b0      	cmp	r8, r6
 8007906:	4682      	mov	sl, r0
 8007908:	f04f 0300 	mov.w	r3, #0
 800790c:	f04f 020a 	mov.w	r2, #10
 8007910:	4641      	mov	r1, r8
 8007912:	4628      	mov	r0, r5
 8007914:	d107      	bne.n	8007926 <_dtoa_r+0xb1e>
 8007916:	f000 fc67 	bl	80081e8 <__multadd>
 800791a:	4680      	mov	r8, r0
 800791c:	4606      	mov	r6, r0
 800791e:	9b02      	ldr	r3, [sp, #8]
 8007920:	3301      	adds	r3, #1
 8007922:	9302      	str	r3, [sp, #8]
 8007924:	e777      	b.n	8007816 <_dtoa_r+0xa0e>
 8007926:	f000 fc5f 	bl	80081e8 <__multadd>
 800792a:	4631      	mov	r1, r6
 800792c:	4680      	mov	r8, r0
 800792e:	2300      	movs	r3, #0
 8007930:	220a      	movs	r2, #10
 8007932:	4628      	mov	r0, r5
 8007934:	f000 fc58 	bl	80081e8 <__multadd>
 8007938:	4606      	mov	r6, r0
 800793a:	e7f0      	b.n	800791e <_dtoa_r+0xb16>
 800793c:	f1bb 0f00 	cmp.w	fp, #0
 8007940:	bfcc      	ite	gt
 8007942:	465f      	movgt	r7, fp
 8007944:	2701      	movle	r7, #1
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	9a08      	ldr	r2, [sp, #32]
 800794c:	4417      	add	r7, r2
 800794e:	4651      	mov	r1, sl
 8007950:	2201      	movs	r2, #1
 8007952:	4628      	mov	r0, r5
 8007954:	9302      	str	r3, [sp, #8]
 8007956:	f000 fe3d 	bl	80085d4 <__lshift>
 800795a:	4621      	mov	r1, r4
 800795c:	4682      	mov	sl, r0
 800795e:	f000 fea5 	bl	80086ac <__mcmp>
 8007962:	2800      	cmp	r0, #0
 8007964:	dcb2      	bgt.n	80078cc <_dtoa_r+0xac4>
 8007966:	d102      	bne.n	800796e <_dtoa_r+0xb66>
 8007968:	9b02      	ldr	r3, [sp, #8]
 800796a:	07db      	lsls	r3, r3, #31
 800796c:	d4ae      	bmi.n	80078cc <_dtoa_r+0xac4>
 800796e:	463b      	mov	r3, r7
 8007970:	461f      	mov	r7, r3
 8007972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007976:	2a30      	cmp	r2, #48	; 0x30
 8007978:	d0fa      	beq.n	8007970 <_dtoa_r+0xb68>
 800797a:	e6fb      	b.n	8007774 <_dtoa_r+0x96c>
 800797c:	9a08      	ldr	r2, [sp, #32]
 800797e:	429a      	cmp	r2, r3
 8007980:	d1a5      	bne.n	80078ce <_dtoa_r+0xac6>
 8007982:	2331      	movs	r3, #49	; 0x31
 8007984:	f109 0901 	add.w	r9, r9, #1
 8007988:	7013      	strb	r3, [r2, #0]
 800798a:	e6f3      	b.n	8007774 <_dtoa_r+0x96c>
 800798c:	4b13      	ldr	r3, [pc, #76]	; (80079dc <_dtoa_r+0xbd4>)
 800798e:	f7ff baa7 	b.w	8006ee0 <_dtoa_r+0xd8>
 8007992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007994:	2b00      	cmp	r3, #0
 8007996:	f47f aa80 	bne.w	8006e9a <_dtoa_r+0x92>
 800799a:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <_dtoa_r+0xbd8>)
 800799c:	f7ff baa0 	b.w	8006ee0 <_dtoa_r+0xd8>
 80079a0:	f1bb 0f00 	cmp.w	fp, #0
 80079a4:	dc03      	bgt.n	80079ae <_dtoa_r+0xba6>
 80079a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	f73f aecc 	bgt.w	8007746 <_dtoa_r+0x93e>
 80079ae:	9f08      	ldr	r7, [sp, #32]
 80079b0:	4621      	mov	r1, r4
 80079b2:	4650      	mov	r0, sl
 80079b4:	f7ff f99a 	bl	8006cec <quorem>
 80079b8:	9a08      	ldr	r2, [sp, #32]
 80079ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80079be:	f807 3b01 	strb.w	r3, [r7], #1
 80079c2:	1aba      	subs	r2, r7, r2
 80079c4:	4593      	cmp	fp, r2
 80079c6:	ddb9      	ble.n	800793c <_dtoa_r+0xb34>
 80079c8:	4651      	mov	r1, sl
 80079ca:	2300      	movs	r3, #0
 80079cc:	220a      	movs	r2, #10
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 fc0a 	bl	80081e8 <__multadd>
 80079d4:	4682      	mov	sl, r0
 80079d6:	e7eb      	b.n	80079b0 <_dtoa_r+0xba8>
 80079d8:	0800b18c 	.word	0x0800b18c
 80079dc:	0800af88 	.word	0x0800af88
 80079e0:	0800b109 	.word	0x0800b109

080079e4 <rshift>:
 80079e4:	6903      	ldr	r3, [r0, #16]
 80079e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80079ee:	f100 0414 	add.w	r4, r0, #20
 80079f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80079f6:	dd46      	ble.n	8007a86 <rshift+0xa2>
 80079f8:	f011 011f 	ands.w	r1, r1, #31
 80079fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007a00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007a04:	d10c      	bne.n	8007a20 <rshift+0x3c>
 8007a06:	4629      	mov	r1, r5
 8007a08:	f100 0710 	add.w	r7, r0, #16
 8007a0c:	42b1      	cmp	r1, r6
 8007a0e:	d335      	bcc.n	8007a7c <rshift+0x98>
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	1eea      	subs	r2, r5, #3
 8007a16:	4296      	cmp	r6, r2
 8007a18:	bf38      	it	cc
 8007a1a:	2300      	movcc	r3, #0
 8007a1c:	4423      	add	r3, r4
 8007a1e:	e015      	b.n	8007a4c <rshift+0x68>
 8007a20:	46a1      	mov	r9, r4
 8007a22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007a26:	f1c1 0820 	rsb	r8, r1, #32
 8007a2a:	40cf      	lsrs	r7, r1
 8007a2c:	f105 0e04 	add.w	lr, r5, #4
 8007a30:	4576      	cmp	r6, lr
 8007a32:	46f4      	mov	ip, lr
 8007a34:	d816      	bhi.n	8007a64 <rshift+0x80>
 8007a36:	1a9b      	subs	r3, r3, r2
 8007a38:	009a      	lsls	r2, r3, #2
 8007a3a:	3a04      	subs	r2, #4
 8007a3c:	3501      	adds	r5, #1
 8007a3e:	42ae      	cmp	r6, r5
 8007a40:	bf38      	it	cc
 8007a42:	2200      	movcc	r2, #0
 8007a44:	18a3      	adds	r3, r4, r2
 8007a46:	50a7      	str	r7, [r4, r2]
 8007a48:	b107      	cbz	r7, 8007a4c <rshift+0x68>
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	42a3      	cmp	r3, r4
 8007a4e:	eba3 0204 	sub.w	r2, r3, r4
 8007a52:	bf08      	it	eq
 8007a54:	2300      	moveq	r3, #0
 8007a56:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a5a:	6102      	str	r2, [r0, #16]
 8007a5c:	bf08      	it	eq
 8007a5e:	6143      	streq	r3, [r0, #20]
 8007a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a64:	f8dc c000 	ldr.w	ip, [ip]
 8007a68:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a6c:	ea4c 0707 	orr.w	r7, ip, r7
 8007a70:	f849 7b04 	str.w	r7, [r9], #4
 8007a74:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a78:	40cf      	lsrs	r7, r1
 8007a7a:	e7d9      	b.n	8007a30 <rshift+0x4c>
 8007a7c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a80:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a84:	e7c2      	b.n	8007a0c <rshift+0x28>
 8007a86:	4623      	mov	r3, r4
 8007a88:	e7e0      	b.n	8007a4c <rshift+0x68>

08007a8a <__hexdig_fun>:
 8007a8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007a8e:	2b09      	cmp	r3, #9
 8007a90:	d802      	bhi.n	8007a98 <__hexdig_fun+0xe>
 8007a92:	3820      	subs	r0, #32
 8007a94:	b2c0      	uxtb	r0, r0
 8007a96:	4770      	bx	lr
 8007a98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007a9c:	2b05      	cmp	r3, #5
 8007a9e:	d801      	bhi.n	8007aa4 <__hexdig_fun+0x1a>
 8007aa0:	3847      	subs	r0, #71	; 0x47
 8007aa2:	e7f7      	b.n	8007a94 <__hexdig_fun+0xa>
 8007aa4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007aa8:	2b05      	cmp	r3, #5
 8007aaa:	d801      	bhi.n	8007ab0 <__hexdig_fun+0x26>
 8007aac:	3827      	subs	r0, #39	; 0x27
 8007aae:	e7f1      	b.n	8007a94 <__hexdig_fun+0xa>
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	4770      	bx	lr

08007ab4 <__gethex>:
 8007ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	b08b      	sub	sp, #44	; 0x2c
 8007aba:	9306      	str	r3, [sp, #24]
 8007abc:	4bb9      	ldr	r3, [pc, #740]	; (8007da4 <__gethex+0x2f0>)
 8007abe:	9002      	str	r0, [sp, #8]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	468b      	mov	fp, r1
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	4690      	mov	r8, r2
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	f7f8 fb41 	bl	8000150 <strlen>
 8007ace:	4682      	mov	sl, r0
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	f8db 2000 	ldr.w	r2, [fp]
 8007ad6:	4403      	add	r3, r0
 8007ad8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007adc:	9307      	str	r3, [sp, #28]
 8007ade:	1c93      	adds	r3, r2, #2
 8007ae0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007ae4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007ae8:	32fe      	adds	r2, #254	; 0xfe
 8007aea:	18d1      	adds	r1, r2, r3
 8007aec:	461f      	mov	r7, r3
 8007aee:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007af2:	9101      	str	r1, [sp, #4]
 8007af4:	2830      	cmp	r0, #48	; 0x30
 8007af6:	d0f8      	beq.n	8007aea <__gethex+0x36>
 8007af8:	f7ff ffc7 	bl	8007a8a <__hexdig_fun>
 8007afc:	4604      	mov	r4, r0
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d13a      	bne.n	8007b78 <__gethex+0xc4>
 8007b02:	4652      	mov	r2, sl
 8007b04:	4638      	mov	r0, r7
 8007b06:	9903      	ldr	r1, [sp, #12]
 8007b08:	f001 f9ea 	bl	8008ee0 <strncmp>
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d166      	bne.n	8007be0 <__gethex+0x12c>
 8007b12:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007b16:	eb07 060a 	add.w	r6, r7, sl
 8007b1a:	f7ff ffb6 	bl	8007a8a <__hexdig_fun>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d060      	beq.n	8007be4 <__gethex+0x130>
 8007b22:	4633      	mov	r3, r6
 8007b24:	7818      	ldrb	r0, [r3, #0]
 8007b26:	461f      	mov	r7, r3
 8007b28:	2830      	cmp	r0, #48	; 0x30
 8007b2a:	f103 0301 	add.w	r3, r3, #1
 8007b2e:	d0f9      	beq.n	8007b24 <__gethex+0x70>
 8007b30:	f7ff ffab 	bl	8007a8a <__hexdig_fun>
 8007b34:	2301      	movs	r3, #1
 8007b36:	fab0 f480 	clz	r4, r0
 8007b3a:	4635      	mov	r5, r6
 8007b3c:	0964      	lsrs	r4, r4, #5
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	463a      	mov	r2, r7
 8007b42:	4616      	mov	r6, r2
 8007b44:	7830      	ldrb	r0, [r6, #0]
 8007b46:	3201      	adds	r2, #1
 8007b48:	f7ff ff9f 	bl	8007a8a <__hexdig_fun>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d1f8      	bne.n	8007b42 <__gethex+0x8e>
 8007b50:	4652      	mov	r2, sl
 8007b52:	4630      	mov	r0, r6
 8007b54:	9903      	ldr	r1, [sp, #12]
 8007b56:	f001 f9c3 	bl	8008ee0 <strncmp>
 8007b5a:	b980      	cbnz	r0, 8007b7e <__gethex+0xca>
 8007b5c:	b94d      	cbnz	r5, 8007b72 <__gethex+0xbe>
 8007b5e:	eb06 050a 	add.w	r5, r6, sl
 8007b62:	462a      	mov	r2, r5
 8007b64:	4616      	mov	r6, r2
 8007b66:	7830      	ldrb	r0, [r6, #0]
 8007b68:	3201      	adds	r2, #1
 8007b6a:	f7ff ff8e 	bl	8007a8a <__hexdig_fun>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d1f8      	bne.n	8007b64 <__gethex+0xb0>
 8007b72:	1bad      	subs	r5, r5, r6
 8007b74:	00ad      	lsls	r5, r5, #2
 8007b76:	e004      	b.n	8007b82 <__gethex+0xce>
 8007b78:	2400      	movs	r4, #0
 8007b7a:	4625      	mov	r5, r4
 8007b7c:	e7e0      	b.n	8007b40 <__gethex+0x8c>
 8007b7e:	2d00      	cmp	r5, #0
 8007b80:	d1f7      	bne.n	8007b72 <__gethex+0xbe>
 8007b82:	7833      	ldrb	r3, [r6, #0]
 8007b84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b88:	2b50      	cmp	r3, #80	; 0x50
 8007b8a:	d139      	bne.n	8007c00 <__gethex+0x14c>
 8007b8c:	7873      	ldrb	r3, [r6, #1]
 8007b8e:	2b2b      	cmp	r3, #43	; 0x2b
 8007b90:	d02a      	beq.n	8007be8 <__gethex+0x134>
 8007b92:	2b2d      	cmp	r3, #45	; 0x2d
 8007b94:	d02c      	beq.n	8007bf0 <__gethex+0x13c>
 8007b96:	f04f 0900 	mov.w	r9, #0
 8007b9a:	1c71      	adds	r1, r6, #1
 8007b9c:	7808      	ldrb	r0, [r1, #0]
 8007b9e:	f7ff ff74 	bl	8007a8a <__hexdig_fun>
 8007ba2:	1e43      	subs	r3, r0, #1
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b18      	cmp	r3, #24
 8007ba8:	d82a      	bhi.n	8007c00 <__gethex+0x14c>
 8007baa:	f1a0 0210 	sub.w	r2, r0, #16
 8007bae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007bb2:	f7ff ff6a 	bl	8007a8a <__hexdig_fun>
 8007bb6:	1e43      	subs	r3, r0, #1
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b18      	cmp	r3, #24
 8007bbc:	d91b      	bls.n	8007bf6 <__gethex+0x142>
 8007bbe:	f1b9 0f00 	cmp.w	r9, #0
 8007bc2:	d000      	beq.n	8007bc6 <__gethex+0x112>
 8007bc4:	4252      	negs	r2, r2
 8007bc6:	4415      	add	r5, r2
 8007bc8:	f8cb 1000 	str.w	r1, [fp]
 8007bcc:	b1d4      	cbz	r4, 8007c04 <__gethex+0x150>
 8007bce:	9b01      	ldr	r3, [sp, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bf14      	ite	ne
 8007bd4:	2700      	movne	r7, #0
 8007bd6:	2706      	moveq	r7, #6
 8007bd8:	4638      	mov	r0, r7
 8007bda:	b00b      	add	sp, #44	; 0x2c
 8007bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be0:	463e      	mov	r6, r7
 8007be2:	4625      	mov	r5, r4
 8007be4:	2401      	movs	r4, #1
 8007be6:	e7cc      	b.n	8007b82 <__gethex+0xce>
 8007be8:	f04f 0900 	mov.w	r9, #0
 8007bec:	1cb1      	adds	r1, r6, #2
 8007bee:	e7d5      	b.n	8007b9c <__gethex+0xe8>
 8007bf0:	f04f 0901 	mov.w	r9, #1
 8007bf4:	e7fa      	b.n	8007bec <__gethex+0x138>
 8007bf6:	230a      	movs	r3, #10
 8007bf8:	fb03 0202 	mla	r2, r3, r2, r0
 8007bfc:	3a10      	subs	r2, #16
 8007bfe:	e7d6      	b.n	8007bae <__gethex+0xfa>
 8007c00:	4631      	mov	r1, r6
 8007c02:	e7e1      	b.n	8007bc8 <__gethex+0x114>
 8007c04:	4621      	mov	r1, r4
 8007c06:	1bf3      	subs	r3, r6, r7
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	2b07      	cmp	r3, #7
 8007c0c:	dc0a      	bgt.n	8007c24 <__gethex+0x170>
 8007c0e:	9802      	ldr	r0, [sp, #8]
 8007c10:	f000 fa88 	bl	8008124 <_Balloc>
 8007c14:	4604      	mov	r4, r0
 8007c16:	b940      	cbnz	r0, 8007c2a <__gethex+0x176>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	21de      	movs	r1, #222	; 0xde
 8007c1c:	4b62      	ldr	r3, [pc, #392]	; (8007da8 <__gethex+0x2f4>)
 8007c1e:	4863      	ldr	r0, [pc, #396]	; (8007dac <__gethex+0x2f8>)
 8007c20:	f001 f97e 	bl	8008f20 <__assert_func>
 8007c24:	3101      	adds	r1, #1
 8007c26:	105b      	asrs	r3, r3, #1
 8007c28:	e7ef      	b.n	8007c0a <__gethex+0x156>
 8007c2a:	f04f 0b00 	mov.w	fp, #0
 8007c2e:	f100 0914 	add.w	r9, r0, #20
 8007c32:	f1ca 0301 	rsb	r3, sl, #1
 8007c36:	f8cd 9010 	str.w	r9, [sp, #16]
 8007c3a:	f8cd b004 	str.w	fp, [sp, #4]
 8007c3e:	9308      	str	r3, [sp, #32]
 8007c40:	42b7      	cmp	r7, r6
 8007c42:	d33f      	bcc.n	8007cc4 <__gethex+0x210>
 8007c44:	9f04      	ldr	r7, [sp, #16]
 8007c46:	9b01      	ldr	r3, [sp, #4]
 8007c48:	f847 3b04 	str.w	r3, [r7], #4
 8007c4c:	eba7 0709 	sub.w	r7, r7, r9
 8007c50:	10bf      	asrs	r7, r7, #2
 8007c52:	6127      	str	r7, [r4, #16]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fb5b 	bl	8008310 <__hi0bits>
 8007c5a:	017f      	lsls	r7, r7, #5
 8007c5c:	f8d8 6000 	ldr.w	r6, [r8]
 8007c60:	1a3f      	subs	r7, r7, r0
 8007c62:	42b7      	cmp	r7, r6
 8007c64:	dd62      	ble.n	8007d2c <__gethex+0x278>
 8007c66:	1bbf      	subs	r7, r7, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 fef1 	bl	8008a52 <__any_on>
 8007c70:	4682      	mov	sl, r0
 8007c72:	b1a8      	cbz	r0, 8007ca0 <__gethex+0x1ec>
 8007c74:	f04f 0a01 	mov.w	sl, #1
 8007c78:	1e7b      	subs	r3, r7, #1
 8007c7a:	1159      	asrs	r1, r3, #5
 8007c7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007c80:	f003 021f 	and.w	r2, r3, #31
 8007c84:	fa0a f202 	lsl.w	r2, sl, r2
 8007c88:	420a      	tst	r2, r1
 8007c8a:	d009      	beq.n	8007ca0 <__gethex+0x1ec>
 8007c8c:	4553      	cmp	r3, sl
 8007c8e:	dd05      	ble.n	8007c9c <__gethex+0x1e8>
 8007c90:	4620      	mov	r0, r4
 8007c92:	1eb9      	subs	r1, r7, #2
 8007c94:	f000 fedd 	bl	8008a52 <__any_on>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d144      	bne.n	8007d26 <__gethex+0x272>
 8007c9c:	f04f 0a02 	mov.w	sl, #2
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f7ff fe9e 	bl	80079e4 <rshift>
 8007ca8:	443d      	add	r5, r7
 8007caa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cae:	42ab      	cmp	r3, r5
 8007cb0:	da4a      	bge.n	8007d48 <__gethex+0x294>
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	9802      	ldr	r0, [sp, #8]
 8007cb6:	f000 fa75 	bl	80081a4 <_Bfree>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cbe:	27a3      	movs	r7, #163	; 0xa3
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	e789      	b.n	8007bd8 <__gethex+0x124>
 8007cc4:	1e73      	subs	r3, r6, #1
 8007cc6:	9a07      	ldr	r2, [sp, #28]
 8007cc8:	9305      	str	r3, [sp, #20]
 8007cca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d019      	beq.n	8007d06 <__gethex+0x252>
 8007cd2:	f1bb 0f20 	cmp.w	fp, #32
 8007cd6:	d107      	bne.n	8007ce8 <__gethex+0x234>
 8007cd8:	9b04      	ldr	r3, [sp, #16]
 8007cda:	9a01      	ldr	r2, [sp, #4]
 8007cdc:	f843 2b04 	str.w	r2, [r3], #4
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	469b      	mov	fp, r3
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007cec:	f7ff fecd 	bl	8007a8a <__hexdig_fun>
 8007cf0:	9b01      	ldr	r3, [sp, #4]
 8007cf2:	f000 000f 	and.w	r0, r0, #15
 8007cf6:	fa00 f00b 	lsl.w	r0, r0, fp
 8007cfa:	4303      	orrs	r3, r0
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	f10b 0b04 	add.w	fp, fp, #4
 8007d02:	9b05      	ldr	r3, [sp, #20]
 8007d04:	e00d      	b.n	8007d22 <__gethex+0x26e>
 8007d06:	9b05      	ldr	r3, [sp, #20]
 8007d08:	9a08      	ldr	r2, [sp, #32]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	42bb      	cmp	r3, r7
 8007d0e:	d3e0      	bcc.n	8007cd2 <__gethex+0x21e>
 8007d10:	4618      	mov	r0, r3
 8007d12:	4652      	mov	r2, sl
 8007d14:	9903      	ldr	r1, [sp, #12]
 8007d16:	9309      	str	r3, [sp, #36]	; 0x24
 8007d18:	f001 f8e2 	bl	8008ee0 <strncmp>
 8007d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d1d7      	bne.n	8007cd2 <__gethex+0x21e>
 8007d22:	461e      	mov	r6, r3
 8007d24:	e78c      	b.n	8007c40 <__gethex+0x18c>
 8007d26:	f04f 0a03 	mov.w	sl, #3
 8007d2a:	e7b9      	b.n	8007ca0 <__gethex+0x1ec>
 8007d2c:	da09      	bge.n	8007d42 <__gethex+0x28e>
 8007d2e:	1bf7      	subs	r7, r6, r7
 8007d30:	4621      	mov	r1, r4
 8007d32:	463a      	mov	r2, r7
 8007d34:	9802      	ldr	r0, [sp, #8]
 8007d36:	f000 fc4d 	bl	80085d4 <__lshift>
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	1bed      	subs	r5, r5, r7
 8007d3e:	f100 0914 	add.w	r9, r0, #20
 8007d42:	f04f 0a00 	mov.w	sl, #0
 8007d46:	e7b0      	b.n	8007caa <__gethex+0x1f6>
 8007d48:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007d4c:	42a8      	cmp	r0, r5
 8007d4e:	dd71      	ble.n	8007e34 <__gethex+0x380>
 8007d50:	1b45      	subs	r5, r0, r5
 8007d52:	42ae      	cmp	r6, r5
 8007d54:	dc34      	bgt.n	8007dc0 <__gethex+0x30c>
 8007d56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d028      	beq.n	8007db0 <__gethex+0x2fc>
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d02a      	beq.n	8007db8 <__gethex+0x304>
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d115      	bne.n	8007d92 <__gethex+0x2de>
 8007d66:	42ae      	cmp	r6, r5
 8007d68:	d113      	bne.n	8007d92 <__gethex+0x2de>
 8007d6a:	2e01      	cmp	r6, #1
 8007d6c:	d10b      	bne.n	8007d86 <__gethex+0x2d2>
 8007d6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d72:	9a06      	ldr	r2, [sp, #24]
 8007d74:	2762      	movs	r7, #98	; 0x62
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	2301      	movs	r3, #1
 8007d7a:	6123      	str	r3, [r4, #16]
 8007d7c:	f8c9 3000 	str.w	r3, [r9]
 8007d80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d82:	601c      	str	r4, [r3, #0]
 8007d84:	e728      	b.n	8007bd8 <__gethex+0x124>
 8007d86:	4620      	mov	r0, r4
 8007d88:	1e71      	subs	r1, r6, #1
 8007d8a:	f000 fe62 	bl	8008a52 <__any_on>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d1ed      	bne.n	8007d6e <__gethex+0x2ba>
 8007d92:	4621      	mov	r1, r4
 8007d94:	9802      	ldr	r0, [sp, #8]
 8007d96:	f000 fa05 	bl	80081a4 <_Bfree>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d9e:	2750      	movs	r7, #80	; 0x50
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	e719      	b.n	8007bd8 <__gethex+0x124>
 8007da4:	0800b208 	.word	0x0800b208
 8007da8:	0800b18c 	.word	0x0800b18c
 8007dac:	0800b19d 	.word	0x0800b19d
 8007db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1ed      	bne.n	8007d92 <__gethex+0x2de>
 8007db6:	e7da      	b.n	8007d6e <__gethex+0x2ba>
 8007db8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1d7      	bne.n	8007d6e <__gethex+0x2ba>
 8007dbe:	e7e8      	b.n	8007d92 <__gethex+0x2de>
 8007dc0:	1e6f      	subs	r7, r5, #1
 8007dc2:	f1ba 0f00 	cmp.w	sl, #0
 8007dc6:	d132      	bne.n	8007e2e <__gethex+0x37a>
 8007dc8:	b127      	cbz	r7, 8007dd4 <__gethex+0x320>
 8007dca:	4639      	mov	r1, r7
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 fe40 	bl	8008a52 <__any_on>
 8007dd2:	4682      	mov	sl, r0
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	117b      	asrs	r3, r7, #5
 8007dd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007ddc:	f007 071f 	and.w	r7, r7, #31
 8007de0:	fa01 f707 	lsl.w	r7, r1, r7
 8007de4:	421f      	tst	r7, r3
 8007de6:	f04f 0702 	mov.w	r7, #2
 8007dea:	4629      	mov	r1, r5
 8007dec:	4620      	mov	r0, r4
 8007dee:	bf18      	it	ne
 8007df0:	f04a 0a02 	orrne.w	sl, sl, #2
 8007df4:	1b76      	subs	r6, r6, r5
 8007df6:	f7ff fdf5 	bl	80079e4 <rshift>
 8007dfa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007dfe:	f1ba 0f00 	cmp.w	sl, #0
 8007e02:	d048      	beq.n	8007e96 <__gethex+0x3e2>
 8007e04:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d015      	beq.n	8007e38 <__gethex+0x384>
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d017      	beq.n	8007e40 <__gethex+0x38c>
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d109      	bne.n	8007e28 <__gethex+0x374>
 8007e14:	f01a 0f02 	tst.w	sl, #2
 8007e18:	d006      	beq.n	8007e28 <__gethex+0x374>
 8007e1a:	f8d9 0000 	ldr.w	r0, [r9]
 8007e1e:	ea4a 0a00 	orr.w	sl, sl, r0
 8007e22:	f01a 0f01 	tst.w	sl, #1
 8007e26:	d10e      	bne.n	8007e46 <__gethex+0x392>
 8007e28:	f047 0710 	orr.w	r7, r7, #16
 8007e2c:	e033      	b.n	8007e96 <__gethex+0x3e2>
 8007e2e:	f04f 0a01 	mov.w	sl, #1
 8007e32:	e7cf      	b.n	8007dd4 <__gethex+0x320>
 8007e34:	2701      	movs	r7, #1
 8007e36:	e7e2      	b.n	8007dfe <__gethex+0x34a>
 8007e38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e3a:	f1c3 0301 	rsb	r3, r3, #1
 8007e3e:	9315      	str	r3, [sp, #84]	; 0x54
 8007e40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0f0      	beq.n	8007e28 <__gethex+0x374>
 8007e46:	f04f 0c00 	mov.w	ip, #0
 8007e4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e4e:	f104 0314 	add.w	r3, r4, #20
 8007e52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e60:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007e64:	d01c      	beq.n	8007ea0 <__gethex+0x3ec>
 8007e66:	3201      	adds	r2, #1
 8007e68:	6002      	str	r2, [r0, #0]
 8007e6a:	2f02      	cmp	r7, #2
 8007e6c:	f104 0314 	add.w	r3, r4, #20
 8007e70:	d13d      	bne.n	8007eee <__gethex+0x43a>
 8007e72:	f8d8 2000 	ldr.w	r2, [r8]
 8007e76:	3a01      	subs	r2, #1
 8007e78:	42b2      	cmp	r2, r6
 8007e7a:	d10a      	bne.n	8007e92 <__gethex+0x3de>
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	1171      	asrs	r1, r6, #5
 8007e80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e84:	f006 061f 	and.w	r6, r6, #31
 8007e88:	fa02 f606 	lsl.w	r6, r2, r6
 8007e8c:	421e      	tst	r6, r3
 8007e8e:	bf18      	it	ne
 8007e90:	4617      	movne	r7, r2
 8007e92:	f047 0720 	orr.w	r7, r7, #32
 8007e96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e98:	601c      	str	r4, [r3, #0]
 8007e9a:	9b06      	ldr	r3, [sp, #24]
 8007e9c:	601d      	str	r5, [r3, #0]
 8007e9e:	e69b      	b.n	8007bd8 <__gethex+0x124>
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ea6:	d8d8      	bhi.n	8007e5a <__gethex+0x3a6>
 8007ea8:	68a3      	ldr	r3, [r4, #8]
 8007eaa:	459b      	cmp	fp, r3
 8007eac:	db17      	blt.n	8007ede <__gethex+0x42a>
 8007eae:	6861      	ldr	r1, [r4, #4]
 8007eb0:	9802      	ldr	r0, [sp, #8]
 8007eb2:	3101      	adds	r1, #1
 8007eb4:	f000 f936 	bl	8008124 <_Balloc>
 8007eb8:	4681      	mov	r9, r0
 8007eba:	b918      	cbnz	r0, 8007ec4 <__gethex+0x410>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	2184      	movs	r1, #132	; 0x84
 8007ec0:	4b19      	ldr	r3, [pc, #100]	; (8007f28 <__gethex+0x474>)
 8007ec2:	e6ac      	b.n	8007c1e <__gethex+0x16a>
 8007ec4:	6922      	ldr	r2, [r4, #16]
 8007ec6:	f104 010c 	add.w	r1, r4, #12
 8007eca:	3202      	adds	r2, #2
 8007ecc:	0092      	lsls	r2, r2, #2
 8007ece:	300c      	adds	r0, #12
 8007ed0:	f000 f91a 	bl	8008108 <memcpy>
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	9802      	ldr	r0, [sp, #8]
 8007ed8:	f000 f964 	bl	80081a4 <_Bfree>
 8007edc:	464c      	mov	r4, r9
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	6122      	str	r2, [r4, #16]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007eea:	615a      	str	r2, [r3, #20]
 8007eec:	e7bd      	b.n	8007e6a <__gethex+0x3b6>
 8007eee:	6922      	ldr	r2, [r4, #16]
 8007ef0:	455a      	cmp	r2, fp
 8007ef2:	dd0b      	ble.n	8007f0c <__gethex+0x458>
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f7ff fd74 	bl	80079e4 <rshift>
 8007efc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f00:	3501      	adds	r5, #1
 8007f02:	42ab      	cmp	r3, r5
 8007f04:	f6ff aed5 	blt.w	8007cb2 <__gethex+0x1fe>
 8007f08:	2701      	movs	r7, #1
 8007f0a:	e7c2      	b.n	8007e92 <__gethex+0x3de>
 8007f0c:	f016 061f 	ands.w	r6, r6, #31
 8007f10:	d0fa      	beq.n	8007f08 <__gethex+0x454>
 8007f12:	449a      	add	sl, r3
 8007f14:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007f18:	f000 f9fa 	bl	8008310 <__hi0bits>
 8007f1c:	f1c6 0620 	rsb	r6, r6, #32
 8007f20:	42b0      	cmp	r0, r6
 8007f22:	dbe7      	blt.n	8007ef4 <__gethex+0x440>
 8007f24:	e7f0      	b.n	8007f08 <__gethex+0x454>
 8007f26:	bf00      	nop
 8007f28:	0800b18c 	.word	0x0800b18c

08007f2c <L_shift>:
 8007f2c:	f1c2 0208 	rsb	r2, r2, #8
 8007f30:	0092      	lsls	r2, r2, #2
 8007f32:	b570      	push	{r4, r5, r6, lr}
 8007f34:	f1c2 0620 	rsb	r6, r2, #32
 8007f38:	6843      	ldr	r3, [r0, #4]
 8007f3a:	6804      	ldr	r4, [r0, #0]
 8007f3c:	fa03 f506 	lsl.w	r5, r3, r6
 8007f40:	432c      	orrs	r4, r5
 8007f42:	40d3      	lsrs	r3, r2
 8007f44:	6004      	str	r4, [r0, #0]
 8007f46:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f4a:	4288      	cmp	r0, r1
 8007f4c:	d3f4      	bcc.n	8007f38 <L_shift+0xc>
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}

08007f50 <__match>:
 8007f50:	b530      	push	{r4, r5, lr}
 8007f52:	6803      	ldr	r3, [r0, #0]
 8007f54:	3301      	adds	r3, #1
 8007f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f5a:	b914      	cbnz	r4, 8007f62 <__match+0x12>
 8007f5c:	6003      	str	r3, [r0, #0]
 8007f5e:	2001      	movs	r0, #1
 8007f60:	bd30      	pop	{r4, r5, pc}
 8007f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007f6a:	2d19      	cmp	r5, #25
 8007f6c:	bf98      	it	ls
 8007f6e:	3220      	addls	r2, #32
 8007f70:	42a2      	cmp	r2, r4
 8007f72:	d0f0      	beq.n	8007f56 <__match+0x6>
 8007f74:	2000      	movs	r0, #0
 8007f76:	e7f3      	b.n	8007f60 <__match+0x10>

08007f78 <__hexnan>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	680b      	ldr	r3, [r1, #0]
 8007f80:	4682      	mov	sl, r0
 8007f82:	115e      	asrs	r6, r3, #5
 8007f84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f88:	f013 031f 	ands.w	r3, r3, #31
 8007f8c:	bf18      	it	ne
 8007f8e:	3604      	addne	r6, #4
 8007f90:	1f37      	subs	r7, r6, #4
 8007f92:	4690      	mov	r8, r2
 8007f94:	46b9      	mov	r9, r7
 8007f96:	463c      	mov	r4, r7
 8007f98:	46ab      	mov	fp, r5
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	6801      	ldr	r1, [r0, #0]
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	f846 5c04 	str.w	r5, [r6, #-4]
 8007fa4:	9502      	str	r5, [sp, #8]
 8007fa6:	784a      	ldrb	r2, [r1, #1]
 8007fa8:	1c4b      	adds	r3, r1, #1
 8007faa:	9303      	str	r3, [sp, #12]
 8007fac:	b342      	cbz	r2, 8008000 <__hexnan+0x88>
 8007fae:	4610      	mov	r0, r2
 8007fb0:	9105      	str	r1, [sp, #20]
 8007fb2:	9204      	str	r2, [sp, #16]
 8007fb4:	f7ff fd69 	bl	8007a8a <__hexdig_fun>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d14f      	bne.n	800805c <__hexnan+0xe4>
 8007fbc:	9a04      	ldr	r2, [sp, #16]
 8007fbe:	9905      	ldr	r1, [sp, #20]
 8007fc0:	2a20      	cmp	r2, #32
 8007fc2:	d818      	bhi.n	8007ff6 <__hexnan+0x7e>
 8007fc4:	9b02      	ldr	r3, [sp, #8]
 8007fc6:	459b      	cmp	fp, r3
 8007fc8:	dd13      	ble.n	8007ff2 <__hexnan+0x7a>
 8007fca:	454c      	cmp	r4, r9
 8007fcc:	d206      	bcs.n	8007fdc <__hexnan+0x64>
 8007fce:	2d07      	cmp	r5, #7
 8007fd0:	dc04      	bgt.n	8007fdc <__hexnan+0x64>
 8007fd2:	462a      	mov	r2, r5
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f7ff ffa8 	bl	8007f2c <L_shift>
 8007fdc:	4544      	cmp	r4, r8
 8007fde:	d950      	bls.n	8008082 <__hexnan+0x10a>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f1a4 0904 	sub.w	r9, r4, #4
 8007fe6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fea:	461d      	mov	r5, r3
 8007fec:	464c      	mov	r4, r9
 8007fee:	f8cd b008 	str.w	fp, [sp, #8]
 8007ff2:	9903      	ldr	r1, [sp, #12]
 8007ff4:	e7d7      	b.n	8007fa6 <__hexnan+0x2e>
 8007ff6:	2a29      	cmp	r2, #41	; 0x29
 8007ff8:	d156      	bne.n	80080a8 <__hexnan+0x130>
 8007ffa:	3102      	adds	r1, #2
 8007ffc:	f8ca 1000 	str.w	r1, [sl]
 8008000:	f1bb 0f00 	cmp.w	fp, #0
 8008004:	d050      	beq.n	80080a8 <__hexnan+0x130>
 8008006:	454c      	cmp	r4, r9
 8008008:	d206      	bcs.n	8008018 <__hexnan+0xa0>
 800800a:	2d07      	cmp	r5, #7
 800800c:	dc04      	bgt.n	8008018 <__hexnan+0xa0>
 800800e:	462a      	mov	r2, r5
 8008010:	4649      	mov	r1, r9
 8008012:	4620      	mov	r0, r4
 8008014:	f7ff ff8a 	bl	8007f2c <L_shift>
 8008018:	4544      	cmp	r4, r8
 800801a:	d934      	bls.n	8008086 <__hexnan+0x10e>
 800801c:	4623      	mov	r3, r4
 800801e:	f1a8 0204 	sub.w	r2, r8, #4
 8008022:	f853 1b04 	ldr.w	r1, [r3], #4
 8008026:	429f      	cmp	r7, r3
 8008028:	f842 1f04 	str.w	r1, [r2, #4]!
 800802c:	d2f9      	bcs.n	8008022 <__hexnan+0xaa>
 800802e:	1b3b      	subs	r3, r7, r4
 8008030:	f023 0303 	bic.w	r3, r3, #3
 8008034:	3304      	adds	r3, #4
 8008036:	3401      	adds	r4, #1
 8008038:	3e03      	subs	r6, #3
 800803a:	42b4      	cmp	r4, r6
 800803c:	bf88      	it	hi
 800803e:	2304      	movhi	r3, #4
 8008040:	2200      	movs	r2, #0
 8008042:	4443      	add	r3, r8
 8008044:	f843 2b04 	str.w	r2, [r3], #4
 8008048:	429f      	cmp	r7, r3
 800804a:	d2fb      	bcs.n	8008044 <__hexnan+0xcc>
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	b91b      	cbnz	r3, 8008058 <__hexnan+0xe0>
 8008050:	4547      	cmp	r7, r8
 8008052:	d127      	bne.n	80080a4 <__hexnan+0x12c>
 8008054:	2301      	movs	r3, #1
 8008056:	603b      	str	r3, [r7, #0]
 8008058:	2005      	movs	r0, #5
 800805a:	e026      	b.n	80080aa <__hexnan+0x132>
 800805c:	3501      	adds	r5, #1
 800805e:	2d08      	cmp	r5, #8
 8008060:	f10b 0b01 	add.w	fp, fp, #1
 8008064:	dd06      	ble.n	8008074 <__hexnan+0xfc>
 8008066:	4544      	cmp	r4, r8
 8008068:	d9c3      	bls.n	8007ff2 <__hexnan+0x7a>
 800806a:	2300      	movs	r3, #0
 800806c:	2501      	movs	r5, #1
 800806e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008072:	3c04      	subs	r4, #4
 8008074:	6822      	ldr	r2, [r4, #0]
 8008076:	f000 000f 	and.w	r0, r0, #15
 800807a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800807e:	6022      	str	r2, [r4, #0]
 8008080:	e7b7      	b.n	8007ff2 <__hexnan+0x7a>
 8008082:	2508      	movs	r5, #8
 8008084:	e7b5      	b.n	8007ff2 <__hexnan+0x7a>
 8008086:	9b01      	ldr	r3, [sp, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0df      	beq.n	800804c <__hexnan+0xd4>
 800808c:	f04f 32ff 	mov.w	r2, #4294967295
 8008090:	f1c3 0320 	rsb	r3, r3, #32
 8008094:	fa22 f303 	lsr.w	r3, r2, r3
 8008098:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800809c:	401a      	ands	r2, r3
 800809e:	f846 2c04 	str.w	r2, [r6, #-4]
 80080a2:	e7d3      	b.n	800804c <__hexnan+0xd4>
 80080a4:	3f04      	subs	r7, #4
 80080a6:	e7d1      	b.n	800804c <__hexnan+0xd4>
 80080a8:	2004      	movs	r0, #4
 80080aa:	b007      	add	sp, #28
 80080ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080b0 <_localeconv_r>:
 80080b0:	4800      	ldr	r0, [pc, #0]	; (80080b4 <_localeconv_r+0x4>)
 80080b2:	4770      	bx	lr
 80080b4:	20000174 	.word	0x20000174

080080b8 <malloc>:
 80080b8:	4b02      	ldr	r3, [pc, #8]	; (80080c4 <malloc+0xc>)
 80080ba:	4601      	mov	r1, r0
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	f000 bd43 	b.w	8008b48 <_malloc_r>
 80080c2:	bf00      	nop
 80080c4:	2000001c 	.word	0x2000001c

080080c8 <__ascii_mbtowc>:
 80080c8:	b082      	sub	sp, #8
 80080ca:	b901      	cbnz	r1, 80080ce <__ascii_mbtowc+0x6>
 80080cc:	a901      	add	r1, sp, #4
 80080ce:	b142      	cbz	r2, 80080e2 <__ascii_mbtowc+0x1a>
 80080d0:	b14b      	cbz	r3, 80080e6 <__ascii_mbtowc+0x1e>
 80080d2:	7813      	ldrb	r3, [r2, #0]
 80080d4:	600b      	str	r3, [r1, #0]
 80080d6:	7812      	ldrb	r2, [r2, #0]
 80080d8:	1e10      	subs	r0, r2, #0
 80080da:	bf18      	it	ne
 80080dc:	2001      	movne	r0, #1
 80080de:	b002      	add	sp, #8
 80080e0:	4770      	bx	lr
 80080e2:	4610      	mov	r0, r2
 80080e4:	e7fb      	b.n	80080de <__ascii_mbtowc+0x16>
 80080e6:	f06f 0001 	mvn.w	r0, #1
 80080ea:	e7f8      	b.n	80080de <__ascii_mbtowc+0x16>

080080ec <memchr>:
 80080ec:	4603      	mov	r3, r0
 80080ee:	b510      	push	{r4, lr}
 80080f0:	b2c9      	uxtb	r1, r1
 80080f2:	4402      	add	r2, r0
 80080f4:	4293      	cmp	r3, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	d101      	bne.n	80080fe <memchr+0x12>
 80080fa:	2000      	movs	r0, #0
 80080fc:	e003      	b.n	8008106 <memchr+0x1a>
 80080fe:	7804      	ldrb	r4, [r0, #0]
 8008100:	3301      	adds	r3, #1
 8008102:	428c      	cmp	r4, r1
 8008104:	d1f6      	bne.n	80080f4 <memchr+0x8>
 8008106:	bd10      	pop	{r4, pc}

08008108 <memcpy>:
 8008108:	440a      	add	r2, r1
 800810a:	4291      	cmp	r1, r2
 800810c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008110:	d100      	bne.n	8008114 <memcpy+0xc>
 8008112:	4770      	bx	lr
 8008114:	b510      	push	{r4, lr}
 8008116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800811a:	4291      	cmp	r1, r2
 800811c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008120:	d1f9      	bne.n	8008116 <memcpy+0xe>
 8008122:	bd10      	pop	{r4, pc}

08008124 <_Balloc>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008128:	4604      	mov	r4, r0
 800812a:	460d      	mov	r5, r1
 800812c:	b976      	cbnz	r6, 800814c <_Balloc+0x28>
 800812e:	2010      	movs	r0, #16
 8008130:	f7ff ffc2 	bl	80080b8 <malloc>
 8008134:	4602      	mov	r2, r0
 8008136:	6260      	str	r0, [r4, #36]	; 0x24
 8008138:	b920      	cbnz	r0, 8008144 <_Balloc+0x20>
 800813a:	2166      	movs	r1, #102	; 0x66
 800813c:	4b17      	ldr	r3, [pc, #92]	; (800819c <_Balloc+0x78>)
 800813e:	4818      	ldr	r0, [pc, #96]	; (80081a0 <_Balloc+0x7c>)
 8008140:	f000 feee 	bl	8008f20 <__assert_func>
 8008144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008148:	6006      	str	r6, [r0, #0]
 800814a:	60c6      	str	r6, [r0, #12]
 800814c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800814e:	68f3      	ldr	r3, [r6, #12]
 8008150:	b183      	cbz	r3, 8008174 <_Balloc+0x50>
 8008152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800815a:	b9b8      	cbnz	r0, 800818c <_Balloc+0x68>
 800815c:	2101      	movs	r1, #1
 800815e:	fa01 f605 	lsl.w	r6, r1, r5
 8008162:	1d72      	adds	r2, r6, #5
 8008164:	4620      	mov	r0, r4
 8008166:	0092      	lsls	r2, r2, #2
 8008168:	f000 fc94 	bl	8008a94 <_calloc_r>
 800816c:	b160      	cbz	r0, 8008188 <_Balloc+0x64>
 800816e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008172:	e00e      	b.n	8008192 <_Balloc+0x6e>
 8008174:	2221      	movs	r2, #33	; 0x21
 8008176:	2104      	movs	r1, #4
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fc8b 	bl	8008a94 <_calloc_r>
 800817e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008180:	60f0      	str	r0, [r6, #12]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e4      	bne.n	8008152 <_Balloc+0x2e>
 8008188:	2000      	movs	r0, #0
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	6802      	ldr	r2, [r0, #0]
 800818e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008192:	2300      	movs	r3, #0
 8008194:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008198:	e7f7      	b.n	800818a <_Balloc+0x66>
 800819a:	bf00      	nop
 800819c:	0800b116 	.word	0x0800b116
 80081a0:	0800b21c 	.word	0x0800b21c

080081a4 <_Bfree>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081a8:	4605      	mov	r5, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	b976      	cbnz	r6, 80081cc <_Bfree+0x28>
 80081ae:	2010      	movs	r0, #16
 80081b0:	f7ff ff82 	bl	80080b8 <malloc>
 80081b4:	4602      	mov	r2, r0
 80081b6:	6268      	str	r0, [r5, #36]	; 0x24
 80081b8:	b920      	cbnz	r0, 80081c4 <_Bfree+0x20>
 80081ba:	218a      	movs	r1, #138	; 0x8a
 80081bc:	4b08      	ldr	r3, [pc, #32]	; (80081e0 <_Bfree+0x3c>)
 80081be:	4809      	ldr	r0, [pc, #36]	; (80081e4 <_Bfree+0x40>)
 80081c0:	f000 feae 	bl	8008f20 <__assert_func>
 80081c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081c8:	6006      	str	r6, [r0, #0]
 80081ca:	60c6      	str	r6, [r0, #12]
 80081cc:	b13c      	cbz	r4, 80081de <_Bfree+0x3a>
 80081ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081d0:	6862      	ldr	r2, [r4, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081d8:	6021      	str	r1, [r4, #0]
 80081da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	0800b116 	.word	0x0800b116
 80081e4:	0800b21c 	.word	0x0800b21c

080081e8 <__multadd>:
 80081e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ec:	4698      	mov	r8, r3
 80081ee:	460c      	mov	r4, r1
 80081f0:	2300      	movs	r3, #0
 80081f2:	690e      	ldr	r6, [r1, #16]
 80081f4:	4607      	mov	r7, r0
 80081f6:	f101 0014 	add.w	r0, r1, #20
 80081fa:	6805      	ldr	r5, [r0, #0]
 80081fc:	3301      	adds	r3, #1
 80081fe:	b2a9      	uxth	r1, r5
 8008200:	fb02 8101 	mla	r1, r2, r1, r8
 8008204:	0c2d      	lsrs	r5, r5, #16
 8008206:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800820a:	fb02 c505 	mla	r5, r2, r5, ip
 800820e:	b289      	uxth	r1, r1
 8008210:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008214:	429e      	cmp	r6, r3
 8008216:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800821a:	f840 1b04 	str.w	r1, [r0], #4
 800821e:	dcec      	bgt.n	80081fa <__multadd+0x12>
 8008220:	f1b8 0f00 	cmp.w	r8, #0
 8008224:	d022      	beq.n	800826c <__multadd+0x84>
 8008226:	68a3      	ldr	r3, [r4, #8]
 8008228:	42b3      	cmp	r3, r6
 800822a:	dc19      	bgt.n	8008260 <__multadd+0x78>
 800822c:	6861      	ldr	r1, [r4, #4]
 800822e:	4638      	mov	r0, r7
 8008230:	3101      	adds	r1, #1
 8008232:	f7ff ff77 	bl	8008124 <_Balloc>
 8008236:	4605      	mov	r5, r0
 8008238:	b928      	cbnz	r0, 8008246 <__multadd+0x5e>
 800823a:	4602      	mov	r2, r0
 800823c:	21b5      	movs	r1, #181	; 0xb5
 800823e:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <__multadd+0x8c>)
 8008240:	480d      	ldr	r0, [pc, #52]	; (8008278 <__multadd+0x90>)
 8008242:	f000 fe6d 	bl	8008f20 <__assert_func>
 8008246:	6922      	ldr	r2, [r4, #16]
 8008248:	f104 010c 	add.w	r1, r4, #12
 800824c:	3202      	adds	r2, #2
 800824e:	0092      	lsls	r2, r2, #2
 8008250:	300c      	adds	r0, #12
 8008252:	f7ff ff59 	bl	8008108 <memcpy>
 8008256:	4621      	mov	r1, r4
 8008258:	4638      	mov	r0, r7
 800825a:	f7ff ffa3 	bl	80081a4 <_Bfree>
 800825e:	462c      	mov	r4, r5
 8008260:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008264:	3601      	adds	r6, #1
 8008266:	f8c3 8014 	str.w	r8, [r3, #20]
 800826a:	6126      	str	r6, [r4, #16]
 800826c:	4620      	mov	r0, r4
 800826e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008272:	bf00      	nop
 8008274:	0800b18c 	.word	0x0800b18c
 8008278:	0800b21c 	.word	0x0800b21c

0800827c <__s2b>:
 800827c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008280:	4615      	mov	r5, r2
 8008282:	2209      	movs	r2, #9
 8008284:	461f      	mov	r7, r3
 8008286:	3308      	adds	r3, #8
 8008288:	460c      	mov	r4, r1
 800828a:	fb93 f3f2 	sdiv	r3, r3, r2
 800828e:	4606      	mov	r6, r0
 8008290:	2201      	movs	r2, #1
 8008292:	2100      	movs	r1, #0
 8008294:	429a      	cmp	r2, r3
 8008296:	db09      	blt.n	80082ac <__s2b+0x30>
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff ff43 	bl	8008124 <_Balloc>
 800829e:	b940      	cbnz	r0, 80082b2 <__s2b+0x36>
 80082a0:	4602      	mov	r2, r0
 80082a2:	21ce      	movs	r1, #206	; 0xce
 80082a4:	4b18      	ldr	r3, [pc, #96]	; (8008308 <__s2b+0x8c>)
 80082a6:	4819      	ldr	r0, [pc, #100]	; (800830c <__s2b+0x90>)
 80082a8:	f000 fe3a 	bl	8008f20 <__assert_func>
 80082ac:	0052      	lsls	r2, r2, #1
 80082ae:	3101      	adds	r1, #1
 80082b0:	e7f0      	b.n	8008294 <__s2b+0x18>
 80082b2:	9b08      	ldr	r3, [sp, #32]
 80082b4:	2d09      	cmp	r5, #9
 80082b6:	6143      	str	r3, [r0, #20]
 80082b8:	f04f 0301 	mov.w	r3, #1
 80082bc:	6103      	str	r3, [r0, #16]
 80082be:	dd16      	ble.n	80082ee <__s2b+0x72>
 80082c0:	f104 0909 	add.w	r9, r4, #9
 80082c4:	46c8      	mov	r8, r9
 80082c6:	442c      	add	r4, r5
 80082c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80082cc:	4601      	mov	r1, r0
 80082ce:	220a      	movs	r2, #10
 80082d0:	4630      	mov	r0, r6
 80082d2:	3b30      	subs	r3, #48	; 0x30
 80082d4:	f7ff ff88 	bl	80081e8 <__multadd>
 80082d8:	45a0      	cmp	r8, r4
 80082da:	d1f5      	bne.n	80082c8 <__s2b+0x4c>
 80082dc:	f1a5 0408 	sub.w	r4, r5, #8
 80082e0:	444c      	add	r4, r9
 80082e2:	1b2d      	subs	r5, r5, r4
 80082e4:	1963      	adds	r3, r4, r5
 80082e6:	42bb      	cmp	r3, r7
 80082e8:	db04      	blt.n	80082f4 <__s2b+0x78>
 80082ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ee:	2509      	movs	r5, #9
 80082f0:	340a      	adds	r4, #10
 80082f2:	e7f6      	b.n	80082e2 <__s2b+0x66>
 80082f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082f8:	4601      	mov	r1, r0
 80082fa:	220a      	movs	r2, #10
 80082fc:	4630      	mov	r0, r6
 80082fe:	3b30      	subs	r3, #48	; 0x30
 8008300:	f7ff ff72 	bl	80081e8 <__multadd>
 8008304:	e7ee      	b.n	80082e4 <__s2b+0x68>
 8008306:	bf00      	nop
 8008308:	0800b18c 	.word	0x0800b18c
 800830c:	0800b21c 	.word	0x0800b21c

08008310 <__hi0bits>:
 8008310:	0c02      	lsrs	r2, r0, #16
 8008312:	0412      	lsls	r2, r2, #16
 8008314:	4603      	mov	r3, r0
 8008316:	b9ca      	cbnz	r2, 800834c <__hi0bits+0x3c>
 8008318:	0403      	lsls	r3, r0, #16
 800831a:	2010      	movs	r0, #16
 800831c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008320:	bf04      	itt	eq
 8008322:	021b      	lsleq	r3, r3, #8
 8008324:	3008      	addeq	r0, #8
 8008326:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800832a:	bf04      	itt	eq
 800832c:	011b      	lsleq	r3, r3, #4
 800832e:	3004      	addeq	r0, #4
 8008330:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008334:	bf04      	itt	eq
 8008336:	009b      	lsleq	r3, r3, #2
 8008338:	3002      	addeq	r0, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	db05      	blt.n	800834a <__hi0bits+0x3a>
 800833e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008342:	f100 0001 	add.w	r0, r0, #1
 8008346:	bf08      	it	eq
 8008348:	2020      	moveq	r0, #32
 800834a:	4770      	bx	lr
 800834c:	2000      	movs	r0, #0
 800834e:	e7e5      	b.n	800831c <__hi0bits+0xc>

08008350 <__lo0bits>:
 8008350:	6803      	ldr	r3, [r0, #0]
 8008352:	4602      	mov	r2, r0
 8008354:	f013 0007 	ands.w	r0, r3, #7
 8008358:	d00b      	beq.n	8008372 <__lo0bits+0x22>
 800835a:	07d9      	lsls	r1, r3, #31
 800835c:	d422      	bmi.n	80083a4 <__lo0bits+0x54>
 800835e:	0798      	lsls	r0, r3, #30
 8008360:	bf49      	itett	mi
 8008362:	085b      	lsrmi	r3, r3, #1
 8008364:	089b      	lsrpl	r3, r3, #2
 8008366:	2001      	movmi	r0, #1
 8008368:	6013      	strmi	r3, [r2, #0]
 800836a:	bf5c      	itt	pl
 800836c:	2002      	movpl	r0, #2
 800836e:	6013      	strpl	r3, [r2, #0]
 8008370:	4770      	bx	lr
 8008372:	b299      	uxth	r1, r3
 8008374:	b909      	cbnz	r1, 800837a <__lo0bits+0x2a>
 8008376:	2010      	movs	r0, #16
 8008378:	0c1b      	lsrs	r3, r3, #16
 800837a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800837e:	bf04      	itt	eq
 8008380:	0a1b      	lsreq	r3, r3, #8
 8008382:	3008      	addeq	r0, #8
 8008384:	0719      	lsls	r1, r3, #28
 8008386:	bf04      	itt	eq
 8008388:	091b      	lsreq	r3, r3, #4
 800838a:	3004      	addeq	r0, #4
 800838c:	0799      	lsls	r1, r3, #30
 800838e:	bf04      	itt	eq
 8008390:	089b      	lsreq	r3, r3, #2
 8008392:	3002      	addeq	r0, #2
 8008394:	07d9      	lsls	r1, r3, #31
 8008396:	d403      	bmi.n	80083a0 <__lo0bits+0x50>
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	f100 0001 	add.w	r0, r0, #1
 800839e:	d003      	beq.n	80083a8 <__lo0bits+0x58>
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	4770      	bx	lr
 80083a4:	2000      	movs	r0, #0
 80083a6:	4770      	bx	lr
 80083a8:	2020      	movs	r0, #32
 80083aa:	4770      	bx	lr

080083ac <__i2b>:
 80083ac:	b510      	push	{r4, lr}
 80083ae:	460c      	mov	r4, r1
 80083b0:	2101      	movs	r1, #1
 80083b2:	f7ff feb7 	bl	8008124 <_Balloc>
 80083b6:	4602      	mov	r2, r0
 80083b8:	b928      	cbnz	r0, 80083c6 <__i2b+0x1a>
 80083ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083be:	4b04      	ldr	r3, [pc, #16]	; (80083d0 <__i2b+0x24>)
 80083c0:	4804      	ldr	r0, [pc, #16]	; (80083d4 <__i2b+0x28>)
 80083c2:	f000 fdad 	bl	8008f20 <__assert_func>
 80083c6:	2301      	movs	r3, #1
 80083c8:	6144      	str	r4, [r0, #20]
 80083ca:	6103      	str	r3, [r0, #16]
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	bf00      	nop
 80083d0:	0800b18c 	.word	0x0800b18c
 80083d4:	0800b21c 	.word	0x0800b21c

080083d8 <__multiply>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	4614      	mov	r4, r2
 80083de:	690a      	ldr	r2, [r1, #16]
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	460d      	mov	r5, r1
 80083e4:	429a      	cmp	r2, r3
 80083e6:	bfbe      	ittt	lt
 80083e8:	460b      	movlt	r3, r1
 80083ea:	4625      	movlt	r5, r4
 80083ec:	461c      	movlt	r4, r3
 80083ee:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80083f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80083f6:	68ab      	ldr	r3, [r5, #8]
 80083f8:	6869      	ldr	r1, [r5, #4]
 80083fa:	eb0a 0709 	add.w	r7, sl, r9
 80083fe:	42bb      	cmp	r3, r7
 8008400:	b085      	sub	sp, #20
 8008402:	bfb8      	it	lt
 8008404:	3101      	addlt	r1, #1
 8008406:	f7ff fe8d 	bl	8008124 <_Balloc>
 800840a:	b930      	cbnz	r0, 800841a <__multiply+0x42>
 800840c:	4602      	mov	r2, r0
 800840e:	f240 115d 	movw	r1, #349	; 0x15d
 8008412:	4b41      	ldr	r3, [pc, #260]	; (8008518 <__multiply+0x140>)
 8008414:	4841      	ldr	r0, [pc, #260]	; (800851c <__multiply+0x144>)
 8008416:	f000 fd83 	bl	8008f20 <__assert_func>
 800841a:	f100 0614 	add.w	r6, r0, #20
 800841e:	4633      	mov	r3, r6
 8008420:	2200      	movs	r2, #0
 8008422:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008426:	4543      	cmp	r3, r8
 8008428:	d31e      	bcc.n	8008468 <__multiply+0x90>
 800842a:	f105 0c14 	add.w	ip, r5, #20
 800842e:	f104 0314 	add.w	r3, r4, #20
 8008432:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008436:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800843a:	9202      	str	r2, [sp, #8]
 800843c:	ebac 0205 	sub.w	r2, ip, r5
 8008440:	3a15      	subs	r2, #21
 8008442:	f022 0203 	bic.w	r2, r2, #3
 8008446:	3204      	adds	r2, #4
 8008448:	f105 0115 	add.w	r1, r5, #21
 800844c:	458c      	cmp	ip, r1
 800844e:	bf38      	it	cc
 8008450:	2204      	movcc	r2, #4
 8008452:	9201      	str	r2, [sp, #4]
 8008454:	9a02      	ldr	r2, [sp, #8]
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	429a      	cmp	r2, r3
 800845a:	d808      	bhi.n	800846e <__multiply+0x96>
 800845c:	2f00      	cmp	r7, #0
 800845e:	dc55      	bgt.n	800850c <__multiply+0x134>
 8008460:	6107      	str	r7, [r0, #16]
 8008462:	b005      	add	sp, #20
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	f843 2b04 	str.w	r2, [r3], #4
 800846c:	e7db      	b.n	8008426 <__multiply+0x4e>
 800846e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008472:	f1ba 0f00 	cmp.w	sl, #0
 8008476:	d020      	beq.n	80084ba <__multiply+0xe2>
 8008478:	46b1      	mov	r9, r6
 800847a:	2200      	movs	r2, #0
 800847c:	f105 0e14 	add.w	lr, r5, #20
 8008480:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008484:	f8d9 b000 	ldr.w	fp, [r9]
 8008488:	b2a1      	uxth	r1, r4
 800848a:	fa1f fb8b 	uxth.w	fp, fp
 800848e:	fb0a b101 	mla	r1, sl, r1, fp
 8008492:	4411      	add	r1, r2
 8008494:	f8d9 2000 	ldr.w	r2, [r9]
 8008498:	0c24      	lsrs	r4, r4, #16
 800849a:	0c12      	lsrs	r2, r2, #16
 800849c:	fb0a 2404 	mla	r4, sl, r4, r2
 80084a0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80084a4:	b289      	uxth	r1, r1
 80084a6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80084aa:	45f4      	cmp	ip, lr
 80084ac:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80084b0:	f849 1b04 	str.w	r1, [r9], #4
 80084b4:	d8e4      	bhi.n	8008480 <__multiply+0xa8>
 80084b6:	9901      	ldr	r1, [sp, #4]
 80084b8:	5072      	str	r2, [r6, r1]
 80084ba:	9a03      	ldr	r2, [sp, #12]
 80084bc:	3304      	adds	r3, #4
 80084be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084c2:	f1b9 0f00 	cmp.w	r9, #0
 80084c6:	d01f      	beq.n	8008508 <__multiply+0x130>
 80084c8:	46b6      	mov	lr, r6
 80084ca:	f04f 0a00 	mov.w	sl, #0
 80084ce:	6834      	ldr	r4, [r6, #0]
 80084d0:	f105 0114 	add.w	r1, r5, #20
 80084d4:	880a      	ldrh	r2, [r1, #0]
 80084d6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80084da:	b2a4      	uxth	r4, r4
 80084dc:	fb09 b202 	mla	r2, r9, r2, fp
 80084e0:	4492      	add	sl, r2
 80084e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80084e6:	f84e 4b04 	str.w	r4, [lr], #4
 80084ea:	f851 4b04 	ldr.w	r4, [r1], #4
 80084ee:	f8be 2000 	ldrh.w	r2, [lr]
 80084f2:	0c24      	lsrs	r4, r4, #16
 80084f4:	fb09 2404 	mla	r4, r9, r4, r2
 80084f8:	458c      	cmp	ip, r1
 80084fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80084fe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008502:	d8e7      	bhi.n	80084d4 <__multiply+0xfc>
 8008504:	9a01      	ldr	r2, [sp, #4]
 8008506:	50b4      	str	r4, [r6, r2]
 8008508:	3604      	adds	r6, #4
 800850a:	e7a3      	b.n	8008454 <__multiply+0x7c>
 800850c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1a5      	bne.n	8008460 <__multiply+0x88>
 8008514:	3f01      	subs	r7, #1
 8008516:	e7a1      	b.n	800845c <__multiply+0x84>
 8008518:	0800b18c 	.word	0x0800b18c
 800851c:	0800b21c 	.word	0x0800b21c

08008520 <__pow5mult>:
 8008520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008524:	4615      	mov	r5, r2
 8008526:	f012 0203 	ands.w	r2, r2, #3
 800852a:	4606      	mov	r6, r0
 800852c:	460f      	mov	r7, r1
 800852e:	d007      	beq.n	8008540 <__pow5mult+0x20>
 8008530:	4c25      	ldr	r4, [pc, #148]	; (80085c8 <__pow5mult+0xa8>)
 8008532:	3a01      	subs	r2, #1
 8008534:	2300      	movs	r3, #0
 8008536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800853a:	f7ff fe55 	bl	80081e8 <__multadd>
 800853e:	4607      	mov	r7, r0
 8008540:	10ad      	asrs	r5, r5, #2
 8008542:	d03d      	beq.n	80085c0 <__pow5mult+0xa0>
 8008544:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008546:	b97c      	cbnz	r4, 8008568 <__pow5mult+0x48>
 8008548:	2010      	movs	r0, #16
 800854a:	f7ff fdb5 	bl	80080b8 <malloc>
 800854e:	4602      	mov	r2, r0
 8008550:	6270      	str	r0, [r6, #36]	; 0x24
 8008552:	b928      	cbnz	r0, 8008560 <__pow5mult+0x40>
 8008554:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008558:	4b1c      	ldr	r3, [pc, #112]	; (80085cc <__pow5mult+0xac>)
 800855a:	481d      	ldr	r0, [pc, #116]	; (80085d0 <__pow5mult+0xb0>)
 800855c:	f000 fce0 	bl	8008f20 <__assert_func>
 8008560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008564:	6004      	str	r4, [r0, #0]
 8008566:	60c4      	str	r4, [r0, #12]
 8008568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800856c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008570:	b94c      	cbnz	r4, 8008586 <__pow5mult+0x66>
 8008572:	f240 2171 	movw	r1, #625	; 0x271
 8008576:	4630      	mov	r0, r6
 8008578:	f7ff ff18 	bl	80083ac <__i2b>
 800857c:	2300      	movs	r3, #0
 800857e:	4604      	mov	r4, r0
 8008580:	f8c8 0008 	str.w	r0, [r8, #8]
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	f04f 0900 	mov.w	r9, #0
 800858a:	07eb      	lsls	r3, r5, #31
 800858c:	d50a      	bpl.n	80085a4 <__pow5mult+0x84>
 800858e:	4639      	mov	r1, r7
 8008590:	4622      	mov	r2, r4
 8008592:	4630      	mov	r0, r6
 8008594:	f7ff ff20 	bl	80083d8 <__multiply>
 8008598:	4680      	mov	r8, r0
 800859a:	4639      	mov	r1, r7
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff fe01 	bl	80081a4 <_Bfree>
 80085a2:	4647      	mov	r7, r8
 80085a4:	106d      	asrs	r5, r5, #1
 80085a6:	d00b      	beq.n	80085c0 <__pow5mult+0xa0>
 80085a8:	6820      	ldr	r0, [r4, #0]
 80085aa:	b938      	cbnz	r0, 80085bc <__pow5mult+0x9c>
 80085ac:	4622      	mov	r2, r4
 80085ae:	4621      	mov	r1, r4
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7ff ff11 	bl	80083d8 <__multiply>
 80085b6:	6020      	str	r0, [r4, #0]
 80085b8:	f8c0 9000 	str.w	r9, [r0]
 80085bc:	4604      	mov	r4, r0
 80085be:	e7e4      	b.n	800858a <__pow5mult+0x6a>
 80085c0:	4638      	mov	r0, r7
 80085c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c6:	bf00      	nop
 80085c8:	0800b370 	.word	0x0800b370
 80085cc:	0800b116 	.word	0x0800b116
 80085d0:	0800b21c 	.word	0x0800b21c

080085d4 <__lshift>:
 80085d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d8:	460c      	mov	r4, r1
 80085da:	4607      	mov	r7, r0
 80085dc:	4691      	mov	r9, r2
 80085de:	6923      	ldr	r3, [r4, #16]
 80085e0:	6849      	ldr	r1, [r1, #4]
 80085e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085e6:	68a3      	ldr	r3, [r4, #8]
 80085e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085ec:	f108 0601 	add.w	r6, r8, #1
 80085f0:	42b3      	cmp	r3, r6
 80085f2:	db0b      	blt.n	800860c <__lshift+0x38>
 80085f4:	4638      	mov	r0, r7
 80085f6:	f7ff fd95 	bl	8008124 <_Balloc>
 80085fa:	4605      	mov	r5, r0
 80085fc:	b948      	cbnz	r0, 8008612 <__lshift+0x3e>
 80085fe:	4602      	mov	r2, r0
 8008600:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008604:	4b27      	ldr	r3, [pc, #156]	; (80086a4 <__lshift+0xd0>)
 8008606:	4828      	ldr	r0, [pc, #160]	; (80086a8 <__lshift+0xd4>)
 8008608:	f000 fc8a 	bl	8008f20 <__assert_func>
 800860c:	3101      	adds	r1, #1
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	e7ee      	b.n	80085f0 <__lshift+0x1c>
 8008612:	2300      	movs	r3, #0
 8008614:	f100 0114 	add.w	r1, r0, #20
 8008618:	f100 0210 	add.w	r2, r0, #16
 800861c:	4618      	mov	r0, r3
 800861e:	4553      	cmp	r3, sl
 8008620:	db33      	blt.n	800868a <__lshift+0xb6>
 8008622:	6920      	ldr	r0, [r4, #16]
 8008624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008628:	f104 0314 	add.w	r3, r4, #20
 800862c:	f019 091f 	ands.w	r9, r9, #31
 8008630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008638:	d02b      	beq.n	8008692 <__lshift+0xbe>
 800863a:	468a      	mov	sl, r1
 800863c:	2200      	movs	r2, #0
 800863e:	f1c9 0e20 	rsb	lr, r9, #32
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	fa00 f009 	lsl.w	r0, r0, r9
 8008648:	4302      	orrs	r2, r0
 800864a:	f84a 2b04 	str.w	r2, [sl], #4
 800864e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008652:	459c      	cmp	ip, r3
 8008654:	fa22 f20e 	lsr.w	r2, r2, lr
 8008658:	d8f3      	bhi.n	8008642 <__lshift+0x6e>
 800865a:	ebac 0304 	sub.w	r3, ip, r4
 800865e:	3b15      	subs	r3, #21
 8008660:	f023 0303 	bic.w	r3, r3, #3
 8008664:	3304      	adds	r3, #4
 8008666:	f104 0015 	add.w	r0, r4, #21
 800866a:	4584      	cmp	ip, r0
 800866c:	bf38      	it	cc
 800866e:	2304      	movcc	r3, #4
 8008670:	50ca      	str	r2, [r1, r3]
 8008672:	b10a      	cbz	r2, 8008678 <__lshift+0xa4>
 8008674:	f108 0602 	add.w	r6, r8, #2
 8008678:	3e01      	subs	r6, #1
 800867a:	4638      	mov	r0, r7
 800867c:	4621      	mov	r1, r4
 800867e:	612e      	str	r6, [r5, #16]
 8008680:	f7ff fd90 	bl	80081a4 <_Bfree>
 8008684:	4628      	mov	r0, r5
 8008686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868a:	f842 0f04 	str.w	r0, [r2, #4]!
 800868e:	3301      	adds	r3, #1
 8008690:	e7c5      	b.n	800861e <__lshift+0x4a>
 8008692:	3904      	subs	r1, #4
 8008694:	f853 2b04 	ldr.w	r2, [r3], #4
 8008698:	459c      	cmp	ip, r3
 800869a:	f841 2f04 	str.w	r2, [r1, #4]!
 800869e:	d8f9      	bhi.n	8008694 <__lshift+0xc0>
 80086a0:	e7ea      	b.n	8008678 <__lshift+0xa4>
 80086a2:	bf00      	nop
 80086a4:	0800b18c 	.word	0x0800b18c
 80086a8:	0800b21c 	.word	0x0800b21c

080086ac <__mcmp>:
 80086ac:	4603      	mov	r3, r0
 80086ae:	690a      	ldr	r2, [r1, #16]
 80086b0:	6900      	ldr	r0, [r0, #16]
 80086b2:	b530      	push	{r4, r5, lr}
 80086b4:	1a80      	subs	r0, r0, r2
 80086b6:	d10d      	bne.n	80086d4 <__mcmp+0x28>
 80086b8:	3314      	adds	r3, #20
 80086ba:	3114      	adds	r1, #20
 80086bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80086c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086cc:	4295      	cmp	r5, r2
 80086ce:	d002      	beq.n	80086d6 <__mcmp+0x2a>
 80086d0:	d304      	bcc.n	80086dc <__mcmp+0x30>
 80086d2:	2001      	movs	r0, #1
 80086d4:	bd30      	pop	{r4, r5, pc}
 80086d6:	42a3      	cmp	r3, r4
 80086d8:	d3f4      	bcc.n	80086c4 <__mcmp+0x18>
 80086da:	e7fb      	b.n	80086d4 <__mcmp+0x28>
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295
 80086e0:	e7f8      	b.n	80086d4 <__mcmp+0x28>
	...

080086e4 <__mdiff>:
 80086e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e8:	460c      	mov	r4, r1
 80086ea:	4606      	mov	r6, r0
 80086ec:	4611      	mov	r1, r2
 80086ee:	4620      	mov	r0, r4
 80086f0:	4692      	mov	sl, r2
 80086f2:	f7ff ffdb 	bl	80086ac <__mcmp>
 80086f6:	1e05      	subs	r5, r0, #0
 80086f8:	d111      	bne.n	800871e <__mdiff+0x3a>
 80086fa:	4629      	mov	r1, r5
 80086fc:	4630      	mov	r0, r6
 80086fe:	f7ff fd11 	bl	8008124 <_Balloc>
 8008702:	4602      	mov	r2, r0
 8008704:	b928      	cbnz	r0, 8008712 <__mdiff+0x2e>
 8008706:	f240 2132 	movw	r1, #562	; 0x232
 800870a:	4b3c      	ldr	r3, [pc, #240]	; (80087fc <__mdiff+0x118>)
 800870c:	483c      	ldr	r0, [pc, #240]	; (8008800 <__mdiff+0x11c>)
 800870e:	f000 fc07 	bl	8008f20 <__assert_func>
 8008712:	2301      	movs	r3, #1
 8008714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008718:	4610      	mov	r0, r2
 800871a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871e:	bfa4      	itt	ge
 8008720:	4653      	movge	r3, sl
 8008722:	46a2      	movge	sl, r4
 8008724:	4630      	mov	r0, r6
 8008726:	f8da 1004 	ldr.w	r1, [sl, #4]
 800872a:	bfa6      	itte	ge
 800872c:	461c      	movge	r4, r3
 800872e:	2500      	movge	r5, #0
 8008730:	2501      	movlt	r5, #1
 8008732:	f7ff fcf7 	bl	8008124 <_Balloc>
 8008736:	4602      	mov	r2, r0
 8008738:	b918      	cbnz	r0, 8008742 <__mdiff+0x5e>
 800873a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800873e:	4b2f      	ldr	r3, [pc, #188]	; (80087fc <__mdiff+0x118>)
 8008740:	e7e4      	b.n	800870c <__mdiff+0x28>
 8008742:	f100 0814 	add.w	r8, r0, #20
 8008746:	f8da 7010 	ldr.w	r7, [sl, #16]
 800874a:	60c5      	str	r5, [r0, #12]
 800874c:	f04f 0c00 	mov.w	ip, #0
 8008750:	f10a 0514 	add.w	r5, sl, #20
 8008754:	f10a 0010 	add.w	r0, sl, #16
 8008758:	46c2      	mov	sl, r8
 800875a:	6926      	ldr	r6, [r4, #16]
 800875c:	f104 0914 	add.w	r9, r4, #20
 8008760:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008764:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008768:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800876c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008770:	fa1f f18b 	uxth.w	r1, fp
 8008774:	4461      	add	r1, ip
 8008776:	fa1f fc83 	uxth.w	ip, r3
 800877a:	0c1b      	lsrs	r3, r3, #16
 800877c:	eba1 010c 	sub.w	r1, r1, ip
 8008780:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008784:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008788:	b289      	uxth	r1, r1
 800878a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800878e:	454e      	cmp	r6, r9
 8008790:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008794:	f84a 3b04 	str.w	r3, [sl], #4
 8008798:	d8e6      	bhi.n	8008768 <__mdiff+0x84>
 800879a:	1b33      	subs	r3, r6, r4
 800879c:	3b15      	subs	r3, #21
 800879e:	f023 0303 	bic.w	r3, r3, #3
 80087a2:	3415      	adds	r4, #21
 80087a4:	3304      	adds	r3, #4
 80087a6:	42a6      	cmp	r6, r4
 80087a8:	bf38      	it	cc
 80087aa:	2304      	movcc	r3, #4
 80087ac:	441d      	add	r5, r3
 80087ae:	4443      	add	r3, r8
 80087b0:	461e      	mov	r6, r3
 80087b2:	462c      	mov	r4, r5
 80087b4:	4574      	cmp	r4, lr
 80087b6:	d30e      	bcc.n	80087d6 <__mdiff+0xf2>
 80087b8:	f10e 0103 	add.w	r1, lr, #3
 80087bc:	1b49      	subs	r1, r1, r5
 80087be:	f021 0103 	bic.w	r1, r1, #3
 80087c2:	3d03      	subs	r5, #3
 80087c4:	45ae      	cmp	lr, r5
 80087c6:	bf38      	it	cc
 80087c8:	2100      	movcc	r1, #0
 80087ca:	4419      	add	r1, r3
 80087cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80087d0:	b18b      	cbz	r3, 80087f6 <__mdiff+0x112>
 80087d2:	6117      	str	r7, [r2, #16]
 80087d4:	e7a0      	b.n	8008718 <__mdiff+0x34>
 80087d6:	f854 8b04 	ldr.w	r8, [r4], #4
 80087da:	fa1f f188 	uxth.w	r1, r8
 80087de:	4461      	add	r1, ip
 80087e0:	1408      	asrs	r0, r1, #16
 80087e2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80087e6:	b289      	uxth	r1, r1
 80087e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80087ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087f0:	f846 1b04 	str.w	r1, [r6], #4
 80087f4:	e7de      	b.n	80087b4 <__mdiff+0xd0>
 80087f6:	3f01      	subs	r7, #1
 80087f8:	e7e8      	b.n	80087cc <__mdiff+0xe8>
 80087fa:	bf00      	nop
 80087fc:	0800b18c 	.word	0x0800b18c
 8008800:	0800b21c 	.word	0x0800b21c

08008804 <__ulp>:
 8008804:	4b11      	ldr	r3, [pc, #68]	; (800884c <__ulp+0x48>)
 8008806:	400b      	ands	r3, r1
 8008808:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800880c:	2b00      	cmp	r3, #0
 800880e:	dd02      	ble.n	8008816 <__ulp+0x12>
 8008810:	2000      	movs	r0, #0
 8008812:	4619      	mov	r1, r3
 8008814:	4770      	bx	lr
 8008816:	425b      	negs	r3, r3
 8008818:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800881c:	f04f 0000 	mov.w	r0, #0
 8008820:	f04f 0100 	mov.w	r1, #0
 8008824:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008828:	da04      	bge.n	8008834 <__ulp+0x30>
 800882a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800882e:	fa43 f102 	asr.w	r1, r3, r2
 8008832:	4770      	bx	lr
 8008834:	f1a2 0314 	sub.w	r3, r2, #20
 8008838:	2b1e      	cmp	r3, #30
 800883a:	bfd6      	itet	le
 800883c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008840:	2301      	movgt	r3, #1
 8008842:	fa22 f303 	lsrle.w	r3, r2, r3
 8008846:	4618      	mov	r0, r3
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	7ff00000 	.word	0x7ff00000

08008850 <__b2d>:
 8008850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008854:	6907      	ldr	r7, [r0, #16]
 8008856:	f100 0914 	add.w	r9, r0, #20
 800885a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800885e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008862:	f1a7 0804 	sub.w	r8, r7, #4
 8008866:	4630      	mov	r0, r6
 8008868:	f7ff fd52 	bl	8008310 <__hi0bits>
 800886c:	f1c0 0320 	rsb	r3, r0, #32
 8008870:	280a      	cmp	r0, #10
 8008872:	600b      	str	r3, [r1, #0]
 8008874:	491f      	ldr	r1, [pc, #124]	; (80088f4 <__b2d+0xa4>)
 8008876:	dc17      	bgt.n	80088a8 <__b2d+0x58>
 8008878:	45c1      	cmp	r9, r8
 800887a:	bf28      	it	cs
 800887c:	2200      	movcs	r2, #0
 800887e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008882:	fa26 f30c 	lsr.w	r3, r6, ip
 8008886:	bf38      	it	cc
 8008888:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800888c:	ea43 0501 	orr.w	r5, r3, r1
 8008890:	f100 0315 	add.w	r3, r0, #21
 8008894:	fa06 f303 	lsl.w	r3, r6, r3
 8008898:	fa22 f20c 	lsr.w	r2, r2, ip
 800889c:	ea43 0402 	orr.w	r4, r3, r2
 80088a0:	4620      	mov	r0, r4
 80088a2:	4629      	mov	r1, r5
 80088a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a8:	45c1      	cmp	r9, r8
 80088aa:	bf2e      	itee	cs
 80088ac:	2200      	movcs	r2, #0
 80088ae:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80088b2:	f1a7 0808 	subcc.w	r8, r7, #8
 80088b6:	f1b0 030b 	subs.w	r3, r0, #11
 80088ba:	d016      	beq.n	80088ea <__b2d+0x9a>
 80088bc:	f1c3 0720 	rsb	r7, r3, #32
 80088c0:	fa22 f107 	lsr.w	r1, r2, r7
 80088c4:	45c8      	cmp	r8, r9
 80088c6:	fa06 f603 	lsl.w	r6, r6, r3
 80088ca:	ea46 0601 	orr.w	r6, r6, r1
 80088ce:	bf94      	ite	ls
 80088d0:	2100      	movls	r1, #0
 80088d2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80088d6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80088da:	fa02 f003 	lsl.w	r0, r2, r3
 80088de:	40f9      	lsrs	r1, r7
 80088e0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80088e4:	ea40 0401 	orr.w	r4, r0, r1
 80088e8:	e7da      	b.n	80088a0 <__b2d+0x50>
 80088ea:	4614      	mov	r4, r2
 80088ec:	ea46 0501 	orr.w	r5, r6, r1
 80088f0:	e7d6      	b.n	80088a0 <__b2d+0x50>
 80088f2:	bf00      	nop
 80088f4:	3ff00000 	.word	0x3ff00000

080088f8 <__d2b>:
 80088f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80088fc:	2101      	movs	r1, #1
 80088fe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008902:	4690      	mov	r8, r2
 8008904:	461d      	mov	r5, r3
 8008906:	f7ff fc0d 	bl	8008124 <_Balloc>
 800890a:	4604      	mov	r4, r0
 800890c:	b930      	cbnz	r0, 800891c <__d2b+0x24>
 800890e:	4602      	mov	r2, r0
 8008910:	f240 310a 	movw	r1, #778	; 0x30a
 8008914:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <__d2b+0xb0>)
 8008916:	4825      	ldr	r0, [pc, #148]	; (80089ac <__d2b+0xb4>)
 8008918:	f000 fb02 	bl	8008f20 <__assert_func>
 800891c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008920:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008924:	bb2d      	cbnz	r5, 8008972 <__d2b+0x7a>
 8008926:	9301      	str	r3, [sp, #4]
 8008928:	f1b8 0300 	subs.w	r3, r8, #0
 800892c:	d026      	beq.n	800897c <__d2b+0x84>
 800892e:	4668      	mov	r0, sp
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	f7ff fd0d 	bl	8008350 <__lo0bits>
 8008936:	9900      	ldr	r1, [sp, #0]
 8008938:	b1f0      	cbz	r0, 8008978 <__d2b+0x80>
 800893a:	9a01      	ldr	r2, [sp, #4]
 800893c:	f1c0 0320 	rsb	r3, r0, #32
 8008940:	fa02 f303 	lsl.w	r3, r2, r3
 8008944:	430b      	orrs	r3, r1
 8008946:	40c2      	lsrs	r2, r0
 8008948:	6163      	str	r3, [r4, #20]
 800894a:	9201      	str	r2, [sp, #4]
 800894c:	9b01      	ldr	r3, [sp, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	bf14      	ite	ne
 8008952:	2102      	movne	r1, #2
 8008954:	2101      	moveq	r1, #1
 8008956:	61a3      	str	r3, [r4, #24]
 8008958:	6121      	str	r1, [r4, #16]
 800895a:	b1c5      	cbz	r5, 800898e <__d2b+0x96>
 800895c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008960:	4405      	add	r5, r0
 8008962:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008966:	603d      	str	r5, [r7, #0]
 8008968:	6030      	str	r0, [r6, #0]
 800896a:	4620      	mov	r0, r4
 800896c:	b002      	add	sp, #8
 800896e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008976:	e7d6      	b.n	8008926 <__d2b+0x2e>
 8008978:	6161      	str	r1, [r4, #20]
 800897a:	e7e7      	b.n	800894c <__d2b+0x54>
 800897c:	a801      	add	r0, sp, #4
 800897e:	f7ff fce7 	bl	8008350 <__lo0bits>
 8008982:	2101      	movs	r1, #1
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	6121      	str	r1, [r4, #16]
 8008988:	6163      	str	r3, [r4, #20]
 800898a:	3020      	adds	r0, #32
 800898c:	e7e5      	b.n	800895a <__d2b+0x62>
 800898e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008992:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008996:	6038      	str	r0, [r7, #0]
 8008998:	6918      	ldr	r0, [r3, #16]
 800899a:	f7ff fcb9 	bl	8008310 <__hi0bits>
 800899e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80089a2:	6031      	str	r1, [r6, #0]
 80089a4:	e7e1      	b.n	800896a <__d2b+0x72>
 80089a6:	bf00      	nop
 80089a8:	0800b18c 	.word	0x0800b18c
 80089ac:	0800b21c 	.word	0x0800b21c

080089b0 <__ratio>:
 80089b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	4688      	mov	r8, r1
 80089b6:	4669      	mov	r1, sp
 80089b8:	4681      	mov	r9, r0
 80089ba:	f7ff ff49 	bl	8008850 <__b2d>
 80089be:	460f      	mov	r7, r1
 80089c0:	4604      	mov	r4, r0
 80089c2:	460d      	mov	r5, r1
 80089c4:	4640      	mov	r0, r8
 80089c6:	a901      	add	r1, sp, #4
 80089c8:	f7ff ff42 	bl	8008850 <__b2d>
 80089cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80089d4:	468b      	mov	fp, r1
 80089d6:	eba3 0c02 	sub.w	ip, r3, r2
 80089da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	bfd5      	itete	le
 80089e8:	460a      	movle	r2, r1
 80089ea:	462a      	movgt	r2, r5
 80089ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80089f0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80089f4:	bfd8      	it	le
 80089f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80089fa:	465b      	mov	r3, fp
 80089fc:	4602      	mov	r2, r0
 80089fe:	4639      	mov	r1, r7
 8008a00:	4620      	mov	r0, r4
 8008a02:	f7f7 fe93 	bl	800072c <__aeabi_ddiv>
 8008a06:	b003      	add	sp, #12
 8008a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a0c <__copybits>:
 8008a0c:	3901      	subs	r1, #1
 8008a0e:	b570      	push	{r4, r5, r6, lr}
 8008a10:	1149      	asrs	r1, r1, #5
 8008a12:	6914      	ldr	r4, [r2, #16]
 8008a14:	3101      	adds	r1, #1
 8008a16:	f102 0314 	add.w	r3, r2, #20
 8008a1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a22:	1f05      	subs	r5, r0, #4
 8008a24:	42a3      	cmp	r3, r4
 8008a26:	d30c      	bcc.n	8008a42 <__copybits+0x36>
 8008a28:	1aa3      	subs	r3, r4, r2
 8008a2a:	3b11      	subs	r3, #17
 8008a2c:	f023 0303 	bic.w	r3, r3, #3
 8008a30:	3211      	adds	r2, #17
 8008a32:	42a2      	cmp	r2, r4
 8008a34:	bf88      	it	hi
 8008a36:	2300      	movhi	r3, #0
 8008a38:	4418      	add	r0, r3
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	4288      	cmp	r0, r1
 8008a3e:	d305      	bcc.n	8008a4c <__copybits+0x40>
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
 8008a42:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a46:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a4a:	e7eb      	b.n	8008a24 <__copybits+0x18>
 8008a4c:	f840 3b04 	str.w	r3, [r0], #4
 8008a50:	e7f4      	b.n	8008a3c <__copybits+0x30>

08008a52 <__any_on>:
 8008a52:	f100 0214 	add.w	r2, r0, #20
 8008a56:	6900      	ldr	r0, [r0, #16]
 8008a58:	114b      	asrs	r3, r1, #5
 8008a5a:	4298      	cmp	r0, r3
 8008a5c:	b510      	push	{r4, lr}
 8008a5e:	db11      	blt.n	8008a84 <__any_on+0x32>
 8008a60:	dd0a      	ble.n	8008a78 <__any_on+0x26>
 8008a62:	f011 011f 	ands.w	r1, r1, #31
 8008a66:	d007      	beq.n	8008a78 <__any_on+0x26>
 8008a68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a6c:	fa24 f001 	lsr.w	r0, r4, r1
 8008a70:	fa00 f101 	lsl.w	r1, r0, r1
 8008a74:	428c      	cmp	r4, r1
 8008a76:	d10b      	bne.n	8008a90 <__any_on+0x3e>
 8008a78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d803      	bhi.n	8008a88 <__any_on+0x36>
 8008a80:	2000      	movs	r0, #0
 8008a82:	bd10      	pop	{r4, pc}
 8008a84:	4603      	mov	r3, r0
 8008a86:	e7f7      	b.n	8008a78 <__any_on+0x26>
 8008a88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a8c:	2900      	cmp	r1, #0
 8008a8e:	d0f5      	beq.n	8008a7c <__any_on+0x2a>
 8008a90:	2001      	movs	r0, #1
 8008a92:	e7f6      	b.n	8008a82 <__any_on+0x30>

08008a94 <_calloc_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	fb02 f501 	mul.w	r5, r2, r1
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	f000 f854 	bl	8008b48 <_malloc_r>
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	b118      	cbz	r0, 8008aac <_calloc_r+0x18>
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	f7fc fbdc 	bl	8005264 <memset>
 8008aac:	4620      	mov	r0, r4
 8008aae:	bd38      	pop	{r3, r4, r5, pc}

08008ab0 <_free_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	2900      	cmp	r1, #0
 8008ab6:	d043      	beq.n	8008b40 <_free_r+0x90>
 8008ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008abc:	1f0c      	subs	r4, r1, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bfb8      	it	lt
 8008ac2:	18e4      	addlt	r4, r4, r3
 8008ac4:	f000 fa76 	bl	8008fb4 <__malloc_lock>
 8008ac8:	4a1e      	ldr	r2, [pc, #120]	; (8008b44 <_free_r+0x94>)
 8008aca:	6813      	ldr	r3, [r2, #0]
 8008acc:	4610      	mov	r0, r2
 8008ace:	b933      	cbnz	r3, 8008ade <_free_r+0x2e>
 8008ad0:	6063      	str	r3, [r4, #4]
 8008ad2:	6014      	str	r4, [r2, #0]
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ada:	f000 ba71 	b.w	8008fc0 <__malloc_unlock>
 8008ade:	42a3      	cmp	r3, r4
 8008ae0:	d90a      	bls.n	8008af8 <_free_r+0x48>
 8008ae2:	6821      	ldr	r1, [r4, #0]
 8008ae4:	1862      	adds	r2, r4, r1
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	bf01      	itttt	eq
 8008aea:	681a      	ldreq	r2, [r3, #0]
 8008aec:	685b      	ldreq	r3, [r3, #4]
 8008aee:	1852      	addeq	r2, r2, r1
 8008af0:	6022      	streq	r2, [r4, #0]
 8008af2:	6063      	str	r3, [r4, #4]
 8008af4:	6004      	str	r4, [r0, #0]
 8008af6:	e7ed      	b.n	8008ad4 <_free_r+0x24>
 8008af8:	461a      	mov	r2, r3
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	b10b      	cbz	r3, 8008b02 <_free_r+0x52>
 8008afe:	42a3      	cmp	r3, r4
 8008b00:	d9fa      	bls.n	8008af8 <_free_r+0x48>
 8008b02:	6811      	ldr	r1, [r2, #0]
 8008b04:	1850      	adds	r0, r2, r1
 8008b06:	42a0      	cmp	r0, r4
 8008b08:	d10b      	bne.n	8008b22 <_free_r+0x72>
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	4401      	add	r1, r0
 8008b0e:	1850      	adds	r0, r2, r1
 8008b10:	4283      	cmp	r3, r0
 8008b12:	6011      	str	r1, [r2, #0]
 8008b14:	d1de      	bne.n	8008ad4 <_free_r+0x24>
 8008b16:	6818      	ldr	r0, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	4401      	add	r1, r0
 8008b1c:	6011      	str	r1, [r2, #0]
 8008b1e:	6053      	str	r3, [r2, #4]
 8008b20:	e7d8      	b.n	8008ad4 <_free_r+0x24>
 8008b22:	d902      	bls.n	8008b2a <_free_r+0x7a>
 8008b24:	230c      	movs	r3, #12
 8008b26:	602b      	str	r3, [r5, #0]
 8008b28:	e7d4      	b.n	8008ad4 <_free_r+0x24>
 8008b2a:	6820      	ldr	r0, [r4, #0]
 8008b2c:	1821      	adds	r1, r4, r0
 8008b2e:	428b      	cmp	r3, r1
 8008b30:	bf01      	itttt	eq
 8008b32:	6819      	ldreq	r1, [r3, #0]
 8008b34:	685b      	ldreq	r3, [r3, #4]
 8008b36:	1809      	addeq	r1, r1, r0
 8008b38:	6021      	streq	r1, [r4, #0]
 8008b3a:	6063      	str	r3, [r4, #4]
 8008b3c:	6054      	str	r4, [r2, #4]
 8008b3e:	e7c9      	b.n	8008ad4 <_free_r+0x24>
 8008b40:	bd38      	pop	{r3, r4, r5, pc}
 8008b42:	bf00      	nop
 8008b44:	2000026c 	.word	0x2000026c

08008b48 <_malloc_r>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	1ccd      	adds	r5, r1, #3
 8008b4c:	f025 0503 	bic.w	r5, r5, #3
 8008b50:	3508      	adds	r5, #8
 8008b52:	2d0c      	cmp	r5, #12
 8008b54:	bf38      	it	cc
 8008b56:	250c      	movcc	r5, #12
 8008b58:	2d00      	cmp	r5, #0
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	db01      	blt.n	8008b62 <_malloc_r+0x1a>
 8008b5e:	42a9      	cmp	r1, r5
 8008b60:	d903      	bls.n	8008b6a <_malloc_r+0x22>
 8008b62:	230c      	movs	r3, #12
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	2000      	movs	r0, #0
 8008b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b6a:	f000 fa23 	bl	8008fb4 <__malloc_lock>
 8008b6e:	4921      	ldr	r1, [pc, #132]	; (8008bf4 <_malloc_r+0xac>)
 8008b70:	680a      	ldr	r2, [r1, #0]
 8008b72:	4614      	mov	r4, r2
 8008b74:	b99c      	cbnz	r4, 8008b9e <_malloc_r+0x56>
 8008b76:	4f20      	ldr	r7, [pc, #128]	; (8008bf8 <_malloc_r+0xb0>)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	b923      	cbnz	r3, 8008b86 <_malloc_r+0x3e>
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 f99e 	bl	8008ec0 <_sbrk_r>
 8008b84:	6038      	str	r0, [r7, #0]
 8008b86:	4629      	mov	r1, r5
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 f999 	bl	8008ec0 <_sbrk_r>
 8008b8e:	1c43      	adds	r3, r0, #1
 8008b90:	d123      	bne.n	8008bda <_malloc_r+0x92>
 8008b92:	230c      	movs	r3, #12
 8008b94:	4630      	mov	r0, r6
 8008b96:	6033      	str	r3, [r6, #0]
 8008b98:	f000 fa12 	bl	8008fc0 <__malloc_unlock>
 8008b9c:	e7e3      	b.n	8008b66 <_malloc_r+0x1e>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	1b5b      	subs	r3, r3, r5
 8008ba2:	d417      	bmi.n	8008bd4 <_malloc_r+0x8c>
 8008ba4:	2b0b      	cmp	r3, #11
 8008ba6:	d903      	bls.n	8008bb0 <_malloc_r+0x68>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	441c      	add	r4, r3
 8008bac:	6025      	str	r5, [r4, #0]
 8008bae:	e004      	b.n	8008bba <_malloc_r+0x72>
 8008bb0:	6863      	ldr	r3, [r4, #4]
 8008bb2:	42a2      	cmp	r2, r4
 8008bb4:	bf0c      	ite	eq
 8008bb6:	600b      	streq	r3, [r1, #0]
 8008bb8:	6053      	strne	r3, [r2, #4]
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f000 fa00 	bl	8008fc0 <__malloc_unlock>
 8008bc0:	f104 000b 	add.w	r0, r4, #11
 8008bc4:	1d23      	adds	r3, r4, #4
 8008bc6:	f020 0007 	bic.w	r0, r0, #7
 8008bca:	1ac2      	subs	r2, r0, r3
 8008bcc:	d0cc      	beq.n	8008b68 <_malloc_r+0x20>
 8008bce:	1a1b      	subs	r3, r3, r0
 8008bd0:	50a3      	str	r3, [r4, r2]
 8008bd2:	e7c9      	b.n	8008b68 <_malloc_r+0x20>
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	6864      	ldr	r4, [r4, #4]
 8008bd8:	e7cc      	b.n	8008b74 <_malloc_r+0x2c>
 8008bda:	1cc4      	adds	r4, r0, #3
 8008bdc:	f024 0403 	bic.w	r4, r4, #3
 8008be0:	42a0      	cmp	r0, r4
 8008be2:	d0e3      	beq.n	8008bac <_malloc_r+0x64>
 8008be4:	1a21      	subs	r1, r4, r0
 8008be6:	4630      	mov	r0, r6
 8008be8:	f000 f96a 	bl	8008ec0 <_sbrk_r>
 8008bec:	3001      	adds	r0, #1
 8008bee:	d1dd      	bne.n	8008bac <_malloc_r+0x64>
 8008bf0:	e7cf      	b.n	8008b92 <_malloc_r+0x4a>
 8008bf2:	bf00      	nop
 8008bf4:	2000026c 	.word	0x2000026c
 8008bf8:	20000270 	.word	0x20000270

08008bfc <__ssputs_r>:
 8008bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c00:	688e      	ldr	r6, [r1, #8]
 8008c02:	4682      	mov	sl, r0
 8008c04:	429e      	cmp	r6, r3
 8008c06:	460c      	mov	r4, r1
 8008c08:	4690      	mov	r8, r2
 8008c0a:	461f      	mov	r7, r3
 8008c0c:	d838      	bhi.n	8008c80 <__ssputs_r+0x84>
 8008c0e:	898a      	ldrh	r2, [r1, #12]
 8008c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c14:	d032      	beq.n	8008c7c <__ssputs_r+0x80>
 8008c16:	6825      	ldr	r5, [r4, #0]
 8008c18:	6909      	ldr	r1, [r1, #16]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	eba5 0901 	sub.w	r9, r5, r1
 8008c20:	6965      	ldr	r5, [r4, #20]
 8008c22:	444b      	add	r3, r9
 8008c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c2c:	106d      	asrs	r5, r5, #1
 8008c2e:	429d      	cmp	r5, r3
 8008c30:	bf38      	it	cc
 8008c32:	461d      	movcc	r5, r3
 8008c34:	0553      	lsls	r3, r2, #21
 8008c36:	d531      	bpl.n	8008c9c <__ssputs_r+0xa0>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	f7ff ff85 	bl	8008b48 <_malloc_r>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	b950      	cbnz	r0, 8008c58 <__ssputs_r+0x5c>
 8008c42:	230c      	movs	r3, #12
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	f8ca 3000 	str.w	r3, [sl]
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c58:	464a      	mov	r2, r9
 8008c5a:	6921      	ldr	r1, [r4, #16]
 8008c5c:	f7ff fa54 	bl	8008108 <memcpy>
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6a:	81a3      	strh	r3, [r4, #12]
 8008c6c:	6126      	str	r6, [r4, #16]
 8008c6e:	444e      	add	r6, r9
 8008c70:	6026      	str	r6, [r4, #0]
 8008c72:	463e      	mov	r6, r7
 8008c74:	6165      	str	r5, [r4, #20]
 8008c76:	eba5 0509 	sub.w	r5, r5, r9
 8008c7a:	60a5      	str	r5, [r4, #8]
 8008c7c:	42be      	cmp	r6, r7
 8008c7e:	d900      	bls.n	8008c82 <__ssputs_r+0x86>
 8008c80:	463e      	mov	r6, r7
 8008c82:	4632      	mov	r2, r6
 8008c84:	4641      	mov	r1, r8
 8008c86:	6820      	ldr	r0, [r4, #0]
 8008c88:	f000 f97a 	bl	8008f80 <memmove>
 8008c8c:	68a3      	ldr	r3, [r4, #8]
 8008c8e:	6822      	ldr	r2, [r4, #0]
 8008c90:	1b9b      	subs	r3, r3, r6
 8008c92:	4432      	add	r2, r6
 8008c94:	2000      	movs	r0, #0
 8008c96:	60a3      	str	r3, [r4, #8]
 8008c98:	6022      	str	r2, [r4, #0]
 8008c9a:	e7db      	b.n	8008c54 <__ssputs_r+0x58>
 8008c9c:	462a      	mov	r2, r5
 8008c9e:	f000 f995 	bl	8008fcc <_realloc_r>
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d1e1      	bne.n	8008c6c <__ssputs_r+0x70>
 8008ca8:	4650      	mov	r0, sl
 8008caa:	6921      	ldr	r1, [r4, #16]
 8008cac:	f7ff ff00 	bl	8008ab0 <_free_r>
 8008cb0:	e7c7      	b.n	8008c42 <__ssputs_r+0x46>
	...

08008cb4 <_svfiprintf_r>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	4698      	mov	r8, r3
 8008cba:	898b      	ldrh	r3, [r1, #12]
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	061b      	lsls	r3, r3, #24
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	b09d      	sub	sp, #116	; 0x74
 8008cc6:	d50e      	bpl.n	8008ce6 <_svfiprintf_r+0x32>
 8008cc8:	690b      	ldr	r3, [r1, #16]
 8008cca:	b963      	cbnz	r3, 8008ce6 <_svfiprintf_r+0x32>
 8008ccc:	2140      	movs	r1, #64	; 0x40
 8008cce:	f7ff ff3b 	bl	8008b48 <_malloc_r>
 8008cd2:	6028      	str	r0, [r5, #0]
 8008cd4:	6128      	str	r0, [r5, #16]
 8008cd6:	b920      	cbnz	r0, 8008ce2 <_svfiprintf_r+0x2e>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	e0d1      	b.n	8008e86 <_svfiprintf_r+0x1d2>
 8008ce2:	2340      	movs	r3, #64	; 0x40
 8008ce4:	616b      	str	r3, [r5, #20]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cea:	2320      	movs	r3, #32
 8008cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cf0:	2330      	movs	r3, #48	; 0x30
 8008cf2:	f04f 0901 	mov.w	r9, #1
 8008cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ea0 <_svfiprintf_r+0x1ec>
 8008cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d02:	4623      	mov	r3, r4
 8008d04:	469a      	mov	sl, r3
 8008d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0a:	b10a      	cbz	r2, 8008d10 <_svfiprintf_r+0x5c>
 8008d0c:	2a25      	cmp	r2, #37	; 0x25
 8008d0e:	d1f9      	bne.n	8008d04 <_svfiprintf_r+0x50>
 8008d10:	ebba 0b04 	subs.w	fp, sl, r4
 8008d14:	d00b      	beq.n	8008d2e <_svfiprintf_r+0x7a>
 8008d16:	465b      	mov	r3, fp
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff ff6d 	bl	8008bfc <__ssputs_r>
 8008d22:	3001      	adds	r0, #1
 8008d24:	f000 80aa 	beq.w	8008e7c <_svfiprintf_r+0x1c8>
 8008d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d2a:	445a      	add	r2, fp
 8008d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80a2 	beq.w	8008e7c <_svfiprintf_r+0x1c8>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d42:	f10a 0a01 	add.w	sl, sl, #1
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d50:	4654      	mov	r4, sl
 8008d52:	2205      	movs	r2, #5
 8008d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d58:	4851      	ldr	r0, [pc, #324]	; (8008ea0 <_svfiprintf_r+0x1ec>)
 8008d5a:	f7ff f9c7 	bl	80080ec <memchr>
 8008d5e:	9a04      	ldr	r2, [sp, #16]
 8008d60:	b9d8      	cbnz	r0, 8008d9a <_svfiprintf_r+0xe6>
 8008d62:	06d0      	lsls	r0, r2, #27
 8008d64:	bf44      	itt	mi
 8008d66:	2320      	movmi	r3, #32
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d6c:	0711      	lsls	r1, r2, #28
 8008d6e:	bf44      	itt	mi
 8008d70:	232b      	movmi	r3, #43	; 0x2b
 8008d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d76:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d7c:	d015      	beq.n	8008daa <_svfiprintf_r+0xf6>
 8008d7e:	4654      	mov	r4, sl
 8008d80:	2000      	movs	r0, #0
 8008d82:	f04f 0c0a 	mov.w	ip, #10
 8008d86:	9a07      	ldr	r2, [sp, #28]
 8008d88:	4621      	mov	r1, r4
 8008d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8e:	3b30      	subs	r3, #48	; 0x30
 8008d90:	2b09      	cmp	r3, #9
 8008d92:	d94e      	bls.n	8008e32 <_svfiprintf_r+0x17e>
 8008d94:	b1b0      	cbz	r0, 8008dc4 <_svfiprintf_r+0x110>
 8008d96:	9207      	str	r2, [sp, #28]
 8008d98:	e014      	b.n	8008dc4 <_svfiprintf_r+0x110>
 8008d9a:	eba0 0308 	sub.w	r3, r0, r8
 8008d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	46a2      	mov	sl, r4
 8008da6:	9304      	str	r3, [sp, #16]
 8008da8:	e7d2      	b.n	8008d50 <_svfiprintf_r+0x9c>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	1d19      	adds	r1, r3, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	9103      	str	r1, [sp, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bfbb      	ittet	lt
 8008db6:	425b      	neglt	r3, r3
 8008db8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dbc:	9307      	strge	r3, [sp, #28]
 8008dbe:	9307      	strlt	r3, [sp, #28]
 8008dc0:	bfb8      	it	lt
 8008dc2:	9204      	strlt	r2, [sp, #16]
 8008dc4:	7823      	ldrb	r3, [r4, #0]
 8008dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc8:	d10c      	bne.n	8008de4 <_svfiprintf_r+0x130>
 8008dca:	7863      	ldrb	r3, [r4, #1]
 8008dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dce:	d135      	bne.n	8008e3c <_svfiprintf_r+0x188>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	3402      	adds	r4, #2
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	9203      	str	r2, [sp, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfb8      	it	lt
 8008dde:	f04f 33ff 	movlt.w	r3, #4294967295
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008eb0 <_svfiprintf_r+0x1fc>
 8008de8:	2203      	movs	r2, #3
 8008dea:	4650      	mov	r0, sl
 8008dec:	7821      	ldrb	r1, [r4, #0]
 8008dee:	f7ff f97d 	bl	80080ec <memchr>
 8008df2:	b140      	cbz	r0, 8008e06 <_svfiprintf_r+0x152>
 8008df4:	2340      	movs	r3, #64	; 0x40
 8008df6:	eba0 000a 	sub.w	r0, r0, sl
 8008dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8008dfe:	9b04      	ldr	r3, [sp, #16]
 8008e00:	3401      	adds	r4, #1
 8008e02:	4303      	orrs	r3, r0
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0a:	2206      	movs	r2, #6
 8008e0c:	4825      	ldr	r0, [pc, #148]	; (8008ea4 <_svfiprintf_r+0x1f0>)
 8008e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e12:	f7ff f96b 	bl	80080ec <memchr>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d038      	beq.n	8008e8c <_svfiprintf_r+0x1d8>
 8008e1a:	4b23      	ldr	r3, [pc, #140]	; (8008ea8 <_svfiprintf_r+0x1f4>)
 8008e1c:	bb1b      	cbnz	r3, 8008e66 <_svfiprintf_r+0x1b2>
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	3307      	adds	r3, #7
 8008e22:	f023 0307 	bic.w	r3, r3, #7
 8008e26:	3308      	adds	r3, #8
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2c:	4433      	add	r3, r6
 8008e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e30:	e767      	b.n	8008d02 <_svfiprintf_r+0x4e>
 8008e32:	460c      	mov	r4, r1
 8008e34:	2001      	movs	r0, #1
 8008e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e3a:	e7a5      	b.n	8008d88 <_svfiprintf_r+0xd4>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f04f 0c0a 	mov.w	ip, #10
 8008e42:	4619      	mov	r1, r3
 8008e44:	3401      	adds	r4, #1
 8008e46:	9305      	str	r3, [sp, #20]
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4e:	3a30      	subs	r2, #48	; 0x30
 8008e50:	2a09      	cmp	r2, #9
 8008e52:	d903      	bls.n	8008e5c <_svfiprintf_r+0x1a8>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0c5      	beq.n	8008de4 <_svfiprintf_r+0x130>
 8008e58:	9105      	str	r1, [sp, #20]
 8008e5a:	e7c3      	b.n	8008de4 <_svfiprintf_r+0x130>
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	2301      	movs	r3, #1
 8008e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e64:	e7f0      	b.n	8008e48 <_svfiprintf_r+0x194>
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <_svfiprintf_r+0x1f8>)
 8008e70:	a904      	add	r1, sp, #16
 8008e72:	f7fc fa9d 	bl	80053b0 <_printf_float>
 8008e76:	1c42      	adds	r2, r0, #1
 8008e78:	4606      	mov	r6, r0
 8008e7a:	d1d6      	bne.n	8008e2a <_svfiprintf_r+0x176>
 8008e7c:	89ab      	ldrh	r3, [r5, #12]
 8008e7e:	065b      	lsls	r3, r3, #25
 8008e80:	f53f af2c 	bmi.w	8008cdc <_svfiprintf_r+0x28>
 8008e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e86:	b01d      	add	sp, #116	; 0x74
 8008e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8c:	ab03      	add	r3, sp, #12
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	462a      	mov	r2, r5
 8008e92:	4638      	mov	r0, r7
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <_svfiprintf_r+0x1f8>)
 8008e96:	a904      	add	r1, sp, #16
 8008e98:	f7fc fd26 	bl	80058e8 <_printf_i>
 8008e9c:	e7eb      	b.n	8008e76 <_svfiprintf_r+0x1c2>
 8008e9e:	bf00      	nop
 8008ea0:	0800b37c 	.word	0x0800b37c
 8008ea4:	0800b386 	.word	0x0800b386
 8008ea8:	080053b1 	.word	0x080053b1
 8008eac:	08008bfd 	.word	0x08008bfd
 8008eb0:	0800b382 	.word	0x0800b382

08008eb4 <nan>:
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	4901      	ldr	r1, [pc, #4]	; (8008ebc <nan+0x8>)
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	7ff80000 	.word	0x7ff80000

08008ec0 <_sbrk_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	4d05      	ldr	r5, [pc, #20]	; (8008edc <_sbrk_r+0x1c>)
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7f8 fd78 	bl	80019c0 <_sbrk>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_sbrk_r+0x1a>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_sbrk_r+0x1a>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	20000850 	.word	0x20000850

08008ee0 <strncmp>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	b16a      	cbz	r2, 8008f00 <strncmp+0x20>
 8008ee4:	3901      	subs	r1, #1
 8008ee6:	1884      	adds	r4, r0, r2
 8008ee8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008eec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d103      	bne.n	8008efc <strncmp+0x1c>
 8008ef4:	42a0      	cmp	r0, r4
 8008ef6:	d001      	beq.n	8008efc <strncmp+0x1c>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f5      	bne.n	8008ee8 <strncmp+0x8>
 8008efc:	1a98      	subs	r0, r3, r2
 8008efe:	bd10      	pop	{r4, pc}
 8008f00:	4610      	mov	r0, r2
 8008f02:	e7fc      	b.n	8008efe <strncmp+0x1e>

08008f04 <__ascii_wctomb>:
 8008f04:	4603      	mov	r3, r0
 8008f06:	4608      	mov	r0, r1
 8008f08:	b141      	cbz	r1, 8008f1c <__ascii_wctomb+0x18>
 8008f0a:	2aff      	cmp	r2, #255	; 0xff
 8008f0c:	d904      	bls.n	8008f18 <__ascii_wctomb+0x14>
 8008f0e:	228a      	movs	r2, #138	; 0x8a
 8008f10:	f04f 30ff 	mov.w	r0, #4294967295
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	4770      	bx	lr
 8008f18:	2001      	movs	r0, #1
 8008f1a:	700a      	strb	r2, [r1, #0]
 8008f1c:	4770      	bx	lr
	...

08008f20 <__assert_func>:
 8008f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f22:	4614      	mov	r4, r2
 8008f24:	461a      	mov	r2, r3
 8008f26:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <__assert_func+0x2c>)
 8008f28:	4605      	mov	r5, r0
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68d8      	ldr	r0, [r3, #12]
 8008f2e:	b14c      	cbz	r4, 8008f44 <__assert_func+0x24>
 8008f30:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <__assert_func+0x30>)
 8008f32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f36:	9100      	str	r1, [sp, #0]
 8008f38:	462b      	mov	r3, r5
 8008f3a:	4906      	ldr	r1, [pc, #24]	; (8008f54 <__assert_func+0x34>)
 8008f3c:	f000 f80e 	bl	8008f5c <fiprintf>
 8008f40:	f000 fa82 	bl	8009448 <abort>
 8008f44:	4b04      	ldr	r3, [pc, #16]	; (8008f58 <__assert_func+0x38>)
 8008f46:	461c      	mov	r4, r3
 8008f48:	e7f3      	b.n	8008f32 <__assert_func+0x12>
 8008f4a:	bf00      	nop
 8008f4c:	2000001c 	.word	0x2000001c
 8008f50:	0800b38d 	.word	0x0800b38d
 8008f54:	0800b39a 	.word	0x0800b39a
 8008f58:	0800b3c8 	.word	0x0800b3c8

08008f5c <fiprintf>:
 8008f5c:	b40e      	push	{r1, r2, r3}
 8008f5e:	b503      	push	{r0, r1, lr}
 8008f60:	4601      	mov	r1, r0
 8008f62:	ab03      	add	r3, sp, #12
 8008f64:	4805      	ldr	r0, [pc, #20]	; (8008f7c <fiprintf+0x20>)
 8008f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	f000 f87b 	bl	8009068 <_vfiprintf_r>
 8008f72:	b002      	add	sp, #8
 8008f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f78:	b003      	add	sp, #12
 8008f7a:	4770      	bx	lr
 8008f7c:	2000001c 	.word	0x2000001c

08008f80 <memmove>:
 8008f80:	4288      	cmp	r0, r1
 8008f82:	b510      	push	{r4, lr}
 8008f84:	eb01 0402 	add.w	r4, r1, r2
 8008f88:	d902      	bls.n	8008f90 <memmove+0x10>
 8008f8a:	4284      	cmp	r4, r0
 8008f8c:	4623      	mov	r3, r4
 8008f8e:	d807      	bhi.n	8008fa0 <memmove+0x20>
 8008f90:	1e43      	subs	r3, r0, #1
 8008f92:	42a1      	cmp	r1, r4
 8008f94:	d008      	beq.n	8008fa8 <memmove+0x28>
 8008f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f9e:	e7f8      	b.n	8008f92 <memmove+0x12>
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	4402      	add	r2, r0
 8008fa4:	428a      	cmp	r2, r1
 8008fa6:	d100      	bne.n	8008faa <memmove+0x2a>
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fb2:	e7f7      	b.n	8008fa4 <memmove+0x24>

08008fb4 <__malloc_lock>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	; (8008fbc <__malloc_lock+0x8>)
 8008fb6:	f000 bc07 	b.w	80097c8 <__retarget_lock_acquire_recursive>
 8008fba:	bf00      	nop
 8008fbc:	20000858 	.word	0x20000858

08008fc0 <__malloc_unlock>:
 8008fc0:	4801      	ldr	r0, [pc, #4]	; (8008fc8 <__malloc_unlock+0x8>)
 8008fc2:	f000 bc02 	b.w	80097ca <__retarget_lock_release_recursive>
 8008fc6:	bf00      	nop
 8008fc8:	20000858 	.word	0x20000858

08008fcc <_realloc_r>:
 8008fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fce:	4607      	mov	r7, r0
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	460e      	mov	r6, r1
 8008fd4:	b921      	cbnz	r1, 8008fe0 <_realloc_r+0x14>
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008fdc:	f7ff bdb4 	b.w	8008b48 <_malloc_r>
 8008fe0:	b922      	cbnz	r2, 8008fec <_realloc_r+0x20>
 8008fe2:	f7ff fd65 	bl	8008ab0 <_free_r>
 8008fe6:	4625      	mov	r5, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fec:	f000 fc52 	bl	8009894 <_malloc_usable_size_r>
 8008ff0:	42a0      	cmp	r0, r4
 8008ff2:	d20f      	bcs.n	8009014 <_realloc_r+0x48>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	f7ff fda6 	bl	8008b48 <_malloc_r>
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d0f2      	beq.n	8008fe8 <_realloc_r+0x1c>
 8009002:	4631      	mov	r1, r6
 8009004:	4622      	mov	r2, r4
 8009006:	f7ff f87f 	bl	8008108 <memcpy>
 800900a:	4631      	mov	r1, r6
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff fd4f 	bl	8008ab0 <_free_r>
 8009012:	e7e9      	b.n	8008fe8 <_realloc_r+0x1c>
 8009014:	4635      	mov	r5, r6
 8009016:	e7e7      	b.n	8008fe8 <_realloc_r+0x1c>

08009018 <__sfputc_r>:
 8009018:	6893      	ldr	r3, [r2, #8]
 800901a:	b410      	push	{r4}
 800901c:	3b01      	subs	r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	6093      	str	r3, [r2, #8]
 8009022:	da07      	bge.n	8009034 <__sfputc_r+0x1c>
 8009024:	6994      	ldr	r4, [r2, #24]
 8009026:	42a3      	cmp	r3, r4
 8009028:	db01      	blt.n	800902e <__sfputc_r+0x16>
 800902a:	290a      	cmp	r1, #10
 800902c:	d102      	bne.n	8009034 <__sfputc_r+0x1c>
 800902e:	bc10      	pop	{r4}
 8009030:	f000 b94a 	b.w	80092c8 <__swbuf_r>
 8009034:	6813      	ldr	r3, [r2, #0]
 8009036:	1c58      	adds	r0, r3, #1
 8009038:	6010      	str	r0, [r2, #0]
 800903a:	7019      	strb	r1, [r3, #0]
 800903c:	4608      	mov	r0, r1
 800903e:	bc10      	pop	{r4}
 8009040:	4770      	bx	lr

08009042 <__sfputs_r>:
 8009042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009044:	4606      	mov	r6, r0
 8009046:	460f      	mov	r7, r1
 8009048:	4614      	mov	r4, r2
 800904a:	18d5      	adds	r5, r2, r3
 800904c:	42ac      	cmp	r4, r5
 800904e:	d101      	bne.n	8009054 <__sfputs_r+0x12>
 8009050:	2000      	movs	r0, #0
 8009052:	e007      	b.n	8009064 <__sfputs_r+0x22>
 8009054:	463a      	mov	r2, r7
 8009056:	4630      	mov	r0, r6
 8009058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905c:	f7ff ffdc 	bl	8009018 <__sfputc_r>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d1f3      	bne.n	800904c <__sfputs_r+0xa>
 8009064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009068 <_vfiprintf_r>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	460d      	mov	r5, r1
 800906e:	4614      	mov	r4, r2
 8009070:	4698      	mov	r8, r3
 8009072:	4606      	mov	r6, r0
 8009074:	b09d      	sub	sp, #116	; 0x74
 8009076:	b118      	cbz	r0, 8009080 <_vfiprintf_r+0x18>
 8009078:	6983      	ldr	r3, [r0, #24]
 800907a:	b90b      	cbnz	r3, 8009080 <_vfiprintf_r+0x18>
 800907c:	f000 fb06 	bl	800968c <__sinit>
 8009080:	4b89      	ldr	r3, [pc, #548]	; (80092a8 <_vfiprintf_r+0x240>)
 8009082:	429d      	cmp	r5, r3
 8009084:	d11b      	bne.n	80090be <_vfiprintf_r+0x56>
 8009086:	6875      	ldr	r5, [r6, #4]
 8009088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800908a:	07d9      	lsls	r1, r3, #31
 800908c:	d405      	bmi.n	800909a <_vfiprintf_r+0x32>
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	059a      	lsls	r2, r3, #22
 8009092:	d402      	bmi.n	800909a <_vfiprintf_r+0x32>
 8009094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009096:	f000 fb97 	bl	80097c8 <__retarget_lock_acquire_recursive>
 800909a:	89ab      	ldrh	r3, [r5, #12]
 800909c:	071b      	lsls	r3, r3, #28
 800909e:	d501      	bpl.n	80090a4 <_vfiprintf_r+0x3c>
 80090a0:	692b      	ldr	r3, [r5, #16]
 80090a2:	b9eb      	cbnz	r3, 80090e0 <_vfiprintf_r+0x78>
 80090a4:	4629      	mov	r1, r5
 80090a6:	4630      	mov	r0, r6
 80090a8:	f000 f960 	bl	800936c <__swsetup_r>
 80090ac:	b1c0      	cbz	r0, 80090e0 <_vfiprintf_r+0x78>
 80090ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b0:	07dc      	lsls	r4, r3, #31
 80090b2:	d50e      	bpl.n	80090d2 <_vfiprintf_r+0x6a>
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295
 80090b8:	b01d      	add	sp, #116	; 0x74
 80090ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090be:	4b7b      	ldr	r3, [pc, #492]	; (80092ac <_vfiprintf_r+0x244>)
 80090c0:	429d      	cmp	r5, r3
 80090c2:	d101      	bne.n	80090c8 <_vfiprintf_r+0x60>
 80090c4:	68b5      	ldr	r5, [r6, #8]
 80090c6:	e7df      	b.n	8009088 <_vfiprintf_r+0x20>
 80090c8:	4b79      	ldr	r3, [pc, #484]	; (80092b0 <_vfiprintf_r+0x248>)
 80090ca:	429d      	cmp	r5, r3
 80090cc:	bf08      	it	eq
 80090ce:	68f5      	ldreq	r5, [r6, #12]
 80090d0:	e7da      	b.n	8009088 <_vfiprintf_r+0x20>
 80090d2:	89ab      	ldrh	r3, [r5, #12]
 80090d4:	0598      	lsls	r0, r3, #22
 80090d6:	d4ed      	bmi.n	80090b4 <_vfiprintf_r+0x4c>
 80090d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090da:	f000 fb76 	bl	80097ca <__retarget_lock_release_recursive>
 80090de:	e7e9      	b.n	80090b4 <_vfiprintf_r+0x4c>
 80090e0:	2300      	movs	r3, #0
 80090e2:	9309      	str	r3, [sp, #36]	; 0x24
 80090e4:	2320      	movs	r3, #32
 80090e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090ea:	2330      	movs	r3, #48	; 0x30
 80090ec:	f04f 0901 	mov.w	r9, #1
 80090f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80092b4 <_vfiprintf_r+0x24c>
 80090f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090fc:	4623      	mov	r3, r4
 80090fe:	469a      	mov	sl, r3
 8009100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009104:	b10a      	cbz	r2, 800910a <_vfiprintf_r+0xa2>
 8009106:	2a25      	cmp	r2, #37	; 0x25
 8009108:	d1f9      	bne.n	80090fe <_vfiprintf_r+0x96>
 800910a:	ebba 0b04 	subs.w	fp, sl, r4
 800910e:	d00b      	beq.n	8009128 <_vfiprintf_r+0xc0>
 8009110:	465b      	mov	r3, fp
 8009112:	4622      	mov	r2, r4
 8009114:	4629      	mov	r1, r5
 8009116:	4630      	mov	r0, r6
 8009118:	f7ff ff93 	bl	8009042 <__sfputs_r>
 800911c:	3001      	adds	r0, #1
 800911e:	f000 80aa 	beq.w	8009276 <_vfiprintf_r+0x20e>
 8009122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009124:	445a      	add	r2, fp
 8009126:	9209      	str	r2, [sp, #36]	; 0x24
 8009128:	f89a 3000 	ldrb.w	r3, [sl]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 80a2 	beq.w	8009276 <_vfiprintf_r+0x20e>
 8009132:	2300      	movs	r3, #0
 8009134:	f04f 32ff 	mov.w	r2, #4294967295
 8009138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800913c:	f10a 0a01 	add.w	sl, sl, #1
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	9307      	str	r3, [sp, #28]
 8009144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009148:	931a      	str	r3, [sp, #104]	; 0x68
 800914a:	4654      	mov	r4, sl
 800914c:	2205      	movs	r2, #5
 800914e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009152:	4858      	ldr	r0, [pc, #352]	; (80092b4 <_vfiprintf_r+0x24c>)
 8009154:	f7fe ffca 	bl	80080ec <memchr>
 8009158:	9a04      	ldr	r2, [sp, #16]
 800915a:	b9d8      	cbnz	r0, 8009194 <_vfiprintf_r+0x12c>
 800915c:	06d1      	lsls	r1, r2, #27
 800915e:	bf44      	itt	mi
 8009160:	2320      	movmi	r3, #32
 8009162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009166:	0713      	lsls	r3, r2, #28
 8009168:	bf44      	itt	mi
 800916a:	232b      	movmi	r3, #43	; 0x2b
 800916c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009170:	f89a 3000 	ldrb.w	r3, [sl]
 8009174:	2b2a      	cmp	r3, #42	; 0x2a
 8009176:	d015      	beq.n	80091a4 <_vfiprintf_r+0x13c>
 8009178:	4654      	mov	r4, sl
 800917a:	2000      	movs	r0, #0
 800917c:	f04f 0c0a 	mov.w	ip, #10
 8009180:	9a07      	ldr	r2, [sp, #28]
 8009182:	4621      	mov	r1, r4
 8009184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009188:	3b30      	subs	r3, #48	; 0x30
 800918a:	2b09      	cmp	r3, #9
 800918c:	d94e      	bls.n	800922c <_vfiprintf_r+0x1c4>
 800918e:	b1b0      	cbz	r0, 80091be <_vfiprintf_r+0x156>
 8009190:	9207      	str	r2, [sp, #28]
 8009192:	e014      	b.n	80091be <_vfiprintf_r+0x156>
 8009194:	eba0 0308 	sub.w	r3, r0, r8
 8009198:	fa09 f303 	lsl.w	r3, r9, r3
 800919c:	4313      	orrs	r3, r2
 800919e:	46a2      	mov	sl, r4
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	e7d2      	b.n	800914a <_vfiprintf_r+0xe2>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	1d19      	adds	r1, r3, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	9103      	str	r1, [sp, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfbb      	ittet	lt
 80091b0:	425b      	neglt	r3, r3
 80091b2:	f042 0202 	orrlt.w	r2, r2, #2
 80091b6:	9307      	strge	r3, [sp, #28]
 80091b8:	9307      	strlt	r3, [sp, #28]
 80091ba:	bfb8      	it	lt
 80091bc:	9204      	strlt	r2, [sp, #16]
 80091be:	7823      	ldrb	r3, [r4, #0]
 80091c0:	2b2e      	cmp	r3, #46	; 0x2e
 80091c2:	d10c      	bne.n	80091de <_vfiprintf_r+0x176>
 80091c4:	7863      	ldrb	r3, [r4, #1]
 80091c6:	2b2a      	cmp	r3, #42	; 0x2a
 80091c8:	d135      	bne.n	8009236 <_vfiprintf_r+0x1ce>
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	3402      	adds	r4, #2
 80091ce:	1d1a      	adds	r2, r3, #4
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	9203      	str	r2, [sp, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bfb8      	it	lt
 80091d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80091dc:	9305      	str	r3, [sp, #20]
 80091de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092c4 <_vfiprintf_r+0x25c>
 80091e2:	2203      	movs	r2, #3
 80091e4:	4650      	mov	r0, sl
 80091e6:	7821      	ldrb	r1, [r4, #0]
 80091e8:	f7fe ff80 	bl	80080ec <memchr>
 80091ec:	b140      	cbz	r0, 8009200 <_vfiprintf_r+0x198>
 80091ee:	2340      	movs	r3, #64	; 0x40
 80091f0:	eba0 000a 	sub.w	r0, r0, sl
 80091f4:	fa03 f000 	lsl.w	r0, r3, r0
 80091f8:	9b04      	ldr	r3, [sp, #16]
 80091fa:	3401      	adds	r4, #1
 80091fc:	4303      	orrs	r3, r0
 80091fe:	9304      	str	r3, [sp, #16]
 8009200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009204:	2206      	movs	r2, #6
 8009206:	482c      	ldr	r0, [pc, #176]	; (80092b8 <_vfiprintf_r+0x250>)
 8009208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800920c:	f7fe ff6e 	bl	80080ec <memchr>
 8009210:	2800      	cmp	r0, #0
 8009212:	d03f      	beq.n	8009294 <_vfiprintf_r+0x22c>
 8009214:	4b29      	ldr	r3, [pc, #164]	; (80092bc <_vfiprintf_r+0x254>)
 8009216:	bb1b      	cbnz	r3, 8009260 <_vfiprintf_r+0x1f8>
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	3307      	adds	r3, #7
 800921c:	f023 0307 	bic.w	r3, r3, #7
 8009220:	3308      	adds	r3, #8
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009226:	443b      	add	r3, r7
 8009228:	9309      	str	r3, [sp, #36]	; 0x24
 800922a:	e767      	b.n	80090fc <_vfiprintf_r+0x94>
 800922c:	460c      	mov	r4, r1
 800922e:	2001      	movs	r0, #1
 8009230:	fb0c 3202 	mla	r2, ip, r2, r3
 8009234:	e7a5      	b.n	8009182 <_vfiprintf_r+0x11a>
 8009236:	2300      	movs	r3, #0
 8009238:	f04f 0c0a 	mov.w	ip, #10
 800923c:	4619      	mov	r1, r3
 800923e:	3401      	adds	r4, #1
 8009240:	9305      	str	r3, [sp, #20]
 8009242:	4620      	mov	r0, r4
 8009244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009248:	3a30      	subs	r2, #48	; 0x30
 800924a:	2a09      	cmp	r2, #9
 800924c:	d903      	bls.n	8009256 <_vfiprintf_r+0x1ee>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0c5      	beq.n	80091de <_vfiprintf_r+0x176>
 8009252:	9105      	str	r1, [sp, #20]
 8009254:	e7c3      	b.n	80091de <_vfiprintf_r+0x176>
 8009256:	4604      	mov	r4, r0
 8009258:	2301      	movs	r3, #1
 800925a:	fb0c 2101 	mla	r1, ip, r1, r2
 800925e:	e7f0      	b.n	8009242 <_vfiprintf_r+0x1da>
 8009260:	ab03      	add	r3, sp, #12
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	462a      	mov	r2, r5
 8009266:	4630      	mov	r0, r6
 8009268:	4b15      	ldr	r3, [pc, #84]	; (80092c0 <_vfiprintf_r+0x258>)
 800926a:	a904      	add	r1, sp, #16
 800926c:	f7fc f8a0 	bl	80053b0 <_printf_float>
 8009270:	4607      	mov	r7, r0
 8009272:	1c78      	adds	r0, r7, #1
 8009274:	d1d6      	bne.n	8009224 <_vfiprintf_r+0x1bc>
 8009276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009278:	07d9      	lsls	r1, r3, #31
 800927a:	d405      	bmi.n	8009288 <_vfiprintf_r+0x220>
 800927c:	89ab      	ldrh	r3, [r5, #12]
 800927e:	059a      	lsls	r2, r3, #22
 8009280:	d402      	bmi.n	8009288 <_vfiprintf_r+0x220>
 8009282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009284:	f000 faa1 	bl	80097ca <__retarget_lock_release_recursive>
 8009288:	89ab      	ldrh	r3, [r5, #12]
 800928a:	065b      	lsls	r3, r3, #25
 800928c:	f53f af12 	bmi.w	80090b4 <_vfiprintf_r+0x4c>
 8009290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009292:	e711      	b.n	80090b8 <_vfiprintf_r+0x50>
 8009294:	ab03      	add	r3, sp, #12
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	462a      	mov	r2, r5
 800929a:	4630      	mov	r0, r6
 800929c:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <_vfiprintf_r+0x258>)
 800929e:	a904      	add	r1, sp, #16
 80092a0:	f7fc fb22 	bl	80058e8 <_printf_i>
 80092a4:	e7e4      	b.n	8009270 <_vfiprintf_r+0x208>
 80092a6:	bf00      	nop
 80092a8:	0800b3ec 	.word	0x0800b3ec
 80092ac:	0800b40c 	.word	0x0800b40c
 80092b0:	0800b3cc 	.word	0x0800b3cc
 80092b4:	0800b37c 	.word	0x0800b37c
 80092b8:	0800b386 	.word	0x0800b386
 80092bc:	080053b1 	.word	0x080053b1
 80092c0:	08009043 	.word	0x08009043
 80092c4:	0800b382 	.word	0x0800b382

080092c8 <__swbuf_r>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	460e      	mov	r6, r1
 80092cc:	4614      	mov	r4, r2
 80092ce:	4605      	mov	r5, r0
 80092d0:	b118      	cbz	r0, 80092da <__swbuf_r+0x12>
 80092d2:	6983      	ldr	r3, [r0, #24]
 80092d4:	b90b      	cbnz	r3, 80092da <__swbuf_r+0x12>
 80092d6:	f000 f9d9 	bl	800968c <__sinit>
 80092da:	4b21      	ldr	r3, [pc, #132]	; (8009360 <__swbuf_r+0x98>)
 80092dc:	429c      	cmp	r4, r3
 80092de:	d12b      	bne.n	8009338 <__swbuf_r+0x70>
 80092e0:	686c      	ldr	r4, [r5, #4]
 80092e2:	69a3      	ldr	r3, [r4, #24]
 80092e4:	60a3      	str	r3, [r4, #8]
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	071a      	lsls	r2, r3, #28
 80092ea:	d52f      	bpl.n	800934c <__swbuf_r+0x84>
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	b36b      	cbz	r3, 800934c <__swbuf_r+0x84>
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	6820      	ldr	r0, [r4, #0]
 80092f4:	b2f6      	uxtb	r6, r6
 80092f6:	1ac0      	subs	r0, r0, r3
 80092f8:	6963      	ldr	r3, [r4, #20]
 80092fa:	4637      	mov	r7, r6
 80092fc:	4283      	cmp	r3, r0
 80092fe:	dc04      	bgt.n	800930a <__swbuf_r+0x42>
 8009300:	4621      	mov	r1, r4
 8009302:	4628      	mov	r0, r5
 8009304:	f000 f92e 	bl	8009564 <_fflush_r>
 8009308:	bb30      	cbnz	r0, 8009358 <__swbuf_r+0x90>
 800930a:	68a3      	ldr	r3, [r4, #8]
 800930c:	3001      	adds	r0, #1
 800930e:	3b01      	subs	r3, #1
 8009310:	60a3      	str	r3, [r4, #8]
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	6022      	str	r2, [r4, #0]
 8009318:	701e      	strb	r6, [r3, #0]
 800931a:	6963      	ldr	r3, [r4, #20]
 800931c:	4283      	cmp	r3, r0
 800931e:	d004      	beq.n	800932a <__swbuf_r+0x62>
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	07db      	lsls	r3, r3, #31
 8009324:	d506      	bpl.n	8009334 <__swbuf_r+0x6c>
 8009326:	2e0a      	cmp	r6, #10
 8009328:	d104      	bne.n	8009334 <__swbuf_r+0x6c>
 800932a:	4621      	mov	r1, r4
 800932c:	4628      	mov	r0, r5
 800932e:	f000 f919 	bl	8009564 <_fflush_r>
 8009332:	b988      	cbnz	r0, 8009358 <__swbuf_r+0x90>
 8009334:	4638      	mov	r0, r7
 8009336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009338:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <__swbuf_r+0x9c>)
 800933a:	429c      	cmp	r4, r3
 800933c:	d101      	bne.n	8009342 <__swbuf_r+0x7a>
 800933e:	68ac      	ldr	r4, [r5, #8]
 8009340:	e7cf      	b.n	80092e2 <__swbuf_r+0x1a>
 8009342:	4b09      	ldr	r3, [pc, #36]	; (8009368 <__swbuf_r+0xa0>)
 8009344:	429c      	cmp	r4, r3
 8009346:	bf08      	it	eq
 8009348:	68ec      	ldreq	r4, [r5, #12]
 800934a:	e7ca      	b.n	80092e2 <__swbuf_r+0x1a>
 800934c:	4621      	mov	r1, r4
 800934e:	4628      	mov	r0, r5
 8009350:	f000 f80c 	bl	800936c <__swsetup_r>
 8009354:	2800      	cmp	r0, #0
 8009356:	d0cb      	beq.n	80092f0 <__swbuf_r+0x28>
 8009358:	f04f 37ff 	mov.w	r7, #4294967295
 800935c:	e7ea      	b.n	8009334 <__swbuf_r+0x6c>
 800935e:	bf00      	nop
 8009360:	0800b3ec 	.word	0x0800b3ec
 8009364:	0800b40c 	.word	0x0800b40c
 8009368:	0800b3cc 	.word	0x0800b3cc

0800936c <__swsetup_r>:
 800936c:	4b32      	ldr	r3, [pc, #200]	; (8009438 <__swsetup_r+0xcc>)
 800936e:	b570      	push	{r4, r5, r6, lr}
 8009370:	681d      	ldr	r5, [r3, #0]
 8009372:	4606      	mov	r6, r0
 8009374:	460c      	mov	r4, r1
 8009376:	b125      	cbz	r5, 8009382 <__swsetup_r+0x16>
 8009378:	69ab      	ldr	r3, [r5, #24]
 800937a:	b913      	cbnz	r3, 8009382 <__swsetup_r+0x16>
 800937c:	4628      	mov	r0, r5
 800937e:	f000 f985 	bl	800968c <__sinit>
 8009382:	4b2e      	ldr	r3, [pc, #184]	; (800943c <__swsetup_r+0xd0>)
 8009384:	429c      	cmp	r4, r3
 8009386:	d10f      	bne.n	80093a8 <__swsetup_r+0x3c>
 8009388:	686c      	ldr	r4, [r5, #4]
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009390:	0719      	lsls	r1, r3, #28
 8009392:	d42c      	bmi.n	80093ee <__swsetup_r+0x82>
 8009394:	06dd      	lsls	r5, r3, #27
 8009396:	d411      	bmi.n	80093bc <__swsetup_r+0x50>
 8009398:	2309      	movs	r3, #9
 800939a:	6033      	str	r3, [r6, #0]
 800939c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	81a3      	strh	r3, [r4, #12]
 80093a6:	e03e      	b.n	8009426 <__swsetup_r+0xba>
 80093a8:	4b25      	ldr	r3, [pc, #148]	; (8009440 <__swsetup_r+0xd4>)
 80093aa:	429c      	cmp	r4, r3
 80093ac:	d101      	bne.n	80093b2 <__swsetup_r+0x46>
 80093ae:	68ac      	ldr	r4, [r5, #8]
 80093b0:	e7eb      	b.n	800938a <__swsetup_r+0x1e>
 80093b2:	4b24      	ldr	r3, [pc, #144]	; (8009444 <__swsetup_r+0xd8>)
 80093b4:	429c      	cmp	r4, r3
 80093b6:	bf08      	it	eq
 80093b8:	68ec      	ldreq	r4, [r5, #12]
 80093ba:	e7e6      	b.n	800938a <__swsetup_r+0x1e>
 80093bc:	0758      	lsls	r0, r3, #29
 80093be:	d512      	bpl.n	80093e6 <__swsetup_r+0x7a>
 80093c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093c2:	b141      	cbz	r1, 80093d6 <__swsetup_r+0x6a>
 80093c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093c8:	4299      	cmp	r1, r3
 80093ca:	d002      	beq.n	80093d2 <__swsetup_r+0x66>
 80093cc:	4630      	mov	r0, r6
 80093ce:	f7ff fb6f 	bl	8008ab0 <_free_r>
 80093d2:	2300      	movs	r3, #0
 80093d4:	6363      	str	r3, [r4, #52]	; 0x34
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093dc:	81a3      	strh	r3, [r4, #12]
 80093de:	2300      	movs	r3, #0
 80093e0:	6063      	str	r3, [r4, #4]
 80093e2:	6923      	ldr	r3, [r4, #16]
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f043 0308 	orr.w	r3, r3, #8
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	b94b      	cbnz	r3, 8009406 <__swsetup_r+0x9a>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093fc:	d003      	beq.n	8009406 <__swsetup_r+0x9a>
 80093fe:	4621      	mov	r1, r4
 8009400:	4630      	mov	r0, r6
 8009402:	f000 fa07 	bl	8009814 <__smakebuf_r>
 8009406:	89a0      	ldrh	r0, [r4, #12]
 8009408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800940c:	f010 0301 	ands.w	r3, r0, #1
 8009410:	d00a      	beq.n	8009428 <__swsetup_r+0xbc>
 8009412:	2300      	movs	r3, #0
 8009414:	60a3      	str	r3, [r4, #8]
 8009416:	6963      	ldr	r3, [r4, #20]
 8009418:	425b      	negs	r3, r3
 800941a:	61a3      	str	r3, [r4, #24]
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	b943      	cbnz	r3, 8009432 <__swsetup_r+0xc6>
 8009420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009424:	d1ba      	bne.n	800939c <__swsetup_r+0x30>
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	0781      	lsls	r1, r0, #30
 800942a:	bf58      	it	pl
 800942c:	6963      	ldrpl	r3, [r4, #20]
 800942e:	60a3      	str	r3, [r4, #8]
 8009430:	e7f4      	b.n	800941c <__swsetup_r+0xb0>
 8009432:	2000      	movs	r0, #0
 8009434:	e7f7      	b.n	8009426 <__swsetup_r+0xba>
 8009436:	bf00      	nop
 8009438:	2000001c 	.word	0x2000001c
 800943c:	0800b3ec 	.word	0x0800b3ec
 8009440:	0800b40c 	.word	0x0800b40c
 8009444:	0800b3cc 	.word	0x0800b3cc

08009448 <abort>:
 8009448:	2006      	movs	r0, #6
 800944a:	b508      	push	{r3, lr}
 800944c:	f000 fa52 	bl	80098f4 <raise>
 8009450:	2001      	movs	r0, #1
 8009452:	f7f8 fa42 	bl	80018da <_exit>
	...

08009458 <__sflush_r>:
 8009458:	898a      	ldrh	r2, [r1, #12]
 800945a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800945e:	4605      	mov	r5, r0
 8009460:	0710      	lsls	r0, r2, #28
 8009462:	460c      	mov	r4, r1
 8009464:	d458      	bmi.n	8009518 <__sflush_r+0xc0>
 8009466:	684b      	ldr	r3, [r1, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	dc05      	bgt.n	8009478 <__sflush_r+0x20>
 800946c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800946e:	2b00      	cmp	r3, #0
 8009470:	dc02      	bgt.n	8009478 <__sflush_r+0x20>
 8009472:	2000      	movs	r0, #0
 8009474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800947a:	2e00      	cmp	r6, #0
 800947c:	d0f9      	beq.n	8009472 <__sflush_r+0x1a>
 800947e:	2300      	movs	r3, #0
 8009480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009484:	682f      	ldr	r7, [r5, #0]
 8009486:	602b      	str	r3, [r5, #0]
 8009488:	d032      	beq.n	80094f0 <__sflush_r+0x98>
 800948a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	075a      	lsls	r2, r3, #29
 8009490:	d505      	bpl.n	800949e <__sflush_r+0x46>
 8009492:	6863      	ldr	r3, [r4, #4]
 8009494:	1ac0      	subs	r0, r0, r3
 8009496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009498:	b10b      	cbz	r3, 800949e <__sflush_r+0x46>
 800949a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800949c:	1ac0      	subs	r0, r0, r3
 800949e:	2300      	movs	r3, #0
 80094a0:	4602      	mov	r2, r0
 80094a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094a4:	4628      	mov	r0, r5
 80094a6:	6a21      	ldr	r1, [r4, #32]
 80094a8:	47b0      	blx	r6
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	d106      	bne.n	80094be <__sflush_r+0x66>
 80094b0:	6829      	ldr	r1, [r5, #0]
 80094b2:	291d      	cmp	r1, #29
 80094b4:	d82c      	bhi.n	8009510 <__sflush_r+0xb8>
 80094b6:	4a2a      	ldr	r2, [pc, #168]	; (8009560 <__sflush_r+0x108>)
 80094b8:	40ca      	lsrs	r2, r1
 80094ba:	07d6      	lsls	r6, r2, #31
 80094bc:	d528      	bpl.n	8009510 <__sflush_r+0xb8>
 80094be:	2200      	movs	r2, #0
 80094c0:	6062      	str	r2, [r4, #4]
 80094c2:	6922      	ldr	r2, [r4, #16]
 80094c4:	04d9      	lsls	r1, r3, #19
 80094c6:	6022      	str	r2, [r4, #0]
 80094c8:	d504      	bpl.n	80094d4 <__sflush_r+0x7c>
 80094ca:	1c42      	adds	r2, r0, #1
 80094cc:	d101      	bne.n	80094d2 <__sflush_r+0x7a>
 80094ce:	682b      	ldr	r3, [r5, #0]
 80094d0:	b903      	cbnz	r3, 80094d4 <__sflush_r+0x7c>
 80094d2:	6560      	str	r0, [r4, #84]	; 0x54
 80094d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094d6:	602f      	str	r7, [r5, #0]
 80094d8:	2900      	cmp	r1, #0
 80094da:	d0ca      	beq.n	8009472 <__sflush_r+0x1a>
 80094dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094e0:	4299      	cmp	r1, r3
 80094e2:	d002      	beq.n	80094ea <__sflush_r+0x92>
 80094e4:	4628      	mov	r0, r5
 80094e6:	f7ff fae3 	bl	8008ab0 <_free_r>
 80094ea:	2000      	movs	r0, #0
 80094ec:	6360      	str	r0, [r4, #52]	; 0x34
 80094ee:	e7c1      	b.n	8009474 <__sflush_r+0x1c>
 80094f0:	6a21      	ldr	r1, [r4, #32]
 80094f2:	2301      	movs	r3, #1
 80094f4:	4628      	mov	r0, r5
 80094f6:	47b0      	blx	r6
 80094f8:	1c41      	adds	r1, r0, #1
 80094fa:	d1c7      	bne.n	800948c <__sflush_r+0x34>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0c4      	beq.n	800948c <__sflush_r+0x34>
 8009502:	2b1d      	cmp	r3, #29
 8009504:	d001      	beq.n	800950a <__sflush_r+0xb2>
 8009506:	2b16      	cmp	r3, #22
 8009508:	d101      	bne.n	800950e <__sflush_r+0xb6>
 800950a:	602f      	str	r7, [r5, #0]
 800950c:	e7b1      	b.n	8009472 <__sflush_r+0x1a>
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	e7ad      	b.n	8009474 <__sflush_r+0x1c>
 8009518:	690f      	ldr	r7, [r1, #16]
 800951a:	2f00      	cmp	r7, #0
 800951c:	d0a9      	beq.n	8009472 <__sflush_r+0x1a>
 800951e:	0793      	lsls	r3, r2, #30
 8009520:	bf18      	it	ne
 8009522:	2300      	movne	r3, #0
 8009524:	680e      	ldr	r6, [r1, #0]
 8009526:	bf08      	it	eq
 8009528:	694b      	ldreq	r3, [r1, #20]
 800952a:	eba6 0807 	sub.w	r8, r6, r7
 800952e:	600f      	str	r7, [r1, #0]
 8009530:	608b      	str	r3, [r1, #8]
 8009532:	f1b8 0f00 	cmp.w	r8, #0
 8009536:	dd9c      	ble.n	8009472 <__sflush_r+0x1a>
 8009538:	4643      	mov	r3, r8
 800953a:	463a      	mov	r2, r7
 800953c:	4628      	mov	r0, r5
 800953e:	6a21      	ldr	r1, [r4, #32]
 8009540:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009542:	47b0      	blx	r6
 8009544:	2800      	cmp	r0, #0
 8009546:	dc06      	bgt.n	8009556 <__sflush_r+0xfe>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	e78e      	b.n	8009474 <__sflush_r+0x1c>
 8009556:	4407      	add	r7, r0
 8009558:	eba8 0800 	sub.w	r8, r8, r0
 800955c:	e7e9      	b.n	8009532 <__sflush_r+0xda>
 800955e:	bf00      	nop
 8009560:	20400001 	.word	0x20400001

08009564 <_fflush_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	690b      	ldr	r3, [r1, #16]
 8009568:	4605      	mov	r5, r0
 800956a:	460c      	mov	r4, r1
 800956c:	b913      	cbnz	r3, 8009574 <_fflush_r+0x10>
 800956e:	2500      	movs	r5, #0
 8009570:	4628      	mov	r0, r5
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	b118      	cbz	r0, 800957e <_fflush_r+0x1a>
 8009576:	6983      	ldr	r3, [r0, #24]
 8009578:	b90b      	cbnz	r3, 800957e <_fflush_r+0x1a>
 800957a:	f000 f887 	bl	800968c <__sinit>
 800957e:	4b14      	ldr	r3, [pc, #80]	; (80095d0 <_fflush_r+0x6c>)
 8009580:	429c      	cmp	r4, r3
 8009582:	d11b      	bne.n	80095bc <_fflush_r+0x58>
 8009584:	686c      	ldr	r4, [r5, #4]
 8009586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0ef      	beq.n	800956e <_fflush_r+0xa>
 800958e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009590:	07d0      	lsls	r0, r2, #31
 8009592:	d404      	bmi.n	800959e <_fflush_r+0x3a>
 8009594:	0599      	lsls	r1, r3, #22
 8009596:	d402      	bmi.n	800959e <_fflush_r+0x3a>
 8009598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800959a:	f000 f915 	bl	80097c8 <__retarget_lock_acquire_recursive>
 800959e:	4628      	mov	r0, r5
 80095a0:	4621      	mov	r1, r4
 80095a2:	f7ff ff59 	bl	8009458 <__sflush_r>
 80095a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095a8:	4605      	mov	r5, r0
 80095aa:	07da      	lsls	r2, r3, #31
 80095ac:	d4e0      	bmi.n	8009570 <_fflush_r+0xc>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	059b      	lsls	r3, r3, #22
 80095b2:	d4dd      	bmi.n	8009570 <_fflush_r+0xc>
 80095b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b6:	f000 f908 	bl	80097ca <__retarget_lock_release_recursive>
 80095ba:	e7d9      	b.n	8009570 <_fflush_r+0xc>
 80095bc:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <_fflush_r+0x70>)
 80095be:	429c      	cmp	r4, r3
 80095c0:	d101      	bne.n	80095c6 <_fflush_r+0x62>
 80095c2:	68ac      	ldr	r4, [r5, #8]
 80095c4:	e7df      	b.n	8009586 <_fflush_r+0x22>
 80095c6:	4b04      	ldr	r3, [pc, #16]	; (80095d8 <_fflush_r+0x74>)
 80095c8:	429c      	cmp	r4, r3
 80095ca:	bf08      	it	eq
 80095cc:	68ec      	ldreq	r4, [r5, #12]
 80095ce:	e7da      	b.n	8009586 <_fflush_r+0x22>
 80095d0:	0800b3ec 	.word	0x0800b3ec
 80095d4:	0800b40c 	.word	0x0800b40c
 80095d8:	0800b3cc 	.word	0x0800b3cc

080095dc <std>:
 80095dc:	2300      	movs	r3, #0
 80095de:	b510      	push	{r4, lr}
 80095e0:	4604      	mov	r4, r0
 80095e2:	e9c0 3300 	strd	r3, r3, [r0]
 80095e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ea:	6083      	str	r3, [r0, #8]
 80095ec:	8181      	strh	r1, [r0, #12]
 80095ee:	6643      	str	r3, [r0, #100]	; 0x64
 80095f0:	81c2      	strh	r2, [r0, #14]
 80095f2:	6183      	str	r3, [r0, #24]
 80095f4:	4619      	mov	r1, r3
 80095f6:	2208      	movs	r2, #8
 80095f8:	305c      	adds	r0, #92	; 0x5c
 80095fa:	f7fb fe33 	bl	8005264 <memset>
 80095fe:	4b05      	ldr	r3, [pc, #20]	; (8009614 <std+0x38>)
 8009600:	6224      	str	r4, [r4, #32]
 8009602:	6263      	str	r3, [r4, #36]	; 0x24
 8009604:	4b04      	ldr	r3, [pc, #16]	; (8009618 <std+0x3c>)
 8009606:	62a3      	str	r3, [r4, #40]	; 0x28
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <std+0x40>)
 800960a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800960c:	4b04      	ldr	r3, [pc, #16]	; (8009620 <std+0x44>)
 800960e:	6323      	str	r3, [r4, #48]	; 0x30
 8009610:	bd10      	pop	{r4, pc}
 8009612:	bf00      	nop
 8009614:	0800992d 	.word	0x0800992d
 8009618:	0800994f 	.word	0x0800994f
 800961c:	08009987 	.word	0x08009987
 8009620:	080099ab 	.word	0x080099ab

08009624 <_cleanup_r>:
 8009624:	4901      	ldr	r1, [pc, #4]	; (800962c <_cleanup_r+0x8>)
 8009626:	f000 b8af 	b.w	8009788 <_fwalk_reent>
 800962a:	bf00      	nop
 800962c:	08009565 	.word	0x08009565

08009630 <__sfmoreglue>:
 8009630:	b570      	push	{r4, r5, r6, lr}
 8009632:	2568      	movs	r5, #104	; 0x68
 8009634:	1e4a      	subs	r2, r1, #1
 8009636:	4355      	muls	r5, r2
 8009638:	460e      	mov	r6, r1
 800963a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800963e:	f7ff fa83 	bl	8008b48 <_malloc_r>
 8009642:	4604      	mov	r4, r0
 8009644:	b140      	cbz	r0, 8009658 <__sfmoreglue+0x28>
 8009646:	2100      	movs	r1, #0
 8009648:	e9c0 1600 	strd	r1, r6, [r0]
 800964c:	300c      	adds	r0, #12
 800964e:	60a0      	str	r0, [r4, #8]
 8009650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009654:	f7fb fe06 	bl	8005264 <memset>
 8009658:	4620      	mov	r0, r4
 800965a:	bd70      	pop	{r4, r5, r6, pc}

0800965c <__sfp_lock_acquire>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__sfp_lock_acquire+0x8>)
 800965e:	f000 b8b3 	b.w	80097c8 <__retarget_lock_acquire_recursive>
 8009662:	bf00      	nop
 8009664:	2000085c 	.word	0x2000085c

08009668 <__sfp_lock_release>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__sfp_lock_release+0x8>)
 800966a:	f000 b8ae 	b.w	80097ca <__retarget_lock_release_recursive>
 800966e:	bf00      	nop
 8009670:	2000085c 	.word	0x2000085c

08009674 <__sinit_lock_acquire>:
 8009674:	4801      	ldr	r0, [pc, #4]	; (800967c <__sinit_lock_acquire+0x8>)
 8009676:	f000 b8a7 	b.w	80097c8 <__retarget_lock_acquire_recursive>
 800967a:	bf00      	nop
 800967c:	20000857 	.word	0x20000857

08009680 <__sinit_lock_release>:
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__sinit_lock_release+0x8>)
 8009682:	f000 b8a2 	b.w	80097ca <__retarget_lock_release_recursive>
 8009686:	bf00      	nop
 8009688:	20000857 	.word	0x20000857

0800968c <__sinit>:
 800968c:	b510      	push	{r4, lr}
 800968e:	4604      	mov	r4, r0
 8009690:	f7ff fff0 	bl	8009674 <__sinit_lock_acquire>
 8009694:	69a3      	ldr	r3, [r4, #24]
 8009696:	b11b      	cbz	r3, 80096a0 <__sinit+0x14>
 8009698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800969c:	f7ff bff0 	b.w	8009680 <__sinit_lock_release>
 80096a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096a4:	6523      	str	r3, [r4, #80]	; 0x50
 80096a6:	4b13      	ldr	r3, [pc, #76]	; (80096f4 <__sinit+0x68>)
 80096a8:	4a13      	ldr	r2, [pc, #76]	; (80096f8 <__sinit+0x6c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80096ae:	42a3      	cmp	r3, r4
 80096b0:	bf08      	it	eq
 80096b2:	2301      	moveq	r3, #1
 80096b4:	4620      	mov	r0, r4
 80096b6:	bf08      	it	eq
 80096b8:	61a3      	streq	r3, [r4, #24]
 80096ba:	f000 f81f 	bl	80096fc <__sfp>
 80096be:	6060      	str	r0, [r4, #4]
 80096c0:	4620      	mov	r0, r4
 80096c2:	f000 f81b 	bl	80096fc <__sfp>
 80096c6:	60a0      	str	r0, [r4, #8]
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 f817 	bl	80096fc <__sfp>
 80096ce:	2200      	movs	r2, #0
 80096d0:	2104      	movs	r1, #4
 80096d2:	60e0      	str	r0, [r4, #12]
 80096d4:	6860      	ldr	r0, [r4, #4]
 80096d6:	f7ff ff81 	bl	80095dc <std>
 80096da:	2201      	movs	r2, #1
 80096dc:	2109      	movs	r1, #9
 80096de:	68a0      	ldr	r0, [r4, #8]
 80096e0:	f7ff ff7c 	bl	80095dc <std>
 80096e4:	2202      	movs	r2, #2
 80096e6:	2112      	movs	r1, #18
 80096e8:	68e0      	ldr	r0, [r4, #12]
 80096ea:	f7ff ff77 	bl	80095dc <std>
 80096ee:	2301      	movs	r3, #1
 80096f0:	61a3      	str	r3, [r4, #24]
 80096f2:	e7d1      	b.n	8009698 <__sinit+0xc>
 80096f4:	0800af74 	.word	0x0800af74
 80096f8:	08009625 	.word	0x08009625

080096fc <__sfp>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	4607      	mov	r7, r0
 8009700:	f7ff ffac 	bl	800965c <__sfp_lock_acquire>
 8009704:	4b1e      	ldr	r3, [pc, #120]	; (8009780 <__sfp+0x84>)
 8009706:	681e      	ldr	r6, [r3, #0]
 8009708:	69b3      	ldr	r3, [r6, #24]
 800970a:	b913      	cbnz	r3, 8009712 <__sfp+0x16>
 800970c:	4630      	mov	r0, r6
 800970e:	f7ff ffbd 	bl	800968c <__sinit>
 8009712:	3648      	adds	r6, #72	; 0x48
 8009714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009718:	3b01      	subs	r3, #1
 800971a:	d503      	bpl.n	8009724 <__sfp+0x28>
 800971c:	6833      	ldr	r3, [r6, #0]
 800971e:	b30b      	cbz	r3, 8009764 <__sfp+0x68>
 8009720:	6836      	ldr	r6, [r6, #0]
 8009722:	e7f7      	b.n	8009714 <__sfp+0x18>
 8009724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009728:	b9d5      	cbnz	r5, 8009760 <__sfp+0x64>
 800972a:	4b16      	ldr	r3, [pc, #88]	; (8009784 <__sfp+0x88>)
 800972c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009730:	60e3      	str	r3, [r4, #12]
 8009732:	6665      	str	r5, [r4, #100]	; 0x64
 8009734:	f000 f847 	bl	80097c6 <__retarget_lock_init_recursive>
 8009738:	f7ff ff96 	bl	8009668 <__sfp_lock_release>
 800973c:	2208      	movs	r2, #8
 800973e:	4629      	mov	r1, r5
 8009740:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009744:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009748:	6025      	str	r5, [r4, #0]
 800974a:	61a5      	str	r5, [r4, #24]
 800974c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009750:	f7fb fd88 	bl	8005264 <memset>
 8009754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800975c:	4620      	mov	r0, r4
 800975e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009760:	3468      	adds	r4, #104	; 0x68
 8009762:	e7d9      	b.n	8009718 <__sfp+0x1c>
 8009764:	2104      	movs	r1, #4
 8009766:	4638      	mov	r0, r7
 8009768:	f7ff ff62 	bl	8009630 <__sfmoreglue>
 800976c:	4604      	mov	r4, r0
 800976e:	6030      	str	r0, [r6, #0]
 8009770:	2800      	cmp	r0, #0
 8009772:	d1d5      	bne.n	8009720 <__sfp+0x24>
 8009774:	f7ff ff78 	bl	8009668 <__sfp_lock_release>
 8009778:	230c      	movs	r3, #12
 800977a:	603b      	str	r3, [r7, #0]
 800977c:	e7ee      	b.n	800975c <__sfp+0x60>
 800977e:	bf00      	nop
 8009780:	0800af74 	.word	0x0800af74
 8009784:	ffff0001 	.word	0xffff0001

08009788 <_fwalk_reent>:
 8009788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800978c:	4606      	mov	r6, r0
 800978e:	4688      	mov	r8, r1
 8009790:	2700      	movs	r7, #0
 8009792:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800979a:	f1b9 0901 	subs.w	r9, r9, #1
 800979e:	d505      	bpl.n	80097ac <_fwalk_reent+0x24>
 80097a0:	6824      	ldr	r4, [r4, #0]
 80097a2:	2c00      	cmp	r4, #0
 80097a4:	d1f7      	bne.n	8009796 <_fwalk_reent+0xe>
 80097a6:	4638      	mov	r0, r7
 80097a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ac:	89ab      	ldrh	r3, [r5, #12]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d907      	bls.n	80097c2 <_fwalk_reent+0x3a>
 80097b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097b6:	3301      	adds	r3, #1
 80097b8:	d003      	beq.n	80097c2 <_fwalk_reent+0x3a>
 80097ba:	4629      	mov	r1, r5
 80097bc:	4630      	mov	r0, r6
 80097be:	47c0      	blx	r8
 80097c0:	4307      	orrs	r7, r0
 80097c2:	3568      	adds	r5, #104	; 0x68
 80097c4:	e7e9      	b.n	800979a <_fwalk_reent+0x12>

080097c6 <__retarget_lock_init_recursive>:
 80097c6:	4770      	bx	lr

080097c8 <__retarget_lock_acquire_recursive>:
 80097c8:	4770      	bx	lr

080097ca <__retarget_lock_release_recursive>:
 80097ca:	4770      	bx	lr

080097cc <__swhatbuf_r>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	460e      	mov	r6, r1
 80097d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d4:	4614      	mov	r4, r2
 80097d6:	2900      	cmp	r1, #0
 80097d8:	461d      	mov	r5, r3
 80097da:	b096      	sub	sp, #88	; 0x58
 80097dc:	da07      	bge.n	80097ee <__swhatbuf_r+0x22>
 80097de:	2300      	movs	r3, #0
 80097e0:	602b      	str	r3, [r5, #0]
 80097e2:	89b3      	ldrh	r3, [r6, #12]
 80097e4:	061a      	lsls	r2, r3, #24
 80097e6:	d410      	bmi.n	800980a <__swhatbuf_r+0x3e>
 80097e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ec:	e00e      	b.n	800980c <__swhatbuf_r+0x40>
 80097ee:	466a      	mov	r2, sp
 80097f0:	f000 f902 	bl	80099f8 <_fstat_r>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	dbf2      	blt.n	80097de <__swhatbuf_r+0x12>
 80097f8:	9a01      	ldr	r2, [sp, #4]
 80097fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009802:	425a      	negs	r2, r3
 8009804:	415a      	adcs	r2, r3
 8009806:	602a      	str	r2, [r5, #0]
 8009808:	e7ee      	b.n	80097e8 <__swhatbuf_r+0x1c>
 800980a:	2340      	movs	r3, #64	; 0x40
 800980c:	2000      	movs	r0, #0
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	b016      	add	sp, #88	; 0x58
 8009812:	bd70      	pop	{r4, r5, r6, pc}

08009814 <__smakebuf_r>:
 8009814:	898b      	ldrh	r3, [r1, #12]
 8009816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009818:	079d      	lsls	r5, r3, #30
 800981a:	4606      	mov	r6, r0
 800981c:	460c      	mov	r4, r1
 800981e:	d507      	bpl.n	8009830 <__smakebuf_r+0x1c>
 8009820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	6123      	str	r3, [r4, #16]
 8009828:	2301      	movs	r3, #1
 800982a:	6163      	str	r3, [r4, #20]
 800982c:	b002      	add	sp, #8
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	466a      	mov	r2, sp
 8009832:	ab01      	add	r3, sp, #4
 8009834:	f7ff ffca 	bl	80097cc <__swhatbuf_r>
 8009838:	9900      	ldr	r1, [sp, #0]
 800983a:	4605      	mov	r5, r0
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff f983 	bl	8008b48 <_malloc_r>
 8009842:	b948      	cbnz	r0, 8009858 <__smakebuf_r+0x44>
 8009844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009848:	059a      	lsls	r2, r3, #22
 800984a:	d4ef      	bmi.n	800982c <__smakebuf_r+0x18>
 800984c:	f023 0303 	bic.w	r3, r3, #3
 8009850:	f043 0302 	orr.w	r3, r3, #2
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	e7e3      	b.n	8009820 <__smakebuf_r+0xc>
 8009858:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <__smakebuf_r+0x7c>)
 800985a:	62b3      	str	r3, [r6, #40]	; 0x28
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	6020      	str	r0, [r4, #0]
 8009860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	9b00      	ldr	r3, [sp, #0]
 8009868:	6120      	str	r0, [r4, #16]
 800986a:	6163      	str	r3, [r4, #20]
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	b15b      	cbz	r3, 8009888 <__smakebuf_r+0x74>
 8009870:	4630      	mov	r0, r6
 8009872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009876:	f000 f8d1 	bl	8009a1c <_isatty_r>
 800987a:	b128      	cbz	r0, 8009888 <__smakebuf_r+0x74>
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	f023 0303 	bic.w	r3, r3, #3
 8009882:	f043 0301 	orr.w	r3, r3, #1
 8009886:	81a3      	strh	r3, [r4, #12]
 8009888:	89a0      	ldrh	r0, [r4, #12]
 800988a:	4305      	orrs	r5, r0
 800988c:	81a5      	strh	r5, [r4, #12]
 800988e:	e7cd      	b.n	800982c <__smakebuf_r+0x18>
 8009890:	08009625 	.word	0x08009625

08009894 <_malloc_usable_size_r>:
 8009894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009898:	1f18      	subs	r0, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	bfbc      	itt	lt
 800989e:	580b      	ldrlt	r3, [r1, r0]
 80098a0:	18c0      	addlt	r0, r0, r3
 80098a2:	4770      	bx	lr

080098a4 <_raise_r>:
 80098a4:	291f      	cmp	r1, #31
 80098a6:	b538      	push	{r3, r4, r5, lr}
 80098a8:	4604      	mov	r4, r0
 80098aa:	460d      	mov	r5, r1
 80098ac:	d904      	bls.n	80098b8 <_raise_r+0x14>
 80098ae:	2316      	movs	r3, #22
 80098b0:	6003      	str	r3, [r0, #0]
 80098b2:	f04f 30ff 	mov.w	r0, #4294967295
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098ba:	b112      	cbz	r2, 80098c2 <_raise_r+0x1e>
 80098bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098c0:	b94b      	cbnz	r3, 80098d6 <_raise_r+0x32>
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 f830 	bl	8009928 <_getpid_r>
 80098c8:	462a      	mov	r2, r5
 80098ca:	4601      	mov	r1, r0
 80098cc:	4620      	mov	r0, r4
 80098ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098d2:	f000 b817 	b.w	8009904 <_kill_r>
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d00a      	beq.n	80098f0 <_raise_r+0x4c>
 80098da:	1c59      	adds	r1, r3, #1
 80098dc:	d103      	bne.n	80098e6 <_raise_r+0x42>
 80098de:	2316      	movs	r3, #22
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	2001      	movs	r0, #1
 80098e4:	e7e7      	b.n	80098b6 <_raise_r+0x12>
 80098e6:	2400      	movs	r4, #0
 80098e8:	4628      	mov	r0, r5
 80098ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098ee:	4798      	blx	r3
 80098f0:	2000      	movs	r0, #0
 80098f2:	e7e0      	b.n	80098b6 <_raise_r+0x12>

080098f4 <raise>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <raise+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f7ff bfd3 	b.w	80098a4 <_raise_r>
 80098fe:	bf00      	nop
 8009900:	2000001c 	.word	0x2000001c

08009904 <_kill_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	2300      	movs	r3, #0
 8009908:	4d06      	ldr	r5, [pc, #24]	; (8009924 <_kill_r+0x20>)
 800990a:	4604      	mov	r4, r0
 800990c:	4608      	mov	r0, r1
 800990e:	4611      	mov	r1, r2
 8009910:	602b      	str	r3, [r5, #0]
 8009912:	f7f7 ffd2 	bl	80018ba <_kill>
 8009916:	1c43      	adds	r3, r0, #1
 8009918:	d102      	bne.n	8009920 <_kill_r+0x1c>
 800991a:	682b      	ldr	r3, [r5, #0]
 800991c:	b103      	cbz	r3, 8009920 <_kill_r+0x1c>
 800991e:	6023      	str	r3, [r4, #0]
 8009920:	bd38      	pop	{r3, r4, r5, pc}
 8009922:	bf00      	nop
 8009924:	20000850 	.word	0x20000850

08009928 <_getpid_r>:
 8009928:	f7f7 bfc0 	b.w	80018ac <_getpid>

0800992c <__sread>:
 800992c:	b510      	push	{r4, lr}
 800992e:	460c      	mov	r4, r1
 8009930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009934:	f000 f894 	bl	8009a60 <_read_r>
 8009938:	2800      	cmp	r0, #0
 800993a:	bfab      	itete	ge
 800993c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800993e:	89a3      	ldrhlt	r3, [r4, #12]
 8009940:	181b      	addge	r3, r3, r0
 8009942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009946:	bfac      	ite	ge
 8009948:	6563      	strge	r3, [r4, #84]	; 0x54
 800994a:	81a3      	strhlt	r3, [r4, #12]
 800994c:	bd10      	pop	{r4, pc}

0800994e <__swrite>:
 800994e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009952:	461f      	mov	r7, r3
 8009954:	898b      	ldrh	r3, [r1, #12]
 8009956:	4605      	mov	r5, r0
 8009958:	05db      	lsls	r3, r3, #23
 800995a:	460c      	mov	r4, r1
 800995c:	4616      	mov	r6, r2
 800995e:	d505      	bpl.n	800996c <__swrite+0x1e>
 8009960:	2302      	movs	r3, #2
 8009962:	2200      	movs	r2, #0
 8009964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009968:	f000 f868 	bl	8009a3c <_lseek_r>
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	4632      	mov	r2, r6
 8009970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	4628      	mov	r0, r5
 8009978:	463b      	mov	r3, r7
 800997a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800997e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009982:	f000 b817 	b.w	80099b4 <_write_r>

08009986 <__sseek>:
 8009986:	b510      	push	{r4, lr}
 8009988:	460c      	mov	r4, r1
 800998a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800998e:	f000 f855 	bl	8009a3c <_lseek_r>
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	bf15      	itete	ne
 8009998:	6560      	strne	r0, [r4, #84]	; 0x54
 800999a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800999e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099a2:	81a3      	strheq	r3, [r4, #12]
 80099a4:	bf18      	it	ne
 80099a6:	81a3      	strhne	r3, [r4, #12]
 80099a8:	bd10      	pop	{r4, pc}

080099aa <__sclose>:
 80099aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ae:	f000 b813 	b.w	80099d8 <_close_r>
	...

080099b4 <_write_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4604      	mov	r4, r0
 80099b8:	4608      	mov	r0, r1
 80099ba:	4611      	mov	r1, r2
 80099bc:	2200      	movs	r2, #0
 80099be:	4d05      	ldr	r5, [pc, #20]	; (80099d4 <_write_r+0x20>)
 80099c0:	602a      	str	r2, [r5, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f7f7 ffb0 	bl	8001928 <_write>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_write_r+0x1e>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_write_r+0x1e>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	20000850 	.word	0x20000850

080099d8 <_close_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	2300      	movs	r3, #0
 80099dc:	4d05      	ldr	r5, [pc, #20]	; (80099f4 <_close_r+0x1c>)
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	602b      	str	r3, [r5, #0]
 80099e4:	f7f7 ffbc 	bl	8001960 <_close>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_close_r+0x1a>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_close_r+0x1a>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20000850 	.word	0x20000850

080099f8 <_fstat_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	2300      	movs	r3, #0
 80099fc:	4d06      	ldr	r5, [pc, #24]	; (8009a18 <_fstat_r+0x20>)
 80099fe:	4604      	mov	r4, r0
 8009a00:	4608      	mov	r0, r1
 8009a02:	4611      	mov	r1, r2
 8009a04:	602b      	str	r3, [r5, #0]
 8009a06:	f7f7 ffb6 	bl	8001976 <_fstat>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	d102      	bne.n	8009a14 <_fstat_r+0x1c>
 8009a0e:	682b      	ldr	r3, [r5, #0]
 8009a10:	b103      	cbz	r3, 8009a14 <_fstat_r+0x1c>
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	bd38      	pop	{r3, r4, r5, pc}
 8009a16:	bf00      	nop
 8009a18:	20000850 	.word	0x20000850

08009a1c <_isatty_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	2300      	movs	r3, #0
 8009a20:	4d05      	ldr	r5, [pc, #20]	; (8009a38 <_isatty_r+0x1c>)
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	602b      	str	r3, [r5, #0]
 8009a28:	f7f7 ffb4 	bl	8001994 <_isatty>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_isatty_r+0x1a>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_isatty_r+0x1a>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	20000850 	.word	0x20000850

08009a3c <_lseek_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	4611      	mov	r1, r2
 8009a44:	2200      	movs	r2, #0
 8009a46:	4d05      	ldr	r5, [pc, #20]	; (8009a5c <_lseek_r+0x20>)
 8009a48:	602a      	str	r2, [r5, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f7f7 ffac 	bl	80019a8 <_lseek>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_lseek_r+0x1e>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_lseek_r+0x1e>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	20000850 	.word	0x20000850

08009a60 <_read_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4604      	mov	r4, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	4611      	mov	r1, r2
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4d05      	ldr	r5, [pc, #20]	; (8009a80 <_read_r+0x20>)
 8009a6c:	602a      	str	r2, [r5, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f7f7 ff3d 	bl	80018ee <_read>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d102      	bne.n	8009a7e <_read_r+0x1e>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	b103      	cbz	r3, 8009a7e <_read_r+0x1e>
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	20000850 	.word	0x20000850

08009a84 <_init>:
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a86:	bf00      	nop
 8009a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8a:	bc08      	pop	{r3}
 8009a8c:	469e      	mov	lr, r3
 8009a8e:	4770      	bx	lr

08009a90 <_fini>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr
