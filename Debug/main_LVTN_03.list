
main_LVTN_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001274  08009600  08009600  00019600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a874  0800a874  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a874  0800a874  0001a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a87c  0800a87c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a87c  0800a87c  0001a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200001ec  0800aa70  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  0800aa70  00020864  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d14  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1a  00000000  00000000  00034f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00037a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00038c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a15e  00000000  00000000  00039d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015184  00000000  00000000  00053ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000915ce  00000000  00000000  0006905a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa628  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000626c  00000000  00000000  000fa67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	080095e4 	.word	0x080095e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	080095e4 	.word	0x080095e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_uldivmod>:
 8000d84:	b953      	cbnz	r3, 8000d9c <__aeabi_uldivmod+0x18>
 8000d86:	b94a      	cbnz	r2, 8000d9c <__aeabi_uldivmod+0x18>
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	bf08      	it	eq
 8000d8c:	2800      	cmpeq	r0, #0
 8000d8e:	bf1c      	itt	ne
 8000d90:	f04f 31ff 	movne.w	r1, #4294967295
 8000d94:	f04f 30ff 	movne.w	r0, #4294967295
 8000d98:	f000 b9a6 	b.w	80010e8 <__aeabi_idiv0>
 8000d9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da4:	f000 f83e 	bl	8000e24 <__udivmoddi4>
 8000da8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db0:	b004      	add	sp, #16
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_d2lz>:
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	460c      	mov	r4, r1
 8000db8:	4605      	mov	r5, r0
 8000dba:	4621      	mov	r1, r4
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f7ff fdfb 	bl	80009bc <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x20>
 8000dc8:	4628      	mov	r0, r5
 8000dca:	4621      	mov	r1, r4
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	2200      	movs	r2, #0
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <__aeabi_d2ulz+0x34>)
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fb71 	bl	80004d8 <__aeabi_dmul>
 8000df6:	f7ff fe47 	bl	8000a88 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff faf2 	bl	80003e4 <__aeabi_ui2d>
 8000e00:	2200      	movs	r2, #0
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <__aeabi_d2ulz+0x38>)
 8000e04:	f7ff fb68 	bl	80004d8 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff f9aa 	bl	8000168 <__aeabi_dsub>
 8000e14:	f7ff fe38 	bl	8000a88 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9e08      	ldr	r6, [sp, #32]
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	468e      	mov	lr, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f040 8083 	bne.w	8000f3c <__udivmoddi4+0x118>
 8000e36:	428a      	cmp	r2, r1
 8000e38:	4617      	mov	r7, r2
 8000e3a:	d947      	bls.n	8000ecc <__udivmoddi4+0xa8>
 8000e3c:	fab2 f382 	clz	r3, r2
 8000e40:	b14b      	cbz	r3, 8000e56 <__udivmoddi4+0x32>
 8000e42:	f1c3 0120 	rsb	r1, r3, #32
 8000e46:	fa05 fe03 	lsl.w	lr, r5, r3
 8000e4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000e4e:	409f      	lsls	r7, r3
 8000e50:	ea41 0e0e 	orr.w	lr, r1, lr
 8000e54:	409c      	lsls	r4, r3
 8000e56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e5a:	fbbe fcf8 	udiv	ip, lr, r8
 8000e5e:	fa1f f987 	uxth.w	r9, r7
 8000e62:	fb08 e21c 	mls	r2, r8, ip, lr
 8000e66:	fb0c f009 	mul.w	r0, ip, r9
 8000e6a:	0c21      	lsrs	r1, r4, #16
 8000e6c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x66>
 8000e74:	18ba      	adds	r2, r7, r2
 8000e76:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000e7a:	f080 8118 	bcs.w	80010ae <__udivmoddi4+0x28a>
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	f240 8115 	bls.w	80010ae <__udivmoddi4+0x28a>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	1a12      	subs	r2, r2, r0
 8000e8c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000e90:	fb08 2210 	mls	r2, r8, r0, r2
 8000e94:	fb00 f109 	mul.w	r1, r0, r9
 8000e98:	b2a4      	uxth	r4, r4
 8000e9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e9e:	42a1      	cmp	r1, r4
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0x92>
 8000ea2:	193c      	adds	r4, r7, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	f080 8103 	bcs.w	80010b2 <__udivmoddi4+0x28e>
 8000eac:	42a1      	cmp	r1, r4
 8000eae:	f240 8100 	bls.w	80010b2 <__udivmoddi4+0x28e>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	443c      	add	r4, r7
 8000eb6:	1a64      	subs	r4, r4, r1
 8000eb8:	2100      	movs	r1, #0
 8000eba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ebe:	b11e      	cbz	r6, 8000ec8 <__udivmoddi4+0xa4>
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	40dc      	lsrs	r4, r3
 8000ec4:	e9c6 4200 	strd	r4, r2, [r6]
 8000ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ecc:	b902      	cbnz	r2, 8000ed0 <__udivmoddi4+0xac>
 8000ece:	deff      	udf	#255	; 0xff
 8000ed0:	fab2 f382 	clz	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d14f      	bne.n	8000f78 <__udivmoddi4+0x154>
 8000ed8:	1a8d      	subs	r5, r1, r2
 8000eda:	2101      	movs	r1, #1
 8000edc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ee0:	fa1f f882 	uxth.w	r8, r2
 8000ee4:	fbb5 fcfe 	udiv	ip, r5, lr
 8000ee8:	fb0e 551c 	mls	r5, lr, ip, r5
 8000eec:	fb08 f00c 	mul.w	r0, r8, ip
 8000ef0:	0c22      	lsrs	r2, r4, #16
 8000ef2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000ef6:	42a8      	cmp	r0, r5
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0xe6>
 8000efa:	197d      	adds	r5, r7, r5
 8000efc:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0xe4>
 8000f02:	42a8      	cmp	r0, r5
 8000f04:	f200 80e9 	bhi.w	80010da <__udivmoddi4+0x2b6>
 8000f08:	4694      	mov	ip, r2
 8000f0a:	1a2d      	subs	r5, r5, r0
 8000f0c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f10:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f14:	fb08 f800 	mul.w	r8, r8, r0
 8000f18:	b2a4      	uxth	r4, r4
 8000f1a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f1e:	45a0      	cmp	r8, r4
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0x10e>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f28:	d202      	bcs.n	8000f30 <__udivmoddi4+0x10c>
 8000f2a:	45a0      	cmp	r8, r4
 8000f2c:	f200 80d9 	bhi.w	80010e2 <__udivmoddi4+0x2be>
 8000f30:	4610      	mov	r0, r2
 8000f32:	eba4 0408 	sub.w	r4, r4, r8
 8000f36:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f3a:	e7c0      	b.n	8000ebe <__udivmoddi4+0x9a>
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x12e>
 8000f40:	2e00      	cmp	r6, #0
 8000f42:	f000 80b1 	beq.w	80010a8 <__udivmoddi4+0x284>
 8000f46:	2100      	movs	r1, #0
 8000f48:	e9c6 0500 	strd	r0, r5, [r6]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	fab3 f183 	clz	r1, r3
 8000f56:	2900      	cmp	r1, #0
 8000f58:	d14b      	bne.n	8000ff2 <__udivmoddi4+0x1ce>
 8000f5a:	42ab      	cmp	r3, r5
 8000f5c:	d302      	bcc.n	8000f64 <__udivmoddi4+0x140>
 8000f5e:	4282      	cmp	r2, r0
 8000f60:	f200 80b9 	bhi.w	80010d6 <__udivmoddi4+0x2b2>
 8000f64:	1a84      	subs	r4, r0, r2
 8000f66:	eb65 0303 	sbc.w	r3, r5, r3
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	469e      	mov	lr, r3
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	d0aa      	beq.n	8000ec8 <__udivmoddi4+0xa4>
 8000f72:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f76:	e7a7      	b.n	8000ec8 <__udivmoddi4+0xa4>
 8000f78:	409f      	lsls	r7, r3
 8000f7a:	f1c3 0220 	rsb	r2, r3, #32
 8000f7e:	40d1      	lsrs	r1, r2
 8000f80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f88:	fa1f f887 	uxth.w	r8, r7
 8000f8c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f90:	fa24 f202 	lsr.w	r2, r4, r2
 8000f94:	409d      	lsls	r5, r3
 8000f96:	fb00 fc08 	mul.w	ip, r0, r8
 8000f9a:	432a      	orrs	r2, r5
 8000f9c:	0c15      	lsrs	r5, r2, #16
 8000f9e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000fa2:	45ac      	cmp	ip, r5
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d909      	bls.n	8000fbe <__udivmoddi4+0x19a>
 8000faa:	197d      	adds	r5, r7, r5
 8000fac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb0:	f080 808f 	bcs.w	80010d2 <__udivmoddi4+0x2ae>
 8000fb4:	45ac      	cmp	ip, r5
 8000fb6:	f240 808c 	bls.w	80010d2 <__udivmoddi4+0x2ae>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	443d      	add	r5, r7
 8000fbe:	eba5 050c 	sub.w	r5, r5, ip
 8000fc2:	fbb5 f1fe 	udiv	r1, r5, lr
 8000fc6:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000fca:	fb01 f908 	mul.w	r9, r1, r8
 8000fce:	b295      	uxth	r5, r2
 8000fd0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000fd4:	45a9      	cmp	r9, r5
 8000fd6:	d907      	bls.n	8000fe8 <__udivmoddi4+0x1c4>
 8000fd8:	197d      	adds	r5, r7, r5
 8000fda:	f101 32ff 	add.w	r2, r1, #4294967295
 8000fde:	d274      	bcs.n	80010ca <__udivmoddi4+0x2a6>
 8000fe0:	45a9      	cmp	r9, r5
 8000fe2:	d972      	bls.n	80010ca <__udivmoddi4+0x2a6>
 8000fe4:	3902      	subs	r1, #2
 8000fe6:	443d      	add	r5, r7
 8000fe8:	eba5 0509 	sub.w	r5, r5, r9
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e778      	b.n	8000ee4 <__udivmoddi4+0xc0>
 8000ff2:	f1c1 0720 	rsb	r7, r1, #32
 8000ff6:	408b      	lsls	r3, r1
 8000ff8:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ffc:	ea4c 0c03 	orr.w	ip, ip, r3
 8001000:	fa25 f407 	lsr.w	r4, r5, r7
 8001004:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001008:	fbb4 f9fe 	udiv	r9, r4, lr
 800100c:	fa1f f88c 	uxth.w	r8, ip
 8001010:	fb0e 4419 	mls	r4, lr, r9, r4
 8001014:	fa20 f307 	lsr.w	r3, r0, r7
 8001018:	fb09 fa08 	mul.w	sl, r9, r8
 800101c:	408d      	lsls	r5, r1
 800101e:	431d      	orrs	r5, r3
 8001020:	0c2b      	lsrs	r3, r5, #16
 8001022:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001026:	45a2      	cmp	sl, r4
 8001028:	fa02 f201 	lsl.w	r2, r2, r1
 800102c:	fa00 f301 	lsl.w	r3, r0, r1
 8001030:	d909      	bls.n	8001046 <__udivmoddi4+0x222>
 8001032:	eb1c 0404 	adds.w	r4, ip, r4
 8001036:	f109 30ff 	add.w	r0, r9, #4294967295
 800103a:	d248      	bcs.n	80010ce <__udivmoddi4+0x2aa>
 800103c:	45a2      	cmp	sl, r4
 800103e:	d946      	bls.n	80010ce <__udivmoddi4+0x2aa>
 8001040:	f1a9 0902 	sub.w	r9, r9, #2
 8001044:	4464      	add	r4, ip
 8001046:	eba4 040a 	sub.w	r4, r4, sl
 800104a:	fbb4 f0fe 	udiv	r0, r4, lr
 800104e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001052:	fb00 fa08 	mul.w	sl, r0, r8
 8001056:	b2ad      	uxth	r5, r5
 8001058:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800105c:	45a2      	cmp	sl, r4
 800105e:	d908      	bls.n	8001072 <__udivmoddi4+0x24e>
 8001060:	eb1c 0404 	adds.w	r4, ip, r4
 8001064:	f100 35ff 	add.w	r5, r0, #4294967295
 8001068:	d22d      	bcs.n	80010c6 <__udivmoddi4+0x2a2>
 800106a:	45a2      	cmp	sl, r4
 800106c:	d92b      	bls.n	80010c6 <__udivmoddi4+0x2a2>
 800106e:	3802      	subs	r0, #2
 8001070:	4464      	add	r4, ip
 8001072:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001076:	fba0 8902 	umull	r8, r9, r0, r2
 800107a:	eba4 040a 	sub.w	r4, r4, sl
 800107e:	454c      	cmp	r4, r9
 8001080:	46c6      	mov	lr, r8
 8001082:	464d      	mov	r5, r9
 8001084:	d319      	bcc.n	80010ba <__udivmoddi4+0x296>
 8001086:	d016      	beq.n	80010b6 <__udivmoddi4+0x292>
 8001088:	b15e      	cbz	r6, 80010a2 <__udivmoddi4+0x27e>
 800108a:	ebb3 020e 	subs.w	r2, r3, lr
 800108e:	eb64 0405 	sbc.w	r4, r4, r5
 8001092:	fa04 f707 	lsl.w	r7, r4, r7
 8001096:	fa22 f301 	lsr.w	r3, r2, r1
 800109a:	431f      	orrs	r7, r3
 800109c:	40cc      	lsrs	r4, r1
 800109e:	e9c6 7400 	strd	r7, r4, [r6]
 80010a2:	2100      	movs	r1, #0
 80010a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a8:	4631      	mov	r1, r6
 80010aa:	4630      	mov	r0, r6
 80010ac:	e70c      	b.n	8000ec8 <__udivmoddi4+0xa4>
 80010ae:	468c      	mov	ip, r1
 80010b0:	e6eb      	b.n	8000e8a <__udivmoddi4+0x66>
 80010b2:	4610      	mov	r0, r2
 80010b4:	e6ff      	b.n	8000eb6 <__udivmoddi4+0x92>
 80010b6:	4543      	cmp	r3, r8
 80010b8:	d2e6      	bcs.n	8001088 <__udivmoddi4+0x264>
 80010ba:	ebb8 0e02 	subs.w	lr, r8, r2
 80010be:	eb69 050c 	sbc.w	r5, r9, ip
 80010c2:	3801      	subs	r0, #1
 80010c4:	e7e0      	b.n	8001088 <__udivmoddi4+0x264>
 80010c6:	4628      	mov	r0, r5
 80010c8:	e7d3      	b.n	8001072 <__udivmoddi4+0x24e>
 80010ca:	4611      	mov	r1, r2
 80010cc:	e78c      	b.n	8000fe8 <__udivmoddi4+0x1c4>
 80010ce:	4681      	mov	r9, r0
 80010d0:	e7b9      	b.n	8001046 <__udivmoddi4+0x222>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e773      	b.n	8000fbe <__udivmoddi4+0x19a>
 80010d6:	4608      	mov	r0, r1
 80010d8:	e749      	b.n	8000f6e <__udivmoddi4+0x14a>
 80010da:	f1ac 0c02 	sub.w	ip, ip, #2
 80010de:	443d      	add	r5, r7
 80010e0:	e713      	b.n	8000f0a <__udivmoddi4+0xe6>
 80010e2:	3802      	subs	r0, #2
 80010e4:	443c      	add	r4, r7
 80010e6:	e724      	b.n	8000f32 <__udivmoddi4+0x10e>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	0000      	movs	r0, r0
	...

080010f0 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7f1b      	ldrb	r3, [r3, #28]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	f040 8083 	bne.w	8001208 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001102:	4b45      	ldr	r3, [pc, #276]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d11a      	bne.n	8001140 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800110a:	2100      	movs	r1, #0
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f002 fd45 	bl	8003b9c <HAL_TIM_ReadCapturedValue>
 8001112:	4603      	mov	r3, r0
 8001114:	4a41      	ldr	r2, [pc, #260]	; (800121c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001116:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x128>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6a1a      	ldr	r2, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 020a 	bic.w	r2, r2, #10
 800112c:	621a      	str	r2, [r3, #32]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0202 	orr.w	r2, r2, #2
 800113c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 800113e:	e063      	b.n	8001208 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d15f      	bne.n	8001208 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001148:	2100      	movs	r1, #0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f002 fd26 	bl	8003b9c <HAL_TIM_ReadCapturedValue>
 8001150:	4603      	mov	r3, r0
 8001152:	4a33      	ldr	r2, [pc, #204]	; (8001220 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001154:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800115e:	4b30      	ldr	r3, [pc, #192]	; (8001220 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d907      	bls.n	800117a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_TIM_IC_CaptureCallback+0x130>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	e00f      	b.n	800119a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d909      	bls.n	800119a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001194:	33ff      	adds	r3, #255	; 0xff
 8001196:	4a23      	ldr	r2, [pc, #140]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001198:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x134>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	a31a      	add	r3, pc, #104	; (adr r3, 8001210 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff f995 	bl	80004d8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011be:	f7ff fab5 	bl	800072c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fc5d 	bl	8000a88 <__aeabi_d2uiz>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x138>)
 80011d4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6a1a      	ldr	r2, [r3, #32]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 020a 	bic.w	r2, r2, #10
 80011ea:	621a      	str	r2, [r3, #32]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6a12      	ldr	r2, [r2, #32]
 80011f6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0202 	bic.w	r2, r2, #2
 8001206:	60da      	str	r2, [r3, #12]
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	b020c49c 	.word	0xb020c49c
 8001214:	3fa16872 	.word	0x3fa16872
 8001218:	20000214 	.word	0x20000214
 800121c:	20000208 	.word	0x20000208
 8001220:	2000020c 	.word	0x2000020c
 8001224:	20000210 	.word	0x20000210
 8001228:	20000215 	.word	0x20000215
 800122c:	20000370 	.word	0x20000370

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001236:	f000 fd47 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123a:	f000 f83b 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123e:	f000 f9e7 	bl	8001610 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001242:	f000 f8ab 	bl	800139c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001246:	f000 f8df 	bl	8001408 <MX_SPI2_Init>
  MX_TIM1_Init();
 800124a:	f000 f913 	bl	8001474 <MX_TIM1_Init>
  MX_I2C1_Init();
 800124e:	f000 f877 	bl	8001340 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001252:	f000 f9b3 	bl	80015bc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001256:	f000 f963 	bl	8001520 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  TimerDelay_Init();
 800125a:	f003 fd11 	bl	8004c80 <TimerDelay_Init>
	ST7565_Init();
 800125e:	f003 f917 	bl	8004490 <ST7565_Init>
	HX711_init();
 8001262:	f003 fb87 	bl	8004974 <HX711_init>

	HAL_Delay(100);
 8001266:	2064      	movs	r0, #100	; 0x64
 8001268:	f000 fd90 	bl	8001d8c <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800126c:	2100      	movs	r1, #0
 800126e:	480e      	ldr	r0, [pc, #56]	; (80012a8 <main+0x78>)
 8001270:	f002 f92e 	bl	80034d0 <HAL_TIM_IC_Start_IT>
	// UImeas_pressure();
  // uint8_t press = 0;
  // char press_ch[5];
  unsigned long noload;
  char noload_ch[10];
  float weight = 0;
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

    weight = getWeight();
 800127a:	f003 fc57 	bl	8004b2c <getWeight>
 800127e:	6178      	str	r0, [r7, #20]
   sprintf (weight_ch, "%.1f", weight);
 8001280:	6978      	ldr	r0, [r7, #20]
 8001282:	f7ff f8d1 	bl	8000428 <__aeabi_f2d>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4638      	mov	r0, r7
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <main+0x7c>)
 800128e:	f004 fc19 	bl	8005ac4 <siprintf>
   ST7565_Print(1, 1, weight_ch, &Font_11x18, 1, BLACK);
 8001292:	463a      	mov	r2, r7
 8001294:	2301      	movs	r3, #1
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	2301      	movs	r3, #1
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <main+0x80>)
 800129e:	2101      	movs	r1, #1
 80012a0:	2001      	movs	r0, #1
 80012a2:	f003 fad9 	bl	8004858 <ST7565_Print>
    weight = getWeight();
 80012a6:	e7e8      	b.n	800127a <main+0x4a>
 80012a8:	20000370 	.word	0x20000370
 80012ac:	0800960c 	.word	0x0800960c
 80012b0:	2000000c 	.word	0x2000000c

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b090      	sub	sp, #64	; 0x40
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	2228      	movs	r2, #40	; 0x28
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fd80 	bl	8004dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e4:	2301      	movs	r3, #1
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e8:	2302      	movs	r3, #2
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f107 0318 	add.w	r3, r7, #24
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 f96f 	bl	80025e0 <HAL_RCC_OscConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001308:	f000 fa14 	bl	8001734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	230f      	movs	r3, #15
 800130e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	2302      	movs	r3, #2
 8001312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2102      	movs	r1, #2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fbda 	bl	8002ae0 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001332:	f000 f9ff 	bl	8001734 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3740      	adds	r7, #64	; 0x40
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_I2C1_Init+0x50>)
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <MX_I2C1_Init+0x54>)
 8001348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_I2C1_Init+0x50>)
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MX_I2C1_Init+0x58>)
 800134e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_I2C1_Init+0x50>)
 800135e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001362:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <MX_I2C1_Init+0x50>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_I2C1_Init+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_I2C1_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_I2C1_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_I2C1_Init+0x50>)
 800137e:	f000 ffeb 	bl	8002358 <HAL_I2C_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001388:	f000 f9d4 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000318 	.word	0x20000318
 8001394:	40005400 	.word	0x40005400
 8001398:	000186a0 	.word	0x000186a0

0800139c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_SPI1_Init+0x64>)
 80013a2:	4a18      	ldr	r2, [pc, #96]	; (8001404 <MX_SPI1_Init+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_SPI1_Init+0x64>)
 80013a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_SPI1_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_SPI1_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_SPI1_Init+0x64>)
 80013c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_SPI1_Init+0x64>)
 80013d0:	2208      	movs	r2, #8
 80013d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <MX_SPI1_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_SPI1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MX_SPI1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_SPI1_Init+0x64>)
 80013e8:	220a      	movs	r2, #10
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_SPI1_Init+0x64>)
 80013ee:	f001 fd11 	bl	8002e14 <HAL_SPI_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013f8:	f000 f99c 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200003b8 	.word	0x200003b8
 8001404:	40013000 	.word	0x40013000

08001408 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_SPI2_Init+0x64>)
 800140e:	4a18      	ldr	r2, [pc, #96]	; (8001470 <MX_SPI2_Init+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_SPI2_Init+0x64>)
 8001414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_SPI2_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_SPI2_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_SPI2_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_SPI2_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_SPI2_Init+0x64>)
 8001434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001438:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_SPI2_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <MX_SPI2_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_SPI2_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <MX_SPI2_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_SPI2_Init+0x64>)
 8001454:	220a      	movs	r2, #10
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <MX_SPI2_Init+0x64>)
 800145a:	f001 fcdb 	bl	8002e14 <HAL_SPI_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001464:	f000 f966 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000278 	.word	0x20000278
 8001470:	40003800 	.word	0x40003800

08001474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_TIM1_Init+0xa4>)
 8001492:	4a22      	ldr	r2, [pc, #136]	; (800151c <MX_TIM1_Init+0xa8>)
 8001494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MX_TIM1_Init+0xa4>)
 8001498:	2247      	movs	r2, #71	; 0x47
 800149a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_TIM1_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <MX_TIM1_Init+0xa4>)
 80014a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_TIM1_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_TIM1_Init+0xa4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_TIM1_Init+0xa4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80014bc:	4816      	ldr	r0, [pc, #88]	; (8001518 <MX_TIM1_Init+0xa4>)
 80014be:	f001 ffb7 	bl	8003430 <HAL_TIM_IC_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014c8:	f000 f934 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4619      	mov	r1, r3
 80014da:	480f      	ldr	r0, [pc, #60]	; (8001518 <MX_TIM1_Init+0xa4>)
 80014dc:	f002 fdf0 	bl	80040c0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014e6:	f000 f925 	bl	8001734 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ee:	2301      	movs	r3, #1
 80014f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_TIM1_Init+0xa4>)
 8001502:	f002 f9f3 	bl	80038ec <HAL_TIM_IC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800150c:	f000 f912 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000370 	.word	0x20000370
 800151c:	40012c00 	.word	0x40012c00

08001520 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001534:	463b      	mov	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MX_TIM4_Init+0x94>)
 800153e:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <MX_TIM4_Init+0x98>)
 8001540:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_TIM4_Init+0x94>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_TIM4_Init+0x94>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_TIM4_Init+0x94>)
 8001550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001554:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_TIM4_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_TIM4_Init+0x94>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001562:	4814      	ldr	r0, [pc, #80]	; (80015b4 <MX_TIM4_Init+0x94>)
 8001564:	f001 feca 	bl	80032fc <HAL_TIM_Base_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800156e:	f000 f8e1 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4619      	mov	r1, r3
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_TIM4_Init+0x94>)
 8001580:	f002 fa48 	bl	8003a14 <HAL_TIM_ConfigClockSource>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800158a:	f000 f8d3 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001596:	463b      	mov	r3, r7
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_TIM4_Init+0x94>)
 800159c:	f002 fd90 	bl	80040c0 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80015a6:	f000 f8c5 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002d0 	.word	0x200002d0
 80015b8:	40000800 	.word	0x40000800

080015bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_USART2_UART_Init+0x50>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015f4:	f002 fdd4 	bl	80041a0 <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015fe:	f000 f899 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000410 	.word	0x20000410
 800160c:	40004400 	.word	0x40004400

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <MX_GPIO_Init+0x114>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a3e      	ldr	r2, [pc, #248]	; (8001724 <MX_GPIO_Init+0x114>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <MX_GPIO_Init+0x114>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800163c:	4b39      	ldr	r3, [pc, #228]	; (8001724 <MX_GPIO_Init+0x114>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a38      	ldr	r2, [pc, #224]	; (8001724 <MX_GPIO_Init+0x114>)
 8001642:	f043 0320 	orr.w	r3, r3, #32
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b36      	ldr	r3, [pc, #216]	; (8001724 <MX_GPIO_Init+0x114>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b33      	ldr	r3, [pc, #204]	; (8001724 <MX_GPIO_Init+0x114>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a32      	ldr	r2, [pc, #200]	; (8001724 <MX_GPIO_Init+0x114>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b30      	ldr	r3, [pc, #192]	; (8001724 <MX_GPIO_Init+0x114>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <MX_GPIO_Init+0x114>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a2c      	ldr	r2, [pc, #176]	; (8001724 <MX_GPIO_Init+0x114>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <MX_GPIO_Init+0x114>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|Buzzer_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800168a:	4827      	ldr	r0, [pc, #156]	; (8001728 <MX_GPIO_Init+0x118>)
 800168c:	f000 fe4b 	bl	8002326 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|Pump_Pin|GPIO_PIN_10
 8001690:	2200      	movs	r2, #0
 8001692:	f641 6111 	movw	r1, #7697	; 0x1e11
 8001696:	4825      	ldr	r0, [pc, #148]	; (800172c <MX_GPIO_Init+0x11c>)
 8001698:	f000 fe45 	bl	8002326 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|Valve_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80016a2:	4823      	ldr	r0, [pc, #140]	; (8001730 <MX_GPIO_Init+0x120>)
 80016a4:	f000 fe3f 	bl	8002326 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 Buzzer_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|Buzzer_Pin;
 80016a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4619      	mov	r1, r3
 80016c0:	4819      	ldr	r0, [pc, #100]	; (8001728 <MX_GPIO_Init+0x118>)
 80016c2:	f000 fc95 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 Pump_Pin PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|Pump_Pin|GPIO_PIN_10
 80016c6:	f641 6311 	movw	r3, #7697	; 0x1e11
 80016ca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	4619      	mov	r1, r3
 80016de:	4813      	ldr	r0, [pc, #76]	; (800172c <MX_GPIO_Init+0x11c>)
 80016e0:	f000 fc86 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 Valve_Pin PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|Valve_Pin|GPIO_PIN_9;
 80016e4:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 80016e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	4619      	mov	r1, r3
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <MX_GPIO_Init+0x120>)
 80016fe:	f000 fc77 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001702:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_GPIO_Init+0x120>)
 8001718:	f000 fc6a 	bl	8001ff0 <HAL_GPIO_Init>

}
 800171c:	bf00      	nop
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000
 8001728:	40011000 	.word	0x40011000
 800172c:	40010800 	.word	0x40010800
 8001730:	40010c00 	.word	0x40010c00

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>
	...

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_MspInit+0x5c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_MspInit+0x5c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_MspInit+0x5c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_MspInit+0x5c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <HAL_MspInit+0x5c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_MspInit+0x60>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_MspInit+0x60>)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000

080017a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a15      	ldr	r2, [pc, #84]	; (8001814 <HAL_I2C_MspInit+0x70>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d123      	bne.n	800180c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_I2C_MspInit+0x74>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a13      	ldr	r2, [pc, #76]	; (8001818 <HAL_I2C_MspInit+0x74>)
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_I2C_MspInit+0x74>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017dc:	23c0      	movs	r3, #192	; 0xc0
 80017de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e0:	2312      	movs	r3, #18
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4619      	mov	r1, r3
 80017ee:	480b      	ldr	r0, [pc, #44]	; (800181c <HAL_I2C_MspInit+0x78>)
 80017f0:	f000 fbfe 	bl	8001ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_I2C_MspInit+0x74>)
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_I2C_MspInit+0x74>)
 80017fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017fe:	61d3      	str	r3, [r2, #28]
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_I2C_MspInit+0x74>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40005400 	.word	0x40005400
 8001818:	40021000 	.word	0x40021000
 800181c:	40010c00 	.word	0x40010c00

08001820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a37      	ldr	r2, [pc, #220]	; (8001918 <HAL_SPI_MspInit+0xf8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d130      	bne.n	80018a2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001840:	4b36      	ldr	r3, [pc, #216]	; (800191c <HAL_SPI_MspInit+0xfc>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a35      	ldr	r2, [pc, #212]	; (800191c <HAL_SPI_MspInit+0xfc>)
 8001846:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <HAL_SPI_MspInit+0xfc>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_SPI_MspInit+0xfc>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a2f      	ldr	r2, [pc, #188]	; (800191c <HAL_SPI_MspInit+0xfc>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_SPI_MspInit+0xfc>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001870:	23a0      	movs	r3, #160	; 0xa0
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4619      	mov	r1, r3
 8001882:	4827      	ldr	r0, [pc, #156]	; (8001920 <HAL_SPI_MspInit+0x100>)
 8001884:	f000 fbb4 	bl	8001ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001888:	2340      	movs	r3, #64	; 0x40
 800188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0318 	add.w	r3, r7, #24
 8001898:	4619      	mov	r1, r3
 800189a:	4821      	ldr	r0, [pc, #132]	; (8001920 <HAL_SPI_MspInit+0x100>)
 800189c:	f000 fba8 	bl	8001ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018a0:	e036      	b.n	8001910 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <HAL_SPI_MspInit+0x104>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d131      	bne.n	8001910 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_SPI_MspInit+0xfc>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	4a1a      	ldr	r2, [pc, #104]	; (800191c <HAL_SPI_MspInit+0xfc>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	61d3      	str	r3, [r2, #28]
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_SPI_MspInit+0xfc>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_SPI_MspInit+0xfc>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_SPI_MspInit+0xfc>)
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_SPI_MspInit+0xfc>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80018dc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0318 	add.w	r3, r7, #24
 80018ee:	4619      	mov	r1, r3
 80018f0:	480d      	ldr	r0, [pc, #52]	; (8001928 <HAL_SPI_MspInit+0x108>)
 80018f2:	f000 fb7d 	bl	8001ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	4619      	mov	r1, r3
 800190a:	4807      	ldr	r0, [pc, #28]	; (8001928 <HAL_SPI_MspInit+0x108>)
 800190c:	f000 fb70 	bl	8001ff0 <HAL_GPIO_Init>
}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40013000 	.word	0x40013000
 800191c:	40021000 	.word	0x40021000
 8001920:	40010800 	.word	0x40010800
 8001924:	40003800 	.word	0x40003800
 8001928:	40010c00 	.word	0x40010c00

0800192c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <HAL_TIM_IC_MspInit+0x84>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d12c      	bne.n	80019a6 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_TIM_IC_MspInit+0x88>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_TIM_IC_MspInit+0x88>)
 8001952:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_TIM_IC_MspInit+0x88>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_TIM_IC_MspInit+0x88>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <HAL_TIM_IC_MspInit+0x88>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_TIM_IC_MspInit+0x88>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800197c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	4619      	mov	r1, r3
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <HAL_TIM_IC_MspInit+0x8c>)
 8001992:	f000 fb2d 	bl	8001ff0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	201b      	movs	r0, #27
 800199c:	f000 faf1 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019a0:	201b      	movs	r0, #27
 80019a2:	f000 fb0a 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010800 	.word	0x40010800

080019bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_TIM_Base_MspInit+0x34>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10b      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_TIM_Base_MspInit+0x38>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_TIM_Base_MspInit+0x38>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_TIM_Base_MspInit+0x38>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40000800 	.word	0x40000800
 80019f4:	40021000 	.word	0x40021000

080019f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d12f      	bne.n	8001a78 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a22:	61d3      	str	r3, [r2, #28]
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480b      	ldr	r0, [pc, #44]	; (8001a88 <HAL_UART_MspInit+0x90>)
 8001a5c:	f000 fac8 	bl	8001ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a60:	2308      	movs	r3, #8
 8001a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4619      	mov	r1, r3
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <HAL_UART_MspInit+0x90>)
 8001a74:	f000 fabc 	bl	8001ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a78:	bf00      	nop
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40004400 	.word	0x40004400
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010800 	.word	0x40010800

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <NMI_Handler+0x4>

08001a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <MemManage_Handler+0x4>

08001a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <BusFault_Handler+0x4>

08001aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <UsageFault_Handler+0x4>

08001aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad2:	f000 f93f 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <TIM1_CC_IRQHandler+0x10>)
 8001ae2:	f001 fdfb 	bl	80036dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000370 	.word	0x20000370

08001af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
	return 1;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <_kill>:

int _kill(int pid, int sig)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b08:	f003 f934 	bl	8004d74 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2216      	movs	r2, #22
 8001b10:	601a      	str	r2, [r3, #0]
	return -1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_exit>:

void _exit (int status)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b26:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffe7 	bl	8001afe <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b30:	e7fe      	b.n	8001b30 <_exit+0x12>

08001b32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e00a      	b.n	8001b5a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b44:	f3af 8000 	nop.w
 8001b48:	4601      	mov	r1, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	60ba      	str	r2, [r7, #8]
 8001b50:	b2ca      	uxtb	r2, r1
 8001b52:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	dbf0      	blt.n	8001b44 <_read+0x12>
	}

return len;
 8001b62:	687b      	ldr	r3, [r7, #4]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e009      	b.n	8001b92 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	60ba      	str	r2, [r7, #8]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	dbf1      	blt.n	8001b7e <_write+0x12>
	}
	return len;
 8001b9a:	687b      	ldr	r3, [r7, #4]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_close>:

int _close(int file)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bca:	605a      	str	r2, [r3, #4]
	return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <_isatty>:

int _isatty(int file)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	return 1;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f003 f89e 	bl	8004d74 <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20005000 	.word	0x20005000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	20000218 	.word	0x20000218
 8001c6c:	20000868 	.word	0x20000868

08001c70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c7e:	e003      	b.n	8001c88 <LoopCopyDataInit>

08001c80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c86:	3104      	adds	r1, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c88:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c90:	d3f6      	bcc.n	8001c80 <CopyDataInit>
  ldr r2, =_sbss
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c94:	e002      	b.n	8001c9c <LoopFillZerobss>

08001c96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c98:	f842 3b04 	str.w	r3, [r2], #4

08001c9c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ca0:	d3f9      	bcc.n	8001c96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ca2:	f7ff ffe5 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f003 f86b 	bl	8004d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001caa:	f7ff fac1 	bl	8001230 <main>
  bx lr
 8001cae:	4770      	bx	lr
  ldr r3, =_sidata
 8001cb0:	0800a884 	.word	0x0800a884
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001cb8:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 8001cbc:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 8001cc0:	20000864 	.word	0x20000864

08001cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC1_2_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_Init+0x28>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_Init+0x28>)
 8001cd2:	f043 0310 	orr.w	r3, r3, #16
 8001cd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f947 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f000 f808 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7ff fd2c 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f95f 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 f927 	bl	8001f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_IncTick+0x1c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_IncTick+0x20>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a03      	ldr	r2, [pc, #12]	; (8001d74 <HAL_IncTick+0x20>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000450 	.word	0x20000450

08001d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <HAL_GetTick+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000450 	.word	0x20000450

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffe0 	bl	8001d78 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4906      	ldr	r1, [pc, #24]	; (8001e6c <__NVIC_EnableIRQ+0x34>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	; (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff90 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff2d 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff42 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff90 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5f 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff35 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa2 	bl	8001f28 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b08b      	sub	sp, #44	; 0x2c
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002002:	e169      	b.n	80022d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002004:	2201      	movs	r2, #1
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	429a      	cmp	r2, r3
 800201e:	f040 8158 	bne.w	80022d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a9a      	ldr	r2, [pc, #616]	; (8002290 <HAL_GPIO_Init+0x2a0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d05e      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 800202c:	4a98      	ldr	r2, [pc, #608]	; (8002290 <HAL_GPIO_Init+0x2a0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d875      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 8002032:	4a98      	ldr	r2, [pc, #608]	; (8002294 <HAL_GPIO_Init+0x2a4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d058      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 8002038:	4a96      	ldr	r2, [pc, #600]	; (8002294 <HAL_GPIO_Init+0x2a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d86f      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 800203e:	4a96      	ldr	r2, [pc, #600]	; (8002298 <HAL_GPIO_Init+0x2a8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d052      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 8002044:	4a94      	ldr	r2, [pc, #592]	; (8002298 <HAL_GPIO_Init+0x2a8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d869      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 800204a:	4a94      	ldr	r2, [pc, #592]	; (800229c <HAL_GPIO_Init+0x2ac>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d04c      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 8002050:	4a92      	ldr	r2, [pc, #584]	; (800229c <HAL_GPIO_Init+0x2ac>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d863      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 8002056:	4a92      	ldr	r2, [pc, #584]	; (80022a0 <HAL_GPIO_Init+0x2b0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d046      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 800205c:	4a90      	ldr	r2, [pc, #576]	; (80022a0 <HAL_GPIO_Init+0x2b0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d85d      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 8002062:	2b12      	cmp	r3, #18
 8002064:	d82a      	bhi.n	80020bc <HAL_GPIO_Init+0xcc>
 8002066:	2b12      	cmp	r3, #18
 8002068:	d859      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 800206a:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <HAL_GPIO_Init+0x80>)
 800206c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002070:	080020eb 	.word	0x080020eb
 8002074:	080020c5 	.word	0x080020c5
 8002078:	080020d7 	.word	0x080020d7
 800207c:	08002119 	.word	0x08002119
 8002080:	0800211f 	.word	0x0800211f
 8002084:	0800211f 	.word	0x0800211f
 8002088:	0800211f 	.word	0x0800211f
 800208c:	0800211f 	.word	0x0800211f
 8002090:	0800211f 	.word	0x0800211f
 8002094:	0800211f 	.word	0x0800211f
 8002098:	0800211f 	.word	0x0800211f
 800209c:	0800211f 	.word	0x0800211f
 80020a0:	0800211f 	.word	0x0800211f
 80020a4:	0800211f 	.word	0x0800211f
 80020a8:	0800211f 	.word	0x0800211f
 80020ac:	0800211f 	.word	0x0800211f
 80020b0:	0800211f 	.word	0x0800211f
 80020b4:	080020cd 	.word	0x080020cd
 80020b8:	080020e1 	.word	0x080020e1
 80020bc:	4a79      	ldr	r2, [pc, #484]	; (80022a4 <HAL_GPIO_Init+0x2b4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020c2:	e02c      	b.n	800211e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e029      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	3304      	adds	r3, #4
 80020d2:	623b      	str	r3, [r7, #32]
          break;
 80020d4:	e024      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	3308      	adds	r3, #8
 80020dc:	623b      	str	r3, [r7, #32]
          break;
 80020de:	e01f      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	330c      	adds	r3, #12
 80020e6:	623b      	str	r3, [r7, #32]
          break;
 80020e8:	e01a      	b.n	8002120 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020f2:	2304      	movs	r3, #4
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e013      	b.n	8002120 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002100:	2308      	movs	r3, #8
 8002102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	611a      	str	r2, [r3, #16]
          break;
 800210a:	e009      	b.n	8002120 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800210c:	2308      	movs	r3, #8
 800210e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	615a      	str	r2, [r3, #20]
          break;
 8002116:	e003      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
          break;
 800211c:	e000      	b.n	8002120 <HAL_GPIO_Init+0x130>
          break;
 800211e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2bff      	cmp	r3, #255	; 0xff
 8002124:	d801      	bhi.n	800212a <HAL_GPIO_Init+0x13a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	e001      	b.n	800212e <HAL_GPIO_Init+0x13e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3304      	adds	r3, #4
 800212e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2bff      	cmp	r3, #255	; 0xff
 8002134:	d802      	bhi.n	800213c <HAL_GPIO_Init+0x14c>
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	e002      	b.n	8002142 <HAL_GPIO_Init+0x152>
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	3b08      	subs	r3, #8
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	210f      	movs	r1, #15
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	401a      	ands	r2, r3
 8002154:	6a39      	ldr	r1, [r7, #32]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	431a      	orrs	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80b1 	beq.w	80022d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002170:	4b4d      	ldr	r3, [pc, #308]	; (80022a8 <HAL_GPIO_Init+0x2b8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a4c      	ldr	r2, [pc, #304]	; (80022a8 <HAL_GPIO_Init+0x2b8>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b4a      	ldr	r3, [pc, #296]	; (80022a8 <HAL_GPIO_Init+0x2b8>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002188:	4a48      	ldr	r2, [pc, #288]	; (80022ac <HAL_GPIO_Init+0x2bc>)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a40      	ldr	r2, [pc, #256]	; (80022b0 <HAL_GPIO_Init+0x2c0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d013      	beq.n	80021dc <HAL_GPIO_Init+0x1ec>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a3f      	ldr	r2, [pc, #252]	; (80022b4 <HAL_GPIO_Init+0x2c4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00d      	beq.n	80021d8 <HAL_GPIO_Init+0x1e8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a3e      	ldr	r2, [pc, #248]	; (80022b8 <HAL_GPIO_Init+0x2c8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d007      	beq.n	80021d4 <HAL_GPIO_Init+0x1e4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3d      	ldr	r2, [pc, #244]	; (80022bc <HAL_GPIO_Init+0x2cc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d101      	bne.n	80021d0 <HAL_GPIO_Init+0x1e0>
 80021cc:	2303      	movs	r3, #3
 80021ce:	e006      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d0:	2304      	movs	r3, #4
 80021d2:	e004      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e002      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021dc:	2300      	movs	r3, #0
 80021de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	4093      	lsls	r3, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ee:	492f      	ldr	r1, [pc, #188]	; (80022ac <HAL_GPIO_Init+0x2bc>)
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	492c      	ldr	r1, [pc, #176]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002216:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	43db      	mvns	r3, r3
 800221e:	4928      	ldr	r1, [pc, #160]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002220:	4013      	ands	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4922      	ldr	r1, [pc, #136]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	43db      	mvns	r3, r3
 8002246:	491e      	ldr	r1, [pc, #120]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002248:	4013      	ands	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	4918      	ldr	r1, [pc, #96]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	43db      	mvns	r3, r3
 800226e:	4914      	ldr	r1, [pc, #80]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002270:	4013      	ands	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d021      	beq.n	80022c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	490e      	ldr	r1, [pc, #56]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]
 800228c:	e021      	b.n	80022d2 <HAL_GPIO_Init+0x2e2>
 800228e:	bf00      	nop
 8002290:	10320000 	.word	0x10320000
 8002294:	10310000 	.word	0x10310000
 8002298:	10220000 	.word	0x10220000
 800229c:	10210000 	.word	0x10210000
 80022a0:	10120000 	.word	0x10120000
 80022a4:	10110000 	.word	0x10110000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40010800 	.word	0x40010800
 80022b4:	40010c00 	.word	0x40010c00
 80022b8:	40011000 	.word	0x40011000
 80022bc:	40011400 	.word	0x40011400
 80022c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_GPIO_Init+0x304>)
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	4909      	ldr	r1, [pc, #36]	; (80022f4 <HAL_GPIO_Init+0x304>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	3301      	adds	r3, #1
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f47f ae8e 	bne.w	8002004 <HAL_GPIO_Init+0x14>
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	372c      	adds	r7, #44	; 0x2c
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40010400 	.word	0x40010400

080022f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	e001      	b.n	800231a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	807b      	strh	r3, [r7, #2]
 8002332:	4613      	mov	r3, r2
 8002334:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002336:	787b      	ldrb	r3, [r7, #1]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233c:	887a      	ldrh	r2, [r7, #2]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002342:	e003      	b.n	800234c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	041a      	lsls	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	611a      	str	r2, [r3, #16]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
	...

08002358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e12b      	b.n	80025c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fa10 	bl	80017a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023bc:	f000 fce4 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 80023c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4a81      	ldr	r2, [pc, #516]	; (80025cc <HAL_I2C_Init+0x274>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d807      	bhi.n	80023dc <HAL_I2C_Init+0x84>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4a80      	ldr	r2, [pc, #512]	; (80025d0 <HAL_I2C_Init+0x278>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	bf94      	ite	ls
 80023d4:	2301      	movls	r3, #1
 80023d6:	2300      	movhi	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	e006      	b.n	80023ea <HAL_I2C_Init+0x92>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a7d      	ldr	r2, [pc, #500]	; (80025d4 <HAL_I2C_Init+0x27c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	bf94      	ite	ls
 80023e4:	2301      	movls	r3, #1
 80023e6:	2300      	movhi	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0e7      	b.n	80025c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4a78      	ldr	r2, [pc, #480]	; (80025d8 <HAL_I2C_Init+0x280>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0c9b      	lsrs	r3, r3, #18
 80023fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	430a      	orrs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4a6a      	ldr	r2, [pc, #424]	; (80025cc <HAL_I2C_Init+0x274>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d802      	bhi.n	800242c <HAL_I2C_Init+0xd4>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3301      	adds	r3, #1
 800242a:	e009      	b.n	8002440 <HAL_I2C_Init+0xe8>
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	4a69      	ldr	r2, [pc, #420]	; (80025dc <HAL_I2C_Init+0x284>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	3301      	adds	r3, #1
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	430b      	orrs	r3, r1
 8002446:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002452:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	495c      	ldr	r1, [pc, #368]	; (80025cc <HAL_I2C_Init+0x274>)
 800245c:	428b      	cmp	r3, r1
 800245e:	d819      	bhi.n	8002494 <HAL_I2C_Init+0x13c>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1e59      	subs	r1, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fbb1 f3f3 	udiv	r3, r1, r3
 800246e:	1c59      	adds	r1, r3, #1
 8002470:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002474:	400b      	ands	r3, r1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_I2C_Init+0x138>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1e59      	subs	r1, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fbb1 f3f3 	udiv	r3, r1, r3
 8002488:	3301      	adds	r3, #1
 800248a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248e:	e051      	b.n	8002534 <HAL_I2C_Init+0x1dc>
 8002490:	2304      	movs	r3, #4
 8002492:	e04f      	b.n	8002534 <HAL_I2C_Init+0x1dc>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d111      	bne.n	80024c0 <HAL_I2C_Init+0x168>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1e58      	subs	r0, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	440b      	add	r3, r1
 80024aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e012      	b.n	80024e6 <HAL_I2C_Init+0x18e>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1e58      	subs	r0, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	0099      	lsls	r1, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d6:	3301      	adds	r3, #1
 80024d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf0c      	ite	eq
 80024e0:	2301      	moveq	r3, #1
 80024e2:	2300      	movne	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Init+0x196>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e022      	b.n	8002534 <HAL_I2C_Init+0x1dc>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10e      	bne.n	8002514 <HAL_I2C_Init+0x1bc>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1e58      	subs	r0, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6859      	ldr	r1, [r3, #4]
 80024fe:	460b      	mov	r3, r1
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	440b      	add	r3, r1
 8002504:	fbb0 f3f3 	udiv	r3, r0, r3
 8002508:	3301      	adds	r3, #1
 800250a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002512:	e00f      	b.n	8002534 <HAL_I2C_Init+0x1dc>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1e58      	subs	r0, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	0099      	lsls	r1, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	6809      	ldr	r1, [r1, #0]
 8002538:	4313      	orrs	r3, r2
 800253a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002562:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6911      	ldr	r1, [r2, #16]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68d2      	ldr	r2, [r2, #12]
 800256e:	4311      	orrs	r1, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	430b      	orrs	r3, r1
 8002576:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	000186a0 	.word	0x000186a0
 80025d0:	001e847f 	.word	0x001e847f
 80025d4:	003d08ff 	.word	0x003d08ff
 80025d8:	431bde83 	.word	0x431bde83
 80025dc:	10624dd3 	.word	0x10624dd3

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e26c      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8087 	beq.w	800270e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002600:	4b92      	ldr	r3, [pc, #584]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b04      	cmp	r3, #4
 800260a:	d00c      	beq.n	8002626 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800260c:	4b8f      	ldr	r3, [pc, #572]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d112      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
 8002618:	4b8c      	ldr	r3, [pc, #560]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002624:	d10b      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d06c      	beq.n	800270c <HAL_RCC_OscConfig+0x12c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d168      	bne.n	800270c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e246      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x76>
 8002648:	4b80      	ldr	r3, [pc, #512]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a7f      	ldr	r2, [pc, #508]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e02e      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x98>
 800265e:	4b7b      	ldr	r3, [pc, #492]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7a      	ldr	r2, [pc, #488]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b78      	ldr	r3, [pc, #480]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a77      	ldr	r2, [pc, #476]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e01d      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0xbc>
 8002682:	4b72      	ldr	r3, [pc, #456]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a71      	ldr	r2, [pc, #452]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b6f      	ldr	r3, [pc, #444]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6e      	ldr	r2, [pc, #440]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 800269c:	4b6b      	ldr	r3, [pc, #428]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6a      	ldr	r2, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80026a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b68      	ldr	r3, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a67      	ldr	r2, [pc, #412]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80026ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d013      	beq.n	80026e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff fb5c 	bl	8001d78 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff fb58 	bl	8001d78 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1fa      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b5d      	ldr	r3, [pc, #372]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0xe4>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7ff fb48 	bl	8001d78 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7ff fb44 	bl	8001d78 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e1e6      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x10c>
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d063      	beq.n	80027e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271a:	4b4c      	ldr	r3, [pc, #304]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b08      	cmp	r3, #8
 8002730:	d11c      	bne.n	800276c <HAL_RCC_OscConfig+0x18c>
 8002732:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d116      	bne.n	800276c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_RCC_OscConfig+0x176>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e1ba      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4939      	ldr	r1, [pc, #228]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	e03a      	b.n	80027e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_RCC_OscConfig+0x270>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7ff fafd 	bl	8001d78 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002782:	f7ff faf9 	bl	8001d78 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e19b      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4927      	ldr	r1, [pc, #156]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]
 80027b4:	e015      	b.n	80027e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <HAL_RCC_OscConfig+0x270>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff fadc 	bl	8001d78 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c4:	f7ff fad8 	bl	8001d78 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e17a      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d03a      	beq.n	8002864 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d019      	beq.n	800282a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_RCC_OscConfig+0x274>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7ff fabc 	bl	8001d78 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002804:	f7ff fab8 	bl	8001d78 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e15a      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002822:	2001      	movs	r0, #1
 8002824:	f000 fad8 	bl	8002dd8 <RCC_Delay>
 8002828:	e01c      	b.n	8002864 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_OscConfig+0x274>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7ff faa2 	bl	8001d78 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002836:	e00f      	b.n	8002858 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002838:	f7ff fa9e 	bl	8001d78 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d908      	bls.n	8002858 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e140      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	42420000 	.word	0x42420000
 8002854:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b9e      	ldr	r3, [pc, #632]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e9      	bne.n	8002838 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a6 	beq.w	80029be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b97      	ldr	r3, [pc, #604]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10d      	bne.n	800289e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b94      	ldr	r3, [pc, #592]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4a93      	ldr	r2, [pc, #588]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	61d3      	str	r3, [r2, #28]
 800288e:	4b91      	ldr	r3, [pc, #580]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b8e      	ldr	r3, [pc, #568]	; (8002ad8 <HAL_RCC_OscConfig+0x4f8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b8b      	ldr	r3, [pc, #556]	; (8002ad8 <HAL_RCC_OscConfig+0x4f8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a8a      	ldr	r2, [pc, #552]	; (8002ad8 <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7ff fa5f 	bl	8001d78 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7ff fa5b 	bl	8001d78 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0fd      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b81      	ldr	r3, [pc, #516]	; (8002ad8 <HAL_RCC_OscConfig+0x4f8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x312>
 80028e4:	4b7b      	ldr	r3, [pc, #492]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a7a      	ldr	r2, [pc, #488]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	e02d      	b.n	800294e <HAL_RCC_OscConfig+0x36e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x334>
 80028fa:	4b76      	ldr	r3, [pc, #472]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a75      	ldr	r2, [pc, #468]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6213      	str	r3, [r2, #32]
 8002906:	4b73      	ldr	r3, [pc, #460]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a72      	ldr	r2, [pc, #456]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6213      	str	r3, [r2, #32]
 8002912:	e01c      	b.n	800294e <HAL_RCC_OscConfig+0x36e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d10c      	bne.n	8002936 <HAL_RCC_OscConfig+0x356>
 800291c:	4b6d      	ldr	r3, [pc, #436]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a6c      	ldr	r2, [pc, #432]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6213      	str	r3, [r2, #32]
 8002934:	e00b      	b.n	800294e <HAL_RCC_OscConfig+0x36e>
 8002936:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4a66      	ldr	r2, [pc, #408]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6213      	str	r3, [r2, #32]
 8002942:	4b64      	ldr	r3, [pc, #400]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a63      	ldr	r2, [pc, #396]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d015      	beq.n	8002982 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7ff fa0f 	bl	8001d78 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7ff fa0b 	bl	8001d78 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	; 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0ab      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	4b57      	ldr	r3, [pc, #348]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ee      	beq.n	800295e <HAL_RCC_OscConfig+0x37e>
 8002980:	e014      	b.n	80029ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7ff f9f9 	bl	8001d78 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7ff f9f5 	bl	8001d78 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e095      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a0:	4b4c      	ldr	r3, [pc, #304]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ee      	bne.n	800298a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d105      	bne.n	80029be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b2:	4b48      	ldr	r3, [pc, #288]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a47      	ldr	r2, [pc, #284]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8081 	beq.w	8002aca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c8:	4b42      	ldr	r3, [pc, #264]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d061      	beq.n	8002a98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d146      	bne.n	8002a6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_RCC_OscConfig+0x4fc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7ff f9c9 	bl	8001d78 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7ff f9c5 	bl	8001d78 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e067      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	4b35      	ldr	r3, [pc, #212]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a10:	d108      	bne.n	8002a24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a12:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	492d      	ldr	r1, [pc, #180]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a24:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a19      	ldr	r1, [r3, #32]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	430b      	orrs	r3, r1
 8002a36:	4927      	ldr	r1, [pc, #156]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_RCC_OscConfig+0x4fc>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7ff f999 	bl	8001d78 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7ff f995 	bl	8001d78 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e037      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x46a>
 8002a68:	e02f      	b.n	8002aca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_RCC_OscConfig+0x4fc>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff f982 	bl	8001d78 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7ff f97e 	bl	8001d78 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e020      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x498>
 8002a96:	e018      	b.n	8002aca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e013      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	42420060 	.word	0x42420060

08002ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0d0      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d910      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b67      	ldr	r3, [pc, #412]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4965      	ldr	r1, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d040      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d115      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e073      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06b      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4936      	ldr	r1, [pc, #216]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7ff f8d2 	bl	8001d78 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7ff f8ce 	bl	8001d78 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e053      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d210      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0207 	bic.w	r2, r3, #7
 8002c16:	4922      	ldr	r1, [pc, #136]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1cc>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff f830 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40022000 	.word	0x40022000
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08009624 	.word	0x08009624
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	b490      	push	{r4, r7}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cba:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cbc:	1d3c      	adds	r4, r7, #4
 8002cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cc4:	f240 2301 	movw	r3, #513	; 0x201
 8002cc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cde:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d002      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0x46>
 8002cf2:	e02d      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf6:	623b      	str	r3, [r7, #32]
      break;
 8002cf8:	e02d      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	0c9b      	lsrs	r3, r3, #18
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d06:	4413      	add	r3, r2
 8002d08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	0c5b      	lsrs	r3, r3, #17
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d26:	4413      	add	r3, r2
 8002d28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d32:	fb02 f203 	mul.w	r2, r2, r3
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3e:	e004      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	623b      	str	r3, [r7, #32]
      break;
 8002d4e:	e002      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d52:	623b      	str	r3, [r7, #32]
      break;
 8002d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d56:	6a3b      	ldr	r3, [r7, #32]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3728      	adds	r7, #40	; 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc90      	pop	{r4, r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	08009614 	.word	0x08009614
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	007a1200 	.word	0x007a1200
 8002d70:	003d0900 	.word	0x003d0900

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d8c:	f7ff fff2 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08009634 	.word	0x08009634

08002db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002db4:	f7ff ffde 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	0adb      	lsrs	r3, r3, #11
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4903      	ldr	r1, [pc, #12]	; (8002dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	08009634 	.word	0x08009634

08002dd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <RCC_Delay+0x34>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <RCC_Delay+0x38>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0a5b      	lsrs	r3, r3, #9
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002df4:	bf00      	nop
  }
  while (Delay --);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	60fa      	str	r2, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <RCC_Delay+0x1c>
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e076      	b.n	8002f14 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d108      	bne.n	8002e40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e36:	d009      	beq.n	8002e4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
 8002e3e:	e005      	b.n	8002e4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe fcda 	bl	8001820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	ea42 0103 	orr.w	r1, r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	0c1a      	lsrs	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f002 0204 	and.w	r2, r2, #4
 8002ef2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_SPI_Transmit+0x22>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e126      	b.n	800318c <HAL_SPI_Transmit+0x270>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f46:	f7fe ff17 	bl	8001d78 <HAL_GetTick>
 8002f4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d002      	beq.n	8002f62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f60:	e10b      	b.n	800317a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_SPI_Transmit+0x52>
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f72:	e102      	b.n	800317a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2203      	movs	r2, #3
 8002f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fba:	d10f      	bne.n	8002fdc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d007      	beq.n	8002ffa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003002:	d14b      	bne.n	800309c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_SPI_Transmit+0xf6>
 800300c:	8afb      	ldrh	r3, [r7, #22]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d13e      	bne.n	8003090 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	881a      	ldrh	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	1c9a      	adds	r2, r3, #2
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003036:	e02b      	b.n	8003090 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d112      	bne.n	800306c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	881a      	ldrh	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	1c9a      	adds	r2, r3, #2
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	86da      	strh	r2, [r3, #54]	; 0x36
 800306a:	e011      	b.n	8003090 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306c:	f7fe fe84 	bl	8001d78 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d803      	bhi.n	8003084 <HAL_SPI_Transmit+0x168>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d102      	bne.n	800308a <HAL_SPI_Transmit+0x16e>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800308e:	e074      	b.n	800317a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ce      	bne.n	8003038 <HAL_SPI_Transmit+0x11c>
 800309a:	e04c      	b.n	8003136 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_SPI_Transmit+0x18e>
 80030a4:	8afb      	ldrh	r3, [r7, #22]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d140      	bne.n	800312c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030d0:	e02c      	b.n	800312c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d113      	bne.n	8003108 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	86da      	strh	r2, [r3, #54]	; 0x36
 8003106:	e011      	b.n	800312c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003108:	f7fe fe36 	bl	8001d78 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d803      	bhi.n	8003120 <HAL_SPI_Transmit+0x204>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d102      	bne.n	8003126 <HAL_SPI_Transmit+0x20a>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	77fb      	strb	r3, [r7, #31]
          goto error;
 800312a:	e026      	b.n	800317a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1cd      	bne.n	80030d2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	6839      	ldr	r1, [r7, #0]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f8c0 	bl	80032c0 <SPI_EndRxTxTransaction>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003154:	2300      	movs	r3, #0
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e000      	b.n	800317a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003178:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800318a:	7ffb      	ldrb	r3, [r7, #31]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031a2:	b2db      	uxtb	r3, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
	...

080031b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031c0:	f7fe fdda 	bl	8001d78 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	4413      	add	r3, r2
 80031ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031d0:	f7fe fdd2 	bl	8001d78 <HAL_GetTick>
 80031d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031d6:	4b39      	ldr	r3, [pc, #228]	; (80032bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	015b      	lsls	r3, r3, #5
 80031dc:	0d1b      	lsrs	r3, r3, #20
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031e6:	e054      	b.n	8003292 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	d050      	beq.n	8003292 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031f0:	f7fe fdc2 	bl	8001d78 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d902      	bls.n	8003206 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d13d      	bne.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003214:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800321e:	d111      	bne.n	8003244 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003228:	d004      	beq.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d107      	bne.n	8003244 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003242:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324c:	d10f      	bne.n	800326e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800326c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e017      	b.n	80032b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	3b01      	subs	r3, #1
 8003290:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d19b      	bne.n	80031e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000

080032c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff ff6a 	bl	80031b0 <SPI_WaitFlagStateUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e000      	b.n	80032f4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e041      	b.n	8003392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe fb4a 	bl	80019bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 fc96 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d001      	beq.n	80033b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e032      	b.n	800341a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_TIM_Base_Start+0x88>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00e      	beq.n	80033e4 <HAL_TIM_Base_Start+0x48>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d009      	beq.n	80033e4 <HAL_TIM_Base_Start+0x48>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <HAL_TIM_Base_Start+0x8c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_TIM_Base_Start+0x48>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a13      	ldr	r2, [pc, #76]	; (800342c <HAL_TIM_Base_Start+0x90>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d111      	bne.n	8003408 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d010      	beq.n	8003418 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003406:	e007      	b.n	8003418 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800

08003430 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e041      	b.n	80034c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fe fa68 	bl	800192c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f000 fbfc 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_IC_Start_IT+0x1a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e013      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x42>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_IC_Start_IT+0x2a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x42>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_IC_Start_IT+0x3a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003506:	b2db      	uxtb	r3, r3
 8003508:	e003      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x42>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003510:	b2db      	uxtb	r3, r3
 8003512:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_TIM_IC_Start_IT+0x54>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e013      	b.n	800354c <HAL_TIM_IC_Start_IT+0x7c>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b04      	cmp	r3, #4
 8003528:	d104      	bne.n	8003534 <HAL_TIM_IC_Start_IT+0x64>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e00b      	b.n	800354c <HAL_TIM_IC_Start_IT+0x7c>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b08      	cmp	r3, #8
 8003538:	d104      	bne.n	8003544 <HAL_TIM_IC_Start_IT+0x74>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e003      	b.n	800354c <HAL_TIM_IC_Start_IT+0x7c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800354a:	b2db      	uxtb	r3, r3
 800354c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d102      	bne.n	800355a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003554:	7bbb      	ldrb	r3, [r7, #14]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d001      	beq.n	800355e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0b3      	b.n	80036c6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <HAL_TIM_IC_Start_IT+0x9e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356c:	e013      	b.n	8003596 <HAL_TIM_IC_Start_IT+0xc6>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d104      	bne.n	800357e <HAL_TIM_IC_Start_IT+0xae>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800357c:	e00b      	b.n	8003596 <HAL_TIM_IC_Start_IT+0xc6>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d104      	bne.n	800358e <HAL_TIM_IC_Start_IT+0xbe>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800358c:	e003      	b.n	8003596 <HAL_TIM_IC_Start_IT+0xc6>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_IC_Start_IT+0xd6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a4:	e013      	b.n	80035ce <HAL_TIM_IC_Start_IT+0xfe>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_IC_Start_IT+0xe6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b4:	e00b      	b.n	80035ce <HAL_TIM_IC_Start_IT+0xfe>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_IC_Start_IT+0xf6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c4:	e003      	b.n	80035ce <HAL_TIM_IC_Start_IT+0xfe>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	d841      	bhi.n	8003658 <HAL_TIM_IC_Start_IT+0x188>
 80035d4:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <HAL_TIM_IC_Start_IT+0x10c>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	08003611 	.word	0x08003611
 80035e0:	08003659 	.word	0x08003659
 80035e4:	08003659 	.word	0x08003659
 80035e8:	08003659 	.word	0x08003659
 80035ec:	08003623 	.word	0x08003623
 80035f0:	08003659 	.word	0x08003659
 80035f4:	08003659 	.word	0x08003659
 80035f8:	08003659 	.word	0x08003659
 80035fc:	08003635 	.word	0x08003635
 8003600:	08003659 	.word	0x08003659
 8003604:	08003659 	.word	0x08003659
 8003608:	08003659 	.word	0x08003659
 800360c:	08003647 	.word	0x08003647
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0202 	orr.w	r2, r2, #2
 800361e:	60da      	str	r2, [r3, #12]
      break;
 8003620:	e01b      	b.n	800365a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0204 	orr.w	r2, r2, #4
 8003630:	60da      	str	r2, [r3, #12]
      break;
 8003632:	e012      	b.n	800365a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0208 	orr.w	r2, r2, #8
 8003642:	60da      	str	r2, [r3, #12]
      break;
 8003644:	e009      	b.n	800365a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0210 	orr.w	r2, r2, #16
 8003654:	60da      	str	r2, [r3, #12]
      break;
 8003656:	e000      	b.n	800365a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003658:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fd07 	bl	8004076 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <HAL_TIM_IC_Start_IT+0x200>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00e      	beq.n	8003690 <HAL_TIM_IC_Start_IT+0x1c0>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d009      	beq.n	8003690 <HAL_TIM_IC_Start_IT+0x1c0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a14      	ldr	r2, [pc, #80]	; (80036d4 <HAL_TIM_IC_Start_IT+0x204>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_TIM_IC_Start_IT+0x1c0>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <HAL_TIM_IC_Start_IT+0x208>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d111      	bne.n	80036b4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b06      	cmp	r3, #6
 80036a0:	d010      	beq.n	80036c4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b2:	e007      	b.n	80036c4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800

080036dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d122      	bne.n	8003738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d11b      	bne.n	8003738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0202 	mvn.w	r2, #2
 8003708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd fce6 	bl	80010f0 <HAL_TIM_IC_CaptureCallback>
 8003724:	e005      	b.n	8003732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa85 	bl	8003c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fa8b 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d122      	bne.n	800378c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d11b      	bne.n	800378c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0204 	mvn.w	r2, #4
 800375c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2202      	movs	r2, #2
 8003762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd fcbc 	bl	80010f0 <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fa5b 	bl	8003c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fa61 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b08      	cmp	r3, #8
 8003798:	d122      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d11b      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0208 	mvn.w	r2, #8
 80037b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2204      	movs	r2, #4
 80037b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fc92 	bl	80010f0 <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fa31 	bl	8003c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fa37 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0210 	mvn.w	r2, #16
 8003804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2208      	movs	r2, #8
 800380a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fc68 	bl	80010f0 <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa07 	bl	8003c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fa0d 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10e      	bne.n	8003860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0201 	mvn.w	r2, #1
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9e2 	bl	8003c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b80      	cmp	r3, #128	; 0x80
 800386c:	d10e      	bne.n	800388c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d107      	bne.n	800388c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fc81 	bl	800418e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d10e      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d107      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f9d1 	bl	8003c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d107      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0220 	mvn.w	r2, #32
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fc4c 	bl	800417c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003902:	2302      	movs	r3, #2
 8003904:	e082      	b.n	8003a0c <HAL_TIM_IC_ConfigChannel+0x120>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11b      	bne.n	800394c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f000 fa04 	bl	8003d30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 020c 	bic.w	r2, r2, #12
 8003936:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6999      	ldr	r1, [r3, #24]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	619a      	str	r2, [r3, #24]
 800394a:	e05a      	b.n	8003a02 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b04      	cmp	r3, #4
 8003950:	d11c      	bne.n	800398c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f000 fa6d 	bl	8003e40 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003974:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6999      	ldr	r1, [r3, #24]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	021a      	lsls	r2, r3, #8
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	619a      	str	r2, [r3, #24]
 800398a:	e03a      	b.n	8003a02 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b08      	cmp	r3, #8
 8003990:	d11b      	bne.n	80039ca <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6819      	ldr	r1, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f000 fab8 	bl	8003f16 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 020c 	bic.w	r2, r2, #12
 80039b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69d9      	ldr	r1, [r3, #28]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	61da      	str	r2, [r3, #28]
 80039c8:	e01b      	b.n	8003a02 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6819      	ldr	r1, [r3, #0]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f000 fad7 	bl	8003f8c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69d9      	ldr	r1, [r3, #28]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	021a      	lsls	r2, r3, #8
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_TIM_ConfigClockSource+0x18>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e0b3      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x180>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a64:	d03e      	beq.n	8003ae4 <HAL_TIM_ConfigClockSource+0xd0>
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6a:	f200 8087 	bhi.w	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a72:	f000 8085 	beq.w	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d87f      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a7c:	2b70      	cmp	r3, #112	; 0x70
 8003a7e:	d01a      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0xa2>
 8003a80:	2b70      	cmp	r3, #112	; 0x70
 8003a82:	d87b      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a84:	2b60      	cmp	r3, #96	; 0x60
 8003a86:	d050      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x116>
 8003a88:	2b60      	cmp	r3, #96	; 0x60
 8003a8a:	d877      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a8c:	2b50      	cmp	r3, #80	; 0x50
 8003a8e:	d03c      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0xf6>
 8003a90:	2b50      	cmp	r3, #80	; 0x50
 8003a92:	d873      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d058      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x136>
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d86f      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003a9c:	2b30      	cmp	r3, #48	; 0x30
 8003a9e:	d064      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x156>
 8003aa0:	2b30      	cmp	r3, #48	; 0x30
 8003aa2:	d86b      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d060      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x156>
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d867      	bhi.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d05c      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x156>
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d05a      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ab4:	e062      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6899      	ldr	r1, [r3, #8]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f000 fab7 	bl	8004038 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ad8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	609a      	str	r2, [r3, #8]
      break;
 8003ae2:	e04e      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6818      	ldr	r0, [r3, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	6899      	ldr	r1, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f000 faa0 	bl	8004038 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b06:	609a      	str	r2, [r3, #8]
      break;
 8003b08:	e03b      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f000 f964 	bl	8003de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2150      	movs	r1, #80	; 0x50
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fa6e 	bl	8004004 <TIM_ITRx_SetConfig>
      break;
 8003b28:	e02b      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f000 f9be 	bl	8003eb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2160      	movs	r1, #96	; 0x60
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fa5e 	bl	8004004 <TIM_ITRx_SetConfig>
      break;
 8003b48:	e01b      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6859      	ldr	r1, [r3, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f000 f944 	bl	8003de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2140      	movs	r1, #64	; 0x40
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fa4e 	bl	8004004 <TIM_ITRx_SetConfig>
      break;
 8003b68:	e00b      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4619      	mov	r1, r3
 8003b74:	4610      	mov	r0, r2
 8003b76:	f000 fa45 	bl	8004004 <TIM_ITRx_SetConfig>
        break;
 8003b7a:	e002      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b7c:	bf00      	nop
 8003b7e:	e000      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d831      	bhi.n	8003c14 <HAL_TIM_ReadCapturedValue+0x78>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c15 	.word	0x08003c15
 8003bc4:	08003c15 	.word	0x08003c15
 8003bc8:	08003bf7 	.word	0x08003bf7
 8003bcc:	08003c15 	.word	0x08003c15
 8003bd0:	08003c15 	.word	0x08003c15
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c15 	.word	0x08003c15
 8003be0:	08003c15 	.word	0x08003c15
 8003be4:	08003c15 	.word	0x08003c15
 8003be8:	08003c0b 	.word	0x08003c0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	60fb      	str	r3, [r7, #12]

      break;
 8003bf4:	e00f      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	60fb      	str	r3, [r7, #12]

      break;
 8003bfe:	e00a      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	60fb      	str	r3, [r7, #12]

      break;
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	60fb      	str	r3, [r7, #12]

      break;
 8003c12:	e000      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c14:	bf00      	nop
  }

  return tmpreg;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop

08003c24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a29      	ldr	r2, [pc, #164]	; (8003d24 <TIM_Base_SetConfig+0xb8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8a:	d007      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <TIM_Base_SetConfig+0xbc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <TIM_Base_SetConfig+0xc0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <TIM_Base_SetConfig+0xb8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbc:	d007      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <TIM_Base_SetConfig+0xbc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d003      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <TIM_Base_SetConfig+0xc0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d108      	bne.n	8003ce0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <TIM_Base_SetConfig+0xb8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d103      	bne.n	8003d14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	615a      	str	r2, [r3, #20]
}
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800

08003d30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <TIM_TI1_SetConfig+0xa8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00b      	beq.n	8003d76 <TIM_TI1_SetConfig+0x46>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d007      	beq.n	8003d76 <TIM_TI1_SetConfig+0x46>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <TIM_TI1_SetConfig+0xac>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_TI1_SetConfig+0x46>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <TIM_TI1_SetConfig+0xb0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d101      	bne.n	8003d7a <TIM_TI1_SetConfig+0x4a>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <TIM_TI1_SetConfig+0x4c>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e003      	b.n	8003d9a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f023 030a 	bic.w	r3, r3, #10
 8003db4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f003 030a 	and.w	r3, r3, #10
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800

08003de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 030a 	bic.w	r3, r3, #10
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0210 	bic.w	r2, r3, #16
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	031b      	lsls	r3, r3, #12
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f023 0210 	bic.w	r2, r3, #16
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ee2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	031b      	lsls	r3, r3, #12
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ef4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	621a      	str	r2, [r3, #32]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b087      	sub	sp, #28
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	031b      	lsls	r3, r3, #12
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fde:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	031b      	lsls	r3, r3, #12
 8003fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	f043 0307 	orr.w	r3, r3, #7
 8004026:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	609a      	str	r2, [r3, #8]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	021a      	lsls	r2, r3, #8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	431a      	orrs	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4313      	orrs	r3, r2
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	609a      	str	r2, [r3, #8]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004076:	b480      	push	{r7}
 8004078:	b087      	sub	sp, #28
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2201      	movs	r2, #1
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1a      	ldr	r2, [r3, #32]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	43db      	mvns	r3, r3
 8004098:	401a      	ands	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1a      	ldr	r2, [r3, #32]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	431a      	orrs	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	621a      	str	r2, [r3, #32]
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e046      	b.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a16      	ldr	r2, [pc, #88]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00e      	beq.n	800413a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d009      	beq.n	800413a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a12      	ldr	r2, [pc, #72]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a10      	ldr	r2, [pc, #64]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10c      	bne.n	8004154 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	4313      	orrs	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800

0800417c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e03f      	b.n	8004232 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd fc16 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	; 0x24
 80041d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f829 	bl	800423c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004276:	f023 030c 	bic.w	r3, r3, #12
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	430b      	orrs	r3, r1
 8004282:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2c      	ldr	r2, [pc, #176]	; (8004350 <UART_SetConfig+0x114>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d103      	bne.n	80042ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042a4:	f7fe fd84 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	e002      	b.n	80042b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7fe fd6c 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 80042b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009a      	lsls	r2, r3, #2
 80042bc:	441a      	add	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	4a22      	ldr	r2, [pc, #136]	; (8004354 <UART_SetConfig+0x118>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	0119      	lsls	r1, r3, #4
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	009a      	lsls	r2, r3, #2
 80042dc:	441a      	add	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042e8:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <UART_SetConfig+0x118>)
 80042ea:	fba3 0302 	umull	r0, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2064      	movs	r0, #100	; 0x64
 80042f2:	fb00 f303 	mul.w	r3, r0, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	3332      	adds	r3, #50	; 0x32
 80042fc:	4a15      	ldr	r2, [pc, #84]	; (8004354 <UART_SetConfig+0x118>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004308:	4419      	add	r1, r3
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009a      	lsls	r2, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004320:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <UART_SetConfig+0x118>)
 8004322:	fba3 0302 	umull	r0, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2064      	movs	r0, #100	; 0x64
 800432a:	fb00 f303 	mul.w	r3, r0, r3
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	3332      	adds	r3, #50	; 0x32
 8004334:	4a07      	ldr	r2, [pc, #28]	; (8004354 <UART_SetConfig+0x118>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	440a      	add	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40013800 	.word	0x40013800
 8004354:	51eb851f 	.word	0x51eb851f

08004358 <ST7565_Select>:


uint8_t ST7565_buffer[SCREEN_WIDTH * SCREEN_HEIGHT / 8];
// extern enum {WHITE = 0, BLACK = 1} color_t;

void ST7565_Select(void) {
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <ST7565_Unselect>:
void ST7565_Unselect(void) {
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
					 CS_GPIO_Port->BSRR = CS_Pin;
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <ST7565_Reset>:

void ST7565_Reset( void ){  
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 8004374:	2200      	movs	r2, #0
 8004376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800437a:	4808      	ldr	r0, [pc, #32]	; (800439c <ST7565_Reset+0x2c>)
 800437c:	f7fd ffd3 	bl	8002326 <HAL_GPIO_WritePin>
 HAL_Delay( 10 ); 
 8004380:	200a      	movs	r0, #10
 8004382:	f7fd fd03 	bl	8001d8c <HAL_Delay>
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 8004386:	2201      	movs	r2, #1
 8004388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800438c:	4803      	ldr	r0, [pc, #12]	; (800439c <ST7565_Reset+0x2c>)
 800438e:	f7fd ffca 	bl	8002326 <HAL_GPIO_WritePin>
 HAL_Delay( 10 );  
 8004392:	200a      	movs	r0, #10
 8004394:	f7fd fcfa 	bl	8001d8c <HAL_Delay>
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40010800 	.word	0x40010800

080043a0 <ST7565_w_dat>:

void ST7565_w_dat( uint8_t Dat ){  
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
	
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Dat, 1, HAL_MAX_DELAY);
 80043aa:	1df9      	adds	r1, r7, #7
 80043ac:	f04f 33ff 	mov.w	r3, #4294967295
 80043b0:	2201      	movs	r2, #1
 80043b2:	4807      	ldr	r0, [pc, #28]	; (80043d0 <ST7565_w_dat+0x30>)
 80043b4:	f7fe fdb2 	bl	8002f1c <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 80043b8:	bf00      	nop
 80043ba:	4805      	ldr	r0, [pc, #20]	; (80043d0 <ST7565_w_dat+0x30>)
 80043bc:	f7fe feea 	bl	8003194 <HAL_SPI_GetState>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d1f9      	bne.n	80043ba <ST7565_w_dat+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------
	
}  
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20000278 	.word	0x20000278

080043d4 <ST7565_w_cmd>:

void ST7565_w_cmd( uint8_t Command ){  
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
		
		// pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80043de:	2200      	movs	r2, #0
 80043e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043e4:	480d      	ldr	r0, [pc, #52]	; (800441c <ST7565_w_cmd+0x48>)
 80043e6:	f7fd ff9e 	bl	8002326 <HAL_GPIO_WritePin>
		 
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Command, 1, HAL_MAX_DELAY);
 80043ea:	1df9      	adds	r1, r7, #7
 80043ec:	f04f 33ff 	mov.w	r3, #4294967295
 80043f0:	2201      	movs	r2, #1
 80043f2:	480b      	ldr	r0, [pc, #44]	; (8004420 <ST7565_w_cmd+0x4c>)
 80043f4:	f7fe fd92 	bl	8002f1c <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 80043f8:	bf00      	nop
 80043fa:	4809      	ldr	r0, [pc, #36]	; (8004420 <ST7565_w_cmd+0x4c>)
 80043fc:	f7fe feca 	bl	8003194 <HAL_SPI_GetState>
 8004400:	4603      	mov	r3, r0
 8004402:	2b01      	cmp	r3, #1
 8004404:	d1f9      	bne.n	80043fa <ST7565_w_cmd+0x26>
		 
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8004406:	2201      	movs	r2, #1
 8004408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800440c:	4803      	ldr	r0, [pc, #12]	; (800441c <ST7565_w_cmd+0x48>)
 800440e:	f7fd ff8a 	bl	8002326 <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
		
	#endif
	//-----------------------------------------------------------------------------------
	
} 
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40010800 	.word	0x40010800
 8004420:	20000278 	.word	0x20000278

08004424 <ST7565_Display_fill>:

void ST7565_Display_fill( uint8_t fill ){  
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	71fb      	strb	r3, [r7, #7]
	
	uint8_t page,column;  
	
	memset( ST7565_buffer, (uint8_t)fill, ( SCREEN_WIDTH * SCREEN_HEIGHT / 8 ) );	// отчистка памяти заполняем массив значением 0x00
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004434:	4619      	mov	r1, r3
 8004436:	4815      	ldr	r0, [pc, #84]	; (800448c <ST7565_Display_fill+0x68>)
 8004438:	f000 fcc6 	bl	8004dc8 <memset>
	
	ST7565_Select();
 800443c:	f7ff ff8c 	bl	8004358 <ST7565_Select>
	
	for( page=0xB7; page>=0xB0; page-- ){
 8004440:	23b7      	movs	r3, #183	; 0xb7
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	e019      	b.n	800447a <ST7565_Display_fill+0x56>
		
		ST7565_w_cmd(page);  //set page address   
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ffc3 	bl	80043d4 <ST7565_w_cmd>
		ST7565_w_cmd(0x10);  //set Column address MSB   
 800444e:	2010      	movs	r0, #16
 8004450:	f7ff ffc0 	bl	80043d4 <ST7565_w_cmd>
		ST7565_w_cmd(0x00);  //set column address LSB   
 8004454:	2000      	movs	r0, #0
 8004456:	f7ff ffbd 	bl	80043d4 <ST7565_w_cmd>
		for( column=0; column<131; column++ ){  
 800445a:	2300      	movs	r3, #0
 800445c:	73bb      	strb	r3, [r7, #14]
 800445e:	e006      	b.n	800446e <ST7565_Display_fill+0x4a>
			ST7565_w_dat(fill);  
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff ff9c 	bl	80043a0 <ST7565_w_dat>
		for( column=0; column<131; column++ ){  
 8004468:	7bbb      	ldrb	r3, [r7, #14]
 800446a:	3301      	adds	r3, #1
 800446c:	73bb      	strb	r3, [r7, #14]
 800446e:	7bbb      	ldrb	r3, [r7, #14]
 8004470:	2b82      	cmp	r3, #130	; 0x82
 8004472:	d9f5      	bls.n	8004460 <ST7565_Display_fill+0x3c>
	for( page=0xB7; page>=0xB0; page-- ){
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	3b01      	subs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2baf      	cmp	r3, #175	; 0xaf
 800447e:	d8e2      	bhi.n	8004446 <ST7565_Display_fill+0x22>
        }  
    }
		
	ST7565_Unselect();
 8004480:	f7ff ff70 	bl	8004364 <ST7565_Unselect>
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000454 	.word	0x20000454

08004490 <ST7565_Init>:

void ST7565_Init( void ){  
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
	
	ST7565_Select();
 8004494:	f7ff ff60 	bl	8004358 <ST7565_Select>
	
	ST7565_Reset();
 8004498:	f7ff ff6a 	bl	8004370 <ST7565_Reset>

	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея	
	ST7565_w_cmd( CMD_SET_BIAS_9 );    // CMD_SET_BIAS_7   1/7    CMD_SET_BIAS_9  1/9
 800449c:	20a2      	movs	r0, #162	; 0xa2
 800449e:	f7ff ff99 	bl	80043d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80044a2:	2001      	movs	r0, #1
 80044a4:	f7fd fc72 	bl	8001d8c <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	#if defined (SCREEN_ORIENTATION_180)
		ST7565_w_cmd( CMD_SET_ADC_REVERSE );    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		ST7565_w_cmd( CMD_SET_COM_NORMAL );    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#else
		ST7565_w_cmd( CMD_SET_ADC_NORMAL );    		//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
 80044a8:	20a0      	movs	r0, #160	; 0xa0
 80044aa:	f7ff ff93 	bl	80043d4 <ST7565_w_cmd>
		ST7565_w_cmd( CMD_SET_COM_REVERSE );    	//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
 80044ae:	20c8      	movs	r0, #200	; 0xc8
 80044b0:	f7ff ff90 	bl	80043d4 <ST7565_w_cmd>
	#endif		
	//---------------------------------------------------------------------------------------------	
	
	HAL_Delay(1);
 80044b4:	2001      	movs	r0, #1
 80044b6:	f7fd fc69 	bl	8001d8c <HAL_Delay>
	
	// делитель внутреннего резистора установлен на 7 (от 0..7)	
	ST7565_w_cmd( CMD_SET_RESISTOR_RATIO | 0x7 );    //Regulator Resistor Selection   
 80044ba:	2027      	movs	r0, #39	; 0x27
 80044bc:	f7ff ff8a 	bl	80043d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80044c0:	2001      	movs	r0, #1
 80044c2:	f7fd fc63 	bl	8001d8c <HAL_Delay>
	
	// управление питанием, все внутренние блоки включены	(от 0..7)
	ST7565_w_cmd( CMD_SET_POWER_CONTROL | 0x7 );
 80044c6:	202f      	movs	r0, #47	; 0x2f
 80044c8:	f7ff ff84 	bl	80043d4 <ST7565_w_cmd>
		
	HAL_Delay(1);
 80044cc:	2001      	movs	r0, #1
 80044ce:	f7fd fc5d 	bl	8001d8c <HAL_Delay>

	// войти в режим динамического контраста	
	ST7565_w_cmd( CMD_SET_VOLUME_FIRST );    //Electronic Volume   
 80044d2:	2081      	movs	r0, #129	; 0x81
 80044d4:	f7ff ff7e 	bl	80043d4 <ST7565_w_cmd>
	ST7565_w_cmd( 19 );	// устанавливает контраст от 0..63.
 80044d8:	2013      	movs	r0, #19
 80044da:	f7ff ff7b 	bl	80043d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80044de:	2001      	movs	r0, #1
 80044e0:	f7fd fc54 	bl	8001d8c <HAL_Delay>
	
	ST7565_w_cmd( CMD_SET_DISP_START_LINE );
 80044e4:	2040      	movs	r0, #64	; 0x40
 80044e6:	f7ff ff75 	bl	80043d4 <ST7565_w_cmd>
 
	HAL_Delay(1);
 80044ea:	2001      	movs	r0, #1
 80044ec:	f7fd fc4e 	bl	8001d8c <HAL_Delay>

	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	ST7565_w_cmd( CMD_DISPLAY_ON );    		//Display on   
 80044f0:	20af      	movs	r0, #175	; 0xaf
 80044f2:	f7ff ff6f 	bl	80043d4 <ST7565_w_cmd>
 
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd( CMD_SET_DISP_NORMAL );
 80044f6:	20a6      	movs	r0, #166	; 0xa6
 80044f8:	f7ff ff6c 	bl	80043d4 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80044fc:	2001      	movs	r0, #1
 80044fe:	f7fd fc45 	bl	8001d8c <HAL_Delay>
	
	ST7565_Display_fill( 0x00 );
 8004502:	2000      	movs	r0, #0
 8004504:	f7ff ff8e 	bl	8004424 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8004508:	f7ff ff2c 	bl	8004364 <ST7565_Unselect>
   
}
 800450c:	bf00      	nop
 800450e:	bd80      	pop	{r7, pc}

08004510 <ST7565_Draw_pixel>:
  
  
  ST7565_Unselect();
}

void ST7565_Draw_pixel(int16_t x, int16_t y, color_t color){
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	80fb      	strh	r3, [r7, #6]
 800451a:	460b      	mov	r3, r1
 800451c:	80bb      	strh	r3, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	70fb      	strb	r3, [r7, #3]
	
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 8004522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	f300 808b 	bgt.w	8004642 <ST7565_Draw_pixel+0x132>
 800452c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f2c0 8086 	blt.w	8004642 <ST7565_Draw_pixel+0x132>
 8004536:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	f300 8081 	bgt.w	8004642 <ST7565_Draw_pixel+0x132>
 8004540:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	db7c      	blt.n	8004642 <ST7565_Draw_pixel+0x132>

    // Real screen coordinates are 0-63, not 1-64.
    x -= 1;
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	3b01      	subs	r3, #1
 800454c:	b29b      	uxth	r3, r3
 800454e:	80fb      	strh	r3, [r7, #6]
    y -= 1;
 8004550:	88bb      	ldrh	r3, [r7, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	b29b      	uxth	r3, r3
 8004556:	80bb      	strh	r3, [r7, #4]

    uint16_t array_pos = x + ((y / 8) * SCREEN_WIDTH );
 8004558:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	da00      	bge.n	8004562 <ST7565_Draw_pixel+0x52>
 8004560:	3307      	adds	r3, #7
 8004562:	10db      	asrs	r3, r3, #3
 8004564:	b21b      	sxth	r3, r3
 8004566:	b29b      	uxth	r3, r3
 8004568:	01db      	lsls	r3, r3, #7
 800456a:	b29a      	uxth	r2, r3
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	4413      	add	r3, r2
 8004570:	81fb      	strh	r3, [r7, #14]


    if ( color ) {
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d018      	beq.n	80045aa <ST7565_Draw_pixel+0x9a>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8004578:	89fb      	ldrh	r3, [r7, #14]
 800457a:	4a34      	ldr	r2, [pc, #208]	; (800464c <ST7565_Draw_pixel+0x13c>)
 800457c:	5cd3      	ldrb	r3, [r2, r3]
 800457e:	b25a      	sxtb	r2, r3
 8004580:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004584:	4259      	negs	r1, r3
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	f001 0107 	and.w	r1, r1, #7
 800458e:	bf58      	it	pl
 8004590:	424b      	negpl	r3, r1
 8004592:	b21b      	sxth	r3, r3
 8004594:	4619      	mov	r1, r3
 8004596:	2301      	movs	r3, #1
 8004598:	408b      	lsls	r3, r1
 800459a:	b25b      	sxtb	r3, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	b25a      	sxtb	r2, r3
 80045a0:	89fb      	ldrh	r3, [r7, #14]
 80045a2:	b2d1      	uxtb	r1, r2
 80045a4:	4a29      	ldr	r2, [pc, #164]	; (800464c <ST7565_Draw_pixel+0x13c>)
 80045a6:	54d1      	strb	r1, [r2, r3]
 80045a8:	e019      	b.n	80045de <ST7565_Draw_pixel+0xce>
    } 
	else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80045aa:	89fb      	ldrh	r3, [r7, #14]
 80045ac:	4a27      	ldr	r2, [pc, #156]	; (800464c <ST7565_Draw_pixel+0x13c>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	b25a      	sxtb	r2, r3
 80045b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045b6:	4259      	negs	r1, r3
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	f001 0107 	and.w	r1, r1, #7
 80045c0:	bf58      	it	pl
 80045c2:	424b      	negpl	r3, r1
 80045c4:	b21b      	sxth	r3, r3
 80045c6:	4619      	mov	r1, r3
 80045c8:	2301      	movs	r3, #1
 80045ca:	408b      	lsls	r3, r1
 80045cc:	b25b      	sxtb	r3, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	b25b      	sxtb	r3, r3
 80045d2:	4013      	ands	r3, r2
 80045d4:	b25a      	sxtb	r2, r3
 80045d6:	89fb      	ldrh	r3, [r7, #14]
 80045d8:	b2d1      	uxtb	r1, r2
 80045da:	4a1c      	ldr	r2, [pc, #112]	; (800464c <ST7565_Draw_pixel+0x13c>)
 80045dc:	54d1      	strb	r1, [r2, r3]
    }
	
	ST7565_Select();
 80045de:	f7ff febb 	bl	8004358 <ST7565_Select>
	
	ST7565_SetX(x);	
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	111b      	asrs	r3, r3, #4
 80045e6:	b25b      	sxtb	r3, r3
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	b25b      	sxtb	r3, r3
 80045ee:	f043 0310 	orr.w	r3, r3, #16
 80045f2:	b25b      	sxtb	r3, r3
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff feec 	bl	80043d4 <ST7565_w_cmd>
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fee4 	bl	80043d4 <ST7565_w_cmd>
	
	// page 0xB0 0xB1 0xB2 0xB3 0xB4 0xB5 0xB6 0xB7
	ST7565_SetY( (int16_t)y/8 );	// ST7565_SetY(y) 		ST7565_w_cmd( ( (y) & 0x07 ) | 0xB0 )
 800460c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	da00      	bge.n	8004616 <ST7565_Draw_pixel+0x106>
 8004614:	3307      	adds	r3, #7
 8004616:	10db      	asrs	r3, r3, #3
 8004618:	b21b      	sxth	r3, r3
 800461a:	b25b      	sxtb	r3, r3
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	b25b      	sxtb	r3, r3
 8004622:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004626:	b25b      	sxtb	r3, r3
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fed2 	bl	80043d4 <ST7565_w_cmd>
		
	ST7565_w_dat( ST7565_buffer[array_pos] ); 
 8004630:	89fb      	ldrh	r3, [r7, #14]
 8004632:	4a06      	ldr	r2, [pc, #24]	; (800464c <ST7565_Draw_pixel+0x13c>)
 8004634:	5cd3      	ldrb	r3, [r2, r3]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff feb2 	bl	80043a0 <ST7565_w_dat>
	
	ST7565_Unselect();
 800463c:	f7ff fe92 	bl	8004364 <ST7565_Unselect>
 8004640:	e000      	b.n	8004644 <ST7565_Draw_pixel+0x134>
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 8004642:	bf00      	nop
}
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000454 	.word	0x20000454

08004650 <ST7565_DrawChar>:
            if(byte & 0x80){ ST7565_Draw_pixel(x+i, y, color); }
        }
    }	
}

void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	607b      	str	r3, [r7, #4]
 8004658:	4603      	mov	r3, r0
 800465a:	81fb      	strh	r3, [r7, #14]
 800465c:	460b      	mov	r3, r1
 800465e:	81bb      	strh	r3, [r7, #12]
 8004660:	4613      	mov	r3, r2
 8004662:	72fb      	strb	r3, [r7, #11]
	
	uint16_t i, j;
	
	uint16_t b;
	
	int16_t X = x, Y = y;
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	833b      	strh	r3, [r7, #24]
 8004668:	89bb      	ldrh	r3, [r7, #12]
 800466a:	82fb      	strh	r3, [r7, #22]
	
	int16_t xx, yy;
	
	if( multiplier < 1 ){
 800466c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <ST7565_DrawChar+0x2a>
		multiplier = 1;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	/* Check available space in LCD */
	if ( SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)){
 800467a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	4413      	add	r3, r2
 8004684:	2b80      	cmp	r3, #128	; 0x80
 8004686:	dd07      	ble.n	8004698 <ST7565_DrawChar+0x48>
 8004688:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	7852      	ldrb	r2, [r2, #1]
 8004690:	4413      	add	r3, r2
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	f300 80dc 	bgt.w	8004850 <ST7565_DrawChar+0x200>
	
		/* Go through font */
		for (i = 0; i < Font->FontHeight; i++) {
 8004698:	2300      	movs	r3, #0
 800469a:	83fb      	strh	r3, [r7, #30]
 800469c:	e0d1      	b.n	8004842 <ST7565_DrawChar+0x1f2>
			
			if( ch < 127 ){			
 800469e:	7afb      	ldrb	r3, [r7, #11]
 80046a0:	2b7e      	cmp	r3, #126	; 0x7e
 80046a2:	d80e      	bhi.n	80046c2 <ST7565_DrawChar+0x72>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	7afb      	ldrb	r3, [r7, #11]
 80046aa:	3b20      	subs	r3, #32
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	7849      	ldrb	r1, [r1, #1]
 80046b0:	fb01 f103 	mul.w	r1, r1, r3
 80046b4:	8bfb      	ldrh	r3, [r7, #30]
 80046b6:	440b      	add	r3, r1
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	837b      	strh	r3, [r7, #26]
 80046c0:	e038      	b.n	8004734 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch > 191 ){
 80046c2:	7afb      	ldrb	r3, [r7, #11]
 80046c4:	2bbf      	cmp	r3, #191	; 0xbf
 80046c6:	d90e      	bls.n	80046e6 <ST7565_DrawChar+0x96>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	7afb      	ldrb	r3, [r7, #11]
 80046ce:	3b60      	subs	r3, #96	; 0x60
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	7849      	ldrb	r1, [r1, #1]
 80046d4:	fb01 f103 	mul.w	r1, r1, r3
 80046d8:	8bfb      	ldrh	r3, [r7, #30]
 80046da:	440b      	add	r3, r1
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	837b      	strh	r3, [r7, #26]
 80046e4:	e026      	b.n	8004734 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 80046e6:	7afb      	ldrb	r3, [r7, #11]
 80046e8:	2ba8      	cmp	r3, #168	; 0xa8
 80046ea:	d110      	bne.n	800470e <ST7565_DrawChar+0xbe>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[( 160 ) * Font->FontHeight + i];
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	4619      	mov	r1, r3
 80046f6:	460b      	mov	r3, r1
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	015b      	lsls	r3, r3, #5
 80046fe:	4619      	mov	r1, r3
 8004700:	8bfb      	ldrh	r3, [r7, #30]
 8004702:	440b      	add	r3, r1
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	837b      	strh	r3, [r7, #26]
 800470c:	e012      	b.n	8004734 <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 800470e:	7afb      	ldrb	r3, [r7, #11]
 8004710:	2bb8      	cmp	r3, #184	; 0xb8
 8004712:	d10f      	bne.n	8004734 <ST7565_DrawChar+0xe4>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[( 161 ) * Font->FontHeight + i];
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6859      	ldr	r1, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	461a      	mov	r2, r3
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	015b      	lsls	r3, r3, #5
 8004726:	441a      	add	r2, r3
 8004728:	8bfb      	ldrh	r3, [r7, #30]
 800472a:	4413      	add	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	440b      	add	r3, r1
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	837b      	strh	r3, [r7, #26]
			}
			//-------------------------------------------------------------------------------
			
			
			for (j = 0; j < Font->FontWidth; j++) {
 8004734:	2300      	movs	r3, #0
 8004736:	83bb      	strh	r3, [r7, #28]
 8004738:	e071      	b.n	800481e <ST7565_DrawChar+0x1ce>
				
				if ((b << j) & 0x8000) {
 800473a:	8b7a      	ldrh	r2, [r7, #26]
 800473c:	8bbb      	ldrh	r3, [r7, #28]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d02d      	beq.n	80047a6 <ST7565_DrawChar+0x156>
					
					for (yy = 0; yy < multiplier; yy++){
 800474a:	2300      	movs	r3, #0
 800474c:	827b      	strh	r3, [r7, #18]
 800474e:	e023      	b.n	8004798 <ST7565_DrawChar+0x148>
						for (xx = 0; xx < multiplier; xx++){
 8004750:	2300      	movs	r3, #0
 8004752:	82bb      	strh	r3, [r7, #20]
 8004754:	e014      	b.n	8004780 <ST7565_DrawChar+0x130>
								ST7565_Draw_pixel(X+xx, Y+yy, color);
 8004756:	8b3a      	ldrh	r2, [r7, #24]
 8004758:	8abb      	ldrh	r3, [r7, #20]
 800475a:	4413      	add	r3, r2
 800475c:	b29b      	uxth	r3, r3
 800475e:	b218      	sxth	r0, r3
 8004760:	8afa      	ldrh	r2, [r7, #22]
 8004762:	8a7b      	ldrh	r3, [r7, #18]
 8004764:	4413      	add	r3, r2
 8004766:	b29b      	uxth	r3, r3
 8004768:	b21b      	sxth	r3, r3
 800476a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800476e:	4619      	mov	r1, r3
 8004770:	f7ff fece 	bl	8004510 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8004774:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004778:	b29b      	uxth	r3, r3
 800477a:	3301      	adds	r3, #1
 800477c:	b29b      	uxth	r3, r3
 800477e:	82bb      	strh	r3, [r7, #20]
 8004780:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004784:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004788:	429a      	cmp	r2, r3
 800478a:	dbe4      	blt.n	8004756 <ST7565_DrawChar+0x106>
					for (yy = 0; yy < multiplier; yy++){
 800478c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004790:	b29b      	uxth	r3, r3
 8004792:	3301      	adds	r3, #1
 8004794:	b29b      	uxth	r3, r3
 8004796:	827b      	strh	r3, [r7, #18]
 8004798:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800479c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047a0:	429a      	cmp	r2, r3
 80047a2:	dbd5      	blt.n	8004750 <ST7565_DrawChar+0x100>
 80047a4:	e031      	b.n	800480a <ST7565_DrawChar+0x1ba>
				}
				// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть --------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				else{
					
					for (yy = 0; yy < multiplier; yy++){
 80047a6:	2300      	movs	r3, #0
 80047a8:	827b      	strh	r3, [r7, #18]
 80047aa:	e028      	b.n	80047fe <ST7565_DrawChar+0x1ae>
						for (xx = 0; xx < multiplier; xx++){
 80047ac:	2300      	movs	r3, #0
 80047ae:	82bb      	strh	r3, [r7, #20]
 80047b0:	e019      	b.n	80047e6 <ST7565_DrawChar+0x196>
								ST7565_Draw_pixel(X+xx, Y+yy, !color);
 80047b2:	8b3a      	ldrh	r2, [r7, #24]
 80047b4:	8abb      	ldrh	r3, [r7, #20]
 80047b6:	4413      	add	r3, r2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	b218      	sxth	r0, r3
 80047bc:	8afa      	ldrh	r2, [r7, #22]
 80047be:	8a7b      	ldrh	r3, [r7, #18]
 80047c0:	4413      	add	r3, r2
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	b219      	sxth	r1, r3
 80047c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bf0c      	ite	eq
 80047ce:	2301      	moveq	r3, #1
 80047d0:	2300      	movne	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	f7ff fe9b 	bl	8004510 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80047da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3301      	adds	r3, #1
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	82bb      	strh	r3, [r7, #20]
 80047e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80047ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047ee:	429a      	cmp	r2, r3
 80047f0:	dbdf      	blt.n	80047b2 <ST7565_DrawChar+0x162>
					for (yy = 0; yy < multiplier; yy++){
 80047f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	827b      	strh	r3, [r7, #18]
 80047fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004806:	429a      	cmp	r2, r3
 8004808:	dbd0      	blt.n	80047ac <ST7565_DrawChar+0x15c>
					}
				}
				//-----------------------------------------------------------------------------------------------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				
				X = X + multiplier;
 800480a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800480e:	b29a      	uxth	r2, r3
 8004810:	8b3b      	ldrh	r3, [r7, #24]
 8004812:	4413      	add	r3, r2
 8004814:	b29b      	uxth	r3, r3
 8004816:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8004818:	8bbb      	ldrh	r3, [r7, #28]
 800481a:	3301      	adds	r3, #1
 800481c:	83bb      	strh	r3, [r7, #28]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	8bba      	ldrh	r2, [r7, #28]
 8004826:	429a      	cmp	r2, r3
 8004828:	d387      	bcc.n	800473a <ST7565_DrawChar+0xea>
			}
			
			X = x;
 800482a:	89fb      	ldrh	r3, [r7, #14]
 800482c:	833b      	strh	r3, [r7, #24]
			Y = Y + multiplier;
 800482e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004832:	b29a      	uxth	r2, r3
 8004834:	8afb      	ldrh	r3, [r7, #22]
 8004836:	4413      	add	r3, r2
 8004838:	b29b      	uxth	r3, r3
 800483a:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 800483c:	8bfb      	ldrh	r3, [r7, #30]
 800483e:	3301      	adds	r3, #1
 8004840:	83fb      	strh	r3, [r7, #30]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	b29b      	uxth	r3, r3
 8004848:	8bfa      	ldrh	r2, [r7, #30]
 800484a:	429a      	cmp	r2, r3
 800484c:	f4ff af27 	bcc.w	800469e <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8004850:	bf00      	nop
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <ST7565_Print>:

void ST7565_Print(int16_t x, int16_t y, char* str, FontDef_t* Font, uint8_t multiplier, color_t color) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af02      	add	r7, sp, #8
 800485e:	60ba      	str	r2, [r7, #8]
 8004860:	607b      	str	r3, [r7, #4]
 8004862:	4603      	mov	r3, r0
 8004864:	81fb      	strh	r3, [r7, #14]
 8004866:	460b      	mov	r3, r1
 8004868:	81bb      	strh	r3, [r7, #12]
	
	if( multiplier < 1 ){
 800486a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <ST7565_Print+0x20>
		multiplier = 1;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3020 	strb.w	r3, [r7, #32]
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8004878:	68b8      	ldr	r0, [r7, #8]
 800487a:	f7fb fc69 	bl	8000150 <strlen>
 800487e:	4603      	mov	r3, r0
 8004880:	82bb      	strh	r3, [r7, #20]
	
	while (len--) {
 8004882:	e06d      	b.n	8004960 <ST7565_Print+0x108>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2bbf      	cmp	r3, #191	; 0xbf
 800488a:	d94a      	bls.n	8004922 <ST7565_Print+0xca>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2bd0      	cmp	r3, #208	; 0xd0
 8004892:	d002      	beq.n	800489a <ST7565_Print+0x42>
 8004894:	2bd1      	cmp	r3, #209	; 0xd1
 8004896:	d017      	beq.n	80048c8 <ST7565_Print+0x70>
 8004898:	e031      	b.n	80048fe <ST7565_Print+0xa6>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3301      	adds	r3, #1
 800489e:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b81      	cmp	r3, #129	; 0x81
 80048a6:	d102      	bne.n	80048ae <ST7565_Print+0x56>
 80048a8:	23a8      	movs	r3, #168	; 0xa8
 80048aa:	75fb      	strb	r3, [r7, #23]
 80048ac:	e027      	b.n	80048fe <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b8f      	cmp	r3, #143	; 0x8f
 80048b4:	d920      	bls.n	80048f8 <ST7565_Print+0xa0>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2bbf      	cmp	r3, #191	; 0xbf
 80048bc:	d81c      	bhi.n	80048f8 <ST7565_Print+0xa0>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	3330      	adds	r3, #48	; 0x30
 80048c4:	75fb      	strb	r3, [r7, #23]
					break;
 80048c6:	e017      	b.n	80048f8 <ST7565_Print+0xa0>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b91      	cmp	r3, #145	; 0x91
 80048d4:	d102      	bne.n	80048dc <ST7565_Print+0x84>
 80048d6:	23b8      	movs	r3, #184	; 0xb8
 80048d8:	75fb      	strb	r3, [r7, #23]
 80048da:	e010      	b.n	80048fe <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b25b      	sxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	da0a      	bge.n	80048fc <ST7565_Print+0xa4>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b8f      	cmp	r3, #143	; 0x8f
 80048ec:	d806      	bhi.n	80048fc <ST7565_Print+0xa4>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	3370      	adds	r3, #112	; 0x70
 80048f4:	75fb      	strb	r3, [r7, #23]
					break;
 80048f6:	e001      	b.n	80048fc <ST7565_Print+0xa4>
					break;
 80048f8:	bf00      	nop
 80048fa:	e000      	b.n	80048fe <ST7565_Print+0xa6>
					break;
 80048fc:	bf00      	nop
				}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 80048fe:	8abb      	ldrh	r3, [r7, #20]
 8004900:	3b01      	subs	r3, #1
 8004902:	82bb      	strh	r3, [r7, #20]
			
			ST7565_DrawChar( x, y, buff_char, Font, multiplier, color);
 8004904:	7dfa      	ldrb	r2, [r7, #23]
 8004906:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800490a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800490e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f7ff fe98 	bl	8004650 <ST7565_DrawChar>
 8004920:	e00e      	b.n	8004940 <ST7565_Print+0xe8>
		}
		//---------------------------------------------------------------------
		else{			
			ST7565_DrawChar( x, y, *str, Font, multiplier, color);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781a      	ldrb	r2, [r3, #0]
 8004926:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800492a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800492e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f7ff fe88 	bl	8004650 <ST7565_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f897 2020 	ldrb.w	r2, [r7, #32]
 800494a:	b292      	uxth	r2, r2
 800494c:	fb02 f303 	mul.w	r3, r2, r3
 8004950:	b29a      	uxth	r2, r3
 8004952:	89fb      	ldrh	r3, [r7, #14]
 8004954:	4413      	add	r3, r2
 8004956:	b29b      	uxth	r3, r3
 8004958:	81fb      	strh	r3, [r7, #14]
		/* Increase string pointer */
		str++;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	3301      	adds	r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8004960:	8abb      	ldrh	r3, [r7, #20]
 8004962:	1e5a      	subs	r2, r3, #1
 8004964:	82ba      	strh	r2, [r7, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d18c      	bne.n	8004884 <ST7565_Print+0x2c>
	}
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HX711_init>:
/**
 * @brief init hx711
 * 
 */
void  HX711_init(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800497a:	2301      	movs	r3, #1
 800497c:	607b      	str	r3, [r7, #4]
  gpio.Pull = GPIO_NOPULL;
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8004982:	2303      	movs	r3, #3
 8004984:	60fb      	str	r3, [r7, #12]
  gpio.Pin = SCK_GPIO_PIN;
 8004986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800498a:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(SCK_GPIO_PORT, &gpio);
 800498c:	463b      	mov	r3, r7
 800498e:	4619      	mov	r1, r3
 8004990:	4819      	ldr	r0, [pc, #100]	; (80049f8 <HX711_init+0x84>)
 8004992:	f7fd fb2d 	bl	8001ff0 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8004996:	2300      	movs	r3, #0
 8004998:	607b      	str	r3, [r7, #4]
  gpio.Pull = GPIO_NOPULL;
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800499e:	2303      	movs	r3, #3
 80049a0:	60fb      	str	r3, [r7, #12]
  gpio.Pin = Dout_GPIO_PIN;
 80049a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049a6:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(Dout_GPIO_PORT, &gpio);
 80049a8:	463b      	mov	r3, r7
 80049aa:	4619      	mov	r1, r3
 80049ac:	4812      	ldr	r0, [pc, #72]	; (80049f8 <HX711_init+0x84>)
 80049ae:	f7fd fb1f 	bl	8001ff0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_SET);
 80049b2:	2201      	movs	r2, #1
 80049b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049b8:	480f      	ldr	r0, [pc, #60]	; (80049f8 <HX711_init+0x84>)
 80049ba:	f7fd fcb4 	bl	8002326 <HAL_GPIO_WritePin>
  HX711_delay(10);
 80049be:	200a      	movs	r0, #10
 80049c0:	f7fd f9e4 	bl	8001d8c <HAL_Delay>
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_RESET);
 80049c4:	2200      	movs	r2, #0
 80049c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049ca:	480b      	ldr	r0, [pc, #44]	; (80049f8 <HX711_init+0x84>)
 80049cc:	f7fd fcab 	bl	8002326 <HAL_GPIO_WritePin>
  HX711_delay(10);
 80049d0:	200a      	movs	r0, #10
 80049d2:	f7fd f9db 	bl	8001d8c <HAL_Delay>
  HX711_valueAve(8, Channel_A, 128);
 80049d6:	2280      	movs	r2, #128	; 0x80
 80049d8:	2100      	movs	r1, #0
 80049da:	2008      	movs	r0, #8
 80049dc:	f000 f86e 	bl	8004abc <HX711_valueAve>
  HX711_delay(10);
 80049e0:	200a      	movs	r0, #10
 80049e2:	f7fd f9d3 	bl	8001d8c <HAL_Delay>
  HX711_valueAve(8, Channel_B, 32);
 80049e6:	2220      	movs	r2, #32
 80049e8:	2101      	movs	r1, #1
 80049ea:	2008      	movs	r0, #8
 80049ec:	f000 f866 	bl	8004abc <HX711_valueAve>
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40010c00 	.word	0x40010c00

080049fc <HX711_value>:
 * 
 * @param Channel 
 * @return uint32_t 
 */
uint32_t HX711_value(Channel_t Channel, uint8_t Gain)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	460a      	mov	r2, r1
 8004a06:	71fb      	strb	r3, [r7, #7]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71bb      	strb	r3, [r7, #6]
  uint32_t data = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8004a10:	f7fd f9b2 	bl	8001d78 <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(Dout_GPIO_PORT, Dout_GPIO_PIN) == GPIO_PIN_SET);
 8004a16:	bf00      	nop
 8004a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a1c:	4826      	ldr	r0, [pc, #152]	; (8004ab8 <HX711_value+0xbc>)
 8004a1e:	f7fd fc6b 	bl	80022f8 <HAL_GPIO_ReadPin>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d0f7      	beq.n	8004a18 <HX711_value+0x1c>

  for(int8_t i=0; i < 24 ; i++)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	74fb      	strb	r3, [r7, #19]
 8004a2c:	e025      	b.n	8004a7a <HX711_value+0x7e>
  {
    HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_SET);
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a34:	4820      	ldr	r0, [pc, #128]	; (8004ab8 <HX711_value+0xbc>)
 8004a36:	f7fd fc76 	bl	8002326 <HAL_GPIO_WritePin>
    delay_us(1);
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f000 f980 	bl	8004d40 <delay_us>
//    HX711_delay_us(1);
    data = data << 1;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	617b      	str	r3, [r7, #20]
    HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_RESET);
 8004a46:	2200      	movs	r2, #0
 8004a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a4c:	481a      	ldr	r0, [pc, #104]	; (8004ab8 <HX711_value+0xbc>)
 8004a4e:	f7fd fc6a 	bl	8002326 <HAL_GPIO_WritePin>
    delay_us(1);
 8004a52:	2001      	movs	r0, #1
 8004a54:	f000 f974 	bl	8004d40 <delay_us>
//    HX711_delay_us(1);
    if(HAL_GPIO_ReadPin(Dout_GPIO_PORT, Dout_GPIO_PIN) == GPIO_PIN_SET)
 8004a58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a5c:	4816      	ldr	r0, [pc, #88]	; (8004ab8 <HX711_value+0xbc>)
 8004a5e:	f7fd fc4b 	bl	80022f8 <HAL_GPIO_ReadPin>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d102      	bne.n	8004a6e <HX711_value+0x72>
      data ++;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i < 24 ; i++)
 8004a6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	3301      	adds	r3, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	74fb      	strb	r3, [r7, #19]
 8004a7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a7e:	2b17      	cmp	r3, #23
 8004a80:	ddd5      	ble.n	8004a2e <HX711_value+0x32>
  }
  data = data ^ 0x800000;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8004a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_SET);
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a90:	4809      	ldr	r0, [pc, #36]	; (8004ab8 <HX711_value+0xbc>)
 8004a92:	f7fd fc48 	bl	8002326 <HAL_GPIO_WritePin>
  delay_us(1);
 8004a96:	2001      	movs	r0, #1
 8004a98:	f000 f952 	bl	8004d40 <delay_us>
//  HX711_delay_us(1);
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, GPIO_PIN_RESET);
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004aa2:	4805      	ldr	r0, [pc, #20]	; (8004ab8 <HX711_value+0xbc>)
 8004aa4:	f7fd fc3f 	bl	8002326 <HAL_GPIO_WritePin>
  delay_us(1);
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f000 f949 	bl	8004d40 <delay_us>
//  HX711_delay_us(1);
  return data;
 8004aae:	697b      	ldr	r3, [r7, #20]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40010c00 	.word	0x40010c00

08004abc <HX711_valueAve>:




uint32_t HX711_valueAve(uint16_t sample, Channel_t Channel, uint8_t Gain)
{
 8004abc:	b5b0      	push	{r4, r5, r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	80fb      	strh	r3, [r7, #6]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	717b      	strb	r3, [r7, #5]
 8004aca:	4613      	mov	r3, r2
 8004acc:	713b      	strb	r3, [r7, #4]
  uint64_t  ave = 0;
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	e9c7 2304 	strd	r2, r3, [r7, #16]

  for(uint16_t i=0 ; i < sample ; i++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	81fb      	strh	r3, [r7, #14]
 8004ade:	e013      	b.n	8004b08 <HX711_valueAve+0x4c>
    ave += HX711_value(Channel, Gain);
 8004ae0:	793a      	ldrb	r2, [r7, #4]
 8004ae2:	797b      	ldrb	r3, [r7, #5]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff ff88 	bl	80049fc <HX711_value>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004af8:	1884      	adds	r4, r0, r2
 8004afa:	eb41 0503 	adc.w	r5, r1, r3
 8004afe:	e9c7 4504 	strd	r4, r5, [r7, #16]
  for(uint16_t i=0 ; i < sample ; i++)
 8004b02:	89fb      	ldrh	r3, [r7, #14]
 8004b04:	3301      	adds	r3, #1
 8004b06:	81fb      	strh	r3, [r7, #14]
 8004b08:	89fa      	ldrh	r2, [r7, #14]
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d3e7      	bcc.n	8004ae0 <HX711_valueAve+0x24>
  return (int32_t)(ave / sample);
 8004b10:	88fa      	ldrh	r2, [r7, #6]
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b1a:	f7fc f933 	bl	8000d84 <__aeabi_uldivmod>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4613      	mov	r3, r2
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bdb0      	pop	{r4, r5, r7, pc}

08004b2c <getWeight>:
{
	return HX711_Read();
}

float getWeight(void)
 { 
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
   buffer = HX711_Read();
 8004b30:	f000 f830 	bl	8004b94 <HX711_Read>
 8004b34:	4603      	mov	r3, r0
 8004b36:	4a13      	ldr	r2, [pc, #76]	; (8004b84 <getWeight+0x58>)
 8004b38:	6013      	str	r3, [r2, #0]

  if(buffer > weight_noLoad){
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <getWeight+0x58>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <getWeight+0x5c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d90f      	bls.n	8004b66 <getWeight+0x3a>
    Weight_Real = (buffer - weight_noLoad)/430;
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <getWeight+0x58>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <getWeight+0x5c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <getWeight+0x60>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	09db      	lsrs	r3, r3, #7
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fc f8bb 	bl	8000cd4 <__aeabi_ui2f>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4a0b      	ldr	r2, [pc, #44]	; (8004b90 <getWeight+0x64>)
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	e009      	b.n	8004b7a <getWeight+0x4e>
  }
  else if(buffer <= weight_noLoad){
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <getWeight+0x58>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <getWeight+0x5c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d803      	bhi.n	8004b7a <getWeight+0x4e>
    Weight_Real =  0.0f;
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <getWeight+0x64>)
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
  }
  return Weight_Real;
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <getWeight+0x64>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 }
 8004b7e:	4618      	mov	r0, r3
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	2000021c 	.word	0x2000021c
 8004b88:	20000014 	.word	0x20000014
 8004b8c:	4c346405 	.word	0x4c346405
 8004b90:	20000220 	.word	0x20000220

08004b94 <HX711_Read>:
// {
//
// }

unsigned long HX711_Read(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
  unsigned long count;
  unsigned char i;

  HAL_GPIO_WritePin(Dout_GPIO_PORT, Dout_GPIO_PIN, RESET);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ba0:	4835      	ldr	r0, [pc, #212]	; (8004c78 <HX711_Read+0xe4>)
 8004ba2:	f7fd fbc0 	bl	8002326 <HAL_GPIO_WritePin>
  count = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
  int ii = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
  while (1)
  {
    if(HAL_GPIO_ReadPin(Dout_GPIO_PORT, Dout_GPIO_PIN) == 0){
 8004bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bb2:	4831      	ldr	r0, [pc, #196]	; (8004c78 <HX711_Read+0xe4>)
 8004bb4:	f7fd fba0 	bl	80022f8 <HAL_GPIO_ReadPin>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <HX711_Read+0x40>
      delay_us(2);
 8004bbe:	2002      	movs	r0, #2
 8004bc0:	f000 f8be 	bl	8004d40 <delay_us>
      if(HAL_GPIO_ReadPin(Dout_GPIO_PORT, Dout_GPIO_PIN) == 0){
 8004bc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bc8:	482b      	ldr	r0, [pc, #172]	; (8004c78 <HX711_Read+0xe4>)
 8004bca:	f7fd fb95 	bl	80022f8 <HAL_GPIO_ReadPin>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <HX711_Read+0x54>
        break;
      }
    }
    ii++;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	607b      	str	r3, [r7, #4]
    if(ii++ >= 1000000){
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <HX711_Read+0xe8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	dc02      	bgt.n	8004bec <HX711_Read+0x58>
    if(HAL_GPIO_ReadPin(Dout_GPIO_PORT, Dout_GPIO_PIN) == 0){
 8004be6:	e7e2      	b.n	8004bae <HX711_Read+0x1a>
        break;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <HX711_Read+0x5a>
      break;
 8004bec:	bf00      	nop
    }
  }
  delay_us(1);
 8004bee:	2001      	movs	r0, #1
 8004bf0:	f000 f8a6 	bl	8004d40 <delay_us>
  for(i = 0; i < 24; i++){
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	72fb      	strb	r3, [r7, #11]
 8004bf8:	e01f      	b.n	8004c3a <HX711_Read+0xa6>
    HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, SET);
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c00:	481d      	ldr	r0, [pc, #116]	; (8004c78 <HX711_Read+0xe4>)
 8004c02:	f7fd fb90 	bl	8002326 <HAL_GPIO_WritePin>
    delay_us(2);
 8004c06:	2002      	movs	r0, #2
 8004c08:	f000 f89a 	bl	8004d40 <delay_us>
    count = count << 1;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, RESET);
 8004c12:	2200      	movs	r2, #0
 8004c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c18:	4817      	ldr	r0, [pc, #92]	; (8004c78 <HX711_Read+0xe4>)
 8004c1a:	f7fd fb84 	bl	8002326 <HAL_GPIO_WritePin>
    if(HAL_GPIO_ReadPin(Dout_GPIO_PORT, Dout_GPIO_PIN) == 1){
 8004c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c22:	4815      	ldr	r0, [pc, #84]	; (8004c78 <HX711_Read+0xe4>)
 8004c24:	f7fd fb68 	bl	80022f8 <HAL_GPIO_ReadPin>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d102      	bne.n	8004c34 <HX711_Read+0xa0>
      count++;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3301      	adds	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]
  for(i = 0; i < 24; i++){
 8004c34:	7afb      	ldrb	r3, [r7, #11]
 8004c36:	3301      	adds	r3, #1
 8004c38:	72fb      	strb	r3, [r7, #11]
 8004c3a:	7afb      	ldrb	r3, [r7, #11]
 8004c3c:	2b17      	cmp	r3, #23
 8004c3e:	d9dc      	bls.n	8004bfa <HX711_Read+0x66>
    }
  }
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, SET);
 8004c40:	2201      	movs	r2, #1
 8004c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c46:	480c      	ldr	r0, [pc, #48]	; (8004c78 <HX711_Read+0xe4>)
 8004c48:	f7fd fb6d 	bl	8002326 <HAL_GPIO_WritePin>
  delay_us(2);
 8004c4c:	2002      	movs	r0, #2
 8004c4e:	f000 f877 	bl	8004d40 <delay_us>
  count = count^0x800000;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8004c58:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_GPIO_PORT, SCK_GPIO_PIN, RESET);
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c60:	4805      	ldr	r0, [pc, #20]	; (8004c78 <HX711_Read+0xe4>)
 8004c62:	f7fd fb60 	bl	8002326 <HAL_GPIO_WritePin>
  delay_us(2);
 8004c66:	2002      	movs	r0, #2
 8004c68:	f000 f86a 	bl	8004d40 <delay_us>
  return(count);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40010c00 	.word	0x40010c00
 8004c7c:	000f423f 	.word	0x000f423f

08004c80 <TimerDelay_Init>:
#define TIMER  TIM4
volatile static TIM_HandleTypeDef HTIMx;
volatile static uint32_t gu32_ticks = 0;

void TimerDelay_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8004c86:	f7fe f875 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4a28      	ldr	r2, [pc, #160]	; (8004d30 <TimerDelay_Init+0xb0>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	0c9b      	lsrs	r3, r3, #18
 8004c94:	4a27      	ldr	r2, [pc, #156]	; (8004d34 <TimerDelay_Init+0xb4>)
 8004c96:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8004c98:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <TimerDelay_Init+0xb8>)
 8004c9a:	4a28      	ldr	r2, [pc, #160]	; (8004d3c <TimerDelay_Init+0xbc>)
 8004c9c:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c9e:	f107 0308 	add.w	r3, r7, #8
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	605a      	str	r2, [r3, #4]
 8004ca8:	609a      	str	r2, [r3, #8]
 8004caa:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cac:	463b      	mov	r3, r7
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 8004cb4:	4b1f      	ldr	r3, [pc, #124]	; (8004d34 <TimerDelay_Init+0xb4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <TimerDelay_Init+0xb8>)
 8004cbc:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cbe:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <TimerDelay_Init+0xb8>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 8004cc4:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <TimerDelay_Init+0xb8>)
 8004cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cca:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <TimerDelay_Init+0xb8>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cd2:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <TimerDelay_Init+0xb8>)
 8004cd4:	2280      	movs	r2, #128	; 0x80
 8004cd6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 8004cd8:	4817      	ldr	r0, [pc, #92]	; (8004d38 <TimerDelay_Init+0xb8>)
 8004cda:	f7fe fb0f 	bl	80032fc <HAL_TIM_Base_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <TimerDelay_Init+0x68>
    {
      Error_Handler();
 8004ce4:	f7fc fd26 	bl	8001734 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cec:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 8004cee:	f107 0308 	add.w	r3, r7, #8
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4810      	ldr	r0, [pc, #64]	; (8004d38 <TimerDelay_Init+0xb8>)
 8004cf6:	f7fe fe8d 	bl	8003a14 <HAL_TIM_ConfigClockSource>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <TimerDelay_Init+0x84>
    {
      Error_Handler();
 8004d00:	f7fc fd18 	bl	8001734 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d04:	2300      	movs	r3, #0
 8004d06:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 8004d0c:	463b      	mov	r3, r7
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4809      	ldr	r0, [pc, #36]	; (8004d38 <TimerDelay_Init+0xb8>)
 8004d12:	f7ff f9d5 	bl	80040c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 8004d1c:	f7fc fd0a 	bl	8001734 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 8004d20:	4805      	ldr	r0, [pc, #20]	; (8004d38 <TimerDelay_Init+0xb8>)
 8004d22:	f7fe fb3b 	bl	800339c <HAL_TIM_Base_Start>

}
 8004d26:	bf00      	nop
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	431bde83 	.word	0x431bde83
 8004d34:	2000026c 	.word	0x2000026c
 8004d38:	20000224 	.word	0x20000224
 8004d3c:	40000800 	.word	0x40000800

08004d40 <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <delay_us+0x30>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24
	while (HTIMx.Instance->CNT < au16_us);
 8004d52:	bf00      	nop
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <delay_us+0x30>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	b292      	uxth	r2, r2
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d3f8      	bcc.n	8004d54 <delay_us+0x14>
}
 8004d62:	bf00      	nop
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20000224 	.word	0x20000224

08004d74 <__errno>:
 8004d74:	4b01      	ldr	r3, [pc, #4]	; (8004d7c <__errno+0x8>)
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000018 	.word	0x20000018

08004d80 <__libc_init_array>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	2600      	movs	r6, #0
 8004d84:	4d0c      	ldr	r5, [pc, #48]	; (8004db8 <__libc_init_array+0x38>)
 8004d86:	4c0d      	ldr	r4, [pc, #52]	; (8004dbc <__libc_init_array+0x3c>)
 8004d88:	1b64      	subs	r4, r4, r5
 8004d8a:	10a4      	asrs	r4, r4, #2
 8004d8c:	42a6      	cmp	r6, r4
 8004d8e:	d109      	bne.n	8004da4 <__libc_init_array+0x24>
 8004d90:	f004 fc28 	bl	80095e4 <_init>
 8004d94:	2600      	movs	r6, #0
 8004d96:	4d0a      	ldr	r5, [pc, #40]	; (8004dc0 <__libc_init_array+0x40>)
 8004d98:	4c0a      	ldr	r4, [pc, #40]	; (8004dc4 <__libc_init_array+0x44>)
 8004d9a:	1b64      	subs	r4, r4, r5
 8004d9c:	10a4      	asrs	r4, r4, #2
 8004d9e:	42a6      	cmp	r6, r4
 8004da0:	d105      	bne.n	8004dae <__libc_init_array+0x2e>
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
 8004da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da8:	4798      	blx	r3
 8004daa:	3601      	adds	r6, #1
 8004dac:	e7ee      	b.n	8004d8c <__libc_init_array+0xc>
 8004dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db2:	4798      	blx	r3
 8004db4:	3601      	adds	r6, #1
 8004db6:	e7f2      	b.n	8004d9e <__libc_init_array+0x1e>
 8004db8:	0800a87c 	.word	0x0800a87c
 8004dbc:	0800a87c 	.word	0x0800a87c
 8004dc0:	0800a87c 	.word	0x0800a87c
 8004dc4:	0800a880 	.word	0x0800a880

08004dc8 <memset>:
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4402      	add	r2, r0
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d100      	bne.n	8004dd2 <memset+0xa>
 8004dd0:	4770      	bx	lr
 8004dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd6:	e7f9      	b.n	8004dcc <memset+0x4>

08004dd8 <__cvt>:
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dde:	461f      	mov	r7, r3
 8004de0:	bfbb      	ittet	lt
 8004de2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004de6:	461f      	movlt	r7, r3
 8004de8:	2300      	movge	r3, #0
 8004dea:	232d      	movlt	r3, #45	; 0x2d
 8004dec:	b088      	sub	sp, #32
 8004dee:	4614      	mov	r4, r2
 8004df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004df2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004df4:	7013      	strb	r3, [r2, #0]
 8004df6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004df8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004dfc:	f023 0820 	bic.w	r8, r3, #32
 8004e00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e04:	d005      	beq.n	8004e12 <__cvt+0x3a>
 8004e06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e0a:	d100      	bne.n	8004e0e <__cvt+0x36>
 8004e0c:	3501      	adds	r5, #1
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e000      	b.n	8004e14 <__cvt+0x3c>
 8004e12:	2303      	movs	r3, #3
 8004e14:	aa07      	add	r2, sp, #28
 8004e16:	9204      	str	r2, [sp, #16]
 8004e18:	aa06      	add	r2, sp, #24
 8004e1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e1e:	e9cd 3500 	strd	r3, r5, [sp]
 8004e22:	4622      	mov	r2, r4
 8004e24:	463b      	mov	r3, r7
 8004e26:	f001 fd9f 	bl	8006968 <_dtoa_r>
 8004e2a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e2e:	4606      	mov	r6, r0
 8004e30:	d102      	bne.n	8004e38 <__cvt+0x60>
 8004e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e34:	07db      	lsls	r3, r3, #31
 8004e36:	d522      	bpl.n	8004e7e <__cvt+0xa6>
 8004e38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e3c:	eb06 0905 	add.w	r9, r6, r5
 8004e40:	d110      	bne.n	8004e64 <__cvt+0x8c>
 8004e42:	7833      	ldrb	r3, [r6, #0]
 8004e44:	2b30      	cmp	r3, #48	; 0x30
 8004e46:	d10a      	bne.n	8004e5e <__cvt+0x86>
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	4639      	mov	r1, r7
 8004e50:	f7fb fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8004e54:	b918      	cbnz	r0, 8004e5e <__cvt+0x86>
 8004e56:	f1c5 0501 	rsb	r5, r5, #1
 8004e5a:	f8ca 5000 	str.w	r5, [sl]
 8004e5e:	f8da 3000 	ldr.w	r3, [sl]
 8004e62:	4499      	add	r9, r3
 8004e64:	2200      	movs	r2, #0
 8004e66:	2300      	movs	r3, #0
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4639      	mov	r1, r7
 8004e6c:	f7fb fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004e70:	b108      	cbz	r0, 8004e76 <__cvt+0x9e>
 8004e72:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e76:	2230      	movs	r2, #48	; 0x30
 8004e78:	9b07      	ldr	r3, [sp, #28]
 8004e7a:	454b      	cmp	r3, r9
 8004e7c:	d307      	bcc.n	8004e8e <__cvt+0xb6>
 8004e7e:	4630      	mov	r0, r6
 8004e80:	9b07      	ldr	r3, [sp, #28]
 8004e82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e84:	1b9b      	subs	r3, r3, r6
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	b008      	add	sp, #32
 8004e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8e:	1c59      	adds	r1, r3, #1
 8004e90:	9107      	str	r1, [sp, #28]
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	e7f0      	b.n	8004e78 <__cvt+0xa0>

08004e96 <__exponent>:
 8004e96:	4603      	mov	r3, r0
 8004e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e9a:	2900      	cmp	r1, #0
 8004e9c:	f803 2b02 	strb.w	r2, [r3], #2
 8004ea0:	bfb6      	itet	lt
 8004ea2:	222d      	movlt	r2, #45	; 0x2d
 8004ea4:	222b      	movge	r2, #43	; 0x2b
 8004ea6:	4249      	neglt	r1, r1
 8004ea8:	2909      	cmp	r1, #9
 8004eaa:	7042      	strb	r2, [r0, #1]
 8004eac:	dd2b      	ble.n	8004f06 <__exponent+0x70>
 8004eae:	f10d 0407 	add.w	r4, sp, #7
 8004eb2:	46a4      	mov	ip, r4
 8004eb4:	270a      	movs	r7, #10
 8004eb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004eba:	460a      	mov	r2, r1
 8004ebc:	46a6      	mov	lr, r4
 8004ebe:	fb07 1516 	mls	r5, r7, r6, r1
 8004ec2:	2a63      	cmp	r2, #99	; 0x63
 8004ec4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004ec8:	4631      	mov	r1, r6
 8004eca:	f104 34ff 	add.w	r4, r4, #4294967295
 8004ece:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004ed2:	dcf0      	bgt.n	8004eb6 <__exponent+0x20>
 8004ed4:	3130      	adds	r1, #48	; 0x30
 8004ed6:	f1ae 0502 	sub.w	r5, lr, #2
 8004eda:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ede:	4629      	mov	r1, r5
 8004ee0:	1c44      	adds	r4, r0, #1
 8004ee2:	4561      	cmp	r1, ip
 8004ee4:	d30a      	bcc.n	8004efc <__exponent+0x66>
 8004ee6:	f10d 0209 	add.w	r2, sp, #9
 8004eea:	eba2 020e 	sub.w	r2, r2, lr
 8004eee:	4565      	cmp	r5, ip
 8004ef0:	bf88      	it	hi
 8004ef2:	2200      	movhi	r2, #0
 8004ef4:	4413      	add	r3, r2
 8004ef6:	1a18      	subs	r0, r3, r0
 8004ef8:	b003      	add	sp, #12
 8004efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004efc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f00:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f04:	e7ed      	b.n	8004ee2 <__exponent+0x4c>
 8004f06:	2330      	movs	r3, #48	; 0x30
 8004f08:	3130      	adds	r1, #48	; 0x30
 8004f0a:	7083      	strb	r3, [r0, #2]
 8004f0c:	70c1      	strb	r1, [r0, #3]
 8004f0e:	1d03      	adds	r3, r0, #4
 8004f10:	e7f1      	b.n	8004ef6 <__exponent+0x60>
	...

08004f14 <_printf_float>:
 8004f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f18:	b091      	sub	sp, #68	; 0x44
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004f20:	4616      	mov	r6, r2
 8004f22:	461f      	mov	r7, r3
 8004f24:	4605      	mov	r5, r0
 8004f26:	f002 fe73 	bl	8007c10 <_localeconv_r>
 8004f2a:	6803      	ldr	r3, [r0, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f30:	f7fb f90e 	bl	8000150 <strlen>
 8004f34:	2300      	movs	r3, #0
 8004f36:	930e      	str	r3, [sp, #56]	; 0x38
 8004f38:	f8d8 3000 	ldr.w	r3, [r8]
 8004f3c:	900a      	str	r0, [sp, #40]	; 0x28
 8004f3e:	3307      	adds	r3, #7
 8004f40:	f023 0307 	bic.w	r3, r3, #7
 8004f44:	f103 0208 	add.w	r2, r3, #8
 8004f48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004f4c:	f8d4 b000 	ldr.w	fp, [r4]
 8004f50:	f8c8 2000 	str.w	r2, [r8]
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f5c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004f60:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f66:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	4b9c      	ldr	r3, [pc, #624]	; (80051e0 <_printf_float+0x2cc>)
 8004f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f70:	f7fb fd4c 	bl	8000a0c <__aeabi_dcmpun>
 8004f74:	bb70      	cbnz	r0, 8004fd4 <_printf_float+0xc0>
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	4b98      	ldr	r3, [pc, #608]	; (80051e0 <_printf_float+0x2cc>)
 8004f7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f80:	f7fb fd26 	bl	80009d0 <__aeabi_dcmple>
 8004f84:	bb30      	cbnz	r0, 8004fd4 <_printf_float+0xc0>
 8004f86:	2200      	movs	r2, #0
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	4651      	mov	r1, sl
 8004f8e:	f7fb fd15 	bl	80009bc <__aeabi_dcmplt>
 8004f92:	b110      	cbz	r0, 8004f9a <_printf_float+0x86>
 8004f94:	232d      	movs	r3, #45	; 0x2d
 8004f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f9a:	4b92      	ldr	r3, [pc, #584]	; (80051e4 <_printf_float+0x2d0>)
 8004f9c:	4892      	ldr	r0, [pc, #584]	; (80051e8 <_printf_float+0x2d4>)
 8004f9e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004fa2:	bf94      	ite	ls
 8004fa4:	4698      	movls	r8, r3
 8004fa6:	4680      	movhi	r8, r0
 8004fa8:	2303      	movs	r3, #3
 8004faa:	f04f 0a00 	mov.w	sl, #0
 8004fae:	6123      	str	r3, [r4, #16]
 8004fb0:	f02b 0304 	bic.w	r3, fp, #4
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	4633      	mov	r3, r6
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4628      	mov	r0, r5
 8004fbc:	9700      	str	r7, [sp, #0]
 8004fbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8004fc0:	f000 f9d4 	bl	800536c <_printf_common>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	f040 8090 	bne.w	80050ea <_printf_float+0x1d6>
 8004fca:	f04f 30ff 	mov.w	r0, #4294967295
 8004fce:	b011      	add	sp, #68	; 0x44
 8004fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	4653      	mov	r3, sl
 8004fd8:	4640      	mov	r0, r8
 8004fda:	4651      	mov	r1, sl
 8004fdc:	f7fb fd16 	bl	8000a0c <__aeabi_dcmpun>
 8004fe0:	b148      	cbz	r0, 8004ff6 <_printf_float+0xe2>
 8004fe2:	f1ba 0f00 	cmp.w	sl, #0
 8004fe6:	bfb8      	it	lt
 8004fe8:	232d      	movlt	r3, #45	; 0x2d
 8004fea:	4880      	ldr	r0, [pc, #512]	; (80051ec <_printf_float+0x2d8>)
 8004fec:	bfb8      	it	lt
 8004fee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ff2:	4b7f      	ldr	r3, [pc, #508]	; (80051f0 <_printf_float+0x2dc>)
 8004ff4:	e7d3      	b.n	8004f9e <_printf_float+0x8a>
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	d142      	bne.n	8005086 <_printf_float+0x172>
 8005000:	2306      	movs	r3, #6
 8005002:	6063      	str	r3, [r4, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	9206      	str	r2, [sp, #24]
 8005008:	aa0e      	add	r2, sp, #56	; 0x38
 800500a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800500e:	aa0d      	add	r2, sp, #52	; 0x34
 8005010:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005014:	9203      	str	r2, [sp, #12]
 8005016:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800501a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	6863      	ldr	r3, [r4, #4]
 8005022:	4642      	mov	r2, r8
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	4628      	mov	r0, r5
 8005028:	4653      	mov	r3, sl
 800502a:	910b      	str	r1, [sp, #44]	; 0x2c
 800502c:	f7ff fed4 	bl	8004dd8 <__cvt>
 8005030:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005032:	4680      	mov	r8, r0
 8005034:	2947      	cmp	r1, #71	; 0x47
 8005036:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005038:	d108      	bne.n	800504c <_printf_float+0x138>
 800503a:	1cc8      	adds	r0, r1, #3
 800503c:	db02      	blt.n	8005044 <_printf_float+0x130>
 800503e:	6863      	ldr	r3, [r4, #4]
 8005040:	4299      	cmp	r1, r3
 8005042:	dd40      	ble.n	80050c6 <_printf_float+0x1b2>
 8005044:	f1a9 0902 	sub.w	r9, r9, #2
 8005048:	fa5f f989 	uxtb.w	r9, r9
 800504c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005050:	d81f      	bhi.n	8005092 <_printf_float+0x17e>
 8005052:	464a      	mov	r2, r9
 8005054:	3901      	subs	r1, #1
 8005056:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800505a:	910d      	str	r1, [sp, #52]	; 0x34
 800505c:	f7ff ff1b 	bl	8004e96 <__exponent>
 8005060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005062:	4682      	mov	sl, r0
 8005064:	1813      	adds	r3, r2, r0
 8005066:	2a01      	cmp	r2, #1
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	dc02      	bgt.n	8005072 <_printf_float+0x15e>
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	07d2      	lsls	r2, r2, #31
 8005070:	d501      	bpl.n	8005076 <_printf_float+0x162>
 8005072:	3301      	adds	r3, #1
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800507a:	2b00      	cmp	r3, #0
 800507c:	d09b      	beq.n	8004fb6 <_printf_float+0xa2>
 800507e:	232d      	movs	r3, #45	; 0x2d
 8005080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005084:	e797      	b.n	8004fb6 <_printf_float+0xa2>
 8005086:	2947      	cmp	r1, #71	; 0x47
 8005088:	d1bc      	bne.n	8005004 <_printf_float+0xf0>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1ba      	bne.n	8005004 <_printf_float+0xf0>
 800508e:	2301      	movs	r3, #1
 8005090:	e7b7      	b.n	8005002 <_printf_float+0xee>
 8005092:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005096:	d118      	bne.n	80050ca <_printf_float+0x1b6>
 8005098:	2900      	cmp	r1, #0
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	dd0b      	ble.n	80050b6 <_printf_float+0x1a2>
 800509e:	6121      	str	r1, [r4, #16]
 80050a0:	b913      	cbnz	r3, 80050a8 <_printf_float+0x194>
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	07d0      	lsls	r0, r2, #31
 80050a6:	d502      	bpl.n	80050ae <_printf_float+0x19a>
 80050a8:	3301      	adds	r3, #1
 80050aa:	440b      	add	r3, r1
 80050ac:	6123      	str	r3, [r4, #16]
 80050ae:	f04f 0a00 	mov.w	sl, #0
 80050b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80050b4:	e7df      	b.n	8005076 <_printf_float+0x162>
 80050b6:	b913      	cbnz	r3, 80050be <_printf_float+0x1aa>
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	07d2      	lsls	r2, r2, #31
 80050bc:	d501      	bpl.n	80050c2 <_printf_float+0x1ae>
 80050be:	3302      	adds	r3, #2
 80050c0:	e7f4      	b.n	80050ac <_printf_float+0x198>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e7f2      	b.n	80050ac <_printf_float+0x198>
 80050c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80050ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050cc:	4299      	cmp	r1, r3
 80050ce:	db05      	blt.n	80050dc <_printf_float+0x1c8>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	6121      	str	r1, [r4, #16]
 80050d4:	07d8      	lsls	r0, r3, #31
 80050d6:	d5ea      	bpl.n	80050ae <_printf_float+0x19a>
 80050d8:	1c4b      	adds	r3, r1, #1
 80050da:	e7e7      	b.n	80050ac <_printf_float+0x198>
 80050dc:	2900      	cmp	r1, #0
 80050de:	bfcc      	ite	gt
 80050e0:	2201      	movgt	r2, #1
 80050e2:	f1c1 0202 	rsble	r2, r1, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	e7e0      	b.n	80050ac <_printf_float+0x198>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	055a      	lsls	r2, r3, #21
 80050ee:	d407      	bmi.n	8005100 <_printf_float+0x1ec>
 80050f0:	6923      	ldr	r3, [r4, #16]
 80050f2:	4642      	mov	r2, r8
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	d12b      	bne.n	8005156 <_printf_float+0x242>
 80050fe:	e764      	b.n	8004fca <_printf_float+0xb6>
 8005100:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005104:	f240 80dd 	bls.w	80052c2 <_printf_float+0x3ae>
 8005108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800510c:	2200      	movs	r2, #0
 800510e:	2300      	movs	r3, #0
 8005110:	f7fb fc4a 	bl	80009a8 <__aeabi_dcmpeq>
 8005114:	2800      	cmp	r0, #0
 8005116:	d033      	beq.n	8005180 <_printf_float+0x26c>
 8005118:	2301      	movs	r3, #1
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	4a35      	ldr	r2, [pc, #212]	; (80051f4 <_printf_float+0x2e0>)
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	f43f af51 	beq.w	8004fca <_printf_float+0xb6>
 8005128:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800512c:	429a      	cmp	r2, r3
 800512e:	db02      	blt.n	8005136 <_printf_float+0x222>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	07d8      	lsls	r0, r3, #31
 8005134:	d50f      	bpl.n	8005156 <_printf_float+0x242>
 8005136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f af42 	beq.w	8004fca <_printf_float+0xb6>
 8005146:	f04f 0800 	mov.w	r8, #0
 800514a:	f104 091a 	add.w	r9, r4, #26
 800514e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005150:	3b01      	subs	r3, #1
 8005152:	4543      	cmp	r3, r8
 8005154:	dc09      	bgt.n	800516a <_printf_float+0x256>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	079b      	lsls	r3, r3, #30
 800515a:	f100 8102 	bmi.w	8005362 <_printf_float+0x44e>
 800515e:	68e0      	ldr	r0, [r4, #12]
 8005160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005162:	4298      	cmp	r0, r3
 8005164:	bfb8      	it	lt
 8005166:	4618      	movlt	r0, r3
 8005168:	e731      	b.n	8004fce <_printf_float+0xba>
 800516a:	2301      	movs	r3, #1
 800516c:	464a      	mov	r2, r9
 800516e:	4631      	mov	r1, r6
 8005170:	4628      	mov	r0, r5
 8005172:	47b8      	blx	r7
 8005174:	3001      	adds	r0, #1
 8005176:	f43f af28 	beq.w	8004fca <_printf_float+0xb6>
 800517a:	f108 0801 	add.w	r8, r8, #1
 800517e:	e7e6      	b.n	800514e <_printf_float+0x23a>
 8005180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005182:	2b00      	cmp	r3, #0
 8005184:	dc38      	bgt.n	80051f8 <_printf_float+0x2e4>
 8005186:	2301      	movs	r3, #1
 8005188:	4631      	mov	r1, r6
 800518a:	4628      	mov	r0, r5
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <_printf_float+0x2e0>)
 800518e:	47b8      	blx	r7
 8005190:	3001      	adds	r0, #1
 8005192:	f43f af1a 	beq.w	8004fca <_printf_float+0xb6>
 8005196:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800519a:	4313      	orrs	r3, r2
 800519c:	d102      	bne.n	80051a4 <_printf_float+0x290>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	07d9      	lsls	r1, r3, #31
 80051a2:	d5d8      	bpl.n	8005156 <_printf_float+0x242>
 80051a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051a8:	4631      	mov	r1, r6
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b8      	blx	r7
 80051ae:	3001      	adds	r0, #1
 80051b0:	f43f af0b 	beq.w	8004fca <_printf_float+0xb6>
 80051b4:	f04f 0900 	mov.w	r9, #0
 80051b8:	f104 0a1a 	add.w	sl, r4, #26
 80051bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051be:	425b      	negs	r3, r3
 80051c0:	454b      	cmp	r3, r9
 80051c2:	dc01      	bgt.n	80051c8 <_printf_float+0x2b4>
 80051c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051c6:	e794      	b.n	80050f2 <_printf_float+0x1de>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4652      	mov	r2, sl
 80051cc:	4631      	mov	r1, r6
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	f43f aef9 	beq.w	8004fca <_printf_float+0xb6>
 80051d8:	f109 0901 	add.w	r9, r9, #1
 80051dc:	e7ee      	b.n	80051bc <_printf_float+0x2a8>
 80051de:	bf00      	nop
 80051e0:	7fefffff 	.word	0x7fefffff
 80051e4:	0800a3c0 	.word	0x0800a3c0
 80051e8:	0800a3c4 	.word	0x0800a3c4
 80051ec:	0800a3cc 	.word	0x0800a3cc
 80051f0:	0800a3c8 	.word	0x0800a3c8
 80051f4:	0800a3d0 	.word	0x0800a3d0
 80051f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051fc:	429a      	cmp	r2, r3
 80051fe:	bfa8      	it	ge
 8005200:	461a      	movge	r2, r3
 8005202:	2a00      	cmp	r2, #0
 8005204:	4691      	mov	r9, r2
 8005206:	dc37      	bgt.n	8005278 <_printf_float+0x364>
 8005208:	f04f 0b00 	mov.w	fp, #0
 800520c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005210:	f104 021a 	add.w	r2, r4, #26
 8005214:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005218:	ebaa 0309 	sub.w	r3, sl, r9
 800521c:	455b      	cmp	r3, fp
 800521e:	dc33      	bgt.n	8005288 <_printf_float+0x374>
 8005220:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005224:	429a      	cmp	r2, r3
 8005226:	db3b      	blt.n	80052a0 <_printf_float+0x38c>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	07da      	lsls	r2, r3, #31
 800522c:	d438      	bmi.n	80052a0 <_printf_float+0x38c>
 800522e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005230:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005232:	eba2 030a 	sub.w	r3, r2, sl
 8005236:	eba2 0901 	sub.w	r9, r2, r1
 800523a:	4599      	cmp	r9, r3
 800523c:	bfa8      	it	ge
 800523e:	4699      	movge	r9, r3
 8005240:	f1b9 0f00 	cmp.w	r9, #0
 8005244:	dc34      	bgt.n	80052b0 <_printf_float+0x39c>
 8005246:	f04f 0800 	mov.w	r8, #0
 800524a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800524e:	f104 0a1a 	add.w	sl, r4, #26
 8005252:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	eba3 0309 	sub.w	r3, r3, r9
 800525c:	4543      	cmp	r3, r8
 800525e:	f77f af7a 	ble.w	8005156 <_printf_float+0x242>
 8005262:	2301      	movs	r3, #1
 8005264:	4652      	mov	r2, sl
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	f43f aeac 	beq.w	8004fca <_printf_float+0xb6>
 8005272:	f108 0801 	add.w	r8, r8, #1
 8005276:	e7ec      	b.n	8005252 <_printf_float+0x33e>
 8005278:	4613      	mov	r3, r2
 800527a:	4631      	mov	r1, r6
 800527c:	4642      	mov	r2, r8
 800527e:	4628      	mov	r0, r5
 8005280:	47b8      	blx	r7
 8005282:	3001      	adds	r0, #1
 8005284:	d1c0      	bne.n	8005208 <_printf_float+0x2f4>
 8005286:	e6a0      	b.n	8004fca <_printf_float+0xb6>
 8005288:	2301      	movs	r3, #1
 800528a:	4631      	mov	r1, r6
 800528c:	4628      	mov	r0, r5
 800528e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005290:	47b8      	blx	r7
 8005292:	3001      	adds	r0, #1
 8005294:	f43f ae99 	beq.w	8004fca <_printf_float+0xb6>
 8005298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800529a:	f10b 0b01 	add.w	fp, fp, #1
 800529e:	e7b9      	b.n	8005214 <_printf_float+0x300>
 80052a0:	4631      	mov	r1, r6
 80052a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	d1bf      	bne.n	800522e <_printf_float+0x31a>
 80052ae:	e68c      	b.n	8004fca <_printf_float+0xb6>
 80052b0:	464b      	mov	r3, r9
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	eb08 020a 	add.w	r2, r8, sl
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	d1c2      	bne.n	8005246 <_printf_float+0x332>
 80052c0:	e683      	b.n	8004fca <_printf_float+0xb6>
 80052c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052c4:	2a01      	cmp	r2, #1
 80052c6:	dc01      	bgt.n	80052cc <_printf_float+0x3b8>
 80052c8:	07db      	lsls	r3, r3, #31
 80052ca:	d537      	bpl.n	800533c <_printf_float+0x428>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4642      	mov	r2, r8
 80052d0:	4631      	mov	r1, r6
 80052d2:	4628      	mov	r0, r5
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	f43f ae77 	beq.w	8004fca <_printf_float+0xb6>
 80052dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e0:	4631      	mov	r1, r6
 80052e2:	4628      	mov	r0, r5
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f ae6f 	beq.w	8004fca <_printf_float+0xb6>
 80052ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052f0:	2200      	movs	r2, #0
 80052f2:	2300      	movs	r3, #0
 80052f4:	f7fb fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80052f8:	b9d8      	cbnz	r0, 8005332 <_printf_float+0x41e>
 80052fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052fc:	f108 0201 	add.w	r2, r8, #1
 8005300:	3b01      	subs	r3, #1
 8005302:	4631      	mov	r1, r6
 8005304:	4628      	mov	r0, r5
 8005306:	47b8      	blx	r7
 8005308:	3001      	adds	r0, #1
 800530a:	d10e      	bne.n	800532a <_printf_float+0x416>
 800530c:	e65d      	b.n	8004fca <_printf_float+0xb6>
 800530e:	2301      	movs	r3, #1
 8005310:	464a      	mov	r2, r9
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	47b8      	blx	r7
 8005318:	3001      	adds	r0, #1
 800531a:	f43f ae56 	beq.w	8004fca <_printf_float+0xb6>
 800531e:	f108 0801 	add.w	r8, r8, #1
 8005322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005324:	3b01      	subs	r3, #1
 8005326:	4543      	cmp	r3, r8
 8005328:	dcf1      	bgt.n	800530e <_printf_float+0x3fa>
 800532a:	4653      	mov	r3, sl
 800532c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005330:	e6e0      	b.n	80050f4 <_printf_float+0x1e0>
 8005332:	f04f 0800 	mov.w	r8, #0
 8005336:	f104 091a 	add.w	r9, r4, #26
 800533a:	e7f2      	b.n	8005322 <_printf_float+0x40e>
 800533c:	2301      	movs	r3, #1
 800533e:	4642      	mov	r2, r8
 8005340:	e7df      	b.n	8005302 <_printf_float+0x3ee>
 8005342:	2301      	movs	r3, #1
 8005344:	464a      	mov	r2, r9
 8005346:	4631      	mov	r1, r6
 8005348:	4628      	mov	r0, r5
 800534a:	47b8      	blx	r7
 800534c:	3001      	adds	r0, #1
 800534e:	f43f ae3c 	beq.w	8004fca <_printf_float+0xb6>
 8005352:	f108 0801 	add.w	r8, r8, #1
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800535a:	1a5b      	subs	r3, r3, r1
 800535c:	4543      	cmp	r3, r8
 800535e:	dcf0      	bgt.n	8005342 <_printf_float+0x42e>
 8005360:	e6fd      	b.n	800515e <_printf_float+0x24a>
 8005362:	f04f 0800 	mov.w	r8, #0
 8005366:	f104 0919 	add.w	r9, r4, #25
 800536a:	e7f4      	b.n	8005356 <_printf_float+0x442>

0800536c <_printf_common>:
 800536c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	4616      	mov	r6, r2
 8005372:	4699      	mov	r9, r3
 8005374:	688a      	ldr	r2, [r1, #8]
 8005376:	690b      	ldr	r3, [r1, #16]
 8005378:	4607      	mov	r7, r0
 800537a:	4293      	cmp	r3, r2
 800537c:	bfb8      	it	lt
 800537e:	4613      	movlt	r3, r2
 8005380:	6033      	str	r3, [r6, #0]
 8005382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005386:	460c      	mov	r4, r1
 8005388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800538c:	b10a      	cbz	r2, 8005392 <_printf_common+0x26>
 800538e:	3301      	adds	r3, #1
 8005390:	6033      	str	r3, [r6, #0]
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	0699      	lsls	r1, r3, #26
 8005396:	bf42      	ittt	mi
 8005398:	6833      	ldrmi	r3, [r6, #0]
 800539a:	3302      	addmi	r3, #2
 800539c:	6033      	strmi	r3, [r6, #0]
 800539e:	6825      	ldr	r5, [r4, #0]
 80053a0:	f015 0506 	ands.w	r5, r5, #6
 80053a4:	d106      	bne.n	80053b4 <_printf_common+0x48>
 80053a6:	f104 0a19 	add.w	sl, r4, #25
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	6832      	ldr	r2, [r6, #0]
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	42ab      	cmp	r3, r5
 80053b2:	dc28      	bgt.n	8005406 <_printf_common+0x9a>
 80053b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053b8:	1e13      	subs	r3, r2, #0
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	bf18      	it	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	0692      	lsls	r2, r2, #26
 80053c2:	d42d      	bmi.n	8005420 <_printf_common+0xb4>
 80053c4:	4649      	mov	r1, r9
 80053c6:	4638      	mov	r0, r7
 80053c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053cc:	47c0      	blx	r8
 80053ce:	3001      	adds	r0, #1
 80053d0:	d020      	beq.n	8005414 <_printf_common+0xa8>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	68e5      	ldr	r5, [r4, #12]
 80053d6:	f003 0306 	and.w	r3, r3, #6
 80053da:	2b04      	cmp	r3, #4
 80053dc:	bf18      	it	ne
 80053de:	2500      	movne	r5, #0
 80053e0:	6832      	ldr	r2, [r6, #0]
 80053e2:	f04f 0600 	mov.w	r6, #0
 80053e6:	68a3      	ldr	r3, [r4, #8]
 80053e8:	bf08      	it	eq
 80053ea:	1aad      	subeq	r5, r5, r2
 80053ec:	6922      	ldr	r2, [r4, #16]
 80053ee:	bf08      	it	eq
 80053f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053f4:	4293      	cmp	r3, r2
 80053f6:	bfc4      	itt	gt
 80053f8:	1a9b      	subgt	r3, r3, r2
 80053fa:	18ed      	addgt	r5, r5, r3
 80053fc:	341a      	adds	r4, #26
 80053fe:	42b5      	cmp	r5, r6
 8005400:	d11a      	bne.n	8005438 <_printf_common+0xcc>
 8005402:	2000      	movs	r0, #0
 8005404:	e008      	b.n	8005418 <_printf_common+0xac>
 8005406:	2301      	movs	r3, #1
 8005408:	4652      	mov	r2, sl
 800540a:	4649      	mov	r1, r9
 800540c:	4638      	mov	r0, r7
 800540e:	47c0      	blx	r8
 8005410:	3001      	adds	r0, #1
 8005412:	d103      	bne.n	800541c <_printf_common+0xb0>
 8005414:	f04f 30ff 	mov.w	r0, #4294967295
 8005418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541c:	3501      	adds	r5, #1
 800541e:	e7c4      	b.n	80053aa <_printf_common+0x3e>
 8005420:	2030      	movs	r0, #48	; 0x30
 8005422:	18e1      	adds	r1, r4, r3
 8005424:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800542e:	4422      	add	r2, r4
 8005430:	3302      	adds	r3, #2
 8005432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005436:	e7c5      	b.n	80053c4 <_printf_common+0x58>
 8005438:	2301      	movs	r3, #1
 800543a:	4622      	mov	r2, r4
 800543c:	4649      	mov	r1, r9
 800543e:	4638      	mov	r0, r7
 8005440:	47c0      	blx	r8
 8005442:	3001      	adds	r0, #1
 8005444:	d0e6      	beq.n	8005414 <_printf_common+0xa8>
 8005446:	3601      	adds	r6, #1
 8005448:	e7d9      	b.n	80053fe <_printf_common+0x92>
	...

0800544c <_printf_i>:
 800544c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005450:	460c      	mov	r4, r1
 8005452:	7e27      	ldrb	r7, [r4, #24]
 8005454:	4691      	mov	r9, r2
 8005456:	2f78      	cmp	r7, #120	; 0x78
 8005458:	4680      	mov	r8, r0
 800545a:	469a      	mov	sl, r3
 800545c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800545e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005462:	d807      	bhi.n	8005474 <_printf_i+0x28>
 8005464:	2f62      	cmp	r7, #98	; 0x62
 8005466:	d80a      	bhi.n	800547e <_printf_i+0x32>
 8005468:	2f00      	cmp	r7, #0
 800546a:	f000 80d9 	beq.w	8005620 <_printf_i+0x1d4>
 800546e:	2f58      	cmp	r7, #88	; 0x58
 8005470:	f000 80a4 	beq.w	80055bc <_printf_i+0x170>
 8005474:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800547c:	e03a      	b.n	80054f4 <_printf_i+0xa8>
 800547e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005482:	2b15      	cmp	r3, #21
 8005484:	d8f6      	bhi.n	8005474 <_printf_i+0x28>
 8005486:	a001      	add	r0, pc, #4	; (adr r0, 800548c <_printf_i+0x40>)
 8005488:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800548c:	080054e5 	.word	0x080054e5
 8005490:	080054f9 	.word	0x080054f9
 8005494:	08005475 	.word	0x08005475
 8005498:	08005475 	.word	0x08005475
 800549c:	08005475 	.word	0x08005475
 80054a0:	08005475 	.word	0x08005475
 80054a4:	080054f9 	.word	0x080054f9
 80054a8:	08005475 	.word	0x08005475
 80054ac:	08005475 	.word	0x08005475
 80054b0:	08005475 	.word	0x08005475
 80054b4:	08005475 	.word	0x08005475
 80054b8:	08005607 	.word	0x08005607
 80054bc:	08005529 	.word	0x08005529
 80054c0:	080055e9 	.word	0x080055e9
 80054c4:	08005475 	.word	0x08005475
 80054c8:	08005475 	.word	0x08005475
 80054cc:	08005629 	.word	0x08005629
 80054d0:	08005475 	.word	0x08005475
 80054d4:	08005529 	.word	0x08005529
 80054d8:	08005475 	.word	0x08005475
 80054dc:	08005475 	.word	0x08005475
 80054e0:	080055f1 	.word	0x080055f1
 80054e4:	680b      	ldr	r3, [r1, #0]
 80054e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054ea:	1d1a      	adds	r2, r3, #4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	600a      	str	r2, [r1, #0]
 80054f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054f4:	2301      	movs	r3, #1
 80054f6:	e0a4      	b.n	8005642 <_printf_i+0x1f6>
 80054f8:	6825      	ldr	r5, [r4, #0]
 80054fa:	6808      	ldr	r0, [r1, #0]
 80054fc:	062e      	lsls	r6, r5, #24
 80054fe:	f100 0304 	add.w	r3, r0, #4
 8005502:	d50a      	bpl.n	800551a <_printf_i+0xce>
 8005504:	6805      	ldr	r5, [r0, #0]
 8005506:	600b      	str	r3, [r1, #0]
 8005508:	2d00      	cmp	r5, #0
 800550a:	da03      	bge.n	8005514 <_printf_i+0xc8>
 800550c:	232d      	movs	r3, #45	; 0x2d
 800550e:	426d      	negs	r5, r5
 8005510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005514:	230a      	movs	r3, #10
 8005516:	485e      	ldr	r0, [pc, #376]	; (8005690 <_printf_i+0x244>)
 8005518:	e019      	b.n	800554e <_printf_i+0x102>
 800551a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800551e:	6805      	ldr	r5, [r0, #0]
 8005520:	600b      	str	r3, [r1, #0]
 8005522:	bf18      	it	ne
 8005524:	b22d      	sxthne	r5, r5
 8005526:	e7ef      	b.n	8005508 <_printf_i+0xbc>
 8005528:	680b      	ldr	r3, [r1, #0]
 800552a:	6825      	ldr	r5, [r4, #0]
 800552c:	1d18      	adds	r0, r3, #4
 800552e:	6008      	str	r0, [r1, #0]
 8005530:	0628      	lsls	r0, r5, #24
 8005532:	d501      	bpl.n	8005538 <_printf_i+0xec>
 8005534:	681d      	ldr	r5, [r3, #0]
 8005536:	e002      	b.n	800553e <_printf_i+0xf2>
 8005538:	0669      	lsls	r1, r5, #25
 800553a:	d5fb      	bpl.n	8005534 <_printf_i+0xe8>
 800553c:	881d      	ldrh	r5, [r3, #0]
 800553e:	2f6f      	cmp	r7, #111	; 0x6f
 8005540:	bf0c      	ite	eq
 8005542:	2308      	moveq	r3, #8
 8005544:	230a      	movne	r3, #10
 8005546:	4852      	ldr	r0, [pc, #328]	; (8005690 <_printf_i+0x244>)
 8005548:	2100      	movs	r1, #0
 800554a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800554e:	6866      	ldr	r6, [r4, #4]
 8005550:	2e00      	cmp	r6, #0
 8005552:	bfa8      	it	ge
 8005554:	6821      	ldrge	r1, [r4, #0]
 8005556:	60a6      	str	r6, [r4, #8]
 8005558:	bfa4      	itt	ge
 800555a:	f021 0104 	bicge.w	r1, r1, #4
 800555e:	6021      	strge	r1, [r4, #0]
 8005560:	b90d      	cbnz	r5, 8005566 <_printf_i+0x11a>
 8005562:	2e00      	cmp	r6, #0
 8005564:	d04d      	beq.n	8005602 <_printf_i+0x1b6>
 8005566:	4616      	mov	r6, r2
 8005568:	fbb5 f1f3 	udiv	r1, r5, r3
 800556c:	fb03 5711 	mls	r7, r3, r1, r5
 8005570:	5dc7      	ldrb	r7, [r0, r7]
 8005572:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005576:	462f      	mov	r7, r5
 8005578:	42bb      	cmp	r3, r7
 800557a:	460d      	mov	r5, r1
 800557c:	d9f4      	bls.n	8005568 <_printf_i+0x11c>
 800557e:	2b08      	cmp	r3, #8
 8005580:	d10b      	bne.n	800559a <_printf_i+0x14e>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	07df      	lsls	r7, r3, #31
 8005586:	d508      	bpl.n	800559a <_printf_i+0x14e>
 8005588:	6923      	ldr	r3, [r4, #16]
 800558a:	6861      	ldr	r1, [r4, #4]
 800558c:	4299      	cmp	r1, r3
 800558e:	bfde      	ittt	le
 8005590:	2330      	movle	r3, #48	; 0x30
 8005592:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005596:	f106 36ff 	addle.w	r6, r6, #4294967295
 800559a:	1b92      	subs	r2, r2, r6
 800559c:	6122      	str	r2, [r4, #16]
 800559e:	464b      	mov	r3, r9
 80055a0:	4621      	mov	r1, r4
 80055a2:	4640      	mov	r0, r8
 80055a4:	f8cd a000 	str.w	sl, [sp]
 80055a8:	aa03      	add	r2, sp, #12
 80055aa:	f7ff fedf 	bl	800536c <_printf_common>
 80055ae:	3001      	adds	r0, #1
 80055b0:	d14c      	bne.n	800564c <_printf_i+0x200>
 80055b2:	f04f 30ff 	mov.w	r0, #4294967295
 80055b6:	b004      	add	sp, #16
 80055b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055bc:	4834      	ldr	r0, [pc, #208]	; (8005690 <_printf_i+0x244>)
 80055be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055c2:	680e      	ldr	r6, [r1, #0]
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80055ca:	061f      	lsls	r7, r3, #24
 80055cc:	600e      	str	r6, [r1, #0]
 80055ce:	d514      	bpl.n	80055fa <_printf_i+0x1ae>
 80055d0:	07d9      	lsls	r1, r3, #31
 80055d2:	bf44      	itt	mi
 80055d4:	f043 0320 	orrmi.w	r3, r3, #32
 80055d8:	6023      	strmi	r3, [r4, #0]
 80055da:	b91d      	cbnz	r5, 80055e4 <_printf_i+0x198>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	f023 0320 	bic.w	r3, r3, #32
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	2310      	movs	r3, #16
 80055e6:	e7af      	b.n	8005548 <_printf_i+0xfc>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	f043 0320 	orr.w	r3, r3, #32
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	2378      	movs	r3, #120	; 0x78
 80055f2:	4828      	ldr	r0, [pc, #160]	; (8005694 <_printf_i+0x248>)
 80055f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055f8:	e7e3      	b.n	80055c2 <_printf_i+0x176>
 80055fa:	065e      	lsls	r6, r3, #25
 80055fc:	bf48      	it	mi
 80055fe:	b2ad      	uxthmi	r5, r5
 8005600:	e7e6      	b.n	80055d0 <_printf_i+0x184>
 8005602:	4616      	mov	r6, r2
 8005604:	e7bb      	b.n	800557e <_printf_i+0x132>
 8005606:	680b      	ldr	r3, [r1, #0]
 8005608:	6826      	ldr	r6, [r4, #0]
 800560a:	1d1d      	adds	r5, r3, #4
 800560c:	6960      	ldr	r0, [r4, #20]
 800560e:	600d      	str	r5, [r1, #0]
 8005610:	0635      	lsls	r5, r6, #24
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	d501      	bpl.n	800561a <_printf_i+0x1ce>
 8005616:	6018      	str	r0, [r3, #0]
 8005618:	e002      	b.n	8005620 <_printf_i+0x1d4>
 800561a:	0671      	lsls	r1, r6, #25
 800561c:	d5fb      	bpl.n	8005616 <_printf_i+0x1ca>
 800561e:	8018      	strh	r0, [r3, #0]
 8005620:	2300      	movs	r3, #0
 8005622:	4616      	mov	r6, r2
 8005624:	6123      	str	r3, [r4, #16]
 8005626:	e7ba      	b.n	800559e <_printf_i+0x152>
 8005628:	680b      	ldr	r3, [r1, #0]
 800562a:	1d1a      	adds	r2, r3, #4
 800562c:	600a      	str	r2, [r1, #0]
 800562e:	681e      	ldr	r6, [r3, #0]
 8005630:	2100      	movs	r1, #0
 8005632:	4630      	mov	r0, r6
 8005634:	6862      	ldr	r2, [r4, #4]
 8005636:	f002 fb09 	bl	8007c4c <memchr>
 800563a:	b108      	cbz	r0, 8005640 <_printf_i+0x1f4>
 800563c:	1b80      	subs	r0, r0, r6
 800563e:	6060      	str	r0, [r4, #4]
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	6123      	str	r3, [r4, #16]
 8005644:	2300      	movs	r3, #0
 8005646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564a:	e7a8      	b.n	800559e <_printf_i+0x152>
 800564c:	4632      	mov	r2, r6
 800564e:	4649      	mov	r1, r9
 8005650:	4640      	mov	r0, r8
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	47d0      	blx	sl
 8005656:	3001      	adds	r0, #1
 8005658:	d0ab      	beq.n	80055b2 <_printf_i+0x166>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	079b      	lsls	r3, r3, #30
 800565e:	d413      	bmi.n	8005688 <_printf_i+0x23c>
 8005660:	68e0      	ldr	r0, [r4, #12]
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	4298      	cmp	r0, r3
 8005666:	bfb8      	it	lt
 8005668:	4618      	movlt	r0, r3
 800566a:	e7a4      	b.n	80055b6 <_printf_i+0x16a>
 800566c:	2301      	movs	r3, #1
 800566e:	4632      	mov	r2, r6
 8005670:	4649      	mov	r1, r9
 8005672:	4640      	mov	r0, r8
 8005674:	47d0      	blx	sl
 8005676:	3001      	adds	r0, #1
 8005678:	d09b      	beq.n	80055b2 <_printf_i+0x166>
 800567a:	3501      	adds	r5, #1
 800567c:	68e3      	ldr	r3, [r4, #12]
 800567e:	9903      	ldr	r1, [sp, #12]
 8005680:	1a5b      	subs	r3, r3, r1
 8005682:	42ab      	cmp	r3, r5
 8005684:	dcf2      	bgt.n	800566c <_printf_i+0x220>
 8005686:	e7eb      	b.n	8005660 <_printf_i+0x214>
 8005688:	2500      	movs	r5, #0
 800568a:	f104 0619 	add.w	r6, r4, #25
 800568e:	e7f5      	b.n	800567c <_printf_i+0x230>
 8005690:	0800a3d2 	.word	0x0800a3d2
 8005694:	0800a3e3 	.word	0x0800a3e3

08005698 <_scanf_float>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	b087      	sub	sp, #28
 800569e:	9303      	str	r3, [sp, #12]
 80056a0:	688b      	ldr	r3, [r1, #8]
 80056a2:	4617      	mov	r7, r2
 80056a4:	1e5a      	subs	r2, r3, #1
 80056a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80056aa:	bf85      	ittet	hi
 80056ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80056b0:	195b      	addhi	r3, r3, r5
 80056b2:	2300      	movls	r3, #0
 80056b4:	9302      	strhi	r3, [sp, #8]
 80056b6:	bf88      	it	hi
 80056b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80056bc:	468b      	mov	fp, r1
 80056be:	f04f 0500 	mov.w	r5, #0
 80056c2:	bf8c      	ite	hi
 80056c4:	608b      	strhi	r3, [r1, #8]
 80056c6:	9302      	strls	r3, [sp, #8]
 80056c8:	680b      	ldr	r3, [r1, #0]
 80056ca:	4680      	mov	r8, r0
 80056cc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80056d0:	f84b 3b1c 	str.w	r3, [fp], #28
 80056d4:	460c      	mov	r4, r1
 80056d6:	465e      	mov	r6, fp
 80056d8:	46aa      	mov	sl, r5
 80056da:	46a9      	mov	r9, r5
 80056dc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80056e0:	9501      	str	r5, [sp, #4]
 80056e2:	68a2      	ldr	r2, [r4, #8]
 80056e4:	b152      	cbz	r2, 80056fc <_scanf_float+0x64>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b4e      	cmp	r3, #78	; 0x4e
 80056ec:	d864      	bhi.n	80057b8 <_scanf_float+0x120>
 80056ee:	2b40      	cmp	r3, #64	; 0x40
 80056f0:	d83c      	bhi.n	800576c <_scanf_float+0xd4>
 80056f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80056f6:	b2c8      	uxtb	r0, r1
 80056f8:	280e      	cmp	r0, #14
 80056fa:	d93a      	bls.n	8005772 <_scanf_float+0xda>
 80056fc:	f1b9 0f00 	cmp.w	r9, #0
 8005700:	d003      	beq.n	800570a <_scanf_float+0x72>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800570e:	f1ba 0f01 	cmp.w	sl, #1
 8005712:	f200 8113 	bhi.w	800593c <_scanf_float+0x2a4>
 8005716:	455e      	cmp	r6, fp
 8005718:	f200 8105 	bhi.w	8005926 <_scanf_float+0x28e>
 800571c:	2501      	movs	r5, #1
 800571e:	4628      	mov	r0, r5
 8005720:	b007      	add	sp, #28
 8005722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005726:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800572a:	2a0d      	cmp	r2, #13
 800572c:	d8e6      	bhi.n	80056fc <_scanf_float+0x64>
 800572e:	a101      	add	r1, pc, #4	; (adr r1, 8005734 <_scanf_float+0x9c>)
 8005730:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005734:	08005873 	.word	0x08005873
 8005738:	080056fd 	.word	0x080056fd
 800573c:	080056fd 	.word	0x080056fd
 8005740:	080056fd 	.word	0x080056fd
 8005744:	080058d3 	.word	0x080058d3
 8005748:	080058ab 	.word	0x080058ab
 800574c:	080056fd 	.word	0x080056fd
 8005750:	080056fd 	.word	0x080056fd
 8005754:	08005881 	.word	0x08005881
 8005758:	080056fd 	.word	0x080056fd
 800575c:	080056fd 	.word	0x080056fd
 8005760:	080056fd 	.word	0x080056fd
 8005764:	080056fd 	.word	0x080056fd
 8005768:	08005839 	.word	0x08005839
 800576c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005770:	e7db      	b.n	800572a <_scanf_float+0x92>
 8005772:	290e      	cmp	r1, #14
 8005774:	d8c2      	bhi.n	80056fc <_scanf_float+0x64>
 8005776:	a001      	add	r0, pc, #4	; (adr r0, 800577c <_scanf_float+0xe4>)
 8005778:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800577c:	0800582b 	.word	0x0800582b
 8005780:	080056fd 	.word	0x080056fd
 8005784:	0800582b 	.word	0x0800582b
 8005788:	080058bf 	.word	0x080058bf
 800578c:	080056fd 	.word	0x080056fd
 8005790:	080057d9 	.word	0x080057d9
 8005794:	08005815 	.word	0x08005815
 8005798:	08005815 	.word	0x08005815
 800579c:	08005815 	.word	0x08005815
 80057a0:	08005815 	.word	0x08005815
 80057a4:	08005815 	.word	0x08005815
 80057a8:	08005815 	.word	0x08005815
 80057ac:	08005815 	.word	0x08005815
 80057b0:	08005815 	.word	0x08005815
 80057b4:	08005815 	.word	0x08005815
 80057b8:	2b6e      	cmp	r3, #110	; 0x6e
 80057ba:	d809      	bhi.n	80057d0 <_scanf_float+0x138>
 80057bc:	2b60      	cmp	r3, #96	; 0x60
 80057be:	d8b2      	bhi.n	8005726 <_scanf_float+0x8e>
 80057c0:	2b54      	cmp	r3, #84	; 0x54
 80057c2:	d077      	beq.n	80058b4 <_scanf_float+0x21c>
 80057c4:	2b59      	cmp	r3, #89	; 0x59
 80057c6:	d199      	bne.n	80056fc <_scanf_float+0x64>
 80057c8:	2d07      	cmp	r5, #7
 80057ca:	d197      	bne.n	80056fc <_scanf_float+0x64>
 80057cc:	2508      	movs	r5, #8
 80057ce:	e029      	b.n	8005824 <_scanf_float+0x18c>
 80057d0:	2b74      	cmp	r3, #116	; 0x74
 80057d2:	d06f      	beq.n	80058b4 <_scanf_float+0x21c>
 80057d4:	2b79      	cmp	r3, #121	; 0x79
 80057d6:	e7f6      	b.n	80057c6 <_scanf_float+0x12e>
 80057d8:	6821      	ldr	r1, [r4, #0]
 80057da:	05c8      	lsls	r0, r1, #23
 80057dc:	d51a      	bpl.n	8005814 <_scanf_float+0x17c>
 80057de:	9b02      	ldr	r3, [sp, #8]
 80057e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80057e4:	6021      	str	r1, [r4, #0]
 80057e6:	f109 0901 	add.w	r9, r9, #1
 80057ea:	b11b      	cbz	r3, 80057f4 <_scanf_float+0x15c>
 80057ec:	3b01      	subs	r3, #1
 80057ee:	3201      	adds	r2, #1
 80057f0:	9302      	str	r3, [sp, #8]
 80057f2:	60a2      	str	r2, [r4, #8]
 80057f4:	68a3      	ldr	r3, [r4, #8]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	60a3      	str	r3, [r4, #8]
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	3301      	adds	r3, #1
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3b01      	subs	r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	f340 8084 	ble.w	8005914 <_scanf_float+0x27c>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	3301      	adds	r3, #1
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	e766      	b.n	80056e2 <_scanf_float+0x4a>
 8005814:	eb1a 0f05 	cmn.w	sl, r5
 8005818:	f47f af70 	bne.w	80056fc <_scanf_float+0x64>
 800581c:	6822      	ldr	r2, [r4, #0]
 800581e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005822:	6022      	str	r2, [r4, #0]
 8005824:	f806 3b01 	strb.w	r3, [r6], #1
 8005828:	e7e4      	b.n	80057f4 <_scanf_float+0x15c>
 800582a:	6822      	ldr	r2, [r4, #0]
 800582c:	0610      	lsls	r0, r2, #24
 800582e:	f57f af65 	bpl.w	80056fc <_scanf_float+0x64>
 8005832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005836:	e7f4      	b.n	8005822 <_scanf_float+0x18a>
 8005838:	f1ba 0f00 	cmp.w	sl, #0
 800583c:	d10e      	bne.n	800585c <_scanf_float+0x1c4>
 800583e:	f1b9 0f00 	cmp.w	r9, #0
 8005842:	d10e      	bne.n	8005862 <_scanf_float+0x1ca>
 8005844:	6822      	ldr	r2, [r4, #0]
 8005846:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800584a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800584e:	d108      	bne.n	8005862 <_scanf_float+0x1ca>
 8005850:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005854:	f04f 0a01 	mov.w	sl, #1
 8005858:	6022      	str	r2, [r4, #0]
 800585a:	e7e3      	b.n	8005824 <_scanf_float+0x18c>
 800585c:	f1ba 0f02 	cmp.w	sl, #2
 8005860:	d055      	beq.n	800590e <_scanf_float+0x276>
 8005862:	2d01      	cmp	r5, #1
 8005864:	d002      	beq.n	800586c <_scanf_float+0x1d4>
 8005866:	2d04      	cmp	r5, #4
 8005868:	f47f af48 	bne.w	80056fc <_scanf_float+0x64>
 800586c:	3501      	adds	r5, #1
 800586e:	b2ed      	uxtb	r5, r5
 8005870:	e7d8      	b.n	8005824 <_scanf_float+0x18c>
 8005872:	f1ba 0f01 	cmp.w	sl, #1
 8005876:	f47f af41 	bne.w	80056fc <_scanf_float+0x64>
 800587a:	f04f 0a02 	mov.w	sl, #2
 800587e:	e7d1      	b.n	8005824 <_scanf_float+0x18c>
 8005880:	b97d      	cbnz	r5, 80058a2 <_scanf_float+0x20a>
 8005882:	f1b9 0f00 	cmp.w	r9, #0
 8005886:	f47f af3c 	bne.w	8005702 <_scanf_float+0x6a>
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005890:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005894:	f47f af39 	bne.w	800570a <_scanf_float+0x72>
 8005898:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800589c:	2501      	movs	r5, #1
 800589e:	6022      	str	r2, [r4, #0]
 80058a0:	e7c0      	b.n	8005824 <_scanf_float+0x18c>
 80058a2:	2d03      	cmp	r5, #3
 80058a4:	d0e2      	beq.n	800586c <_scanf_float+0x1d4>
 80058a6:	2d05      	cmp	r5, #5
 80058a8:	e7de      	b.n	8005868 <_scanf_float+0x1d0>
 80058aa:	2d02      	cmp	r5, #2
 80058ac:	f47f af26 	bne.w	80056fc <_scanf_float+0x64>
 80058b0:	2503      	movs	r5, #3
 80058b2:	e7b7      	b.n	8005824 <_scanf_float+0x18c>
 80058b4:	2d06      	cmp	r5, #6
 80058b6:	f47f af21 	bne.w	80056fc <_scanf_float+0x64>
 80058ba:	2507      	movs	r5, #7
 80058bc:	e7b2      	b.n	8005824 <_scanf_float+0x18c>
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	0591      	lsls	r1, r2, #22
 80058c2:	f57f af1b 	bpl.w	80056fc <_scanf_float+0x64>
 80058c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80058ca:	6022      	str	r2, [r4, #0]
 80058cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80058d0:	e7a8      	b.n	8005824 <_scanf_float+0x18c>
 80058d2:	6822      	ldr	r2, [r4, #0]
 80058d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80058d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80058dc:	d006      	beq.n	80058ec <_scanf_float+0x254>
 80058de:	0550      	lsls	r0, r2, #21
 80058e0:	f57f af0c 	bpl.w	80056fc <_scanf_float+0x64>
 80058e4:	f1b9 0f00 	cmp.w	r9, #0
 80058e8:	f43f af0f 	beq.w	800570a <_scanf_float+0x72>
 80058ec:	0591      	lsls	r1, r2, #22
 80058ee:	bf58      	it	pl
 80058f0:	9901      	ldrpl	r1, [sp, #4]
 80058f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058f6:	bf58      	it	pl
 80058f8:	eba9 0101 	subpl.w	r1, r9, r1
 80058fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005900:	f04f 0900 	mov.w	r9, #0
 8005904:	bf58      	it	pl
 8005906:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800590a:	6022      	str	r2, [r4, #0]
 800590c:	e78a      	b.n	8005824 <_scanf_float+0x18c>
 800590e:	f04f 0a03 	mov.w	sl, #3
 8005912:	e787      	b.n	8005824 <_scanf_float+0x18c>
 8005914:	4639      	mov	r1, r7
 8005916:	4640      	mov	r0, r8
 8005918:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800591c:	4798      	blx	r3
 800591e:	2800      	cmp	r0, #0
 8005920:	f43f aedf 	beq.w	80056e2 <_scanf_float+0x4a>
 8005924:	e6ea      	b.n	80056fc <_scanf_float+0x64>
 8005926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800592a:	463a      	mov	r2, r7
 800592c:	4640      	mov	r0, r8
 800592e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005932:	4798      	blx	r3
 8005934:	6923      	ldr	r3, [r4, #16]
 8005936:	3b01      	subs	r3, #1
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	e6ec      	b.n	8005716 <_scanf_float+0x7e>
 800593c:	1e6b      	subs	r3, r5, #1
 800593e:	2b06      	cmp	r3, #6
 8005940:	d825      	bhi.n	800598e <_scanf_float+0x2f6>
 8005942:	2d02      	cmp	r5, #2
 8005944:	d836      	bhi.n	80059b4 <_scanf_float+0x31c>
 8005946:	455e      	cmp	r6, fp
 8005948:	f67f aee8 	bls.w	800571c <_scanf_float+0x84>
 800594c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005950:	463a      	mov	r2, r7
 8005952:	4640      	mov	r0, r8
 8005954:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005958:	4798      	blx	r3
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	3b01      	subs	r3, #1
 800595e:	6123      	str	r3, [r4, #16]
 8005960:	e7f1      	b.n	8005946 <_scanf_float+0x2ae>
 8005962:	9802      	ldr	r0, [sp, #8]
 8005964:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005968:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800596c:	463a      	mov	r2, r7
 800596e:	9002      	str	r0, [sp, #8]
 8005970:	4640      	mov	r0, r8
 8005972:	4798      	blx	r3
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	3b01      	subs	r3, #1
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800597e:	fa5f fa8a 	uxtb.w	sl, sl
 8005982:	f1ba 0f02 	cmp.w	sl, #2
 8005986:	d1ec      	bne.n	8005962 <_scanf_float+0x2ca>
 8005988:	3d03      	subs	r5, #3
 800598a:	b2ed      	uxtb	r5, r5
 800598c:	1b76      	subs	r6, r6, r5
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	05da      	lsls	r2, r3, #23
 8005992:	d52f      	bpl.n	80059f4 <_scanf_float+0x35c>
 8005994:	055b      	lsls	r3, r3, #21
 8005996:	d510      	bpl.n	80059ba <_scanf_float+0x322>
 8005998:	455e      	cmp	r6, fp
 800599a:	f67f aebf 	bls.w	800571c <_scanf_float+0x84>
 800599e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059a2:	463a      	mov	r2, r7
 80059a4:	4640      	mov	r0, r8
 80059a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059aa:	4798      	blx	r3
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	6123      	str	r3, [r4, #16]
 80059b2:	e7f1      	b.n	8005998 <_scanf_float+0x300>
 80059b4:	46aa      	mov	sl, r5
 80059b6:	9602      	str	r6, [sp, #8]
 80059b8:	e7df      	b.n	800597a <_scanf_float+0x2e2>
 80059ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80059be:	6923      	ldr	r3, [r4, #16]
 80059c0:	2965      	cmp	r1, #101	; 0x65
 80059c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80059c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	d00c      	beq.n	80059e8 <_scanf_float+0x350>
 80059ce:	2945      	cmp	r1, #69	; 0x45
 80059d0:	d00a      	beq.n	80059e8 <_scanf_float+0x350>
 80059d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059d6:	463a      	mov	r2, r7
 80059d8:	4640      	mov	r0, r8
 80059da:	4798      	blx	r3
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	1eb5      	subs	r5, r6, #2
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	463a      	mov	r2, r7
 80059ea:	4640      	mov	r0, r8
 80059ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059f0:	4798      	blx	r3
 80059f2:	462e      	mov	r6, r5
 80059f4:	6825      	ldr	r5, [r4, #0]
 80059f6:	f015 0510 	ands.w	r5, r5, #16
 80059fa:	d159      	bne.n	8005ab0 <_scanf_float+0x418>
 80059fc:	7035      	strb	r5, [r6, #0]
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a08:	d11c      	bne.n	8005a44 <_scanf_float+0x3ac>
 8005a0a:	9b01      	ldr	r3, [sp, #4]
 8005a0c:	454b      	cmp	r3, r9
 8005a0e:	eba3 0209 	sub.w	r2, r3, r9
 8005a12:	d124      	bne.n	8005a5e <_scanf_float+0x3c6>
 8005a14:	2200      	movs	r2, #0
 8005a16:	4659      	mov	r1, fp
 8005a18:	4640      	mov	r0, r8
 8005a1a:	f000 fe89 	bl	8006730 <_strtod_r>
 8005a1e:	f8d4 c000 	ldr.w	ip, [r4]
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	f01c 0f02 	tst.w	ip, #2
 8005a28:	4606      	mov	r6, r0
 8005a2a:	460f      	mov	r7, r1
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	d021      	beq.n	8005a74 <_scanf_float+0x3dc>
 8005a30:	9903      	ldr	r1, [sp, #12]
 8005a32:	1d1a      	adds	r2, r3, #4
 8005a34:	600a      	str	r2, [r1, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	e9c3 6700 	strd	r6, r7, [r3]
 8005a3c:	68e3      	ldr	r3, [r4, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	60e3      	str	r3, [r4, #12]
 8005a42:	e66c      	b.n	800571e <_scanf_float+0x86>
 8005a44:	9b04      	ldr	r3, [sp, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0e4      	beq.n	8005a14 <_scanf_float+0x37c>
 8005a4a:	9905      	ldr	r1, [sp, #20]
 8005a4c:	230a      	movs	r3, #10
 8005a4e:	462a      	mov	r2, r5
 8005a50:	4640      	mov	r0, r8
 8005a52:	3101      	adds	r1, #1
 8005a54:	f000 fef8 	bl	8006848 <_strtol_r>
 8005a58:	9b04      	ldr	r3, [sp, #16]
 8005a5a:	9e05      	ldr	r6, [sp, #20]
 8005a5c:	1ac2      	subs	r2, r0, r3
 8005a5e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005a62:	429e      	cmp	r6, r3
 8005a64:	bf28      	it	cs
 8005a66:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	4911      	ldr	r1, [pc, #68]	; (8005ab4 <_scanf_float+0x41c>)
 8005a6e:	f000 f829 	bl	8005ac4 <siprintf>
 8005a72:	e7cf      	b.n	8005a14 <_scanf_float+0x37c>
 8005a74:	f01c 0f04 	tst.w	ip, #4
 8005a78:	f103 0e04 	add.w	lr, r3, #4
 8005a7c:	d003      	beq.n	8005a86 <_scanf_float+0x3ee>
 8005a7e:	9903      	ldr	r1, [sp, #12]
 8005a80:	f8c1 e000 	str.w	lr, [r1]
 8005a84:	e7d7      	b.n	8005a36 <_scanf_float+0x39e>
 8005a86:	9a03      	ldr	r2, [sp, #12]
 8005a88:	f8c2 e000 	str.w	lr, [r2]
 8005a8c:	f8d3 8000 	ldr.w	r8, [r3]
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	f7fa ffba 	bl	8000a0c <__aeabi_dcmpun>
 8005a98:	b128      	cbz	r0, 8005aa6 <_scanf_float+0x40e>
 8005a9a:	4807      	ldr	r0, [pc, #28]	; (8005ab8 <_scanf_float+0x420>)
 8005a9c:	f000 f80e 	bl	8005abc <nanf>
 8005aa0:	f8c8 0000 	str.w	r0, [r8]
 8005aa4:	e7ca      	b.n	8005a3c <_scanf_float+0x3a4>
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	f7fb f80d 	bl	8000ac8 <__aeabi_d2f>
 8005aae:	e7f7      	b.n	8005aa0 <_scanf_float+0x408>
 8005ab0:	2500      	movs	r5, #0
 8005ab2:	e634      	b.n	800571e <_scanf_float+0x86>
 8005ab4:	0800a3f4 	.word	0x0800a3f4
 8005ab8:	0800a810 	.word	0x0800a810

08005abc <nanf>:
 8005abc:	4800      	ldr	r0, [pc, #0]	; (8005ac0 <nanf+0x4>)
 8005abe:	4770      	bx	lr
 8005ac0:	7fc00000 	.word	0x7fc00000

08005ac4 <siprintf>:
 8005ac4:	b40e      	push	{r1, r2, r3}
 8005ac6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005aca:	b500      	push	{lr}
 8005acc:	b09c      	sub	sp, #112	; 0x70
 8005ace:	ab1d      	add	r3, sp, #116	; 0x74
 8005ad0:	9002      	str	r0, [sp, #8]
 8005ad2:	9006      	str	r0, [sp, #24]
 8005ad4:	9107      	str	r1, [sp, #28]
 8005ad6:	9104      	str	r1, [sp, #16]
 8005ad8:	4808      	ldr	r0, [pc, #32]	; (8005afc <siprintf+0x38>)
 8005ada:	4909      	ldr	r1, [pc, #36]	; (8005b00 <siprintf+0x3c>)
 8005adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae0:	9105      	str	r1, [sp, #20]
 8005ae2:	6800      	ldr	r0, [r0, #0]
 8005ae4:	a902      	add	r1, sp, #8
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	f002 fe94 	bl	8008814 <_svfiprintf_r>
 8005aec:	2200      	movs	r2, #0
 8005aee:	9b02      	ldr	r3, [sp, #8]
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	b01c      	add	sp, #112	; 0x70
 8005af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005af8:	b003      	add	sp, #12
 8005afa:	4770      	bx	lr
 8005afc:	20000018 	.word	0x20000018
 8005b00:	ffff0208 	.word	0xffff0208

08005b04 <sulp>:
 8005b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b08:	460f      	mov	r7, r1
 8005b0a:	4690      	mov	r8, r2
 8005b0c:	f002 fc2a 	bl	8008364 <__ulp>
 8005b10:	4604      	mov	r4, r0
 8005b12:	460d      	mov	r5, r1
 8005b14:	f1b8 0f00 	cmp.w	r8, #0
 8005b18:	d011      	beq.n	8005b3e <sulp+0x3a>
 8005b1a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005b1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dd0b      	ble.n	8005b3e <sulp+0x3a>
 8005b26:	2400      	movs	r4, #0
 8005b28:	051b      	lsls	r3, r3, #20
 8005b2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005b2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005b32:	4622      	mov	r2, r4
 8005b34:	462b      	mov	r3, r5
 8005b36:	f7fa fccf 	bl	80004d8 <__aeabi_dmul>
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005b48 <_strtod_l>:
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	469b      	mov	fp, r3
 8005b4e:	2300      	movs	r3, #0
 8005b50:	b0a1      	sub	sp, #132	; 0x84
 8005b52:	931c      	str	r3, [sp, #112]	; 0x70
 8005b54:	4ba1      	ldr	r3, [pc, #644]	; (8005ddc <_strtod_l+0x294>)
 8005b56:	4682      	mov	sl, r0
 8005b58:	681f      	ldr	r7, [r3, #0]
 8005b5a:	460e      	mov	r6, r1
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b60:	f7fa faf6 	bl	8000150 <strlen>
 8005b64:	f04f 0800 	mov.w	r8, #0
 8005b68:	4604      	mov	r4, r0
 8005b6a:	f04f 0900 	mov.w	r9, #0
 8005b6e:	961b      	str	r6, [sp, #108]	; 0x6c
 8005b70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	2a2b      	cmp	r2, #43	; 0x2b
 8005b76:	d04c      	beq.n	8005c12 <_strtod_l+0xca>
 8005b78:	d83a      	bhi.n	8005bf0 <_strtod_l+0xa8>
 8005b7a:	2a0d      	cmp	r2, #13
 8005b7c:	d833      	bhi.n	8005be6 <_strtod_l+0x9e>
 8005b7e:	2a08      	cmp	r2, #8
 8005b80:	d833      	bhi.n	8005bea <_strtod_l+0xa2>
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	d03d      	beq.n	8005c02 <_strtod_l+0xba>
 8005b86:	2300      	movs	r3, #0
 8005b88:	930c      	str	r3, [sp, #48]	; 0x30
 8005b8a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005b8c:	782b      	ldrb	r3, [r5, #0]
 8005b8e:	2b30      	cmp	r3, #48	; 0x30
 8005b90:	f040 80af 	bne.w	8005cf2 <_strtod_l+0x1aa>
 8005b94:	786b      	ldrb	r3, [r5, #1]
 8005b96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b9a:	2b58      	cmp	r3, #88	; 0x58
 8005b9c:	d16c      	bne.n	8005c78 <_strtod_l+0x130>
 8005b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ba0:	4650      	mov	r0, sl
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	ab1c      	add	r3, sp, #112	; 0x70
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	4a8d      	ldr	r2, [pc, #564]	; (8005de0 <_strtod_l+0x298>)
 8005baa:	f8cd b008 	str.w	fp, [sp, #8]
 8005bae:	ab1d      	add	r3, sp, #116	; 0x74
 8005bb0:	a91b      	add	r1, sp, #108	; 0x6c
 8005bb2:	f001 fd2f 	bl	8007614 <__gethex>
 8005bb6:	f010 0607 	ands.w	r6, r0, #7
 8005bba:	4604      	mov	r4, r0
 8005bbc:	d005      	beq.n	8005bca <_strtod_l+0x82>
 8005bbe:	2e06      	cmp	r6, #6
 8005bc0:	d129      	bne.n	8005c16 <_strtod_l+0xce>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	951b      	str	r5, [sp, #108]	; 0x6c
 8005bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8005bca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f040 8596 	bne.w	80066fe <_strtod_l+0xbb6>
 8005bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bd4:	b1d3      	cbz	r3, 8005c0c <_strtod_l+0xc4>
 8005bd6:	4642      	mov	r2, r8
 8005bd8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4619      	mov	r1, r3
 8005be0:	b021      	add	sp, #132	; 0x84
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	2a20      	cmp	r2, #32
 8005be8:	d1cd      	bne.n	8005b86 <_strtod_l+0x3e>
 8005bea:	3301      	adds	r3, #1
 8005bec:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bee:	e7bf      	b.n	8005b70 <_strtod_l+0x28>
 8005bf0:	2a2d      	cmp	r2, #45	; 0x2d
 8005bf2:	d1c8      	bne.n	8005b86 <_strtod_l+0x3e>
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	920c      	str	r2, [sp, #48]	; 0x30
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	921b      	str	r2, [sp, #108]	; 0x6c
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1c3      	bne.n	8005b8a <_strtod_l+0x42>
 8005c02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c04:	961b      	str	r6, [sp, #108]	; 0x6c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f040 8577 	bne.w	80066fa <_strtod_l+0xbb2>
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	464b      	mov	r3, r9
 8005c10:	e7e4      	b.n	8005bdc <_strtod_l+0x94>
 8005c12:	2200      	movs	r2, #0
 8005c14:	e7ef      	b.n	8005bf6 <_strtod_l+0xae>
 8005c16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005c18:	b13a      	cbz	r2, 8005c2a <_strtod_l+0xe2>
 8005c1a:	2135      	movs	r1, #53	; 0x35
 8005c1c:	a81e      	add	r0, sp, #120	; 0x78
 8005c1e:	f002 fca5 	bl	800856c <__copybits>
 8005c22:	4650      	mov	r0, sl
 8005c24:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c26:	f002 f86d 	bl	8007d04 <_Bfree>
 8005c2a:	3e01      	subs	r6, #1
 8005c2c:	2e05      	cmp	r6, #5
 8005c2e:	d807      	bhi.n	8005c40 <_strtod_l+0xf8>
 8005c30:	e8df f006 	tbb	[pc, r6]
 8005c34:	1d180b0e 	.word	0x1d180b0e
 8005c38:	030e      	.short	0x030e
 8005c3a:	f04f 0900 	mov.w	r9, #0
 8005c3e:	46c8      	mov	r8, r9
 8005c40:	0721      	lsls	r1, r4, #28
 8005c42:	d5c2      	bpl.n	8005bca <_strtod_l+0x82>
 8005c44:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005c48:	e7bf      	b.n	8005bca <_strtod_l+0x82>
 8005c4a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8005c4e:	e7f7      	b.n	8005c40 <_strtod_l+0xf8>
 8005c50:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005c52:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8005c56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c5e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005c62:	e7ed      	b.n	8005c40 <_strtod_l+0xf8>
 8005c64:	f04f 0800 	mov.w	r8, #0
 8005c68:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005de4 <_strtod_l+0x29c>
 8005c6c:	e7e8      	b.n	8005c40 <_strtod_l+0xf8>
 8005c6e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005c72:	f04f 38ff 	mov.w	r8, #4294967295
 8005c76:	e7e3      	b.n	8005c40 <_strtod_l+0xf8>
 8005c78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b30      	cmp	r3, #48	; 0x30
 8005c82:	d0f9      	beq.n	8005c78 <_strtod_l+0x130>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0a0      	beq.n	8005bca <_strtod_l+0x82>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	9307      	str	r3, [sp, #28]
 8005c8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c8e:	220a      	movs	r2, #10
 8005c90:	9308      	str	r3, [sp, #32]
 8005c92:	2300      	movs	r3, #0
 8005c94:	469b      	mov	fp, r3
 8005c96:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005c9a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005c9c:	7805      	ldrb	r5, [r0, #0]
 8005c9e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005ca2:	b2d9      	uxtb	r1, r3
 8005ca4:	2909      	cmp	r1, #9
 8005ca6:	d926      	bls.n	8005cf6 <_strtod_l+0x1ae>
 8005ca8:	4622      	mov	r2, r4
 8005caa:	4639      	mov	r1, r7
 8005cac:	f002 fec8 	bl	8008a40 <strncmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d032      	beq.n	8005d1a <_strtod_l+0x1d2>
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	462b      	mov	r3, r5
 8005cb8:	465c      	mov	r4, fp
 8005cba:	4602      	mov	r2, r0
 8005cbc:	9004      	str	r0, [sp, #16]
 8005cbe:	2b65      	cmp	r3, #101	; 0x65
 8005cc0:	d001      	beq.n	8005cc6 <_strtod_l+0x17e>
 8005cc2:	2b45      	cmp	r3, #69	; 0x45
 8005cc4:	d113      	bne.n	8005cee <_strtod_l+0x1a6>
 8005cc6:	b91c      	cbnz	r4, 8005cd0 <_strtod_l+0x188>
 8005cc8:	9b07      	ldr	r3, [sp, #28]
 8005cca:	4303      	orrs	r3, r0
 8005ccc:	d099      	beq.n	8005c02 <_strtod_l+0xba>
 8005cce:	2400      	movs	r4, #0
 8005cd0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005cd2:	1c73      	adds	r3, r6, #1
 8005cd4:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cd6:	7873      	ldrb	r3, [r6, #1]
 8005cd8:	2b2b      	cmp	r3, #43	; 0x2b
 8005cda:	d078      	beq.n	8005dce <_strtod_l+0x286>
 8005cdc:	2b2d      	cmp	r3, #45	; 0x2d
 8005cde:	d07b      	beq.n	8005dd8 <_strtod_l+0x290>
 8005ce0:	2700      	movs	r7, #0
 8005ce2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005ce6:	2909      	cmp	r1, #9
 8005ce8:	f240 8082 	bls.w	8005df0 <_strtod_l+0x2a8>
 8005cec:	961b      	str	r6, [sp, #108]	; 0x6c
 8005cee:	2500      	movs	r5, #0
 8005cf0:	e09e      	b.n	8005e30 <_strtod_l+0x2e8>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e7c9      	b.n	8005c8a <_strtod_l+0x142>
 8005cf6:	f1bb 0f08 	cmp.w	fp, #8
 8005cfa:	bfd5      	itete	le
 8005cfc:	9906      	ldrle	r1, [sp, #24]
 8005cfe:	9905      	ldrgt	r1, [sp, #20]
 8005d00:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d04:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005d08:	f100 0001 	add.w	r0, r0, #1
 8005d0c:	bfd4      	ite	le
 8005d0e:	9306      	strle	r3, [sp, #24]
 8005d10:	9305      	strgt	r3, [sp, #20]
 8005d12:	f10b 0b01 	add.w	fp, fp, #1
 8005d16:	901b      	str	r0, [sp, #108]	; 0x6c
 8005d18:	e7bf      	b.n	8005c9a <_strtod_l+0x152>
 8005d1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d1c:	191a      	adds	r2, r3, r4
 8005d1e:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d20:	5d1b      	ldrb	r3, [r3, r4]
 8005d22:	f1bb 0f00 	cmp.w	fp, #0
 8005d26:	d036      	beq.n	8005d96 <_strtod_l+0x24e>
 8005d28:	465c      	mov	r4, fp
 8005d2a:	9004      	str	r0, [sp, #16]
 8005d2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005d30:	2a09      	cmp	r2, #9
 8005d32:	d912      	bls.n	8005d5a <_strtod_l+0x212>
 8005d34:	2201      	movs	r2, #1
 8005d36:	e7c2      	b.n	8005cbe <_strtod_l+0x176>
 8005d38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b30      	cmp	r3, #48	; 0x30
 8005d44:	d0f8      	beq.n	8005d38 <_strtod_l+0x1f0>
 8005d46:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005d4a:	2a08      	cmp	r2, #8
 8005d4c:	f200 84dc 	bhi.w	8006708 <_strtod_l+0xbc0>
 8005d50:	9004      	str	r0, [sp, #16]
 8005d52:	2000      	movs	r0, #0
 8005d54:	4604      	mov	r4, r0
 8005d56:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005d58:	9208      	str	r2, [sp, #32]
 8005d5a:	3b30      	subs	r3, #48	; 0x30
 8005d5c:	f100 0201 	add.w	r2, r0, #1
 8005d60:	d013      	beq.n	8005d8a <_strtod_l+0x242>
 8005d62:	9904      	ldr	r1, [sp, #16]
 8005d64:	1905      	adds	r5, r0, r4
 8005d66:	4411      	add	r1, r2
 8005d68:	9104      	str	r1, [sp, #16]
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	210a      	movs	r1, #10
 8005d6e:	42aa      	cmp	r2, r5
 8005d70:	d113      	bne.n	8005d9a <_strtod_l+0x252>
 8005d72:	1822      	adds	r2, r4, r0
 8005d74:	2a08      	cmp	r2, #8
 8005d76:	f104 0401 	add.w	r4, r4, #1
 8005d7a:	4404      	add	r4, r0
 8005d7c:	dc1b      	bgt.n	8005db6 <_strtod_l+0x26e>
 8005d7e:	220a      	movs	r2, #10
 8005d80:	9906      	ldr	r1, [sp, #24]
 8005d82:	fb02 3301 	mla	r3, r2, r1, r3
 8005d86:	9306      	str	r3, [sp, #24]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	1c59      	adds	r1, r3, #1
 8005d90:	911b      	str	r1, [sp, #108]	; 0x6c
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	e7ca      	b.n	8005d2c <_strtod_l+0x1e4>
 8005d96:	4658      	mov	r0, fp
 8005d98:	e7d3      	b.n	8005d42 <_strtod_l+0x1fa>
 8005d9a:	2a08      	cmp	r2, #8
 8005d9c:	dc04      	bgt.n	8005da8 <_strtod_l+0x260>
 8005d9e:	9f06      	ldr	r7, [sp, #24]
 8005da0:	434f      	muls	r7, r1
 8005da2:	9706      	str	r7, [sp, #24]
 8005da4:	3201      	adds	r2, #1
 8005da6:	e7e2      	b.n	8005d6e <_strtod_l+0x226>
 8005da8:	1c57      	adds	r7, r2, #1
 8005daa:	2f10      	cmp	r7, #16
 8005dac:	bfde      	ittt	le
 8005dae:	9f05      	ldrle	r7, [sp, #20]
 8005db0:	434f      	mulle	r7, r1
 8005db2:	9705      	strle	r7, [sp, #20]
 8005db4:	e7f6      	b.n	8005da4 <_strtod_l+0x25c>
 8005db6:	2c10      	cmp	r4, #16
 8005db8:	bfdf      	itttt	le
 8005dba:	220a      	movle	r2, #10
 8005dbc:	9905      	ldrle	r1, [sp, #20]
 8005dbe:	fb02 3301 	mlale	r3, r2, r1, r3
 8005dc2:	9305      	strle	r3, [sp, #20]
 8005dc4:	e7e0      	b.n	8005d88 <_strtod_l+0x240>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2201      	movs	r2, #1
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	e77c      	b.n	8005cc8 <_strtod_l+0x180>
 8005dce:	2700      	movs	r7, #0
 8005dd0:	1cb3      	adds	r3, r6, #2
 8005dd2:	931b      	str	r3, [sp, #108]	; 0x6c
 8005dd4:	78b3      	ldrb	r3, [r6, #2]
 8005dd6:	e784      	b.n	8005ce2 <_strtod_l+0x19a>
 8005dd8:	2701      	movs	r7, #1
 8005dda:	e7f9      	b.n	8005dd0 <_strtod_l+0x288>
 8005ddc:	0800a650 	.word	0x0800a650
 8005de0:	0800a3fc 	.word	0x0800a3fc
 8005de4:	7ff00000 	.word	0x7ff00000
 8005de8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	911b      	str	r1, [sp, #108]	; 0x6c
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b30      	cmp	r3, #48	; 0x30
 8005df2:	d0f9      	beq.n	8005de8 <_strtod_l+0x2a0>
 8005df4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005df8:	2908      	cmp	r1, #8
 8005dfa:	f63f af78 	bhi.w	8005cee <_strtod_l+0x1a6>
 8005dfe:	f04f 0e0a 	mov.w	lr, #10
 8005e02:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8005e06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e08:	9309      	str	r3, [sp, #36]	; 0x24
 8005e0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e0c:	1c59      	adds	r1, r3, #1
 8005e0e:	911b      	str	r1, [sp, #108]	; 0x6c
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8005e16:	2d09      	cmp	r5, #9
 8005e18:	d935      	bls.n	8005e86 <_strtod_l+0x33e>
 8005e1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e1c:	1b49      	subs	r1, r1, r5
 8005e1e:	2908      	cmp	r1, #8
 8005e20:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005e24:	dc02      	bgt.n	8005e2c <_strtod_l+0x2e4>
 8005e26:	4565      	cmp	r5, ip
 8005e28:	bfa8      	it	ge
 8005e2a:	4665      	movge	r5, ip
 8005e2c:	b107      	cbz	r7, 8005e30 <_strtod_l+0x2e8>
 8005e2e:	426d      	negs	r5, r5
 8005e30:	2c00      	cmp	r4, #0
 8005e32:	d14c      	bne.n	8005ece <_strtod_l+0x386>
 8005e34:	9907      	ldr	r1, [sp, #28]
 8005e36:	4301      	orrs	r1, r0
 8005e38:	f47f aec7 	bne.w	8005bca <_strtod_l+0x82>
 8005e3c:	2a00      	cmp	r2, #0
 8005e3e:	f47f aee0 	bne.w	8005c02 <_strtod_l+0xba>
 8005e42:	2b69      	cmp	r3, #105	; 0x69
 8005e44:	d026      	beq.n	8005e94 <_strtod_l+0x34c>
 8005e46:	dc23      	bgt.n	8005e90 <_strtod_l+0x348>
 8005e48:	2b49      	cmp	r3, #73	; 0x49
 8005e4a:	d023      	beq.n	8005e94 <_strtod_l+0x34c>
 8005e4c:	2b4e      	cmp	r3, #78	; 0x4e
 8005e4e:	f47f aed8 	bne.w	8005c02 <_strtod_l+0xba>
 8005e52:	499c      	ldr	r1, [pc, #624]	; (80060c4 <_strtod_l+0x57c>)
 8005e54:	a81b      	add	r0, sp, #108	; 0x6c
 8005e56:	f001 fe2b 	bl	8007ab0 <__match>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f43f aed1 	beq.w	8005c02 <_strtod_l+0xba>
 8005e60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b28      	cmp	r3, #40	; 0x28
 8005e66:	d12c      	bne.n	8005ec2 <_strtod_l+0x37a>
 8005e68:	4997      	ldr	r1, [pc, #604]	; (80060c8 <_strtod_l+0x580>)
 8005e6a:	aa1e      	add	r2, sp, #120	; 0x78
 8005e6c:	a81b      	add	r0, sp, #108	; 0x6c
 8005e6e:	f001 fe33 	bl	8007ad8 <__hexnan>
 8005e72:	2805      	cmp	r0, #5
 8005e74:	d125      	bne.n	8005ec2 <_strtod_l+0x37a>
 8005e76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e78:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005e7c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005e80:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005e84:	e6a1      	b.n	8005bca <_strtod_l+0x82>
 8005e86:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8005e8a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005e8e:	e7bc      	b.n	8005e0a <_strtod_l+0x2c2>
 8005e90:	2b6e      	cmp	r3, #110	; 0x6e
 8005e92:	e7dc      	b.n	8005e4e <_strtod_l+0x306>
 8005e94:	498d      	ldr	r1, [pc, #564]	; (80060cc <_strtod_l+0x584>)
 8005e96:	a81b      	add	r0, sp, #108	; 0x6c
 8005e98:	f001 fe0a 	bl	8007ab0 <__match>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	f43f aeb0 	beq.w	8005c02 <_strtod_l+0xba>
 8005ea2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ea4:	498a      	ldr	r1, [pc, #552]	; (80060d0 <_strtod_l+0x588>)
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	a81b      	add	r0, sp, #108	; 0x6c
 8005eaa:	931b      	str	r3, [sp, #108]	; 0x6c
 8005eac:	f001 fe00 	bl	8007ab0 <__match>
 8005eb0:	b910      	cbnz	r0, 8005eb8 <_strtod_l+0x370>
 8005eb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8005eb8:	f04f 0800 	mov.w	r8, #0
 8005ebc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80060e0 <_strtod_l+0x598>
 8005ec0:	e683      	b.n	8005bca <_strtod_l+0x82>
 8005ec2:	4884      	ldr	r0, [pc, #528]	; (80060d4 <_strtod_l+0x58c>)
 8005ec4:	f002 fda6 	bl	8008a14 <nan>
 8005ec8:	4680      	mov	r8, r0
 8005eca:	4689      	mov	r9, r1
 8005ecc:	e67d      	b.n	8005bca <_strtod_l+0x82>
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	f1bb 0f00 	cmp.w	fp, #0
 8005ed4:	bf08      	it	eq
 8005ed6:	46a3      	moveq	fp, r4
 8005ed8:	1aeb      	subs	r3, r5, r3
 8005eda:	2c10      	cmp	r4, #16
 8005edc:	9806      	ldr	r0, [sp, #24]
 8005ede:	4626      	mov	r6, r4
 8005ee0:	9307      	str	r3, [sp, #28]
 8005ee2:	bfa8      	it	ge
 8005ee4:	2610      	movge	r6, #16
 8005ee6:	f7fa fa7d 	bl	80003e4 <__aeabi_ui2d>
 8005eea:	2c09      	cmp	r4, #9
 8005eec:	4680      	mov	r8, r0
 8005eee:	4689      	mov	r9, r1
 8005ef0:	dd13      	ble.n	8005f1a <_strtod_l+0x3d2>
 8005ef2:	4b79      	ldr	r3, [pc, #484]	; (80060d8 <_strtod_l+0x590>)
 8005ef4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ef8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005efc:	f7fa faec 	bl	80004d8 <__aeabi_dmul>
 8005f00:	4680      	mov	r8, r0
 8005f02:	9805      	ldr	r0, [sp, #20]
 8005f04:	4689      	mov	r9, r1
 8005f06:	f7fa fa6d 	bl	80003e4 <__aeabi_ui2d>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4640      	mov	r0, r8
 8005f10:	4649      	mov	r1, r9
 8005f12:	f7fa f92b 	bl	800016c <__adddf3>
 8005f16:	4680      	mov	r8, r0
 8005f18:	4689      	mov	r9, r1
 8005f1a:	2c0f      	cmp	r4, #15
 8005f1c:	dc36      	bgt.n	8005f8c <_strtod_l+0x444>
 8005f1e:	9b07      	ldr	r3, [sp, #28]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f43f ae52 	beq.w	8005bca <_strtod_l+0x82>
 8005f26:	dd22      	ble.n	8005f6e <_strtod_l+0x426>
 8005f28:	2b16      	cmp	r3, #22
 8005f2a:	dc09      	bgt.n	8005f40 <_strtod_l+0x3f8>
 8005f2c:	4c6a      	ldr	r4, [pc, #424]	; (80060d8 <_strtod_l+0x590>)
 8005f2e:	4642      	mov	r2, r8
 8005f30:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005f34:	464b      	mov	r3, r9
 8005f36:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005f3a:	f7fa facd 	bl	80004d8 <__aeabi_dmul>
 8005f3e:	e7c3      	b.n	8005ec8 <_strtod_l+0x380>
 8005f40:	9a07      	ldr	r2, [sp, #28]
 8005f42:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005f46:	4293      	cmp	r3, r2
 8005f48:	db20      	blt.n	8005f8c <_strtod_l+0x444>
 8005f4a:	4d63      	ldr	r5, [pc, #396]	; (80060d8 <_strtod_l+0x590>)
 8005f4c:	f1c4 040f 	rsb	r4, r4, #15
 8005f50:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005f54:	4642      	mov	r2, r8
 8005f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	f7fa fabc 	bl	80004d8 <__aeabi_dmul>
 8005f60:	9b07      	ldr	r3, [sp, #28]
 8005f62:	1b1c      	subs	r4, r3, r4
 8005f64:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005f68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f6c:	e7e5      	b.n	8005f3a <_strtod_l+0x3f2>
 8005f6e:	9b07      	ldr	r3, [sp, #28]
 8005f70:	3316      	adds	r3, #22
 8005f72:	db0b      	blt.n	8005f8c <_strtod_l+0x444>
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	4a58      	ldr	r2, [pc, #352]	; (80060d8 <_strtod_l+0x590>)
 8005f78:	1b5d      	subs	r5, r3, r5
 8005f7a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005f7e:	4640      	mov	r0, r8
 8005f80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f84:	4649      	mov	r1, r9
 8005f86:	f7fa fbd1 	bl	800072c <__aeabi_ddiv>
 8005f8a:	e79d      	b.n	8005ec8 <_strtod_l+0x380>
 8005f8c:	9b07      	ldr	r3, [sp, #28]
 8005f8e:	1ba6      	subs	r6, r4, r6
 8005f90:	441e      	add	r6, r3
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	dd71      	ble.n	800607a <_strtod_l+0x532>
 8005f96:	f016 030f 	ands.w	r3, r6, #15
 8005f9a:	d00a      	beq.n	8005fb2 <_strtod_l+0x46a>
 8005f9c:	494e      	ldr	r1, [pc, #312]	; (80060d8 <_strtod_l+0x590>)
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa8:	464b      	mov	r3, r9
 8005faa:	f7fa fa95 	bl	80004d8 <__aeabi_dmul>
 8005fae:	4680      	mov	r8, r0
 8005fb0:	4689      	mov	r9, r1
 8005fb2:	f036 060f 	bics.w	r6, r6, #15
 8005fb6:	d050      	beq.n	800605a <_strtod_l+0x512>
 8005fb8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005fbc:	dd27      	ble.n	800600e <_strtod_l+0x4c6>
 8005fbe:	f04f 0b00 	mov.w	fp, #0
 8005fc2:	f8cd b010 	str.w	fp, [sp, #16]
 8005fc6:	f8cd b020 	str.w	fp, [sp, #32]
 8005fca:	f8cd b018 	str.w	fp, [sp, #24]
 8005fce:	2322      	movs	r3, #34	; 0x22
 8005fd0:	f04f 0800 	mov.w	r8, #0
 8005fd4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80060e0 <_strtod_l+0x598>
 8005fd8:	f8ca 3000 	str.w	r3, [sl]
 8005fdc:	9b08      	ldr	r3, [sp, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f43f adf3 	beq.w	8005bca <_strtod_l+0x82>
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fe8:	f001 fe8c 	bl	8007d04 <_Bfree>
 8005fec:	4650      	mov	r0, sl
 8005fee:	9906      	ldr	r1, [sp, #24]
 8005ff0:	f001 fe88 	bl	8007d04 <_Bfree>
 8005ff4:	4650      	mov	r0, sl
 8005ff6:	9904      	ldr	r1, [sp, #16]
 8005ff8:	f001 fe84 	bl	8007d04 <_Bfree>
 8005ffc:	4650      	mov	r0, sl
 8005ffe:	9908      	ldr	r1, [sp, #32]
 8006000:	f001 fe80 	bl	8007d04 <_Bfree>
 8006004:	4659      	mov	r1, fp
 8006006:	4650      	mov	r0, sl
 8006008:	f001 fe7c 	bl	8007d04 <_Bfree>
 800600c:	e5dd      	b.n	8005bca <_strtod_l+0x82>
 800600e:	2300      	movs	r3, #0
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	461f      	mov	r7, r3
 8006016:	1136      	asrs	r6, r6, #4
 8006018:	2e01      	cmp	r6, #1
 800601a:	dc21      	bgt.n	8006060 <_strtod_l+0x518>
 800601c:	b10b      	cbz	r3, 8006022 <_strtod_l+0x4da>
 800601e:	4680      	mov	r8, r0
 8006020:	4689      	mov	r9, r1
 8006022:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <_strtod_l+0x594>)
 8006024:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006028:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800602c:	4642      	mov	r2, r8
 800602e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006032:	464b      	mov	r3, r9
 8006034:	f7fa fa50 	bl	80004d8 <__aeabi_dmul>
 8006038:	4b29      	ldr	r3, [pc, #164]	; (80060e0 <_strtod_l+0x598>)
 800603a:	460a      	mov	r2, r1
 800603c:	400b      	ands	r3, r1
 800603e:	4929      	ldr	r1, [pc, #164]	; (80060e4 <_strtod_l+0x59c>)
 8006040:	4680      	mov	r8, r0
 8006042:	428b      	cmp	r3, r1
 8006044:	d8bb      	bhi.n	8005fbe <_strtod_l+0x476>
 8006046:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800604a:	428b      	cmp	r3, r1
 800604c:	bf86      	itte	hi
 800604e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006052:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80060e8 <_strtod_l+0x5a0>
 8006056:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800605a:	2300      	movs	r3, #0
 800605c:	9305      	str	r3, [sp, #20]
 800605e:	e07e      	b.n	800615e <_strtod_l+0x616>
 8006060:	07f2      	lsls	r2, r6, #31
 8006062:	d507      	bpl.n	8006074 <_strtod_l+0x52c>
 8006064:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <_strtod_l+0x594>)
 8006066:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f7fa fa33 	bl	80004d8 <__aeabi_dmul>
 8006072:	2301      	movs	r3, #1
 8006074:	3701      	adds	r7, #1
 8006076:	1076      	asrs	r6, r6, #1
 8006078:	e7ce      	b.n	8006018 <_strtod_l+0x4d0>
 800607a:	d0ee      	beq.n	800605a <_strtod_l+0x512>
 800607c:	4276      	negs	r6, r6
 800607e:	f016 020f 	ands.w	r2, r6, #15
 8006082:	d00a      	beq.n	800609a <_strtod_l+0x552>
 8006084:	4b14      	ldr	r3, [pc, #80]	; (80060d8 <_strtod_l+0x590>)
 8006086:	4640      	mov	r0, r8
 8006088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800608c:	4649      	mov	r1, r9
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa fb4b 	bl	800072c <__aeabi_ddiv>
 8006096:	4680      	mov	r8, r0
 8006098:	4689      	mov	r9, r1
 800609a:	1136      	asrs	r6, r6, #4
 800609c:	d0dd      	beq.n	800605a <_strtod_l+0x512>
 800609e:	2e1f      	cmp	r6, #31
 80060a0:	dd24      	ble.n	80060ec <_strtod_l+0x5a4>
 80060a2:	f04f 0b00 	mov.w	fp, #0
 80060a6:	f8cd b010 	str.w	fp, [sp, #16]
 80060aa:	f8cd b020 	str.w	fp, [sp, #32]
 80060ae:	f8cd b018 	str.w	fp, [sp, #24]
 80060b2:	2322      	movs	r3, #34	; 0x22
 80060b4:	f04f 0800 	mov.w	r8, #0
 80060b8:	f04f 0900 	mov.w	r9, #0
 80060bc:	f8ca 3000 	str.w	r3, [sl]
 80060c0:	e78c      	b.n	8005fdc <_strtod_l+0x494>
 80060c2:	bf00      	nop
 80060c4:	0800a3cd 	.word	0x0800a3cd
 80060c8:	0800a410 	.word	0x0800a410
 80060cc:	0800a3c5 	.word	0x0800a3c5
 80060d0:	0800a554 	.word	0x0800a554
 80060d4:	0800a810 	.word	0x0800a810
 80060d8:	0800a6f0 	.word	0x0800a6f0
 80060dc:	0800a6c8 	.word	0x0800a6c8
 80060e0:	7ff00000 	.word	0x7ff00000
 80060e4:	7ca00000 	.word	0x7ca00000
 80060e8:	7fefffff 	.word	0x7fefffff
 80060ec:	f016 0310 	ands.w	r3, r6, #16
 80060f0:	bf18      	it	ne
 80060f2:	236a      	movne	r3, #106	; 0x6a
 80060f4:	4640      	mov	r0, r8
 80060f6:	9305      	str	r3, [sp, #20]
 80060f8:	4649      	mov	r1, r9
 80060fa:	2300      	movs	r3, #0
 80060fc:	4fb2      	ldr	r7, [pc, #712]	; (80063c8 <_strtod_l+0x880>)
 80060fe:	07f2      	lsls	r2, r6, #31
 8006100:	d504      	bpl.n	800610c <_strtod_l+0x5c4>
 8006102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006106:	f7fa f9e7 	bl	80004d8 <__aeabi_dmul>
 800610a:	2301      	movs	r3, #1
 800610c:	1076      	asrs	r6, r6, #1
 800610e:	f107 0708 	add.w	r7, r7, #8
 8006112:	d1f4      	bne.n	80060fe <_strtod_l+0x5b6>
 8006114:	b10b      	cbz	r3, 800611a <_strtod_l+0x5d2>
 8006116:	4680      	mov	r8, r0
 8006118:	4689      	mov	r9, r1
 800611a:	9b05      	ldr	r3, [sp, #20]
 800611c:	b1bb      	cbz	r3, 800614e <_strtod_l+0x606>
 800611e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8006122:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006126:	2b00      	cmp	r3, #0
 8006128:	4649      	mov	r1, r9
 800612a:	dd10      	ble.n	800614e <_strtod_l+0x606>
 800612c:	2b1f      	cmp	r3, #31
 800612e:	f340 812b 	ble.w	8006388 <_strtod_l+0x840>
 8006132:	2b34      	cmp	r3, #52	; 0x34
 8006134:	bfd8      	it	le
 8006136:	f04f 32ff 	movle.w	r2, #4294967295
 800613a:	f04f 0800 	mov.w	r8, #0
 800613e:	bfcf      	iteee	gt
 8006140:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006144:	3b20      	suble	r3, #32
 8006146:	fa02 f303 	lslle.w	r3, r2, r3
 800614a:	ea03 0901 	andle.w	r9, r3, r1
 800614e:	2200      	movs	r2, #0
 8006150:	2300      	movs	r3, #0
 8006152:	4640      	mov	r0, r8
 8006154:	4649      	mov	r1, r9
 8006156:	f7fa fc27 	bl	80009a8 <__aeabi_dcmpeq>
 800615a:	2800      	cmp	r0, #0
 800615c:	d1a1      	bne.n	80060a2 <_strtod_l+0x55a>
 800615e:	9b06      	ldr	r3, [sp, #24]
 8006160:	465a      	mov	r2, fp
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	4650      	mov	r0, sl
 8006166:	4623      	mov	r3, r4
 8006168:	9908      	ldr	r1, [sp, #32]
 800616a:	f001 fe37 	bl	8007ddc <__s2b>
 800616e:	9008      	str	r0, [sp, #32]
 8006170:	2800      	cmp	r0, #0
 8006172:	f43f af24 	beq.w	8005fbe <_strtod_l+0x476>
 8006176:	9b04      	ldr	r3, [sp, #16]
 8006178:	f04f 0b00 	mov.w	fp, #0
 800617c:	1b5d      	subs	r5, r3, r5
 800617e:	9b07      	ldr	r3, [sp, #28]
 8006180:	f8cd b010 	str.w	fp, [sp, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	bfb4      	ite	lt
 8006188:	462b      	movlt	r3, r5
 800618a:	2300      	movge	r3, #0
 800618c:	930e      	str	r3, [sp, #56]	; 0x38
 800618e:	9b07      	ldr	r3, [sp, #28]
 8006190:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006194:	9316      	str	r3, [sp, #88]	; 0x58
 8006196:	9b08      	ldr	r3, [sp, #32]
 8006198:	4650      	mov	r0, sl
 800619a:	6859      	ldr	r1, [r3, #4]
 800619c:	f001 fd72 	bl	8007c84 <_Balloc>
 80061a0:	9006      	str	r0, [sp, #24]
 80061a2:	2800      	cmp	r0, #0
 80061a4:	f43f af13 	beq.w	8005fce <_strtod_l+0x486>
 80061a8:	9b08      	ldr	r3, [sp, #32]
 80061aa:	300c      	adds	r0, #12
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	f103 010c 	add.w	r1, r3, #12
 80061b2:	3202      	adds	r2, #2
 80061b4:	0092      	lsls	r2, r2, #2
 80061b6:	f001 fd57 	bl	8007c68 <memcpy>
 80061ba:	ab1e      	add	r3, sp, #120	; 0x78
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	ab1d      	add	r3, sp, #116	; 0x74
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	4642      	mov	r2, r8
 80061c4:	464b      	mov	r3, r9
 80061c6:	4650      	mov	r0, sl
 80061c8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80061cc:	f002 f944 	bl	8008458 <__d2b>
 80061d0:	901c      	str	r0, [sp, #112]	; 0x70
 80061d2:	2800      	cmp	r0, #0
 80061d4:	f43f aefb 	beq.w	8005fce <_strtod_l+0x486>
 80061d8:	2101      	movs	r1, #1
 80061da:	4650      	mov	r0, sl
 80061dc:	f001 fe96 	bl	8007f0c <__i2b>
 80061e0:	4603      	mov	r3, r0
 80061e2:	9004      	str	r0, [sp, #16]
 80061e4:	2800      	cmp	r0, #0
 80061e6:	f43f aef2 	beq.w	8005fce <_strtod_l+0x486>
 80061ea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80061ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	bfab      	itete	ge
 80061f2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80061f4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80061f6:	18ee      	addge	r6, r5, r3
 80061f8:	1b5c      	sublt	r4, r3, r5
 80061fa:	9b05      	ldr	r3, [sp, #20]
 80061fc:	bfa8      	it	ge
 80061fe:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006200:	eba5 0503 	sub.w	r5, r5, r3
 8006204:	4415      	add	r5, r2
 8006206:	4b71      	ldr	r3, [pc, #452]	; (80063cc <_strtod_l+0x884>)
 8006208:	f105 35ff 	add.w	r5, r5, #4294967295
 800620c:	bfb8      	it	lt
 800620e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006210:	429d      	cmp	r5, r3
 8006212:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006216:	f280 80c9 	bge.w	80063ac <_strtod_l+0x864>
 800621a:	1b5b      	subs	r3, r3, r5
 800621c:	2b1f      	cmp	r3, #31
 800621e:	f04f 0701 	mov.w	r7, #1
 8006222:	eba2 0203 	sub.w	r2, r2, r3
 8006226:	f300 80b6 	bgt.w	8006396 <_strtod_l+0x84e>
 800622a:	2500      	movs	r5, #0
 800622c:	fa07 f303 	lsl.w	r3, r7, r3
 8006230:	930f      	str	r3, [sp, #60]	; 0x3c
 8006232:	18b7      	adds	r7, r6, r2
 8006234:	9b05      	ldr	r3, [sp, #20]
 8006236:	42be      	cmp	r6, r7
 8006238:	4414      	add	r4, r2
 800623a:	441c      	add	r4, r3
 800623c:	4633      	mov	r3, r6
 800623e:	bfa8      	it	ge
 8006240:	463b      	movge	r3, r7
 8006242:	42a3      	cmp	r3, r4
 8006244:	bfa8      	it	ge
 8006246:	4623      	movge	r3, r4
 8006248:	2b00      	cmp	r3, #0
 800624a:	bfc2      	ittt	gt
 800624c:	1aff      	subgt	r7, r7, r3
 800624e:	1ae4      	subgt	r4, r4, r3
 8006250:	1af6      	subgt	r6, r6, r3
 8006252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006254:	2b00      	cmp	r3, #0
 8006256:	dd17      	ble.n	8006288 <_strtod_l+0x740>
 8006258:	461a      	mov	r2, r3
 800625a:	4650      	mov	r0, sl
 800625c:	9904      	ldr	r1, [sp, #16]
 800625e:	f001 ff0f 	bl	8008080 <__pow5mult>
 8006262:	9004      	str	r0, [sp, #16]
 8006264:	2800      	cmp	r0, #0
 8006266:	f43f aeb2 	beq.w	8005fce <_strtod_l+0x486>
 800626a:	4601      	mov	r1, r0
 800626c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800626e:	4650      	mov	r0, sl
 8006270:	f001 fe62 	bl	8007f38 <__multiply>
 8006274:	9009      	str	r0, [sp, #36]	; 0x24
 8006276:	2800      	cmp	r0, #0
 8006278:	f43f aea9 	beq.w	8005fce <_strtod_l+0x486>
 800627c:	4650      	mov	r0, sl
 800627e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006280:	f001 fd40 	bl	8007d04 <_Bfree>
 8006284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006286:	931c      	str	r3, [sp, #112]	; 0x70
 8006288:	2f00      	cmp	r7, #0
 800628a:	f300 8093 	bgt.w	80063b4 <_strtod_l+0x86c>
 800628e:	9b07      	ldr	r3, [sp, #28]
 8006290:	2b00      	cmp	r3, #0
 8006292:	dd08      	ble.n	80062a6 <_strtod_l+0x75e>
 8006294:	4650      	mov	r0, sl
 8006296:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006298:	9906      	ldr	r1, [sp, #24]
 800629a:	f001 fef1 	bl	8008080 <__pow5mult>
 800629e:	9006      	str	r0, [sp, #24]
 80062a0:	2800      	cmp	r0, #0
 80062a2:	f43f ae94 	beq.w	8005fce <_strtod_l+0x486>
 80062a6:	2c00      	cmp	r4, #0
 80062a8:	dd08      	ble.n	80062bc <_strtod_l+0x774>
 80062aa:	4622      	mov	r2, r4
 80062ac:	4650      	mov	r0, sl
 80062ae:	9906      	ldr	r1, [sp, #24]
 80062b0:	f001 ff40 	bl	8008134 <__lshift>
 80062b4:	9006      	str	r0, [sp, #24]
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f43f ae89 	beq.w	8005fce <_strtod_l+0x486>
 80062bc:	2e00      	cmp	r6, #0
 80062be:	dd08      	ble.n	80062d2 <_strtod_l+0x78a>
 80062c0:	4632      	mov	r2, r6
 80062c2:	4650      	mov	r0, sl
 80062c4:	9904      	ldr	r1, [sp, #16]
 80062c6:	f001 ff35 	bl	8008134 <__lshift>
 80062ca:	9004      	str	r0, [sp, #16]
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f43f ae7e 	beq.w	8005fce <_strtod_l+0x486>
 80062d2:	4650      	mov	r0, sl
 80062d4:	9a06      	ldr	r2, [sp, #24]
 80062d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80062d8:	f001 ffb4 	bl	8008244 <__mdiff>
 80062dc:	4683      	mov	fp, r0
 80062de:	2800      	cmp	r0, #0
 80062e0:	f43f ae75 	beq.w	8005fce <_strtod_l+0x486>
 80062e4:	2400      	movs	r4, #0
 80062e6:	68c3      	ldr	r3, [r0, #12]
 80062e8:	9904      	ldr	r1, [sp, #16]
 80062ea:	60c4      	str	r4, [r0, #12]
 80062ec:	930d      	str	r3, [sp, #52]	; 0x34
 80062ee:	f001 ff8d 	bl	800820c <__mcmp>
 80062f2:	42a0      	cmp	r0, r4
 80062f4:	da70      	bge.n	80063d8 <_strtod_l+0x890>
 80062f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062f8:	ea53 0308 	orrs.w	r3, r3, r8
 80062fc:	f040 8096 	bne.w	800642c <_strtod_l+0x8e4>
 8006300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 8091 	bne.w	800642c <_strtod_l+0x8e4>
 800630a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800630e:	0d1b      	lsrs	r3, r3, #20
 8006310:	051b      	lsls	r3, r3, #20
 8006312:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006316:	f240 8089 	bls.w	800642c <_strtod_l+0x8e4>
 800631a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800631e:	b923      	cbnz	r3, 800632a <_strtod_l+0x7e2>
 8006320:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006324:	2b01      	cmp	r3, #1
 8006326:	f340 8081 	ble.w	800642c <_strtod_l+0x8e4>
 800632a:	4659      	mov	r1, fp
 800632c:	2201      	movs	r2, #1
 800632e:	4650      	mov	r0, sl
 8006330:	f001 ff00 	bl	8008134 <__lshift>
 8006334:	9904      	ldr	r1, [sp, #16]
 8006336:	4683      	mov	fp, r0
 8006338:	f001 ff68 	bl	800820c <__mcmp>
 800633c:	2800      	cmp	r0, #0
 800633e:	dd75      	ble.n	800642c <_strtod_l+0x8e4>
 8006340:	9905      	ldr	r1, [sp, #20]
 8006342:	464b      	mov	r3, r9
 8006344:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <_strtod_l+0x888>)
 8006346:	2900      	cmp	r1, #0
 8006348:	f000 8091 	beq.w	800646e <_strtod_l+0x926>
 800634c:	ea02 0109 	and.w	r1, r2, r9
 8006350:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006354:	f300 808b 	bgt.w	800646e <_strtod_l+0x926>
 8006358:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800635c:	f77f aea9 	ble.w	80060b2 <_strtod_l+0x56a>
 8006360:	2300      	movs	r3, #0
 8006362:	4a1c      	ldr	r2, [pc, #112]	; (80063d4 <_strtod_l+0x88c>)
 8006364:	4640      	mov	r0, r8
 8006366:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800636a:	4649      	mov	r1, r9
 800636c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006370:	f7fa f8b2 	bl	80004d8 <__aeabi_dmul>
 8006374:	460b      	mov	r3, r1
 8006376:	4303      	orrs	r3, r0
 8006378:	bf08      	it	eq
 800637a:	2322      	moveq	r3, #34	; 0x22
 800637c:	4680      	mov	r8, r0
 800637e:	4689      	mov	r9, r1
 8006380:	bf08      	it	eq
 8006382:	f8ca 3000 	streq.w	r3, [sl]
 8006386:	e62d      	b.n	8005fe4 <_strtod_l+0x49c>
 8006388:	f04f 32ff 	mov.w	r2, #4294967295
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	ea03 0808 	and.w	r8, r3, r8
 8006394:	e6db      	b.n	800614e <_strtod_l+0x606>
 8006396:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800639a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800639e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80063a2:	35e2      	adds	r5, #226	; 0xe2
 80063a4:	fa07 f505 	lsl.w	r5, r7, r5
 80063a8:	970f      	str	r7, [sp, #60]	; 0x3c
 80063aa:	e742      	b.n	8006232 <_strtod_l+0x6ea>
 80063ac:	2301      	movs	r3, #1
 80063ae:	2500      	movs	r5, #0
 80063b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80063b2:	e73e      	b.n	8006232 <_strtod_l+0x6ea>
 80063b4:	463a      	mov	r2, r7
 80063b6:	4650      	mov	r0, sl
 80063b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80063ba:	f001 febb 	bl	8008134 <__lshift>
 80063be:	901c      	str	r0, [sp, #112]	; 0x70
 80063c0:	2800      	cmp	r0, #0
 80063c2:	f47f af64 	bne.w	800628e <_strtod_l+0x746>
 80063c6:	e602      	b.n	8005fce <_strtod_l+0x486>
 80063c8:	0800a428 	.word	0x0800a428
 80063cc:	fffffc02 	.word	0xfffffc02
 80063d0:	7ff00000 	.word	0x7ff00000
 80063d4:	39500000 	.word	0x39500000
 80063d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063dc:	d166      	bne.n	80064ac <_strtod_l+0x964>
 80063de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063e4:	b35a      	cbz	r2, 800643e <_strtod_l+0x8f6>
 80063e6:	4a9c      	ldr	r2, [pc, #624]	; (8006658 <_strtod_l+0xb10>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d12c      	bne.n	8006446 <_strtod_l+0x8fe>
 80063ec:	9b05      	ldr	r3, [sp, #20]
 80063ee:	4640      	mov	r0, r8
 80063f0:	b303      	cbz	r3, 8006434 <_strtod_l+0x8ec>
 80063f2:	464b      	mov	r3, r9
 80063f4:	4a99      	ldr	r2, [pc, #612]	; (800665c <_strtod_l+0xb14>)
 80063f6:	f04f 31ff 	mov.w	r1, #4294967295
 80063fa:	401a      	ands	r2, r3
 80063fc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006400:	d81b      	bhi.n	800643a <_strtod_l+0x8f2>
 8006402:	0d12      	lsrs	r2, r2, #20
 8006404:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006408:	fa01 f303 	lsl.w	r3, r1, r3
 800640c:	4298      	cmp	r0, r3
 800640e:	d11a      	bne.n	8006446 <_strtod_l+0x8fe>
 8006410:	4b93      	ldr	r3, [pc, #588]	; (8006660 <_strtod_l+0xb18>)
 8006412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006414:	429a      	cmp	r2, r3
 8006416:	d102      	bne.n	800641e <_strtod_l+0x8d6>
 8006418:	3001      	adds	r0, #1
 800641a:	f43f add8 	beq.w	8005fce <_strtod_l+0x486>
 800641e:	f04f 0800 	mov.w	r8, #0
 8006422:	4b8e      	ldr	r3, [pc, #568]	; (800665c <_strtod_l+0xb14>)
 8006424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006426:	401a      	ands	r2, r3
 8006428:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800642c:	9b05      	ldr	r3, [sp, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d196      	bne.n	8006360 <_strtod_l+0x818>
 8006432:	e5d7      	b.n	8005fe4 <_strtod_l+0x49c>
 8006434:	f04f 33ff 	mov.w	r3, #4294967295
 8006438:	e7e8      	b.n	800640c <_strtod_l+0x8c4>
 800643a:	460b      	mov	r3, r1
 800643c:	e7e6      	b.n	800640c <_strtod_l+0x8c4>
 800643e:	ea53 0308 	orrs.w	r3, r3, r8
 8006442:	f43f af7d 	beq.w	8006340 <_strtod_l+0x7f8>
 8006446:	b1e5      	cbz	r5, 8006482 <_strtod_l+0x93a>
 8006448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644a:	421d      	tst	r5, r3
 800644c:	d0ee      	beq.n	800642c <_strtod_l+0x8e4>
 800644e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	9a05      	ldr	r2, [sp, #20]
 8006456:	b1c3      	cbz	r3, 800648a <_strtod_l+0x942>
 8006458:	f7ff fb54 	bl	8005b04 <sulp>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006464:	f7f9 fe82 	bl	800016c <__adddf3>
 8006468:	4680      	mov	r8, r0
 800646a:	4689      	mov	r9, r1
 800646c:	e7de      	b.n	800642c <_strtod_l+0x8e4>
 800646e:	4013      	ands	r3, r2
 8006470:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006474:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006478:	f04f 38ff 	mov.w	r8, #4294967295
 800647c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006480:	e7d4      	b.n	800642c <_strtod_l+0x8e4>
 8006482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006484:	ea13 0f08 	tst.w	r3, r8
 8006488:	e7e0      	b.n	800644c <_strtod_l+0x904>
 800648a:	f7ff fb3b 	bl	8005b04 <sulp>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006496:	f7f9 fe67 	bl	8000168 <__aeabi_dsub>
 800649a:	2200      	movs	r2, #0
 800649c:	2300      	movs	r3, #0
 800649e:	4680      	mov	r8, r0
 80064a0:	4689      	mov	r9, r1
 80064a2:	f7fa fa81 	bl	80009a8 <__aeabi_dcmpeq>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d0c0      	beq.n	800642c <_strtod_l+0x8e4>
 80064aa:	e602      	b.n	80060b2 <_strtod_l+0x56a>
 80064ac:	4658      	mov	r0, fp
 80064ae:	9904      	ldr	r1, [sp, #16]
 80064b0:	f002 f82e 	bl	8008510 <__ratio>
 80064b4:	2200      	movs	r2, #0
 80064b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064ba:	4606      	mov	r6, r0
 80064bc:	460f      	mov	r7, r1
 80064be:	f7fa fa87 	bl	80009d0 <__aeabi_dcmple>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d075      	beq.n	80065b2 <_strtod_l+0xa6a>
 80064c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d047      	beq.n	800655c <_strtod_l+0xa14>
 80064cc:	2600      	movs	r6, #0
 80064ce:	4f65      	ldr	r7, [pc, #404]	; (8006664 <_strtod_l+0xb1c>)
 80064d0:	4d64      	ldr	r5, [pc, #400]	; (8006664 <_strtod_l+0xb1c>)
 80064d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	0d1b      	lsrs	r3, r3, #20
 80064da:	051b      	lsls	r3, r3, #20
 80064dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80064de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064e0:	4b61      	ldr	r3, [pc, #388]	; (8006668 <_strtod_l+0xb20>)
 80064e2:	429a      	cmp	r2, r3
 80064e4:	f040 80c8 	bne.w	8006678 <_strtod_l+0xb30>
 80064e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064ec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80064f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f2:	4640      	mov	r0, r8
 80064f4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80064f8:	4649      	mov	r1, r9
 80064fa:	f001 ff33 	bl	8008364 <__ulp>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4630      	mov	r0, r6
 8006504:	4639      	mov	r1, r7
 8006506:	f7f9 ffe7 	bl	80004d8 <__aeabi_dmul>
 800650a:	4642      	mov	r2, r8
 800650c:	464b      	mov	r3, r9
 800650e:	f7f9 fe2d 	bl	800016c <__adddf3>
 8006512:	460b      	mov	r3, r1
 8006514:	4951      	ldr	r1, [pc, #324]	; (800665c <_strtod_l+0xb14>)
 8006516:	4a55      	ldr	r2, [pc, #340]	; (800666c <_strtod_l+0xb24>)
 8006518:	4019      	ands	r1, r3
 800651a:	4291      	cmp	r1, r2
 800651c:	4680      	mov	r8, r0
 800651e:	d95e      	bls.n	80065de <_strtod_l+0xa96>
 8006520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006522:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006526:	4293      	cmp	r3, r2
 8006528:	d103      	bne.n	8006532 <_strtod_l+0x9ea>
 800652a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652c:	3301      	adds	r3, #1
 800652e:	f43f ad4e 	beq.w	8005fce <_strtod_l+0x486>
 8006532:	f04f 38ff 	mov.w	r8, #4294967295
 8006536:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006660 <_strtod_l+0xb18>
 800653a:	4650      	mov	r0, sl
 800653c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800653e:	f001 fbe1 	bl	8007d04 <_Bfree>
 8006542:	4650      	mov	r0, sl
 8006544:	9906      	ldr	r1, [sp, #24]
 8006546:	f001 fbdd 	bl	8007d04 <_Bfree>
 800654a:	4650      	mov	r0, sl
 800654c:	9904      	ldr	r1, [sp, #16]
 800654e:	f001 fbd9 	bl	8007d04 <_Bfree>
 8006552:	4659      	mov	r1, fp
 8006554:	4650      	mov	r0, sl
 8006556:	f001 fbd5 	bl	8007d04 <_Bfree>
 800655a:	e61c      	b.n	8006196 <_strtod_l+0x64e>
 800655c:	f1b8 0f00 	cmp.w	r8, #0
 8006560:	d119      	bne.n	8006596 <_strtod_l+0xa4e>
 8006562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006568:	b9e3      	cbnz	r3, 80065a4 <_strtod_l+0xa5c>
 800656a:	2200      	movs	r2, #0
 800656c:	4630      	mov	r0, r6
 800656e:	4639      	mov	r1, r7
 8006570:	4b3c      	ldr	r3, [pc, #240]	; (8006664 <_strtod_l+0xb1c>)
 8006572:	f7fa fa23 	bl	80009bc <__aeabi_dcmplt>
 8006576:	b9c8      	cbnz	r0, 80065ac <_strtod_l+0xa64>
 8006578:	2200      	movs	r2, #0
 800657a:	4630      	mov	r0, r6
 800657c:	4639      	mov	r1, r7
 800657e:	4b3c      	ldr	r3, [pc, #240]	; (8006670 <_strtod_l+0xb28>)
 8006580:	f7f9 ffaa 	bl	80004d8 <__aeabi_dmul>
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800658c:	9418      	str	r4, [sp, #96]	; 0x60
 800658e:	9319      	str	r3, [sp, #100]	; 0x64
 8006590:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006594:	e79d      	b.n	80064d2 <_strtod_l+0x98a>
 8006596:	f1b8 0f01 	cmp.w	r8, #1
 800659a:	d103      	bne.n	80065a4 <_strtod_l+0xa5c>
 800659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f43f ad87 	beq.w	80060b2 <_strtod_l+0x56a>
 80065a4:	2600      	movs	r6, #0
 80065a6:	2400      	movs	r4, #0
 80065a8:	4f32      	ldr	r7, [pc, #200]	; (8006674 <_strtod_l+0xb2c>)
 80065aa:	e791      	b.n	80064d0 <_strtod_l+0x988>
 80065ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80065ae:	4d30      	ldr	r5, [pc, #192]	; (8006670 <_strtod_l+0xb28>)
 80065b0:	e7ea      	b.n	8006588 <_strtod_l+0xa40>
 80065b2:	4b2f      	ldr	r3, [pc, #188]	; (8006670 <_strtod_l+0xb28>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	4630      	mov	r0, r6
 80065b8:	4639      	mov	r1, r7
 80065ba:	f7f9 ff8d 	bl	80004d8 <__aeabi_dmul>
 80065be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065c0:	4604      	mov	r4, r0
 80065c2:	460d      	mov	r5, r1
 80065c4:	b933      	cbnz	r3, 80065d4 <_strtod_l+0xa8c>
 80065c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065ca:	9010      	str	r0, [sp, #64]	; 0x40
 80065cc:	9311      	str	r3, [sp, #68]	; 0x44
 80065ce:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80065d2:	e77e      	b.n	80064d2 <_strtod_l+0x98a>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80065dc:	e7f7      	b.n	80065ce <_strtod_l+0xa86>
 80065de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80065e2:	9b05      	ldr	r3, [sp, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1a8      	bne.n	800653a <_strtod_l+0x9f2>
 80065e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065ee:	0d1b      	lsrs	r3, r3, #20
 80065f0:	051b      	lsls	r3, r3, #20
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d1a1      	bne.n	800653a <_strtod_l+0x9f2>
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fa fbdb 	bl	8000db4 <__aeabi_d2lz>
 80065fe:	f7f9 ff3d 	bl	800047c <__aeabi_l2d>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4620      	mov	r0, r4
 8006608:	4629      	mov	r1, r5
 800660a:	f7f9 fdad 	bl	8000168 <__aeabi_dsub>
 800660e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006614:	ea43 0308 	orr.w	r3, r3, r8
 8006618:	4313      	orrs	r3, r2
 800661a:	4604      	mov	r4, r0
 800661c:	460d      	mov	r5, r1
 800661e:	d066      	beq.n	80066ee <_strtod_l+0xba6>
 8006620:	a309      	add	r3, pc, #36	; (adr r3, 8006648 <_strtod_l+0xb00>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7fa f9c9 	bl	80009bc <__aeabi_dcmplt>
 800662a:	2800      	cmp	r0, #0
 800662c:	f47f acda 	bne.w	8005fe4 <_strtod_l+0x49c>
 8006630:	a307      	add	r3, pc, #28	; (adr r3, 8006650 <_strtod_l+0xb08>)
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	4620      	mov	r0, r4
 8006638:	4629      	mov	r1, r5
 800663a:	f7fa f9dd 	bl	80009f8 <__aeabi_dcmpgt>
 800663e:	2800      	cmp	r0, #0
 8006640:	f43f af7b 	beq.w	800653a <_strtod_l+0x9f2>
 8006644:	e4ce      	b.n	8005fe4 <_strtod_l+0x49c>
 8006646:	bf00      	nop
 8006648:	94a03595 	.word	0x94a03595
 800664c:	3fdfffff 	.word	0x3fdfffff
 8006650:	35afe535 	.word	0x35afe535
 8006654:	3fe00000 	.word	0x3fe00000
 8006658:	000fffff 	.word	0x000fffff
 800665c:	7ff00000 	.word	0x7ff00000
 8006660:	7fefffff 	.word	0x7fefffff
 8006664:	3ff00000 	.word	0x3ff00000
 8006668:	7fe00000 	.word	0x7fe00000
 800666c:	7c9fffff 	.word	0x7c9fffff
 8006670:	3fe00000 	.word	0x3fe00000
 8006674:	bff00000 	.word	0xbff00000
 8006678:	9b05      	ldr	r3, [sp, #20]
 800667a:	b313      	cbz	r3, 80066c2 <_strtod_l+0xb7a>
 800667c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800667e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006682:	d81e      	bhi.n	80066c2 <_strtod_l+0xb7a>
 8006684:	a326      	add	r3, pc, #152	; (adr r3, 8006720 <_strtod_l+0xbd8>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	4620      	mov	r0, r4
 800668c:	4629      	mov	r1, r5
 800668e:	f7fa f99f 	bl	80009d0 <__aeabi_dcmple>
 8006692:	b190      	cbz	r0, 80066ba <_strtod_l+0xb72>
 8006694:	4629      	mov	r1, r5
 8006696:	4620      	mov	r0, r4
 8006698:	f7fa f9f6 	bl	8000a88 <__aeabi_d2uiz>
 800669c:	2801      	cmp	r0, #1
 800669e:	bf38      	it	cc
 80066a0:	2001      	movcc	r0, #1
 80066a2:	f7f9 fe9f 	bl	80003e4 <__aeabi_ui2d>
 80066a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a8:	4604      	mov	r4, r0
 80066aa:	460d      	mov	r5, r1
 80066ac:	b9d3      	cbnz	r3, 80066e4 <_strtod_l+0xb9c>
 80066ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066b2:	9012      	str	r0, [sp, #72]	; 0x48
 80066b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80066b6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80066ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066bc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80066c0:	1a9f      	subs	r7, r3, r2
 80066c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066c6:	f001 fe4d 	bl	8008364 <__ulp>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4630      	mov	r0, r6
 80066d0:	4639      	mov	r1, r7
 80066d2:	f7f9 ff01 	bl	80004d8 <__aeabi_dmul>
 80066d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066da:	f7f9 fd47 	bl	800016c <__adddf3>
 80066de:	4680      	mov	r8, r0
 80066e0:	4689      	mov	r9, r1
 80066e2:	e77e      	b.n	80065e2 <_strtod_l+0xa9a>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80066ec:	e7e3      	b.n	80066b6 <_strtod_l+0xb6e>
 80066ee:	a30e      	add	r3, pc, #56	; (adr r3, 8006728 <_strtod_l+0xbe0>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f7fa f962 	bl	80009bc <__aeabi_dcmplt>
 80066f8:	e7a1      	b.n	800663e <_strtod_l+0xaf6>
 80066fa:	2300      	movs	r3, #0
 80066fc:	930c      	str	r3, [sp, #48]	; 0x30
 80066fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006700:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	f7ff ba65 	b.w	8005bd2 <_strtod_l+0x8a>
 8006708:	2b65      	cmp	r3, #101	; 0x65
 800670a:	f43f ab5c 	beq.w	8005dc6 <_strtod_l+0x27e>
 800670e:	2b45      	cmp	r3, #69	; 0x45
 8006710:	f43f ab59 	beq.w	8005dc6 <_strtod_l+0x27e>
 8006714:	2201      	movs	r2, #1
 8006716:	f7ff bb8d 	b.w	8005e34 <_strtod_l+0x2ec>
 800671a:	bf00      	nop
 800671c:	f3af 8000 	nop.w
 8006720:	ffc00000 	.word	0xffc00000
 8006724:	41dfffff 	.word	0x41dfffff
 8006728:	94a03595 	.word	0x94a03595
 800672c:	3fcfffff 	.word	0x3fcfffff

08006730 <_strtod_r>:
 8006730:	4b01      	ldr	r3, [pc, #4]	; (8006738 <_strtod_r+0x8>)
 8006732:	f7ff ba09 	b.w	8005b48 <_strtod_l>
 8006736:	bf00      	nop
 8006738:	20000080 	.word	0x20000080

0800673c <_strtol_l.isra.0>:
 800673c:	2b01      	cmp	r3, #1
 800673e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006742:	4686      	mov	lr, r0
 8006744:	d001      	beq.n	800674a <_strtol_l.isra.0+0xe>
 8006746:	2b24      	cmp	r3, #36	; 0x24
 8006748:	d906      	bls.n	8006758 <_strtol_l.isra.0+0x1c>
 800674a:	f7fe fb13 	bl	8004d74 <__errno>
 800674e:	2316      	movs	r3, #22
 8006750:	6003      	str	r3, [r0, #0]
 8006752:	2000      	movs	r0, #0
 8006754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006758:	468c      	mov	ip, r1
 800675a:	4e3a      	ldr	r6, [pc, #232]	; (8006844 <_strtol_l.isra.0+0x108>)
 800675c:	4660      	mov	r0, ip
 800675e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006762:	5da5      	ldrb	r5, [r4, r6]
 8006764:	f015 0508 	ands.w	r5, r5, #8
 8006768:	d1f8      	bne.n	800675c <_strtol_l.isra.0+0x20>
 800676a:	2c2d      	cmp	r4, #45	; 0x2d
 800676c:	d133      	bne.n	80067d6 <_strtol_l.isra.0+0x9a>
 800676e:	f04f 0801 	mov.w	r8, #1
 8006772:	f89c 4000 	ldrb.w	r4, [ip]
 8006776:	f100 0c02 	add.w	ip, r0, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d05d      	beq.n	800683a <_strtol_l.isra.0+0xfe>
 800677e:	2b10      	cmp	r3, #16
 8006780:	d10c      	bne.n	800679c <_strtol_l.isra.0+0x60>
 8006782:	2c30      	cmp	r4, #48	; 0x30
 8006784:	d10a      	bne.n	800679c <_strtol_l.isra.0+0x60>
 8006786:	f89c 0000 	ldrb.w	r0, [ip]
 800678a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800678e:	2858      	cmp	r0, #88	; 0x58
 8006790:	d14e      	bne.n	8006830 <_strtol_l.isra.0+0xf4>
 8006792:	2310      	movs	r3, #16
 8006794:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006798:	f10c 0c02 	add.w	ip, ip, #2
 800679c:	2500      	movs	r5, #0
 800679e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80067a2:	3f01      	subs	r7, #1
 80067a4:	fbb7 f9f3 	udiv	r9, r7, r3
 80067a8:	4628      	mov	r0, r5
 80067aa:	fb03 7a19 	mls	sl, r3, r9, r7
 80067ae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80067b2:	2e09      	cmp	r6, #9
 80067b4:	d818      	bhi.n	80067e8 <_strtol_l.isra.0+0xac>
 80067b6:	4634      	mov	r4, r6
 80067b8:	42a3      	cmp	r3, r4
 80067ba:	dd24      	ble.n	8006806 <_strtol_l.isra.0+0xca>
 80067bc:	2d00      	cmp	r5, #0
 80067be:	db1f      	blt.n	8006800 <_strtol_l.isra.0+0xc4>
 80067c0:	4581      	cmp	r9, r0
 80067c2:	d31d      	bcc.n	8006800 <_strtol_l.isra.0+0xc4>
 80067c4:	d101      	bne.n	80067ca <_strtol_l.isra.0+0x8e>
 80067c6:	45a2      	cmp	sl, r4
 80067c8:	db1a      	blt.n	8006800 <_strtol_l.isra.0+0xc4>
 80067ca:	2501      	movs	r5, #1
 80067cc:	fb00 4003 	mla	r0, r0, r3, r4
 80067d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80067d4:	e7eb      	b.n	80067ae <_strtol_l.isra.0+0x72>
 80067d6:	2c2b      	cmp	r4, #43	; 0x2b
 80067d8:	bf08      	it	eq
 80067da:	f89c 4000 	ldrbeq.w	r4, [ip]
 80067de:	46a8      	mov	r8, r5
 80067e0:	bf08      	it	eq
 80067e2:	f100 0c02 	addeq.w	ip, r0, #2
 80067e6:	e7c8      	b.n	800677a <_strtol_l.isra.0+0x3e>
 80067e8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80067ec:	2e19      	cmp	r6, #25
 80067ee:	d801      	bhi.n	80067f4 <_strtol_l.isra.0+0xb8>
 80067f0:	3c37      	subs	r4, #55	; 0x37
 80067f2:	e7e1      	b.n	80067b8 <_strtol_l.isra.0+0x7c>
 80067f4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80067f8:	2e19      	cmp	r6, #25
 80067fa:	d804      	bhi.n	8006806 <_strtol_l.isra.0+0xca>
 80067fc:	3c57      	subs	r4, #87	; 0x57
 80067fe:	e7db      	b.n	80067b8 <_strtol_l.isra.0+0x7c>
 8006800:	f04f 35ff 	mov.w	r5, #4294967295
 8006804:	e7e4      	b.n	80067d0 <_strtol_l.isra.0+0x94>
 8006806:	2d00      	cmp	r5, #0
 8006808:	da08      	bge.n	800681c <_strtol_l.isra.0+0xe0>
 800680a:	2322      	movs	r3, #34	; 0x22
 800680c:	4638      	mov	r0, r7
 800680e:	f8ce 3000 	str.w	r3, [lr]
 8006812:	2a00      	cmp	r2, #0
 8006814:	d09e      	beq.n	8006754 <_strtol_l.isra.0+0x18>
 8006816:	f10c 31ff 	add.w	r1, ip, #4294967295
 800681a:	e007      	b.n	800682c <_strtol_l.isra.0+0xf0>
 800681c:	f1b8 0f00 	cmp.w	r8, #0
 8006820:	d000      	beq.n	8006824 <_strtol_l.isra.0+0xe8>
 8006822:	4240      	negs	r0, r0
 8006824:	2a00      	cmp	r2, #0
 8006826:	d095      	beq.n	8006754 <_strtol_l.isra.0+0x18>
 8006828:	2d00      	cmp	r5, #0
 800682a:	d1f4      	bne.n	8006816 <_strtol_l.isra.0+0xda>
 800682c:	6011      	str	r1, [r2, #0]
 800682e:	e791      	b.n	8006754 <_strtol_l.isra.0+0x18>
 8006830:	2430      	movs	r4, #48	; 0x30
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1b2      	bne.n	800679c <_strtol_l.isra.0+0x60>
 8006836:	2308      	movs	r3, #8
 8006838:	e7b0      	b.n	800679c <_strtol_l.isra.0+0x60>
 800683a:	2c30      	cmp	r4, #48	; 0x30
 800683c:	d0a3      	beq.n	8006786 <_strtol_l.isra.0+0x4a>
 800683e:	230a      	movs	r3, #10
 8006840:	e7ac      	b.n	800679c <_strtol_l.isra.0+0x60>
 8006842:	bf00      	nop
 8006844:	0800a451 	.word	0x0800a451

08006848 <_strtol_r>:
 8006848:	f7ff bf78 	b.w	800673c <_strtol_l.isra.0>

0800684c <quorem>:
 800684c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	6903      	ldr	r3, [r0, #16]
 8006852:	690c      	ldr	r4, [r1, #16]
 8006854:	4607      	mov	r7, r0
 8006856:	42a3      	cmp	r3, r4
 8006858:	f2c0 8083 	blt.w	8006962 <quorem+0x116>
 800685c:	3c01      	subs	r4, #1
 800685e:	f100 0514 	add.w	r5, r0, #20
 8006862:	f101 0814 	add.w	r8, r1, #20
 8006866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006874:	3301      	adds	r3, #1
 8006876:	429a      	cmp	r2, r3
 8006878:	fbb2 f6f3 	udiv	r6, r2, r3
 800687c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006884:	d332      	bcc.n	80068ec <quorem+0xa0>
 8006886:	f04f 0e00 	mov.w	lr, #0
 800688a:	4640      	mov	r0, r8
 800688c:	46ac      	mov	ip, r5
 800688e:	46f2      	mov	sl, lr
 8006890:	f850 2b04 	ldr.w	r2, [r0], #4
 8006894:	b293      	uxth	r3, r2
 8006896:	fb06 e303 	mla	r3, r6, r3, lr
 800689a:	0c12      	lsrs	r2, r2, #16
 800689c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80068a0:	fb06 e202 	mla	r2, r6, r2, lr
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	ebaa 0303 	sub.w	r3, sl, r3
 80068aa:	f8dc a000 	ldr.w	sl, [ip]
 80068ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068b2:	fa1f fa8a 	uxth.w	sl, sl
 80068b6:	4453      	add	r3, sl
 80068b8:	fa1f fa82 	uxth.w	sl, r2
 80068bc:	f8dc 2000 	ldr.w	r2, [ip]
 80068c0:	4581      	cmp	r9, r0
 80068c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80068c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068d4:	f84c 3b04 	str.w	r3, [ip], #4
 80068d8:	d2da      	bcs.n	8006890 <quorem+0x44>
 80068da:	f855 300b 	ldr.w	r3, [r5, fp]
 80068de:	b92b      	cbnz	r3, 80068ec <quorem+0xa0>
 80068e0:	9b01      	ldr	r3, [sp, #4]
 80068e2:	3b04      	subs	r3, #4
 80068e4:	429d      	cmp	r5, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	d32f      	bcc.n	800694a <quorem+0xfe>
 80068ea:	613c      	str	r4, [r7, #16]
 80068ec:	4638      	mov	r0, r7
 80068ee:	f001 fc8d 	bl	800820c <__mcmp>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	db25      	blt.n	8006942 <quorem+0xf6>
 80068f6:	4628      	mov	r0, r5
 80068f8:	f04f 0c00 	mov.w	ip, #0
 80068fc:	3601      	adds	r6, #1
 80068fe:	f858 1b04 	ldr.w	r1, [r8], #4
 8006902:	f8d0 e000 	ldr.w	lr, [r0]
 8006906:	b28b      	uxth	r3, r1
 8006908:	ebac 0303 	sub.w	r3, ip, r3
 800690c:	fa1f f28e 	uxth.w	r2, lr
 8006910:	4413      	add	r3, r2
 8006912:	0c0a      	lsrs	r2, r1, #16
 8006914:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006918:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800691c:	b29b      	uxth	r3, r3
 800691e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006922:	45c1      	cmp	r9, r8
 8006924:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006928:	f840 3b04 	str.w	r3, [r0], #4
 800692c:	d2e7      	bcs.n	80068fe <quorem+0xb2>
 800692e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006932:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006936:	b922      	cbnz	r2, 8006942 <quorem+0xf6>
 8006938:	3b04      	subs	r3, #4
 800693a:	429d      	cmp	r5, r3
 800693c:	461a      	mov	r2, r3
 800693e:	d30a      	bcc.n	8006956 <quorem+0x10a>
 8006940:	613c      	str	r4, [r7, #16]
 8006942:	4630      	mov	r0, r6
 8006944:	b003      	add	sp, #12
 8006946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	3b04      	subs	r3, #4
 800694e:	2a00      	cmp	r2, #0
 8006950:	d1cb      	bne.n	80068ea <quorem+0x9e>
 8006952:	3c01      	subs	r4, #1
 8006954:	e7c6      	b.n	80068e4 <quorem+0x98>
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	3b04      	subs	r3, #4
 800695a:	2a00      	cmp	r2, #0
 800695c:	d1f0      	bne.n	8006940 <quorem+0xf4>
 800695e:	3c01      	subs	r4, #1
 8006960:	e7eb      	b.n	800693a <quorem+0xee>
 8006962:	2000      	movs	r0, #0
 8006964:	e7ee      	b.n	8006944 <quorem+0xf8>
	...

08006968 <_dtoa_r>:
 8006968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	4616      	mov	r6, r2
 800696e:	461f      	mov	r7, r3
 8006970:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006972:	b099      	sub	sp, #100	; 0x64
 8006974:	4605      	mov	r5, r0
 8006976:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800697a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800697e:	b974      	cbnz	r4, 800699e <_dtoa_r+0x36>
 8006980:	2010      	movs	r0, #16
 8006982:	f001 f949 	bl	8007c18 <malloc>
 8006986:	4602      	mov	r2, r0
 8006988:	6268      	str	r0, [r5, #36]	; 0x24
 800698a:	b920      	cbnz	r0, 8006996 <_dtoa_r+0x2e>
 800698c:	21ea      	movs	r1, #234	; 0xea
 800698e:	4bae      	ldr	r3, [pc, #696]	; (8006c48 <_dtoa_r+0x2e0>)
 8006990:	48ae      	ldr	r0, [pc, #696]	; (8006c4c <_dtoa_r+0x2e4>)
 8006992:	f002 f875 	bl	8008a80 <__assert_func>
 8006996:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800699a:	6004      	str	r4, [r0, #0]
 800699c:	60c4      	str	r4, [r0, #12]
 800699e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069a0:	6819      	ldr	r1, [r3, #0]
 80069a2:	b151      	cbz	r1, 80069ba <_dtoa_r+0x52>
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	2301      	movs	r3, #1
 80069a8:	4093      	lsls	r3, r2
 80069aa:	604a      	str	r2, [r1, #4]
 80069ac:	608b      	str	r3, [r1, #8]
 80069ae:	4628      	mov	r0, r5
 80069b0:	f001 f9a8 	bl	8007d04 <_Bfree>
 80069b4:	2200      	movs	r2, #0
 80069b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	1e3b      	subs	r3, r7, #0
 80069bc:	bfaf      	iteee	ge
 80069be:	2300      	movge	r3, #0
 80069c0:	2201      	movlt	r2, #1
 80069c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069c6:	9305      	strlt	r3, [sp, #20]
 80069c8:	bfa8      	it	ge
 80069ca:	f8c8 3000 	strge.w	r3, [r8]
 80069ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80069d2:	4b9f      	ldr	r3, [pc, #636]	; (8006c50 <_dtoa_r+0x2e8>)
 80069d4:	bfb8      	it	lt
 80069d6:	f8c8 2000 	strlt.w	r2, [r8]
 80069da:	ea33 0309 	bics.w	r3, r3, r9
 80069de:	d119      	bne.n	8006a14 <_dtoa_r+0xac>
 80069e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80069e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069ec:	4333      	orrs	r3, r6
 80069ee:	f000 8580 	beq.w	80074f2 <_dtoa_r+0xb8a>
 80069f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069f4:	b953      	cbnz	r3, 8006a0c <_dtoa_r+0xa4>
 80069f6:	4b97      	ldr	r3, [pc, #604]	; (8006c54 <_dtoa_r+0x2ec>)
 80069f8:	e022      	b.n	8006a40 <_dtoa_r+0xd8>
 80069fa:	4b97      	ldr	r3, [pc, #604]	; (8006c58 <_dtoa_r+0x2f0>)
 80069fc:	9308      	str	r3, [sp, #32]
 80069fe:	3308      	adds	r3, #8
 8006a00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	9808      	ldr	r0, [sp, #32]
 8006a06:	b019      	add	sp, #100	; 0x64
 8006a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0c:	4b91      	ldr	r3, [pc, #580]	; (8006c54 <_dtoa_r+0x2ec>)
 8006a0e:	9308      	str	r3, [sp, #32]
 8006a10:	3303      	adds	r3, #3
 8006a12:	e7f5      	b.n	8006a00 <_dtoa_r+0x98>
 8006a14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a20:	2200      	movs	r2, #0
 8006a22:	2300      	movs	r3, #0
 8006a24:	f7f9 ffc0 	bl	80009a8 <__aeabi_dcmpeq>
 8006a28:	4680      	mov	r8, r0
 8006a2a:	b158      	cbz	r0, 8006a44 <_dtoa_r+0xdc>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8559 	beq.w	80074ec <_dtoa_r+0xb84>
 8006a3a:	4888      	ldr	r0, [pc, #544]	; (8006c5c <_dtoa_r+0x2f4>)
 8006a3c:	6018      	str	r0, [r3, #0]
 8006a3e:	1e43      	subs	r3, r0, #1
 8006a40:	9308      	str	r3, [sp, #32]
 8006a42:	e7df      	b.n	8006a04 <_dtoa_r+0x9c>
 8006a44:	ab16      	add	r3, sp, #88	; 0x58
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	ab17      	add	r3, sp, #92	; 0x5c
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a52:	f001 fd01 	bl	8008458 <__d2b>
 8006a56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006a5a:	4682      	mov	sl, r0
 8006a5c:	2c00      	cmp	r4, #0
 8006a5e:	d07e      	beq.n	8006b5e <_dtoa_r+0x1f6>
 8006a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006a6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006a72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006a76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4b78      	ldr	r3, [pc, #480]	; (8006c60 <_dtoa_r+0x2f8>)
 8006a7e:	f7f9 fb73 	bl	8000168 <__aeabi_dsub>
 8006a82:	a36b      	add	r3, pc, #428	; (adr r3, 8006c30 <_dtoa_r+0x2c8>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f7f9 fd26 	bl	80004d8 <__aeabi_dmul>
 8006a8c:	a36a      	add	r3, pc, #424	; (adr r3, 8006c38 <_dtoa_r+0x2d0>)
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	f7f9 fb6b 	bl	800016c <__adddf3>
 8006a96:	4606      	mov	r6, r0
 8006a98:	4620      	mov	r0, r4
 8006a9a:	460f      	mov	r7, r1
 8006a9c:	f7f9 fcb2 	bl	8000404 <__aeabi_i2d>
 8006aa0:	a367      	add	r3, pc, #412	; (adr r3, 8006c40 <_dtoa_r+0x2d8>)
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f7f9 fd17 	bl	80004d8 <__aeabi_dmul>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	f7f9 fb5b 	bl	800016c <__adddf3>
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	460f      	mov	r7, r1
 8006aba:	f7f9 ffbd 	bl	8000a38 <__aeabi_d2iz>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	4681      	mov	r9, r0
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	f7f9 ff78 	bl	80009bc <__aeabi_dcmplt>
 8006acc:	b148      	cbz	r0, 8006ae2 <_dtoa_r+0x17a>
 8006ace:	4648      	mov	r0, r9
 8006ad0:	f7f9 fc98 	bl	8000404 <__aeabi_i2d>
 8006ad4:	4632      	mov	r2, r6
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	f7f9 ff66 	bl	80009a8 <__aeabi_dcmpeq>
 8006adc:	b908      	cbnz	r0, 8006ae2 <_dtoa_r+0x17a>
 8006ade:	f109 39ff 	add.w	r9, r9, #4294967295
 8006ae2:	f1b9 0f16 	cmp.w	r9, #22
 8006ae6:	d857      	bhi.n	8006b98 <_dtoa_r+0x230>
 8006ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006aec:	4b5d      	ldr	r3, [pc, #372]	; (8006c64 <_dtoa_r+0x2fc>)
 8006aee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f7f9 ff61 	bl	80009bc <__aeabi_dcmplt>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d04e      	beq.n	8006b9c <_dtoa_r+0x234>
 8006afe:	2300      	movs	r3, #0
 8006b00:	f109 39ff 	add.w	r9, r9, #4294967295
 8006b04:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b08:	1b1c      	subs	r4, r3, r4
 8006b0a:	1e63      	subs	r3, r4, #1
 8006b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0e:	bf49      	itett	mi
 8006b10:	f1c4 0301 	rsbmi	r3, r4, #1
 8006b14:	2300      	movpl	r3, #0
 8006b16:	9306      	strmi	r3, [sp, #24]
 8006b18:	2300      	movmi	r3, #0
 8006b1a:	bf54      	ite	pl
 8006b1c:	9306      	strpl	r3, [sp, #24]
 8006b1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006b20:	f1b9 0f00 	cmp.w	r9, #0
 8006b24:	db3c      	blt.n	8006ba0 <_dtoa_r+0x238>
 8006b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b28:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b2c:	444b      	add	r3, r9
 8006b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b30:	2300      	movs	r3, #0
 8006b32:	930a      	str	r3, [sp, #40]	; 0x28
 8006b34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b36:	2b09      	cmp	r3, #9
 8006b38:	d86c      	bhi.n	8006c14 <_dtoa_r+0x2ac>
 8006b3a:	2b05      	cmp	r3, #5
 8006b3c:	bfc4      	itt	gt
 8006b3e:	3b04      	subgt	r3, #4
 8006b40:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006b42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b44:	bfc8      	it	gt
 8006b46:	2400      	movgt	r4, #0
 8006b48:	f1a3 0302 	sub.w	r3, r3, #2
 8006b4c:	bfd8      	it	le
 8006b4e:	2401      	movle	r4, #1
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	f200 808b 	bhi.w	8006c6c <_dtoa_r+0x304>
 8006b56:	e8df f003 	tbb	[pc, r3]
 8006b5a:	4f2d      	.short	0x4f2d
 8006b5c:	5b4d      	.short	0x5b4d
 8006b5e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006b62:	441c      	add	r4, r3
 8006b64:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	bfc3      	ittte	gt
 8006b6c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b70:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006b74:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b78:	f1c3 0320 	rsble	r3, r3, #32
 8006b7c:	bfc6      	itte	gt
 8006b7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b82:	4318      	orrgt	r0, r3
 8006b84:	fa06 f003 	lslle.w	r0, r6, r3
 8006b88:	f7f9 fc2c 	bl	80003e4 <__aeabi_ui2d>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006b92:	3c01      	subs	r4, #1
 8006b94:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b96:	e770      	b.n	8006a7a <_dtoa_r+0x112>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e7b3      	b.n	8006b04 <_dtoa_r+0x19c>
 8006b9c:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b9e:	e7b2      	b.n	8006b06 <_dtoa_r+0x19e>
 8006ba0:	9b06      	ldr	r3, [sp, #24]
 8006ba2:	eba3 0309 	sub.w	r3, r3, r9
 8006ba6:	9306      	str	r3, [sp, #24]
 8006ba8:	f1c9 0300 	rsb	r3, r9, #0
 8006bac:	930a      	str	r3, [sp, #40]	; 0x28
 8006bae:	2300      	movs	r3, #0
 8006bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8006bb2:	e7bf      	b.n	8006b34 <_dtoa_r+0x1cc>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	dc59      	bgt.n	8006c72 <_dtoa_r+0x30a>
 8006bbe:	f04f 0b01 	mov.w	fp, #1
 8006bc2:	465b      	mov	r3, fp
 8006bc4:	f8cd b008 	str.w	fp, [sp, #8]
 8006bc8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006bcc:	2200      	movs	r2, #0
 8006bce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006bd0:	6042      	str	r2, [r0, #4]
 8006bd2:	2204      	movs	r2, #4
 8006bd4:	f102 0614 	add.w	r6, r2, #20
 8006bd8:	429e      	cmp	r6, r3
 8006bda:	6841      	ldr	r1, [r0, #4]
 8006bdc:	d94f      	bls.n	8006c7e <_dtoa_r+0x316>
 8006bde:	4628      	mov	r0, r5
 8006be0:	f001 f850 	bl	8007c84 <_Balloc>
 8006be4:	9008      	str	r0, [sp, #32]
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d14d      	bne.n	8006c86 <_dtoa_r+0x31e>
 8006bea:	4602      	mov	r2, r0
 8006bec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bf0:	4b1d      	ldr	r3, [pc, #116]	; (8006c68 <_dtoa_r+0x300>)
 8006bf2:	e6cd      	b.n	8006990 <_dtoa_r+0x28>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e7de      	b.n	8006bb6 <_dtoa_r+0x24e>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bfe:	eb09 0b03 	add.w	fp, r9, r3
 8006c02:	f10b 0301 	add.w	r3, fp, #1
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	9302      	str	r3, [sp, #8]
 8006c0a:	bfb8      	it	lt
 8006c0c:	2301      	movlt	r3, #1
 8006c0e:	e7dd      	b.n	8006bcc <_dtoa_r+0x264>
 8006c10:	2301      	movs	r3, #1
 8006c12:	e7f2      	b.n	8006bfa <_dtoa_r+0x292>
 8006c14:	2401      	movs	r4, #1
 8006c16:	2300      	movs	r3, #0
 8006c18:	940b      	str	r4, [sp, #44]	; 0x2c
 8006c1a:	9322      	str	r3, [sp, #136]	; 0x88
 8006c1c:	f04f 3bff 	mov.w	fp, #4294967295
 8006c20:	2200      	movs	r2, #0
 8006c22:	2312      	movs	r3, #18
 8006c24:	f8cd b008 	str.w	fp, [sp, #8]
 8006c28:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c2a:	e7cf      	b.n	8006bcc <_dtoa_r+0x264>
 8006c2c:	f3af 8000 	nop.w
 8006c30:	636f4361 	.word	0x636f4361
 8006c34:	3fd287a7 	.word	0x3fd287a7
 8006c38:	8b60c8b3 	.word	0x8b60c8b3
 8006c3c:	3fc68a28 	.word	0x3fc68a28
 8006c40:	509f79fb 	.word	0x509f79fb
 8006c44:	3fd34413 	.word	0x3fd34413
 8006c48:	0800a55e 	.word	0x0800a55e
 8006c4c:	0800a575 	.word	0x0800a575
 8006c50:	7ff00000 	.word	0x7ff00000
 8006c54:	0800a55a 	.word	0x0800a55a
 8006c58:	0800a551 	.word	0x0800a551
 8006c5c:	0800a3d1 	.word	0x0800a3d1
 8006c60:	3ff80000 	.word	0x3ff80000
 8006c64:	0800a6f0 	.word	0x0800a6f0
 8006c68:	0800a5d4 	.word	0x0800a5d4
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c70:	e7d4      	b.n	8006c1c <_dtoa_r+0x2b4>
 8006c72:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006c76:	465b      	mov	r3, fp
 8006c78:	f8cd b008 	str.w	fp, [sp, #8]
 8006c7c:	e7a6      	b.n	8006bcc <_dtoa_r+0x264>
 8006c7e:	3101      	adds	r1, #1
 8006c80:	6041      	str	r1, [r0, #4]
 8006c82:	0052      	lsls	r2, r2, #1
 8006c84:	e7a6      	b.n	8006bd4 <_dtoa_r+0x26c>
 8006c86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c88:	9a08      	ldr	r2, [sp, #32]
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	9b02      	ldr	r3, [sp, #8]
 8006c8e:	2b0e      	cmp	r3, #14
 8006c90:	f200 80a8 	bhi.w	8006de4 <_dtoa_r+0x47c>
 8006c94:	2c00      	cmp	r4, #0
 8006c96:	f000 80a5 	beq.w	8006de4 <_dtoa_r+0x47c>
 8006c9a:	f1b9 0f00 	cmp.w	r9, #0
 8006c9e:	dd34      	ble.n	8006d0a <_dtoa_r+0x3a2>
 8006ca0:	4a9a      	ldr	r2, [pc, #616]	; (8006f0c <_dtoa_r+0x5a4>)
 8006ca2:	f009 030f 	and.w	r3, r9, #15
 8006ca6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006caa:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006cae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006cb6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006cba:	d016      	beq.n	8006cea <_dtoa_r+0x382>
 8006cbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cc0:	4b93      	ldr	r3, [pc, #588]	; (8006f10 <_dtoa_r+0x5a8>)
 8006cc2:	2703      	movs	r7, #3
 8006cc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cc8:	f7f9 fd30 	bl	800072c <__aeabi_ddiv>
 8006ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cd0:	f004 040f 	and.w	r4, r4, #15
 8006cd4:	4e8e      	ldr	r6, [pc, #568]	; (8006f10 <_dtoa_r+0x5a8>)
 8006cd6:	b954      	cbnz	r4, 8006cee <_dtoa_r+0x386>
 8006cd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ce0:	f7f9 fd24 	bl	800072c <__aeabi_ddiv>
 8006ce4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ce8:	e029      	b.n	8006d3e <_dtoa_r+0x3d6>
 8006cea:	2702      	movs	r7, #2
 8006cec:	e7f2      	b.n	8006cd4 <_dtoa_r+0x36c>
 8006cee:	07e1      	lsls	r1, r4, #31
 8006cf0:	d508      	bpl.n	8006d04 <_dtoa_r+0x39c>
 8006cf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cf6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cfa:	f7f9 fbed 	bl	80004d8 <__aeabi_dmul>
 8006cfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d02:	3701      	adds	r7, #1
 8006d04:	1064      	asrs	r4, r4, #1
 8006d06:	3608      	adds	r6, #8
 8006d08:	e7e5      	b.n	8006cd6 <_dtoa_r+0x36e>
 8006d0a:	f000 80a5 	beq.w	8006e58 <_dtoa_r+0x4f0>
 8006d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d12:	f1c9 0400 	rsb	r4, r9, #0
 8006d16:	4b7d      	ldr	r3, [pc, #500]	; (8006f0c <_dtoa_r+0x5a4>)
 8006d18:	f004 020f 	and.w	r2, r4, #15
 8006d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f7f9 fbd8 	bl	80004d8 <__aeabi_dmul>
 8006d28:	2702      	movs	r7, #2
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d30:	4e77      	ldr	r6, [pc, #476]	; (8006f10 <_dtoa_r+0x5a8>)
 8006d32:	1124      	asrs	r4, r4, #4
 8006d34:	2c00      	cmp	r4, #0
 8006d36:	f040 8084 	bne.w	8006e42 <_dtoa_r+0x4da>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1d2      	bne.n	8006ce4 <_dtoa_r+0x37c>
 8006d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 808b 	beq.w	8006e5c <_dtoa_r+0x4f4>
 8006d46:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006d4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006d4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d52:	2200      	movs	r2, #0
 8006d54:	4b6f      	ldr	r3, [pc, #444]	; (8006f14 <_dtoa_r+0x5ac>)
 8006d56:	f7f9 fe31 	bl	80009bc <__aeabi_dcmplt>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d07e      	beq.n	8006e5c <_dtoa_r+0x4f4>
 8006d5e:	9b02      	ldr	r3, [sp, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d07b      	beq.n	8006e5c <_dtoa_r+0x4f4>
 8006d64:	f1bb 0f00 	cmp.w	fp, #0
 8006d68:	dd38      	ble.n	8006ddc <_dtoa_r+0x474>
 8006d6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d6e:	2200      	movs	r2, #0
 8006d70:	4b69      	ldr	r3, [pc, #420]	; (8006f18 <_dtoa_r+0x5b0>)
 8006d72:	f7f9 fbb1 	bl	80004d8 <__aeabi_dmul>
 8006d76:	465c      	mov	r4, fp
 8006d78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d7c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006d80:	3701      	adds	r7, #1
 8006d82:	4638      	mov	r0, r7
 8006d84:	f7f9 fb3e 	bl	8000404 <__aeabi_i2d>
 8006d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d8c:	f7f9 fba4 	bl	80004d8 <__aeabi_dmul>
 8006d90:	2200      	movs	r2, #0
 8006d92:	4b62      	ldr	r3, [pc, #392]	; (8006f1c <_dtoa_r+0x5b4>)
 8006d94:	f7f9 f9ea 	bl	800016c <__adddf3>
 8006d98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006d9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006da0:	9611      	str	r6, [sp, #68]	; 0x44
 8006da2:	2c00      	cmp	r4, #0
 8006da4:	d15d      	bne.n	8006e62 <_dtoa_r+0x4fa>
 8006da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006daa:	2200      	movs	r2, #0
 8006dac:	4b5c      	ldr	r3, [pc, #368]	; (8006f20 <_dtoa_r+0x5b8>)
 8006dae:	f7f9 f9db 	bl	8000168 <__aeabi_dsub>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dba:	4633      	mov	r3, r6
 8006dbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006dbe:	f7f9 fe1b 	bl	80009f8 <__aeabi_dcmpgt>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	f040 829e 	bne.w	8007304 <_dtoa_r+0x99c>
 8006dc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006dce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006dd2:	f7f9 fdf3 	bl	80009bc <__aeabi_dcmplt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f040 8292 	bne.w	8007300 <_dtoa_r+0x998>
 8006ddc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006de0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006de4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f2c0 8153 	blt.w	8007092 <_dtoa_r+0x72a>
 8006dec:	f1b9 0f0e 	cmp.w	r9, #14
 8006df0:	f300 814f 	bgt.w	8007092 <_dtoa_r+0x72a>
 8006df4:	4b45      	ldr	r3, [pc, #276]	; (8006f0c <_dtoa_r+0x5a4>)
 8006df6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006dfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006dfe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006e02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f280 80db 	bge.w	8006fc0 <_dtoa_r+0x658>
 8006e0a:	9b02      	ldr	r3, [sp, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f300 80d7 	bgt.w	8006fc0 <_dtoa_r+0x658>
 8006e12:	f040 8274 	bne.w	80072fe <_dtoa_r+0x996>
 8006e16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4b40      	ldr	r3, [pc, #256]	; (8006f20 <_dtoa_r+0x5b8>)
 8006e1e:	f7f9 fb5b 	bl	80004d8 <__aeabi_dmul>
 8006e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e26:	f7f9 fddd 	bl	80009e4 <__aeabi_dcmpge>
 8006e2a:	9c02      	ldr	r4, [sp, #8]
 8006e2c:	4626      	mov	r6, r4
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f040 824a 	bne.w	80072c8 <_dtoa_r+0x960>
 8006e34:	2331      	movs	r3, #49	; 0x31
 8006e36:	9f08      	ldr	r7, [sp, #32]
 8006e38:	f109 0901 	add.w	r9, r9, #1
 8006e3c:	f807 3b01 	strb.w	r3, [r7], #1
 8006e40:	e246      	b.n	80072d0 <_dtoa_r+0x968>
 8006e42:	07e2      	lsls	r2, r4, #31
 8006e44:	d505      	bpl.n	8006e52 <_dtoa_r+0x4ea>
 8006e46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e4a:	f7f9 fb45 	bl	80004d8 <__aeabi_dmul>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	3701      	adds	r7, #1
 8006e52:	1064      	asrs	r4, r4, #1
 8006e54:	3608      	adds	r6, #8
 8006e56:	e76d      	b.n	8006d34 <_dtoa_r+0x3cc>
 8006e58:	2702      	movs	r7, #2
 8006e5a:	e770      	b.n	8006d3e <_dtoa_r+0x3d6>
 8006e5c:	46c8      	mov	r8, r9
 8006e5e:	9c02      	ldr	r4, [sp, #8]
 8006e60:	e78f      	b.n	8006d82 <_dtoa_r+0x41a>
 8006e62:	9908      	ldr	r1, [sp, #32]
 8006e64:	4b29      	ldr	r3, [pc, #164]	; (8006f0c <_dtoa_r+0x5a4>)
 8006e66:	4421      	add	r1, r4
 8006e68:	9112      	str	r1, [sp, #72]	; 0x48
 8006e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006e74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d055      	beq.n	8006f28 <_dtoa_r+0x5c0>
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	4929      	ldr	r1, [pc, #164]	; (8006f24 <_dtoa_r+0x5bc>)
 8006e80:	f7f9 fc54 	bl	800072c <__aeabi_ddiv>
 8006e84:	463b      	mov	r3, r7
 8006e86:	4632      	mov	r2, r6
 8006e88:	f7f9 f96e 	bl	8000168 <__aeabi_dsub>
 8006e8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e90:	9f08      	ldr	r7, [sp, #32]
 8006e92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e96:	f7f9 fdcf 	bl	8000a38 <__aeabi_d2iz>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	f7f9 fab2 	bl	8000404 <__aeabi_i2d>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ea8:	f7f9 f95e 	bl	8000168 <__aeabi_dsub>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	3430      	adds	r4, #48	; 0x30
 8006eb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006eb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006eba:	f807 4b01 	strb.w	r4, [r7], #1
 8006ebe:	f7f9 fd7d 	bl	80009bc <__aeabi_dcmplt>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d174      	bne.n	8006fb0 <_dtoa_r+0x648>
 8006ec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eca:	2000      	movs	r0, #0
 8006ecc:	4911      	ldr	r1, [pc, #68]	; (8006f14 <_dtoa_r+0x5ac>)
 8006ece:	f7f9 f94b 	bl	8000168 <__aeabi_dsub>
 8006ed2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ed6:	f7f9 fd71 	bl	80009bc <__aeabi_dcmplt>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f040 80b6 	bne.w	800704c <_dtoa_r+0x6e4>
 8006ee0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ee2:	429f      	cmp	r7, r3
 8006ee4:	f43f af7a 	beq.w	8006ddc <_dtoa_r+0x474>
 8006ee8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006eec:	2200      	movs	r2, #0
 8006eee:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <_dtoa_r+0x5b0>)
 8006ef0:	f7f9 faf2 	bl	80004d8 <__aeabi_dmul>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <_dtoa_r+0x5b0>)
 8006f00:	f7f9 faea 	bl	80004d8 <__aeabi_dmul>
 8006f04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f08:	e7c3      	b.n	8006e92 <_dtoa_r+0x52a>
 8006f0a:	bf00      	nop
 8006f0c:	0800a6f0 	.word	0x0800a6f0
 8006f10:	0800a6c8 	.word	0x0800a6c8
 8006f14:	3ff00000 	.word	0x3ff00000
 8006f18:	40240000 	.word	0x40240000
 8006f1c:	401c0000 	.word	0x401c0000
 8006f20:	40140000 	.word	0x40140000
 8006f24:	3fe00000 	.word	0x3fe00000
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 fad4 	bl	80004d8 <__aeabi_dmul>
 8006f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f36:	9c08      	ldr	r4, [sp, #32]
 8006f38:	9314      	str	r3, [sp, #80]	; 0x50
 8006f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f3e:	f7f9 fd7b 	bl	8000a38 <__aeabi_d2iz>
 8006f42:	9015      	str	r0, [sp, #84]	; 0x54
 8006f44:	f7f9 fa5e 	bl	8000404 <__aeabi_i2d>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f50:	f7f9 f90a 	bl	8000168 <__aeabi_dsub>
 8006f54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f56:	4606      	mov	r6, r0
 8006f58:	3330      	adds	r3, #48	; 0x30
 8006f5a:	f804 3b01 	strb.w	r3, [r4], #1
 8006f5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f60:	460f      	mov	r7, r1
 8006f62:	429c      	cmp	r4, r3
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	d124      	bne.n	8006fb4 <_dtoa_r+0x64c>
 8006f6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f6e:	4bb3      	ldr	r3, [pc, #716]	; (800723c <_dtoa_r+0x8d4>)
 8006f70:	f7f9 f8fc 	bl	800016c <__adddf3>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4630      	mov	r0, r6
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 fd3c 	bl	80009f8 <__aeabi_dcmpgt>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d162      	bne.n	800704a <_dtoa_r+0x6e2>
 8006f84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f88:	2000      	movs	r0, #0
 8006f8a:	49ac      	ldr	r1, [pc, #688]	; (800723c <_dtoa_r+0x8d4>)
 8006f8c:	f7f9 f8ec 	bl	8000168 <__aeabi_dsub>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4630      	mov	r0, r6
 8006f96:	4639      	mov	r1, r7
 8006f98:	f7f9 fd10 	bl	80009bc <__aeabi_dcmplt>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f43f af1d 	beq.w	8006ddc <_dtoa_r+0x474>
 8006fa2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006fa4:	1e7b      	subs	r3, r7, #1
 8006fa6:	9314      	str	r3, [sp, #80]	; 0x50
 8006fa8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006fac:	2b30      	cmp	r3, #48	; 0x30
 8006fae:	d0f8      	beq.n	8006fa2 <_dtoa_r+0x63a>
 8006fb0:	46c1      	mov	r9, r8
 8006fb2:	e03a      	b.n	800702a <_dtoa_r+0x6c2>
 8006fb4:	4ba2      	ldr	r3, [pc, #648]	; (8007240 <_dtoa_r+0x8d8>)
 8006fb6:	f7f9 fa8f 	bl	80004d8 <__aeabi_dmul>
 8006fba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fbe:	e7bc      	b.n	8006f3a <_dtoa_r+0x5d2>
 8006fc0:	9f08      	ldr	r7, [sp, #32]
 8006fc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fca:	f7f9 fbaf 	bl	800072c <__aeabi_ddiv>
 8006fce:	f7f9 fd33 	bl	8000a38 <__aeabi_d2iz>
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	f7f9 fa16 	bl	8000404 <__aeabi_i2d>
 8006fd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fdc:	f7f9 fa7c 	bl	80004d8 <__aeabi_dmul>
 8006fe0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fec:	f7f9 f8bc 	bl	8000168 <__aeabi_dsub>
 8006ff0:	f807 6b01 	strb.w	r6, [r7], #1
 8006ff4:	9e08      	ldr	r6, [sp, #32]
 8006ff6:	9b02      	ldr	r3, [sp, #8]
 8006ff8:	1bbe      	subs	r6, r7, r6
 8006ffa:	42b3      	cmp	r3, r6
 8006ffc:	d13a      	bne.n	8007074 <_dtoa_r+0x70c>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	f7f9 f8b3 	bl	800016c <__adddf3>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800700e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007012:	f7f9 fcf1 	bl	80009f8 <__aeabi_dcmpgt>
 8007016:	bb58      	cbnz	r0, 8007070 <_dtoa_r+0x708>
 8007018:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800701c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007020:	f7f9 fcc2 	bl	80009a8 <__aeabi_dcmpeq>
 8007024:	b108      	cbz	r0, 800702a <_dtoa_r+0x6c2>
 8007026:	07e1      	lsls	r1, r4, #31
 8007028:	d422      	bmi.n	8007070 <_dtoa_r+0x708>
 800702a:	4628      	mov	r0, r5
 800702c:	4651      	mov	r1, sl
 800702e:	f000 fe69 	bl	8007d04 <_Bfree>
 8007032:	2300      	movs	r3, #0
 8007034:	703b      	strb	r3, [r7, #0]
 8007036:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007038:	f109 0001 	add.w	r0, r9, #1
 800703c:	6018      	str	r0, [r3, #0]
 800703e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007040:	2b00      	cmp	r3, #0
 8007042:	f43f acdf 	beq.w	8006a04 <_dtoa_r+0x9c>
 8007046:	601f      	str	r7, [r3, #0]
 8007048:	e4dc      	b.n	8006a04 <_dtoa_r+0x9c>
 800704a:	4627      	mov	r7, r4
 800704c:	463b      	mov	r3, r7
 800704e:	461f      	mov	r7, r3
 8007050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007054:	2a39      	cmp	r2, #57	; 0x39
 8007056:	d107      	bne.n	8007068 <_dtoa_r+0x700>
 8007058:	9a08      	ldr	r2, [sp, #32]
 800705a:	429a      	cmp	r2, r3
 800705c:	d1f7      	bne.n	800704e <_dtoa_r+0x6e6>
 800705e:	2230      	movs	r2, #48	; 0x30
 8007060:	9908      	ldr	r1, [sp, #32]
 8007062:	f108 0801 	add.w	r8, r8, #1
 8007066:	700a      	strb	r2, [r1, #0]
 8007068:	781a      	ldrb	r2, [r3, #0]
 800706a:	3201      	adds	r2, #1
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	e79f      	b.n	8006fb0 <_dtoa_r+0x648>
 8007070:	46c8      	mov	r8, r9
 8007072:	e7eb      	b.n	800704c <_dtoa_r+0x6e4>
 8007074:	2200      	movs	r2, #0
 8007076:	4b72      	ldr	r3, [pc, #456]	; (8007240 <_dtoa_r+0x8d8>)
 8007078:	f7f9 fa2e 	bl	80004d8 <__aeabi_dmul>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007084:	2200      	movs	r2, #0
 8007086:	2300      	movs	r3, #0
 8007088:	f7f9 fc8e 	bl	80009a8 <__aeabi_dcmpeq>
 800708c:	2800      	cmp	r0, #0
 800708e:	d098      	beq.n	8006fc2 <_dtoa_r+0x65a>
 8007090:	e7cb      	b.n	800702a <_dtoa_r+0x6c2>
 8007092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007094:	2a00      	cmp	r2, #0
 8007096:	f000 80cd 	beq.w	8007234 <_dtoa_r+0x8cc>
 800709a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800709c:	2a01      	cmp	r2, #1
 800709e:	f300 80af 	bgt.w	8007200 <_dtoa_r+0x898>
 80070a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070a4:	2a00      	cmp	r2, #0
 80070a6:	f000 80a7 	beq.w	80071f8 <_dtoa_r+0x890>
 80070aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80070b0:	9f06      	ldr	r7, [sp, #24]
 80070b2:	9a06      	ldr	r2, [sp, #24]
 80070b4:	2101      	movs	r1, #1
 80070b6:	441a      	add	r2, r3
 80070b8:	9206      	str	r2, [sp, #24]
 80070ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070bc:	4628      	mov	r0, r5
 80070be:	441a      	add	r2, r3
 80070c0:	9209      	str	r2, [sp, #36]	; 0x24
 80070c2:	f000 ff23 	bl	8007f0c <__i2b>
 80070c6:	4606      	mov	r6, r0
 80070c8:	2f00      	cmp	r7, #0
 80070ca:	dd0c      	ble.n	80070e6 <_dtoa_r+0x77e>
 80070cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	dd09      	ble.n	80070e6 <_dtoa_r+0x77e>
 80070d2:	42bb      	cmp	r3, r7
 80070d4:	bfa8      	it	ge
 80070d6:	463b      	movge	r3, r7
 80070d8:	9a06      	ldr	r2, [sp, #24]
 80070da:	1aff      	subs	r7, r7, r3
 80070dc:	1ad2      	subs	r2, r2, r3
 80070de:	9206      	str	r2, [sp, #24]
 80070e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	9309      	str	r3, [sp, #36]	; 0x24
 80070e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e8:	b1f3      	cbz	r3, 8007128 <_dtoa_r+0x7c0>
 80070ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 80a9 	beq.w	8007244 <_dtoa_r+0x8dc>
 80070f2:	2c00      	cmp	r4, #0
 80070f4:	dd10      	ble.n	8007118 <_dtoa_r+0x7b0>
 80070f6:	4631      	mov	r1, r6
 80070f8:	4622      	mov	r2, r4
 80070fa:	4628      	mov	r0, r5
 80070fc:	f000 ffc0 	bl	8008080 <__pow5mult>
 8007100:	4652      	mov	r2, sl
 8007102:	4601      	mov	r1, r0
 8007104:	4606      	mov	r6, r0
 8007106:	4628      	mov	r0, r5
 8007108:	f000 ff16 	bl	8007f38 <__multiply>
 800710c:	4680      	mov	r8, r0
 800710e:	4651      	mov	r1, sl
 8007110:	4628      	mov	r0, r5
 8007112:	f000 fdf7 	bl	8007d04 <_Bfree>
 8007116:	46c2      	mov	sl, r8
 8007118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800711a:	1b1a      	subs	r2, r3, r4
 800711c:	d004      	beq.n	8007128 <_dtoa_r+0x7c0>
 800711e:	4651      	mov	r1, sl
 8007120:	4628      	mov	r0, r5
 8007122:	f000 ffad 	bl	8008080 <__pow5mult>
 8007126:	4682      	mov	sl, r0
 8007128:	2101      	movs	r1, #1
 800712a:	4628      	mov	r0, r5
 800712c:	f000 feee 	bl	8007f0c <__i2b>
 8007130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007132:	4604      	mov	r4, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	f340 8087 	ble.w	8007248 <_dtoa_r+0x8e0>
 800713a:	461a      	mov	r2, r3
 800713c:	4601      	mov	r1, r0
 800713e:	4628      	mov	r0, r5
 8007140:	f000 ff9e 	bl	8008080 <__pow5mult>
 8007144:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007146:	4604      	mov	r4, r0
 8007148:	2b01      	cmp	r3, #1
 800714a:	f340 8080 	ble.w	800724e <_dtoa_r+0x8e6>
 800714e:	f04f 0800 	mov.w	r8, #0
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007158:	6918      	ldr	r0, [r3, #16]
 800715a:	f000 fe89 	bl	8007e70 <__hi0bits>
 800715e:	f1c0 0020 	rsb	r0, r0, #32
 8007162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007164:	4418      	add	r0, r3
 8007166:	f010 001f 	ands.w	r0, r0, #31
 800716a:	f000 8092 	beq.w	8007292 <_dtoa_r+0x92a>
 800716e:	f1c0 0320 	rsb	r3, r0, #32
 8007172:	2b04      	cmp	r3, #4
 8007174:	f340 808a 	ble.w	800728c <_dtoa_r+0x924>
 8007178:	f1c0 001c 	rsb	r0, r0, #28
 800717c:	9b06      	ldr	r3, [sp, #24]
 800717e:	4407      	add	r7, r0
 8007180:	4403      	add	r3, r0
 8007182:	9306      	str	r3, [sp, #24]
 8007184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007186:	4403      	add	r3, r0
 8007188:	9309      	str	r3, [sp, #36]	; 0x24
 800718a:	9b06      	ldr	r3, [sp, #24]
 800718c:	2b00      	cmp	r3, #0
 800718e:	dd05      	ble.n	800719c <_dtoa_r+0x834>
 8007190:	4651      	mov	r1, sl
 8007192:	461a      	mov	r2, r3
 8007194:	4628      	mov	r0, r5
 8007196:	f000 ffcd 	bl	8008134 <__lshift>
 800719a:	4682      	mov	sl, r0
 800719c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	dd05      	ble.n	80071ae <_dtoa_r+0x846>
 80071a2:	4621      	mov	r1, r4
 80071a4:	461a      	mov	r2, r3
 80071a6:	4628      	mov	r0, r5
 80071a8:	f000 ffc4 	bl	8008134 <__lshift>
 80071ac:	4604      	mov	r4, r0
 80071ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d070      	beq.n	8007296 <_dtoa_r+0x92e>
 80071b4:	4621      	mov	r1, r4
 80071b6:	4650      	mov	r0, sl
 80071b8:	f001 f828 	bl	800820c <__mcmp>
 80071bc:	2800      	cmp	r0, #0
 80071be:	da6a      	bge.n	8007296 <_dtoa_r+0x92e>
 80071c0:	2300      	movs	r3, #0
 80071c2:	4651      	mov	r1, sl
 80071c4:	220a      	movs	r2, #10
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 fdbe 	bl	8007d48 <__multadd>
 80071cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ce:	4682      	mov	sl, r0
 80071d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8193 	beq.w	8007500 <_dtoa_r+0xb98>
 80071da:	4631      	mov	r1, r6
 80071dc:	2300      	movs	r3, #0
 80071de:	220a      	movs	r2, #10
 80071e0:	4628      	mov	r0, r5
 80071e2:	f000 fdb1 	bl	8007d48 <__multadd>
 80071e6:	f1bb 0f00 	cmp.w	fp, #0
 80071ea:	4606      	mov	r6, r0
 80071ec:	f300 8093 	bgt.w	8007316 <_dtoa_r+0x9ae>
 80071f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	dc57      	bgt.n	80072a6 <_dtoa_r+0x93e>
 80071f6:	e08e      	b.n	8007316 <_dtoa_r+0x9ae>
 80071f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071fe:	e756      	b.n	80070ae <_dtoa_r+0x746>
 8007200:	9b02      	ldr	r3, [sp, #8]
 8007202:	1e5c      	subs	r4, r3, #1
 8007204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007206:	42a3      	cmp	r3, r4
 8007208:	bfb7      	itett	lt
 800720a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800720c:	1b1c      	subge	r4, r3, r4
 800720e:	1ae2      	sublt	r2, r4, r3
 8007210:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007212:	bfbe      	ittt	lt
 8007214:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007216:	189b      	addlt	r3, r3, r2
 8007218:	930e      	strlt	r3, [sp, #56]	; 0x38
 800721a:	9b02      	ldr	r3, [sp, #8]
 800721c:	bfb8      	it	lt
 800721e:	2400      	movlt	r4, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	bfbb      	ittet	lt
 8007224:	9b06      	ldrlt	r3, [sp, #24]
 8007226:	9a02      	ldrlt	r2, [sp, #8]
 8007228:	9f06      	ldrge	r7, [sp, #24]
 800722a:	1a9f      	sublt	r7, r3, r2
 800722c:	bfac      	ite	ge
 800722e:	9b02      	ldrge	r3, [sp, #8]
 8007230:	2300      	movlt	r3, #0
 8007232:	e73e      	b.n	80070b2 <_dtoa_r+0x74a>
 8007234:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007236:	9f06      	ldr	r7, [sp, #24]
 8007238:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800723a:	e745      	b.n	80070c8 <_dtoa_r+0x760>
 800723c:	3fe00000 	.word	0x3fe00000
 8007240:	40240000 	.word	0x40240000
 8007244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007246:	e76a      	b.n	800711e <_dtoa_r+0x7b6>
 8007248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800724a:	2b01      	cmp	r3, #1
 800724c:	dc19      	bgt.n	8007282 <_dtoa_r+0x91a>
 800724e:	9b04      	ldr	r3, [sp, #16]
 8007250:	b9bb      	cbnz	r3, 8007282 <_dtoa_r+0x91a>
 8007252:	9b05      	ldr	r3, [sp, #20]
 8007254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007258:	b99b      	cbnz	r3, 8007282 <_dtoa_r+0x91a>
 800725a:	9b05      	ldr	r3, [sp, #20]
 800725c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007260:	0d1b      	lsrs	r3, r3, #20
 8007262:	051b      	lsls	r3, r3, #20
 8007264:	b183      	cbz	r3, 8007288 <_dtoa_r+0x920>
 8007266:	f04f 0801 	mov.w	r8, #1
 800726a:	9b06      	ldr	r3, [sp, #24]
 800726c:	3301      	adds	r3, #1
 800726e:	9306      	str	r3, [sp, #24]
 8007270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007272:	3301      	adds	r3, #1
 8007274:	9309      	str	r3, [sp, #36]	; 0x24
 8007276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007278:	2b00      	cmp	r3, #0
 800727a:	f47f af6a 	bne.w	8007152 <_dtoa_r+0x7ea>
 800727e:	2001      	movs	r0, #1
 8007280:	e76f      	b.n	8007162 <_dtoa_r+0x7fa>
 8007282:	f04f 0800 	mov.w	r8, #0
 8007286:	e7f6      	b.n	8007276 <_dtoa_r+0x90e>
 8007288:	4698      	mov	r8, r3
 800728a:	e7f4      	b.n	8007276 <_dtoa_r+0x90e>
 800728c:	f43f af7d 	beq.w	800718a <_dtoa_r+0x822>
 8007290:	4618      	mov	r0, r3
 8007292:	301c      	adds	r0, #28
 8007294:	e772      	b.n	800717c <_dtoa_r+0x814>
 8007296:	9b02      	ldr	r3, [sp, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	dc36      	bgt.n	800730a <_dtoa_r+0x9a2>
 800729c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800729e:	2b02      	cmp	r3, #2
 80072a0:	dd33      	ble.n	800730a <_dtoa_r+0x9a2>
 80072a2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80072a6:	f1bb 0f00 	cmp.w	fp, #0
 80072aa:	d10d      	bne.n	80072c8 <_dtoa_r+0x960>
 80072ac:	4621      	mov	r1, r4
 80072ae:	465b      	mov	r3, fp
 80072b0:	2205      	movs	r2, #5
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 fd48 	bl	8007d48 <__multadd>
 80072b8:	4601      	mov	r1, r0
 80072ba:	4604      	mov	r4, r0
 80072bc:	4650      	mov	r0, sl
 80072be:	f000 ffa5 	bl	800820c <__mcmp>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	f73f adb6 	bgt.w	8006e34 <_dtoa_r+0x4cc>
 80072c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072ca:	9f08      	ldr	r7, [sp, #32]
 80072cc:	ea6f 0903 	mvn.w	r9, r3
 80072d0:	f04f 0800 	mov.w	r8, #0
 80072d4:	4621      	mov	r1, r4
 80072d6:	4628      	mov	r0, r5
 80072d8:	f000 fd14 	bl	8007d04 <_Bfree>
 80072dc:	2e00      	cmp	r6, #0
 80072de:	f43f aea4 	beq.w	800702a <_dtoa_r+0x6c2>
 80072e2:	f1b8 0f00 	cmp.w	r8, #0
 80072e6:	d005      	beq.n	80072f4 <_dtoa_r+0x98c>
 80072e8:	45b0      	cmp	r8, r6
 80072ea:	d003      	beq.n	80072f4 <_dtoa_r+0x98c>
 80072ec:	4641      	mov	r1, r8
 80072ee:	4628      	mov	r0, r5
 80072f0:	f000 fd08 	bl	8007d04 <_Bfree>
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 fd04 	bl	8007d04 <_Bfree>
 80072fc:	e695      	b.n	800702a <_dtoa_r+0x6c2>
 80072fe:	2400      	movs	r4, #0
 8007300:	4626      	mov	r6, r4
 8007302:	e7e1      	b.n	80072c8 <_dtoa_r+0x960>
 8007304:	46c1      	mov	r9, r8
 8007306:	4626      	mov	r6, r4
 8007308:	e594      	b.n	8006e34 <_dtoa_r+0x4cc>
 800730a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800730c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 80fc 	beq.w	800750e <_dtoa_r+0xba6>
 8007316:	2f00      	cmp	r7, #0
 8007318:	dd05      	ble.n	8007326 <_dtoa_r+0x9be>
 800731a:	4631      	mov	r1, r6
 800731c:	463a      	mov	r2, r7
 800731e:	4628      	mov	r0, r5
 8007320:	f000 ff08 	bl	8008134 <__lshift>
 8007324:	4606      	mov	r6, r0
 8007326:	f1b8 0f00 	cmp.w	r8, #0
 800732a:	d05c      	beq.n	80073e6 <_dtoa_r+0xa7e>
 800732c:	4628      	mov	r0, r5
 800732e:	6871      	ldr	r1, [r6, #4]
 8007330:	f000 fca8 	bl	8007c84 <_Balloc>
 8007334:	4607      	mov	r7, r0
 8007336:	b928      	cbnz	r0, 8007344 <_dtoa_r+0x9dc>
 8007338:	4602      	mov	r2, r0
 800733a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800733e:	4b7e      	ldr	r3, [pc, #504]	; (8007538 <_dtoa_r+0xbd0>)
 8007340:	f7ff bb26 	b.w	8006990 <_dtoa_r+0x28>
 8007344:	6932      	ldr	r2, [r6, #16]
 8007346:	f106 010c 	add.w	r1, r6, #12
 800734a:	3202      	adds	r2, #2
 800734c:	0092      	lsls	r2, r2, #2
 800734e:	300c      	adds	r0, #12
 8007350:	f000 fc8a 	bl	8007c68 <memcpy>
 8007354:	2201      	movs	r2, #1
 8007356:	4639      	mov	r1, r7
 8007358:	4628      	mov	r0, r5
 800735a:	f000 feeb 	bl	8008134 <__lshift>
 800735e:	46b0      	mov	r8, r6
 8007360:	4606      	mov	r6, r0
 8007362:	9b08      	ldr	r3, [sp, #32]
 8007364:	3301      	adds	r3, #1
 8007366:	9302      	str	r3, [sp, #8]
 8007368:	9b08      	ldr	r3, [sp, #32]
 800736a:	445b      	add	r3, fp
 800736c:	930a      	str	r3, [sp, #40]	; 0x28
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	9309      	str	r3, [sp, #36]	; 0x24
 8007376:	9b02      	ldr	r3, [sp, #8]
 8007378:	4621      	mov	r1, r4
 800737a:	4650      	mov	r0, sl
 800737c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007380:	f7ff fa64 	bl	800684c <quorem>
 8007384:	4603      	mov	r3, r0
 8007386:	4641      	mov	r1, r8
 8007388:	3330      	adds	r3, #48	; 0x30
 800738a:	9004      	str	r0, [sp, #16]
 800738c:	4650      	mov	r0, sl
 800738e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007390:	f000 ff3c 	bl	800820c <__mcmp>
 8007394:	4632      	mov	r2, r6
 8007396:	9006      	str	r0, [sp, #24]
 8007398:	4621      	mov	r1, r4
 800739a:	4628      	mov	r0, r5
 800739c:	f000 ff52 	bl	8008244 <__mdiff>
 80073a0:	68c2      	ldr	r2, [r0, #12]
 80073a2:	4607      	mov	r7, r0
 80073a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a6:	bb02      	cbnz	r2, 80073ea <_dtoa_r+0xa82>
 80073a8:	4601      	mov	r1, r0
 80073aa:	4650      	mov	r0, sl
 80073ac:	f000 ff2e 	bl	800820c <__mcmp>
 80073b0:	4602      	mov	r2, r0
 80073b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b4:	4639      	mov	r1, r7
 80073b6:	4628      	mov	r0, r5
 80073b8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80073bc:	f000 fca2 	bl	8007d04 <_Bfree>
 80073c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073c4:	9f02      	ldr	r7, [sp, #8]
 80073c6:	ea43 0102 	orr.w	r1, r3, r2
 80073ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073cc:	430b      	orrs	r3, r1
 80073ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d0:	d10d      	bne.n	80073ee <_dtoa_r+0xa86>
 80073d2:	2b39      	cmp	r3, #57	; 0x39
 80073d4:	d027      	beq.n	8007426 <_dtoa_r+0xabe>
 80073d6:	9a06      	ldr	r2, [sp, #24]
 80073d8:	2a00      	cmp	r2, #0
 80073da:	dd01      	ble.n	80073e0 <_dtoa_r+0xa78>
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	3331      	adds	r3, #49	; 0x31
 80073e0:	f88b 3000 	strb.w	r3, [fp]
 80073e4:	e776      	b.n	80072d4 <_dtoa_r+0x96c>
 80073e6:	4630      	mov	r0, r6
 80073e8:	e7b9      	b.n	800735e <_dtoa_r+0x9f6>
 80073ea:	2201      	movs	r2, #1
 80073ec:	e7e2      	b.n	80073b4 <_dtoa_r+0xa4c>
 80073ee:	9906      	ldr	r1, [sp, #24]
 80073f0:	2900      	cmp	r1, #0
 80073f2:	db04      	blt.n	80073fe <_dtoa_r+0xa96>
 80073f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80073f6:	4301      	orrs	r1, r0
 80073f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073fa:	4301      	orrs	r1, r0
 80073fc:	d120      	bne.n	8007440 <_dtoa_r+0xad8>
 80073fe:	2a00      	cmp	r2, #0
 8007400:	ddee      	ble.n	80073e0 <_dtoa_r+0xa78>
 8007402:	4651      	mov	r1, sl
 8007404:	2201      	movs	r2, #1
 8007406:	4628      	mov	r0, r5
 8007408:	9302      	str	r3, [sp, #8]
 800740a:	f000 fe93 	bl	8008134 <__lshift>
 800740e:	4621      	mov	r1, r4
 8007410:	4682      	mov	sl, r0
 8007412:	f000 fefb 	bl	800820c <__mcmp>
 8007416:	2800      	cmp	r0, #0
 8007418:	9b02      	ldr	r3, [sp, #8]
 800741a:	dc02      	bgt.n	8007422 <_dtoa_r+0xaba>
 800741c:	d1e0      	bne.n	80073e0 <_dtoa_r+0xa78>
 800741e:	07da      	lsls	r2, r3, #31
 8007420:	d5de      	bpl.n	80073e0 <_dtoa_r+0xa78>
 8007422:	2b39      	cmp	r3, #57	; 0x39
 8007424:	d1da      	bne.n	80073dc <_dtoa_r+0xa74>
 8007426:	2339      	movs	r3, #57	; 0x39
 8007428:	f88b 3000 	strb.w	r3, [fp]
 800742c:	463b      	mov	r3, r7
 800742e:	461f      	mov	r7, r3
 8007430:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007434:	3b01      	subs	r3, #1
 8007436:	2a39      	cmp	r2, #57	; 0x39
 8007438:	d050      	beq.n	80074dc <_dtoa_r+0xb74>
 800743a:	3201      	adds	r2, #1
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	e749      	b.n	80072d4 <_dtoa_r+0x96c>
 8007440:	2a00      	cmp	r2, #0
 8007442:	dd03      	ble.n	800744c <_dtoa_r+0xae4>
 8007444:	2b39      	cmp	r3, #57	; 0x39
 8007446:	d0ee      	beq.n	8007426 <_dtoa_r+0xabe>
 8007448:	3301      	adds	r3, #1
 800744a:	e7c9      	b.n	80073e0 <_dtoa_r+0xa78>
 800744c:	9a02      	ldr	r2, [sp, #8]
 800744e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007450:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007454:	428a      	cmp	r2, r1
 8007456:	d02a      	beq.n	80074ae <_dtoa_r+0xb46>
 8007458:	4651      	mov	r1, sl
 800745a:	2300      	movs	r3, #0
 800745c:	220a      	movs	r2, #10
 800745e:	4628      	mov	r0, r5
 8007460:	f000 fc72 	bl	8007d48 <__multadd>
 8007464:	45b0      	cmp	r8, r6
 8007466:	4682      	mov	sl, r0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	f04f 020a 	mov.w	r2, #10
 8007470:	4641      	mov	r1, r8
 8007472:	4628      	mov	r0, r5
 8007474:	d107      	bne.n	8007486 <_dtoa_r+0xb1e>
 8007476:	f000 fc67 	bl	8007d48 <__multadd>
 800747a:	4680      	mov	r8, r0
 800747c:	4606      	mov	r6, r0
 800747e:	9b02      	ldr	r3, [sp, #8]
 8007480:	3301      	adds	r3, #1
 8007482:	9302      	str	r3, [sp, #8]
 8007484:	e777      	b.n	8007376 <_dtoa_r+0xa0e>
 8007486:	f000 fc5f 	bl	8007d48 <__multadd>
 800748a:	4631      	mov	r1, r6
 800748c:	4680      	mov	r8, r0
 800748e:	2300      	movs	r3, #0
 8007490:	220a      	movs	r2, #10
 8007492:	4628      	mov	r0, r5
 8007494:	f000 fc58 	bl	8007d48 <__multadd>
 8007498:	4606      	mov	r6, r0
 800749a:	e7f0      	b.n	800747e <_dtoa_r+0xb16>
 800749c:	f1bb 0f00 	cmp.w	fp, #0
 80074a0:	bfcc      	ite	gt
 80074a2:	465f      	movgt	r7, fp
 80074a4:	2701      	movle	r7, #1
 80074a6:	f04f 0800 	mov.w	r8, #0
 80074aa:	9a08      	ldr	r2, [sp, #32]
 80074ac:	4417      	add	r7, r2
 80074ae:	4651      	mov	r1, sl
 80074b0:	2201      	movs	r2, #1
 80074b2:	4628      	mov	r0, r5
 80074b4:	9302      	str	r3, [sp, #8]
 80074b6:	f000 fe3d 	bl	8008134 <__lshift>
 80074ba:	4621      	mov	r1, r4
 80074bc:	4682      	mov	sl, r0
 80074be:	f000 fea5 	bl	800820c <__mcmp>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	dcb2      	bgt.n	800742c <_dtoa_r+0xac4>
 80074c6:	d102      	bne.n	80074ce <_dtoa_r+0xb66>
 80074c8:	9b02      	ldr	r3, [sp, #8]
 80074ca:	07db      	lsls	r3, r3, #31
 80074cc:	d4ae      	bmi.n	800742c <_dtoa_r+0xac4>
 80074ce:	463b      	mov	r3, r7
 80074d0:	461f      	mov	r7, r3
 80074d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074d6:	2a30      	cmp	r2, #48	; 0x30
 80074d8:	d0fa      	beq.n	80074d0 <_dtoa_r+0xb68>
 80074da:	e6fb      	b.n	80072d4 <_dtoa_r+0x96c>
 80074dc:	9a08      	ldr	r2, [sp, #32]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d1a5      	bne.n	800742e <_dtoa_r+0xac6>
 80074e2:	2331      	movs	r3, #49	; 0x31
 80074e4:	f109 0901 	add.w	r9, r9, #1
 80074e8:	7013      	strb	r3, [r2, #0]
 80074ea:	e6f3      	b.n	80072d4 <_dtoa_r+0x96c>
 80074ec:	4b13      	ldr	r3, [pc, #76]	; (800753c <_dtoa_r+0xbd4>)
 80074ee:	f7ff baa7 	b.w	8006a40 <_dtoa_r+0xd8>
 80074f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f47f aa80 	bne.w	80069fa <_dtoa_r+0x92>
 80074fa:	4b11      	ldr	r3, [pc, #68]	; (8007540 <_dtoa_r+0xbd8>)
 80074fc:	f7ff baa0 	b.w	8006a40 <_dtoa_r+0xd8>
 8007500:	f1bb 0f00 	cmp.w	fp, #0
 8007504:	dc03      	bgt.n	800750e <_dtoa_r+0xba6>
 8007506:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007508:	2b02      	cmp	r3, #2
 800750a:	f73f aecc 	bgt.w	80072a6 <_dtoa_r+0x93e>
 800750e:	9f08      	ldr	r7, [sp, #32]
 8007510:	4621      	mov	r1, r4
 8007512:	4650      	mov	r0, sl
 8007514:	f7ff f99a 	bl	800684c <quorem>
 8007518:	9a08      	ldr	r2, [sp, #32]
 800751a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800751e:	f807 3b01 	strb.w	r3, [r7], #1
 8007522:	1aba      	subs	r2, r7, r2
 8007524:	4593      	cmp	fp, r2
 8007526:	ddb9      	ble.n	800749c <_dtoa_r+0xb34>
 8007528:	4651      	mov	r1, sl
 800752a:	2300      	movs	r3, #0
 800752c:	220a      	movs	r2, #10
 800752e:	4628      	mov	r0, r5
 8007530:	f000 fc0a 	bl	8007d48 <__multadd>
 8007534:	4682      	mov	sl, r0
 8007536:	e7eb      	b.n	8007510 <_dtoa_r+0xba8>
 8007538:	0800a5d4 	.word	0x0800a5d4
 800753c:	0800a3d0 	.word	0x0800a3d0
 8007540:	0800a551 	.word	0x0800a551

08007544 <rshift>:
 8007544:	6903      	ldr	r3, [r0, #16]
 8007546:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800754a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800754e:	f100 0414 	add.w	r4, r0, #20
 8007552:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007556:	dd46      	ble.n	80075e6 <rshift+0xa2>
 8007558:	f011 011f 	ands.w	r1, r1, #31
 800755c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007560:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007564:	d10c      	bne.n	8007580 <rshift+0x3c>
 8007566:	4629      	mov	r1, r5
 8007568:	f100 0710 	add.w	r7, r0, #16
 800756c:	42b1      	cmp	r1, r6
 800756e:	d335      	bcc.n	80075dc <rshift+0x98>
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	1eea      	subs	r2, r5, #3
 8007576:	4296      	cmp	r6, r2
 8007578:	bf38      	it	cc
 800757a:	2300      	movcc	r3, #0
 800757c:	4423      	add	r3, r4
 800757e:	e015      	b.n	80075ac <rshift+0x68>
 8007580:	46a1      	mov	r9, r4
 8007582:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007586:	f1c1 0820 	rsb	r8, r1, #32
 800758a:	40cf      	lsrs	r7, r1
 800758c:	f105 0e04 	add.w	lr, r5, #4
 8007590:	4576      	cmp	r6, lr
 8007592:	46f4      	mov	ip, lr
 8007594:	d816      	bhi.n	80075c4 <rshift+0x80>
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	009a      	lsls	r2, r3, #2
 800759a:	3a04      	subs	r2, #4
 800759c:	3501      	adds	r5, #1
 800759e:	42ae      	cmp	r6, r5
 80075a0:	bf38      	it	cc
 80075a2:	2200      	movcc	r2, #0
 80075a4:	18a3      	adds	r3, r4, r2
 80075a6:	50a7      	str	r7, [r4, r2]
 80075a8:	b107      	cbz	r7, 80075ac <rshift+0x68>
 80075aa:	3304      	adds	r3, #4
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	eba3 0204 	sub.w	r2, r3, r4
 80075b2:	bf08      	it	eq
 80075b4:	2300      	moveq	r3, #0
 80075b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80075ba:	6102      	str	r2, [r0, #16]
 80075bc:	bf08      	it	eq
 80075be:	6143      	streq	r3, [r0, #20]
 80075c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075c4:	f8dc c000 	ldr.w	ip, [ip]
 80075c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80075cc:	ea4c 0707 	orr.w	r7, ip, r7
 80075d0:	f849 7b04 	str.w	r7, [r9], #4
 80075d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075d8:	40cf      	lsrs	r7, r1
 80075da:	e7d9      	b.n	8007590 <rshift+0x4c>
 80075dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80075e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80075e4:	e7c2      	b.n	800756c <rshift+0x28>
 80075e6:	4623      	mov	r3, r4
 80075e8:	e7e0      	b.n	80075ac <rshift+0x68>

080075ea <__hexdig_fun>:
 80075ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80075ee:	2b09      	cmp	r3, #9
 80075f0:	d802      	bhi.n	80075f8 <__hexdig_fun+0xe>
 80075f2:	3820      	subs	r0, #32
 80075f4:	b2c0      	uxtb	r0, r0
 80075f6:	4770      	bx	lr
 80075f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80075fc:	2b05      	cmp	r3, #5
 80075fe:	d801      	bhi.n	8007604 <__hexdig_fun+0x1a>
 8007600:	3847      	subs	r0, #71	; 0x47
 8007602:	e7f7      	b.n	80075f4 <__hexdig_fun+0xa>
 8007604:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007608:	2b05      	cmp	r3, #5
 800760a:	d801      	bhi.n	8007610 <__hexdig_fun+0x26>
 800760c:	3827      	subs	r0, #39	; 0x27
 800760e:	e7f1      	b.n	80075f4 <__hexdig_fun+0xa>
 8007610:	2000      	movs	r0, #0
 8007612:	4770      	bx	lr

08007614 <__gethex>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	b08b      	sub	sp, #44	; 0x2c
 800761a:	9306      	str	r3, [sp, #24]
 800761c:	4bb9      	ldr	r3, [pc, #740]	; (8007904 <__gethex+0x2f0>)
 800761e:	9002      	str	r0, [sp, #8]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	468b      	mov	fp, r1
 8007624:	4618      	mov	r0, r3
 8007626:	4690      	mov	r8, r2
 8007628:	9303      	str	r3, [sp, #12]
 800762a:	f7f8 fd91 	bl	8000150 <strlen>
 800762e:	4682      	mov	sl, r0
 8007630:	9b03      	ldr	r3, [sp, #12]
 8007632:	f8db 2000 	ldr.w	r2, [fp]
 8007636:	4403      	add	r3, r0
 8007638:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800763c:	9307      	str	r3, [sp, #28]
 800763e:	1c93      	adds	r3, r2, #2
 8007640:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007644:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007648:	32fe      	adds	r2, #254	; 0xfe
 800764a:	18d1      	adds	r1, r2, r3
 800764c:	461f      	mov	r7, r3
 800764e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007652:	9101      	str	r1, [sp, #4]
 8007654:	2830      	cmp	r0, #48	; 0x30
 8007656:	d0f8      	beq.n	800764a <__gethex+0x36>
 8007658:	f7ff ffc7 	bl	80075ea <__hexdig_fun>
 800765c:	4604      	mov	r4, r0
 800765e:	2800      	cmp	r0, #0
 8007660:	d13a      	bne.n	80076d8 <__gethex+0xc4>
 8007662:	4652      	mov	r2, sl
 8007664:	4638      	mov	r0, r7
 8007666:	9903      	ldr	r1, [sp, #12]
 8007668:	f001 f9ea 	bl	8008a40 <strncmp>
 800766c:	4605      	mov	r5, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	d166      	bne.n	8007740 <__gethex+0x12c>
 8007672:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007676:	eb07 060a 	add.w	r6, r7, sl
 800767a:	f7ff ffb6 	bl	80075ea <__hexdig_fun>
 800767e:	2800      	cmp	r0, #0
 8007680:	d060      	beq.n	8007744 <__gethex+0x130>
 8007682:	4633      	mov	r3, r6
 8007684:	7818      	ldrb	r0, [r3, #0]
 8007686:	461f      	mov	r7, r3
 8007688:	2830      	cmp	r0, #48	; 0x30
 800768a:	f103 0301 	add.w	r3, r3, #1
 800768e:	d0f9      	beq.n	8007684 <__gethex+0x70>
 8007690:	f7ff ffab 	bl	80075ea <__hexdig_fun>
 8007694:	2301      	movs	r3, #1
 8007696:	fab0 f480 	clz	r4, r0
 800769a:	4635      	mov	r5, r6
 800769c:	0964      	lsrs	r4, r4, #5
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	463a      	mov	r2, r7
 80076a2:	4616      	mov	r6, r2
 80076a4:	7830      	ldrb	r0, [r6, #0]
 80076a6:	3201      	adds	r2, #1
 80076a8:	f7ff ff9f 	bl	80075ea <__hexdig_fun>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d1f8      	bne.n	80076a2 <__gethex+0x8e>
 80076b0:	4652      	mov	r2, sl
 80076b2:	4630      	mov	r0, r6
 80076b4:	9903      	ldr	r1, [sp, #12]
 80076b6:	f001 f9c3 	bl	8008a40 <strncmp>
 80076ba:	b980      	cbnz	r0, 80076de <__gethex+0xca>
 80076bc:	b94d      	cbnz	r5, 80076d2 <__gethex+0xbe>
 80076be:	eb06 050a 	add.w	r5, r6, sl
 80076c2:	462a      	mov	r2, r5
 80076c4:	4616      	mov	r6, r2
 80076c6:	7830      	ldrb	r0, [r6, #0]
 80076c8:	3201      	adds	r2, #1
 80076ca:	f7ff ff8e 	bl	80075ea <__hexdig_fun>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d1f8      	bne.n	80076c4 <__gethex+0xb0>
 80076d2:	1bad      	subs	r5, r5, r6
 80076d4:	00ad      	lsls	r5, r5, #2
 80076d6:	e004      	b.n	80076e2 <__gethex+0xce>
 80076d8:	2400      	movs	r4, #0
 80076da:	4625      	mov	r5, r4
 80076dc:	e7e0      	b.n	80076a0 <__gethex+0x8c>
 80076de:	2d00      	cmp	r5, #0
 80076e0:	d1f7      	bne.n	80076d2 <__gethex+0xbe>
 80076e2:	7833      	ldrb	r3, [r6, #0]
 80076e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076e8:	2b50      	cmp	r3, #80	; 0x50
 80076ea:	d139      	bne.n	8007760 <__gethex+0x14c>
 80076ec:	7873      	ldrb	r3, [r6, #1]
 80076ee:	2b2b      	cmp	r3, #43	; 0x2b
 80076f0:	d02a      	beq.n	8007748 <__gethex+0x134>
 80076f2:	2b2d      	cmp	r3, #45	; 0x2d
 80076f4:	d02c      	beq.n	8007750 <__gethex+0x13c>
 80076f6:	f04f 0900 	mov.w	r9, #0
 80076fa:	1c71      	adds	r1, r6, #1
 80076fc:	7808      	ldrb	r0, [r1, #0]
 80076fe:	f7ff ff74 	bl	80075ea <__hexdig_fun>
 8007702:	1e43      	subs	r3, r0, #1
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b18      	cmp	r3, #24
 8007708:	d82a      	bhi.n	8007760 <__gethex+0x14c>
 800770a:	f1a0 0210 	sub.w	r2, r0, #16
 800770e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007712:	f7ff ff6a 	bl	80075ea <__hexdig_fun>
 8007716:	1e43      	subs	r3, r0, #1
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b18      	cmp	r3, #24
 800771c:	d91b      	bls.n	8007756 <__gethex+0x142>
 800771e:	f1b9 0f00 	cmp.w	r9, #0
 8007722:	d000      	beq.n	8007726 <__gethex+0x112>
 8007724:	4252      	negs	r2, r2
 8007726:	4415      	add	r5, r2
 8007728:	f8cb 1000 	str.w	r1, [fp]
 800772c:	b1d4      	cbz	r4, 8007764 <__gethex+0x150>
 800772e:	9b01      	ldr	r3, [sp, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	bf14      	ite	ne
 8007734:	2700      	movne	r7, #0
 8007736:	2706      	moveq	r7, #6
 8007738:	4638      	mov	r0, r7
 800773a:	b00b      	add	sp, #44	; 0x2c
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007740:	463e      	mov	r6, r7
 8007742:	4625      	mov	r5, r4
 8007744:	2401      	movs	r4, #1
 8007746:	e7cc      	b.n	80076e2 <__gethex+0xce>
 8007748:	f04f 0900 	mov.w	r9, #0
 800774c:	1cb1      	adds	r1, r6, #2
 800774e:	e7d5      	b.n	80076fc <__gethex+0xe8>
 8007750:	f04f 0901 	mov.w	r9, #1
 8007754:	e7fa      	b.n	800774c <__gethex+0x138>
 8007756:	230a      	movs	r3, #10
 8007758:	fb03 0202 	mla	r2, r3, r2, r0
 800775c:	3a10      	subs	r2, #16
 800775e:	e7d6      	b.n	800770e <__gethex+0xfa>
 8007760:	4631      	mov	r1, r6
 8007762:	e7e1      	b.n	8007728 <__gethex+0x114>
 8007764:	4621      	mov	r1, r4
 8007766:	1bf3      	subs	r3, r6, r7
 8007768:	3b01      	subs	r3, #1
 800776a:	2b07      	cmp	r3, #7
 800776c:	dc0a      	bgt.n	8007784 <__gethex+0x170>
 800776e:	9802      	ldr	r0, [sp, #8]
 8007770:	f000 fa88 	bl	8007c84 <_Balloc>
 8007774:	4604      	mov	r4, r0
 8007776:	b940      	cbnz	r0, 800778a <__gethex+0x176>
 8007778:	4602      	mov	r2, r0
 800777a:	21de      	movs	r1, #222	; 0xde
 800777c:	4b62      	ldr	r3, [pc, #392]	; (8007908 <__gethex+0x2f4>)
 800777e:	4863      	ldr	r0, [pc, #396]	; (800790c <__gethex+0x2f8>)
 8007780:	f001 f97e 	bl	8008a80 <__assert_func>
 8007784:	3101      	adds	r1, #1
 8007786:	105b      	asrs	r3, r3, #1
 8007788:	e7ef      	b.n	800776a <__gethex+0x156>
 800778a:	f04f 0b00 	mov.w	fp, #0
 800778e:	f100 0914 	add.w	r9, r0, #20
 8007792:	f1ca 0301 	rsb	r3, sl, #1
 8007796:	f8cd 9010 	str.w	r9, [sp, #16]
 800779a:	f8cd b004 	str.w	fp, [sp, #4]
 800779e:	9308      	str	r3, [sp, #32]
 80077a0:	42b7      	cmp	r7, r6
 80077a2:	d33f      	bcc.n	8007824 <__gethex+0x210>
 80077a4:	9f04      	ldr	r7, [sp, #16]
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	f847 3b04 	str.w	r3, [r7], #4
 80077ac:	eba7 0709 	sub.w	r7, r7, r9
 80077b0:	10bf      	asrs	r7, r7, #2
 80077b2:	6127      	str	r7, [r4, #16]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 fb5b 	bl	8007e70 <__hi0bits>
 80077ba:	017f      	lsls	r7, r7, #5
 80077bc:	f8d8 6000 	ldr.w	r6, [r8]
 80077c0:	1a3f      	subs	r7, r7, r0
 80077c2:	42b7      	cmp	r7, r6
 80077c4:	dd62      	ble.n	800788c <__gethex+0x278>
 80077c6:	1bbf      	subs	r7, r7, r6
 80077c8:	4639      	mov	r1, r7
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 fef1 	bl	80085b2 <__any_on>
 80077d0:	4682      	mov	sl, r0
 80077d2:	b1a8      	cbz	r0, 8007800 <__gethex+0x1ec>
 80077d4:	f04f 0a01 	mov.w	sl, #1
 80077d8:	1e7b      	subs	r3, r7, #1
 80077da:	1159      	asrs	r1, r3, #5
 80077dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80077e0:	f003 021f 	and.w	r2, r3, #31
 80077e4:	fa0a f202 	lsl.w	r2, sl, r2
 80077e8:	420a      	tst	r2, r1
 80077ea:	d009      	beq.n	8007800 <__gethex+0x1ec>
 80077ec:	4553      	cmp	r3, sl
 80077ee:	dd05      	ble.n	80077fc <__gethex+0x1e8>
 80077f0:	4620      	mov	r0, r4
 80077f2:	1eb9      	subs	r1, r7, #2
 80077f4:	f000 fedd 	bl	80085b2 <__any_on>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d144      	bne.n	8007886 <__gethex+0x272>
 80077fc:	f04f 0a02 	mov.w	sl, #2
 8007800:	4639      	mov	r1, r7
 8007802:	4620      	mov	r0, r4
 8007804:	f7ff fe9e 	bl	8007544 <rshift>
 8007808:	443d      	add	r5, r7
 800780a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800780e:	42ab      	cmp	r3, r5
 8007810:	da4a      	bge.n	80078a8 <__gethex+0x294>
 8007812:	4621      	mov	r1, r4
 8007814:	9802      	ldr	r0, [sp, #8]
 8007816:	f000 fa75 	bl	8007d04 <_Bfree>
 800781a:	2300      	movs	r3, #0
 800781c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800781e:	27a3      	movs	r7, #163	; 0xa3
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	e789      	b.n	8007738 <__gethex+0x124>
 8007824:	1e73      	subs	r3, r6, #1
 8007826:	9a07      	ldr	r2, [sp, #28]
 8007828:	9305      	str	r3, [sp, #20]
 800782a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800782e:	4293      	cmp	r3, r2
 8007830:	d019      	beq.n	8007866 <__gethex+0x252>
 8007832:	f1bb 0f20 	cmp.w	fp, #32
 8007836:	d107      	bne.n	8007848 <__gethex+0x234>
 8007838:	9b04      	ldr	r3, [sp, #16]
 800783a:	9a01      	ldr	r2, [sp, #4]
 800783c:	f843 2b04 	str.w	r2, [r3], #4
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	2300      	movs	r3, #0
 8007844:	469b      	mov	fp, r3
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800784c:	f7ff fecd 	bl	80075ea <__hexdig_fun>
 8007850:	9b01      	ldr	r3, [sp, #4]
 8007852:	f000 000f 	and.w	r0, r0, #15
 8007856:	fa00 f00b 	lsl.w	r0, r0, fp
 800785a:	4303      	orrs	r3, r0
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	f10b 0b04 	add.w	fp, fp, #4
 8007862:	9b05      	ldr	r3, [sp, #20]
 8007864:	e00d      	b.n	8007882 <__gethex+0x26e>
 8007866:	9b05      	ldr	r3, [sp, #20]
 8007868:	9a08      	ldr	r2, [sp, #32]
 800786a:	4413      	add	r3, r2
 800786c:	42bb      	cmp	r3, r7
 800786e:	d3e0      	bcc.n	8007832 <__gethex+0x21e>
 8007870:	4618      	mov	r0, r3
 8007872:	4652      	mov	r2, sl
 8007874:	9903      	ldr	r1, [sp, #12]
 8007876:	9309      	str	r3, [sp, #36]	; 0x24
 8007878:	f001 f8e2 	bl	8008a40 <strncmp>
 800787c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787e:	2800      	cmp	r0, #0
 8007880:	d1d7      	bne.n	8007832 <__gethex+0x21e>
 8007882:	461e      	mov	r6, r3
 8007884:	e78c      	b.n	80077a0 <__gethex+0x18c>
 8007886:	f04f 0a03 	mov.w	sl, #3
 800788a:	e7b9      	b.n	8007800 <__gethex+0x1ec>
 800788c:	da09      	bge.n	80078a2 <__gethex+0x28e>
 800788e:	1bf7      	subs	r7, r6, r7
 8007890:	4621      	mov	r1, r4
 8007892:	463a      	mov	r2, r7
 8007894:	9802      	ldr	r0, [sp, #8]
 8007896:	f000 fc4d 	bl	8008134 <__lshift>
 800789a:	4604      	mov	r4, r0
 800789c:	1bed      	subs	r5, r5, r7
 800789e:	f100 0914 	add.w	r9, r0, #20
 80078a2:	f04f 0a00 	mov.w	sl, #0
 80078a6:	e7b0      	b.n	800780a <__gethex+0x1f6>
 80078a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80078ac:	42a8      	cmp	r0, r5
 80078ae:	dd71      	ble.n	8007994 <__gethex+0x380>
 80078b0:	1b45      	subs	r5, r0, r5
 80078b2:	42ae      	cmp	r6, r5
 80078b4:	dc34      	bgt.n	8007920 <__gethex+0x30c>
 80078b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d028      	beq.n	8007910 <__gethex+0x2fc>
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d02a      	beq.n	8007918 <__gethex+0x304>
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d115      	bne.n	80078f2 <__gethex+0x2de>
 80078c6:	42ae      	cmp	r6, r5
 80078c8:	d113      	bne.n	80078f2 <__gethex+0x2de>
 80078ca:	2e01      	cmp	r6, #1
 80078cc:	d10b      	bne.n	80078e6 <__gethex+0x2d2>
 80078ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80078d2:	9a06      	ldr	r2, [sp, #24]
 80078d4:	2762      	movs	r7, #98	; 0x62
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	2301      	movs	r3, #1
 80078da:	6123      	str	r3, [r4, #16]
 80078dc:	f8c9 3000 	str.w	r3, [r9]
 80078e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078e2:	601c      	str	r4, [r3, #0]
 80078e4:	e728      	b.n	8007738 <__gethex+0x124>
 80078e6:	4620      	mov	r0, r4
 80078e8:	1e71      	subs	r1, r6, #1
 80078ea:	f000 fe62 	bl	80085b2 <__any_on>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d1ed      	bne.n	80078ce <__gethex+0x2ba>
 80078f2:	4621      	mov	r1, r4
 80078f4:	9802      	ldr	r0, [sp, #8]
 80078f6:	f000 fa05 	bl	8007d04 <_Bfree>
 80078fa:	2300      	movs	r3, #0
 80078fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078fe:	2750      	movs	r7, #80	; 0x50
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	e719      	b.n	8007738 <__gethex+0x124>
 8007904:	0800a650 	.word	0x0800a650
 8007908:	0800a5d4 	.word	0x0800a5d4
 800790c:	0800a5e5 	.word	0x0800a5e5
 8007910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1ed      	bne.n	80078f2 <__gethex+0x2de>
 8007916:	e7da      	b.n	80078ce <__gethex+0x2ba>
 8007918:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1d7      	bne.n	80078ce <__gethex+0x2ba>
 800791e:	e7e8      	b.n	80078f2 <__gethex+0x2de>
 8007920:	1e6f      	subs	r7, r5, #1
 8007922:	f1ba 0f00 	cmp.w	sl, #0
 8007926:	d132      	bne.n	800798e <__gethex+0x37a>
 8007928:	b127      	cbz	r7, 8007934 <__gethex+0x320>
 800792a:	4639      	mov	r1, r7
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fe40 	bl	80085b2 <__any_on>
 8007932:	4682      	mov	sl, r0
 8007934:	2101      	movs	r1, #1
 8007936:	117b      	asrs	r3, r7, #5
 8007938:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800793c:	f007 071f 	and.w	r7, r7, #31
 8007940:	fa01 f707 	lsl.w	r7, r1, r7
 8007944:	421f      	tst	r7, r3
 8007946:	f04f 0702 	mov.w	r7, #2
 800794a:	4629      	mov	r1, r5
 800794c:	4620      	mov	r0, r4
 800794e:	bf18      	it	ne
 8007950:	f04a 0a02 	orrne.w	sl, sl, #2
 8007954:	1b76      	subs	r6, r6, r5
 8007956:	f7ff fdf5 	bl	8007544 <rshift>
 800795a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800795e:	f1ba 0f00 	cmp.w	sl, #0
 8007962:	d048      	beq.n	80079f6 <__gethex+0x3e2>
 8007964:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d015      	beq.n	8007998 <__gethex+0x384>
 800796c:	2b03      	cmp	r3, #3
 800796e:	d017      	beq.n	80079a0 <__gethex+0x38c>
 8007970:	2b01      	cmp	r3, #1
 8007972:	d109      	bne.n	8007988 <__gethex+0x374>
 8007974:	f01a 0f02 	tst.w	sl, #2
 8007978:	d006      	beq.n	8007988 <__gethex+0x374>
 800797a:	f8d9 0000 	ldr.w	r0, [r9]
 800797e:	ea4a 0a00 	orr.w	sl, sl, r0
 8007982:	f01a 0f01 	tst.w	sl, #1
 8007986:	d10e      	bne.n	80079a6 <__gethex+0x392>
 8007988:	f047 0710 	orr.w	r7, r7, #16
 800798c:	e033      	b.n	80079f6 <__gethex+0x3e2>
 800798e:	f04f 0a01 	mov.w	sl, #1
 8007992:	e7cf      	b.n	8007934 <__gethex+0x320>
 8007994:	2701      	movs	r7, #1
 8007996:	e7e2      	b.n	800795e <__gethex+0x34a>
 8007998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800799a:	f1c3 0301 	rsb	r3, r3, #1
 800799e:	9315      	str	r3, [sp, #84]	; 0x54
 80079a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0f0      	beq.n	8007988 <__gethex+0x374>
 80079a6:	f04f 0c00 	mov.w	ip, #0
 80079aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80079ae:	f104 0314 	add.w	r3, r4, #20
 80079b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80079b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80079c4:	d01c      	beq.n	8007a00 <__gethex+0x3ec>
 80079c6:	3201      	adds	r2, #1
 80079c8:	6002      	str	r2, [r0, #0]
 80079ca:	2f02      	cmp	r7, #2
 80079cc:	f104 0314 	add.w	r3, r4, #20
 80079d0:	d13d      	bne.n	8007a4e <__gethex+0x43a>
 80079d2:	f8d8 2000 	ldr.w	r2, [r8]
 80079d6:	3a01      	subs	r2, #1
 80079d8:	42b2      	cmp	r2, r6
 80079da:	d10a      	bne.n	80079f2 <__gethex+0x3de>
 80079dc:	2201      	movs	r2, #1
 80079de:	1171      	asrs	r1, r6, #5
 80079e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079e4:	f006 061f 	and.w	r6, r6, #31
 80079e8:	fa02 f606 	lsl.w	r6, r2, r6
 80079ec:	421e      	tst	r6, r3
 80079ee:	bf18      	it	ne
 80079f0:	4617      	movne	r7, r2
 80079f2:	f047 0720 	orr.w	r7, r7, #32
 80079f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079f8:	601c      	str	r4, [r3, #0]
 80079fa:	9b06      	ldr	r3, [sp, #24]
 80079fc:	601d      	str	r5, [r3, #0]
 80079fe:	e69b      	b.n	8007738 <__gethex+0x124>
 8007a00:	4299      	cmp	r1, r3
 8007a02:	f843 cc04 	str.w	ip, [r3, #-4]
 8007a06:	d8d8      	bhi.n	80079ba <__gethex+0x3a6>
 8007a08:	68a3      	ldr	r3, [r4, #8]
 8007a0a:	459b      	cmp	fp, r3
 8007a0c:	db17      	blt.n	8007a3e <__gethex+0x42a>
 8007a0e:	6861      	ldr	r1, [r4, #4]
 8007a10:	9802      	ldr	r0, [sp, #8]
 8007a12:	3101      	adds	r1, #1
 8007a14:	f000 f936 	bl	8007c84 <_Balloc>
 8007a18:	4681      	mov	r9, r0
 8007a1a:	b918      	cbnz	r0, 8007a24 <__gethex+0x410>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	2184      	movs	r1, #132	; 0x84
 8007a20:	4b19      	ldr	r3, [pc, #100]	; (8007a88 <__gethex+0x474>)
 8007a22:	e6ac      	b.n	800777e <__gethex+0x16a>
 8007a24:	6922      	ldr	r2, [r4, #16]
 8007a26:	f104 010c 	add.w	r1, r4, #12
 8007a2a:	3202      	adds	r2, #2
 8007a2c:	0092      	lsls	r2, r2, #2
 8007a2e:	300c      	adds	r0, #12
 8007a30:	f000 f91a 	bl	8007c68 <memcpy>
 8007a34:	4621      	mov	r1, r4
 8007a36:	9802      	ldr	r0, [sp, #8]
 8007a38:	f000 f964 	bl	8007d04 <_Bfree>
 8007a3c:	464c      	mov	r4, r9
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	6122      	str	r2, [r4, #16]
 8007a44:	2201      	movs	r2, #1
 8007a46:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a4a:	615a      	str	r2, [r3, #20]
 8007a4c:	e7bd      	b.n	80079ca <__gethex+0x3b6>
 8007a4e:	6922      	ldr	r2, [r4, #16]
 8007a50:	455a      	cmp	r2, fp
 8007a52:	dd0b      	ble.n	8007a6c <__gethex+0x458>
 8007a54:	2101      	movs	r1, #1
 8007a56:	4620      	mov	r0, r4
 8007a58:	f7ff fd74 	bl	8007544 <rshift>
 8007a5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a60:	3501      	adds	r5, #1
 8007a62:	42ab      	cmp	r3, r5
 8007a64:	f6ff aed5 	blt.w	8007812 <__gethex+0x1fe>
 8007a68:	2701      	movs	r7, #1
 8007a6a:	e7c2      	b.n	80079f2 <__gethex+0x3de>
 8007a6c:	f016 061f 	ands.w	r6, r6, #31
 8007a70:	d0fa      	beq.n	8007a68 <__gethex+0x454>
 8007a72:	449a      	add	sl, r3
 8007a74:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007a78:	f000 f9fa 	bl	8007e70 <__hi0bits>
 8007a7c:	f1c6 0620 	rsb	r6, r6, #32
 8007a80:	42b0      	cmp	r0, r6
 8007a82:	dbe7      	blt.n	8007a54 <__gethex+0x440>
 8007a84:	e7f0      	b.n	8007a68 <__gethex+0x454>
 8007a86:	bf00      	nop
 8007a88:	0800a5d4 	.word	0x0800a5d4

08007a8c <L_shift>:
 8007a8c:	f1c2 0208 	rsb	r2, r2, #8
 8007a90:	0092      	lsls	r2, r2, #2
 8007a92:	b570      	push	{r4, r5, r6, lr}
 8007a94:	f1c2 0620 	rsb	r6, r2, #32
 8007a98:	6843      	ldr	r3, [r0, #4]
 8007a9a:	6804      	ldr	r4, [r0, #0]
 8007a9c:	fa03 f506 	lsl.w	r5, r3, r6
 8007aa0:	432c      	orrs	r4, r5
 8007aa2:	40d3      	lsrs	r3, r2
 8007aa4:	6004      	str	r4, [r0, #0]
 8007aa6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007aaa:	4288      	cmp	r0, r1
 8007aac:	d3f4      	bcc.n	8007a98 <L_shift+0xc>
 8007aae:	bd70      	pop	{r4, r5, r6, pc}

08007ab0 <__match>:
 8007ab0:	b530      	push	{r4, r5, lr}
 8007ab2:	6803      	ldr	r3, [r0, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aba:	b914      	cbnz	r4, 8007ac2 <__match+0x12>
 8007abc:	6003      	str	r3, [r0, #0]
 8007abe:	2001      	movs	r0, #1
 8007ac0:	bd30      	pop	{r4, r5, pc}
 8007ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007aca:	2d19      	cmp	r5, #25
 8007acc:	bf98      	it	ls
 8007ace:	3220      	addls	r2, #32
 8007ad0:	42a2      	cmp	r2, r4
 8007ad2:	d0f0      	beq.n	8007ab6 <__match+0x6>
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	e7f3      	b.n	8007ac0 <__match+0x10>

08007ad8 <__hexnan>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	2500      	movs	r5, #0
 8007ade:	680b      	ldr	r3, [r1, #0]
 8007ae0:	4682      	mov	sl, r0
 8007ae2:	115e      	asrs	r6, r3, #5
 8007ae4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ae8:	f013 031f 	ands.w	r3, r3, #31
 8007aec:	bf18      	it	ne
 8007aee:	3604      	addne	r6, #4
 8007af0:	1f37      	subs	r7, r6, #4
 8007af2:	4690      	mov	r8, r2
 8007af4:	46b9      	mov	r9, r7
 8007af6:	463c      	mov	r4, r7
 8007af8:	46ab      	mov	fp, r5
 8007afa:	b087      	sub	sp, #28
 8007afc:	6801      	ldr	r1, [r0, #0]
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	f846 5c04 	str.w	r5, [r6, #-4]
 8007b04:	9502      	str	r5, [sp, #8]
 8007b06:	784a      	ldrb	r2, [r1, #1]
 8007b08:	1c4b      	adds	r3, r1, #1
 8007b0a:	9303      	str	r3, [sp, #12]
 8007b0c:	b342      	cbz	r2, 8007b60 <__hexnan+0x88>
 8007b0e:	4610      	mov	r0, r2
 8007b10:	9105      	str	r1, [sp, #20]
 8007b12:	9204      	str	r2, [sp, #16]
 8007b14:	f7ff fd69 	bl	80075ea <__hexdig_fun>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d14f      	bne.n	8007bbc <__hexnan+0xe4>
 8007b1c:	9a04      	ldr	r2, [sp, #16]
 8007b1e:	9905      	ldr	r1, [sp, #20]
 8007b20:	2a20      	cmp	r2, #32
 8007b22:	d818      	bhi.n	8007b56 <__hexnan+0x7e>
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	459b      	cmp	fp, r3
 8007b28:	dd13      	ble.n	8007b52 <__hexnan+0x7a>
 8007b2a:	454c      	cmp	r4, r9
 8007b2c:	d206      	bcs.n	8007b3c <__hexnan+0x64>
 8007b2e:	2d07      	cmp	r5, #7
 8007b30:	dc04      	bgt.n	8007b3c <__hexnan+0x64>
 8007b32:	462a      	mov	r2, r5
 8007b34:	4649      	mov	r1, r9
 8007b36:	4620      	mov	r0, r4
 8007b38:	f7ff ffa8 	bl	8007a8c <L_shift>
 8007b3c:	4544      	cmp	r4, r8
 8007b3e:	d950      	bls.n	8007be2 <__hexnan+0x10a>
 8007b40:	2300      	movs	r3, #0
 8007b42:	f1a4 0904 	sub.w	r9, r4, #4
 8007b46:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b4a:	461d      	mov	r5, r3
 8007b4c:	464c      	mov	r4, r9
 8007b4e:	f8cd b008 	str.w	fp, [sp, #8]
 8007b52:	9903      	ldr	r1, [sp, #12]
 8007b54:	e7d7      	b.n	8007b06 <__hexnan+0x2e>
 8007b56:	2a29      	cmp	r2, #41	; 0x29
 8007b58:	d156      	bne.n	8007c08 <__hexnan+0x130>
 8007b5a:	3102      	adds	r1, #2
 8007b5c:	f8ca 1000 	str.w	r1, [sl]
 8007b60:	f1bb 0f00 	cmp.w	fp, #0
 8007b64:	d050      	beq.n	8007c08 <__hexnan+0x130>
 8007b66:	454c      	cmp	r4, r9
 8007b68:	d206      	bcs.n	8007b78 <__hexnan+0xa0>
 8007b6a:	2d07      	cmp	r5, #7
 8007b6c:	dc04      	bgt.n	8007b78 <__hexnan+0xa0>
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4649      	mov	r1, r9
 8007b72:	4620      	mov	r0, r4
 8007b74:	f7ff ff8a 	bl	8007a8c <L_shift>
 8007b78:	4544      	cmp	r4, r8
 8007b7a:	d934      	bls.n	8007be6 <__hexnan+0x10e>
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	f1a8 0204 	sub.w	r2, r8, #4
 8007b82:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b86:	429f      	cmp	r7, r3
 8007b88:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b8c:	d2f9      	bcs.n	8007b82 <__hexnan+0xaa>
 8007b8e:	1b3b      	subs	r3, r7, r4
 8007b90:	f023 0303 	bic.w	r3, r3, #3
 8007b94:	3304      	adds	r3, #4
 8007b96:	3401      	adds	r4, #1
 8007b98:	3e03      	subs	r6, #3
 8007b9a:	42b4      	cmp	r4, r6
 8007b9c:	bf88      	it	hi
 8007b9e:	2304      	movhi	r3, #4
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4443      	add	r3, r8
 8007ba4:	f843 2b04 	str.w	r2, [r3], #4
 8007ba8:	429f      	cmp	r7, r3
 8007baa:	d2fb      	bcs.n	8007ba4 <__hexnan+0xcc>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	b91b      	cbnz	r3, 8007bb8 <__hexnan+0xe0>
 8007bb0:	4547      	cmp	r7, r8
 8007bb2:	d127      	bne.n	8007c04 <__hexnan+0x12c>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	2005      	movs	r0, #5
 8007bba:	e026      	b.n	8007c0a <__hexnan+0x132>
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	2d08      	cmp	r5, #8
 8007bc0:	f10b 0b01 	add.w	fp, fp, #1
 8007bc4:	dd06      	ble.n	8007bd4 <__hexnan+0xfc>
 8007bc6:	4544      	cmp	r4, r8
 8007bc8:	d9c3      	bls.n	8007b52 <__hexnan+0x7a>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	2501      	movs	r5, #1
 8007bce:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bd2:	3c04      	subs	r4, #4
 8007bd4:	6822      	ldr	r2, [r4, #0]
 8007bd6:	f000 000f 	and.w	r0, r0, #15
 8007bda:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007bde:	6022      	str	r2, [r4, #0]
 8007be0:	e7b7      	b.n	8007b52 <__hexnan+0x7a>
 8007be2:	2508      	movs	r5, #8
 8007be4:	e7b5      	b.n	8007b52 <__hexnan+0x7a>
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0df      	beq.n	8007bac <__hexnan+0xd4>
 8007bec:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf0:	f1c3 0320 	rsb	r3, r3, #32
 8007bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007bfc:	401a      	ands	r2, r3
 8007bfe:	f846 2c04 	str.w	r2, [r6, #-4]
 8007c02:	e7d3      	b.n	8007bac <__hexnan+0xd4>
 8007c04:	3f04      	subs	r7, #4
 8007c06:	e7d1      	b.n	8007bac <__hexnan+0xd4>
 8007c08:	2004      	movs	r0, #4
 8007c0a:	b007      	add	sp, #28
 8007c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c10 <_localeconv_r>:
 8007c10:	4800      	ldr	r0, [pc, #0]	; (8007c14 <_localeconv_r+0x4>)
 8007c12:	4770      	bx	lr
 8007c14:	20000170 	.word	0x20000170

08007c18 <malloc>:
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <malloc+0xc>)
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	f000 bd43 	b.w	80086a8 <_malloc_r>
 8007c22:	bf00      	nop
 8007c24:	20000018 	.word	0x20000018

08007c28 <__ascii_mbtowc>:
 8007c28:	b082      	sub	sp, #8
 8007c2a:	b901      	cbnz	r1, 8007c2e <__ascii_mbtowc+0x6>
 8007c2c:	a901      	add	r1, sp, #4
 8007c2e:	b142      	cbz	r2, 8007c42 <__ascii_mbtowc+0x1a>
 8007c30:	b14b      	cbz	r3, 8007c46 <__ascii_mbtowc+0x1e>
 8007c32:	7813      	ldrb	r3, [r2, #0]
 8007c34:	600b      	str	r3, [r1, #0]
 8007c36:	7812      	ldrb	r2, [r2, #0]
 8007c38:	1e10      	subs	r0, r2, #0
 8007c3a:	bf18      	it	ne
 8007c3c:	2001      	movne	r0, #1
 8007c3e:	b002      	add	sp, #8
 8007c40:	4770      	bx	lr
 8007c42:	4610      	mov	r0, r2
 8007c44:	e7fb      	b.n	8007c3e <__ascii_mbtowc+0x16>
 8007c46:	f06f 0001 	mvn.w	r0, #1
 8007c4a:	e7f8      	b.n	8007c3e <__ascii_mbtowc+0x16>

08007c4c <memchr>:
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	b2c9      	uxtb	r1, r1
 8007c52:	4402      	add	r2, r0
 8007c54:	4293      	cmp	r3, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	d101      	bne.n	8007c5e <memchr+0x12>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e003      	b.n	8007c66 <memchr+0x1a>
 8007c5e:	7804      	ldrb	r4, [r0, #0]
 8007c60:	3301      	adds	r3, #1
 8007c62:	428c      	cmp	r4, r1
 8007c64:	d1f6      	bne.n	8007c54 <memchr+0x8>
 8007c66:	bd10      	pop	{r4, pc}

08007c68 <memcpy>:
 8007c68:	440a      	add	r2, r1
 8007c6a:	4291      	cmp	r1, r2
 8007c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c70:	d100      	bne.n	8007c74 <memcpy+0xc>
 8007c72:	4770      	bx	lr
 8007c74:	b510      	push	{r4, lr}
 8007c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c7a:	4291      	cmp	r1, r2
 8007c7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c80:	d1f9      	bne.n	8007c76 <memcpy+0xe>
 8007c82:	bd10      	pop	{r4, pc}

08007c84 <_Balloc>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c88:	4604      	mov	r4, r0
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	b976      	cbnz	r6, 8007cac <_Balloc+0x28>
 8007c8e:	2010      	movs	r0, #16
 8007c90:	f7ff ffc2 	bl	8007c18 <malloc>
 8007c94:	4602      	mov	r2, r0
 8007c96:	6260      	str	r0, [r4, #36]	; 0x24
 8007c98:	b920      	cbnz	r0, 8007ca4 <_Balloc+0x20>
 8007c9a:	2166      	movs	r1, #102	; 0x66
 8007c9c:	4b17      	ldr	r3, [pc, #92]	; (8007cfc <_Balloc+0x78>)
 8007c9e:	4818      	ldr	r0, [pc, #96]	; (8007d00 <_Balloc+0x7c>)
 8007ca0:	f000 feee 	bl	8008a80 <__assert_func>
 8007ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ca8:	6006      	str	r6, [r0, #0]
 8007caa:	60c6      	str	r6, [r0, #12]
 8007cac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007cae:	68f3      	ldr	r3, [r6, #12]
 8007cb0:	b183      	cbz	r3, 8007cd4 <_Balloc+0x50>
 8007cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cba:	b9b8      	cbnz	r0, 8007cec <_Balloc+0x68>
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	fa01 f605 	lsl.w	r6, r1, r5
 8007cc2:	1d72      	adds	r2, r6, #5
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	0092      	lsls	r2, r2, #2
 8007cc8:	f000 fc94 	bl	80085f4 <_calloc_r>
 8007ccc:	b160      	cbz	r0, 8007ce8 <_Balloc+0x64>
 8007cce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cd2:	e00e      	b.n	8007cf2 <_Balloc+0x6e>
 8007cd4:	2221      	movs	r2, #33	; 0x21
 8007cd6:	2104      	movs	r1, #4
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fc8b 	bl	80085f4 <_calloc_r>
 8007cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ce0:	60f0      	str	r0, [r6, #12]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e4      	bne.n	8007cb2 <_Balloc+0x2e>
 8007ce8:	2000      	movs	r0, #0
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	6802      	ldr	r2, [r0, #0]
 8007cee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cf8:	e7f7      	b.n	8007cea <_Balloc+0x66>
 8007cfa:	bf00      	nop
 8007cfc:	0800a55e 	.word	0x0800a55e
 8007d00:	0800a664 	.word	0x0800a664

08007d04 <_Bfree>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d08:	4605      	mov	r5, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	b976      	cbnz	r6, 8007d2c <_Bfree+0x28>
 8007d0e:	2010      	movs	r0, #16
 8007d10:	f7ff ff82 	bl	8007c18 <malloc>
 8007d14:	4602      	mov	r2, r0
 8007d16:	6268      	str	r0, [r5, #36]	; 0x24
 8007d18:	b920      	cbnz	r0, 8007d24 <_Bfree+0x20>
 8007d1a:	218a      	movs	r1, #138	; 0x8a
 8007d1c:	4b08      	ldr	r3, [pc, #32]	; (8007d40 <_Bfree+0x3c>)
 8007d1e:	4809      	ldr	r0, [pc, #36]	; (8007d44 <_Bfree+0x40>)
 8007d20:	f000 feae 	bl	8008a80 <__assert_func>
 8007d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d28:	6006      	str	r6, [r0, #0]
 8007d2a:	60c6      	str	r6, [r0, #12]
 8007d2c:	b13c      	cbz	r4, 8007d3e <_Bfree+0x3a>
 8007d2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d30:	6862      	ldr	r2, [r4, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d38:	6021      	str	r1, [r4, #0]
 8007d3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
 8007d40:	0800a55e 	.word	0x0800a55e
 8007d44:	0800a664 	.word	0x0800a664

08007d48 <__multadd>:
 8007d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4c:	4698      	mov	r8, r3
 8007d4e:	460c      	mov	r4, r1
 8007d50:	2300      	movs	r3, #0
 8007d52:	690e      	ldr	r6, [r1, #16]
 8007d54:	4607      	mov	r7, r0
 8007d56:	f101 0014 	add.w	r0, r1, #20
 8007d5a:	6805      	ldr	r5, [r0, #0]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	b2a9      	uxth	r1, r5
 8007d60:	fb02 8101 	mla	r1, r2, r1, r8
 8007d64:	0c2d      	lsrs	r5, r5, #16
 8007d66:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007d6a:	fb02 c505 	mla	r5, r2, r5, ip
 8007d6e:	b289      	uxth	r1, r1
 8007d70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007d74:	429e      	cmp	r6, r3
 8007d76:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007d7a:	f840 1b04 	str.w	r1, [r0], #4
 8007d7e:	dcec      	bgt.n	8007d5a <__multadd+0x12>
 8007d80:	f1b8 0f00 	cmp.w	r8, #0
 8007d84:	d022      	beq.n	8007dcc <__multadd+0x84>
 8007d86:	68a3      	ldr	r3, [r4, #8]
 8007d88:	42b3      	cmp	r3, r6
 8007d8a:	dc19      	bgt.n	8007dc0 <__multadd+0x78>
 8007d8c:	6861      	ldr	r1, [r4, #4]
 8007d8e:	4638      	mov	r0, r7
 8007d90:	3101      	adds	r1, #1
 8007d92:	f7ff ff77 	bl	8007c84 <_Balloc>
 8007d96:	4605      	mov	r5, r0
 8007d98:	b928      	cbnz	r0, 8007da6 <__multadd+0x5e>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	21b5      	movs	r1, #181	; 0xb5
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <__multadd+0x8c>)
 8007da0:	480d      	ldr	r0, [pc, #52]	; (8007dd8 <__multadd+0x90>)
 8007da2:	f000 fe6d 	bl	8008a80 <__assert_func>
 8007da6:	6922      	ldr	r2, [r4, #16]
 8007da8:	f104 010c 	add.w	r1, r4, #12
 8007dac:	3202      	adds	r2, #2
 8007dae:	0092      	lsls	r2, r2, #2
 8007db0:	300c      	adds	r0, #12
 8007db2:	f7ff ff59 	bl	8007c68 <memcpy>
 8007db6:	4621      	mov	r1, r4
 8007db8:	4638      	mov	r0, r7
 8007dba:	f7ff ffa3 	bl	8007d04 <_Bfree>
 8007dbe:	462c      	mov	r4, r5
 8007dc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007dc4:	3601      	adds	r6, #1
 8007dc6:	f8c3 8014 	str.w	r8, [r3, #20]
 8007dca:	6126      	str	r6, [r4, #16]
 8007dcc:	4620      	mov	r0, r4
 8007dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd2:	bf00      	nop
 8007dd4:	0800a5d4 	.word	0x0800a5d4
 8007dd8:	0800a664 	.word	0x0800a664

08007ddc <__s2b>:
 8007ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de0:	4615      	mov	r5, r2
 8007de2:	2209      	movs	r2, #9
 8007de4:	461f      	mov	r7, r3
 8007de6:	3308      	adds	r3, #8
 8007de8:	460c      	mov	r4, r1
 8007dea:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dee:	4606      	mov	r6, r0
 8007df0:	2201      	movs	r2, #1
 8007df2:	2100      	movs	r1, #0
 8007df4:	429a      	cmp	r2, r3
 8007df6:	db09      	blt.n	8007e0c <__s2b+0x30>
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7ff ff43 	bl	8007c84 <_Balloc>
 8007dfe:	b940      	cbnz	r0, 8007e12 <__s2b+0x36>
 8007e00:	4602      	mov	r2, r0
 8007e02:	21ce      	movs	r1, #206	; 0xce
 8007e04:	4b18      	ldr	r3, [pc, #96]	; (8007e68 <__s2b+0x8c>)
 8007e06:	4819      	ldr	r0, [pc, #100]	; (8007e6c <__s2b+0x90>)
 8007e08:	f000 fe3a 	bl	8008a80 <__assert_func>
 8007e0c:	0052      	lsls	r2, r2, #1
 8007e0e:	3101      	adds	r1, #1
 8007e10:	e7f0      	b.n	8007df4 <__s2b+0x18>
 8007e12:	9b08      	ldr	r3, [sp, #32]
 8007e14:	2d09      	cmp	r5, #9
 8007e16:	6143      	str	r3, [r0, #20]
 8007e18:	f04f 0301 	mov.w	r3, #1
 8007e1c:	6103      	str	r3, [r0, #16]
 8007e1e:	dd16      	ble.n	8007e4e <__s2b+0x72>
 8007e20:	f104 0909 	add.w	r9, r4, #9
 8007e24:	46c8      	mov	r8, r9
 8007e26:	442c      	add	r4, r5
 8007e28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007e2c:	4601      	mov	r1, r0
 8007e2e:	220a      	movs	r2, #10
 8007e30:	4630      	mov	r0, r6
 8007e32:	3b30      	subs	r3, #48	; 0x30
 8007e34:	f7ff ff88 	bl	8007d48 <__multadd>
 8007e38:	45a0      	cmp	r8, r4
 8007e3a:	d1f5      	bne.n	8007e28 <__s2b+0x4c>
 8007e3c:	f1a5 0408 	sub.w	r4, r5, #8
 8007e40:	444c      	add	r4, r9
 8007e42:	1b2d      	subs	r5, r5, r4
 8007e44:	1963      	adds	r3, r4, r5
 8007e46:	42bb      	cmp	r3, r7
 8007e48:	db04      	blt.n	8007e54 <__s2b+0x78>
 8007e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4e:	2509      	movs	r5, #9
 8007e50:	340a      	adds	r4, #10
 8007e52:	e7f6      	b.n	8007e42 <__s2b+0x66>
 8007e54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e58:	4601      	mov	r1, r0
 8007e5a:	220a      	movs	r2, #10
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	3b30      	subs	r3, #48	; 0x30
 8007e60:	f7ff ff72 	bl	8007d48 <__multadd>
 8007e64:	e7ee      	b.n	8007e44 <__s2b+0x68>
 8007e66:	bf00      	nop
 8007e68:	0800a5d4 	.word	0x0800a5d4
 8007e6c:	0800a664 	.word	0x0800a664

08007e70 <__hi0bits>:
 8007e70:	0c02      	lsrs	r2, r0, #16
 8007e72:	0412      	lsls	r2, r2, #16
 8007e74:	4603      	mov	r3, r0
 8007e76:	b9ca      	cbnz	r2, 8007eac <__hi0bits+0x3c>
 8007e78:	0403      	lsls	r3, r0, #16
 8007e7a:	2010      	movs	r0, #16
 8007e7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007e80:	bf04      	itt	eq
 8007e82:	021b      	lsleq	r3, r3, #8
 8007e84:	3008      	addeq	r0, #8
 8007e86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007e8a:	bf04      	itt	eq
 8007e8c:	011b      	lsleq	r3, r3, #4
 8007e8e:	3004      	addeq	r0, #4
 8007e90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007e94:	bf04      	itt	eq
 8007e96:	009b      	lsleq	r3, r3, #2
 8007e98:	3002      	addeq	r0, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	db05      	blt.n	8007eaa <__hi0bits+0x3a>
 8007e9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ea2:	f100 0001 	add.w	r0, r0, #1
 8007ea6:	bf08      	it	eq
 8007ea8:	2020      	moveq	r0, #32
 8007eaa:	4770      	bx	lr
 8007eac:	2000      	movs	r0, #0
 8007eae:	e7e5      	b.n	8007e7c <__hi0bits+0xc>

08007eb0 <__lo0bits>:
 8007eb0:	6803      	ldr	r3, [r0, #0]
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	f013 0007 	ands.w	r0, r3, #7
 8007eb8:	d00b      	beq.n	8007ed2 <__lo0bits+0x22>
 8007eba:	07d9      	lsls	r1, r3, #31
 8007ebc:	d422      	bmi.n	8007f04 <__lo0bits+0x54>
 8007ebe:	0798      	lsls	r0, r3, #30
 8007ec0:	bf49      	itett	mi
 8007ec2:	085b      	lsrmi	r3, r3, #1
 8007ec4:	089b      	lsrpl	r3, r3, #2
 8007ec6:	2001      	movmi	r0, #1
 8007ec8:	6013      	strmi	r3, [r2, #0]
 8007eca:	bf5c      	itt	pl
 8007ecc:	2002      	movpl	r0, #2
 8007ece:	6013      	strpl	r3, [r2, #0]
 8007ed0:	4770      	bx	lr
 8007ed2:	b299      	uxth	r1, r3
 8007ed4:	b909      	cbnz	r1, 8007eda <__lo0bits+0x2a>
 8007ed6:	2010      	movs	r0, #16
 8007ed8:	0c1b      	lsrs	r3, r3, #16
 8007eda:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007ede:	bf04      	itt	eq
 8007ee0:	0a1b      	lsreq	r3, r3, #8
 8007ee2:	3008      	addeq	r0, #8
 8007ee4:	0719      	lsls	r1, r3, #28
 8007ee6:	bf04      	itt	eq
 8007ee8:	091b      	lsreq	r3, r3, #4
 8007eea:	3004      	addeq	r0, #4
 8007eec:	0799      	lsls	r1, r3, #30
 8007eee:	bf04      	itt	eq
 8007ef0:	089b      	lsreq	r3, r3, #2
 8007ef2:	3002      	addeq	r0, #2
 8007ef4:	07d9      	lsls	r1, r3, #31
 8007ef6:	d403      	bmi.n	8007f00 <__lo0bits+0x50>
 8007ef8:	085b      	lsrs	r3, r3, #1
 8007efa:	f100 0001 	add.w	r0, r0, #1
 8007efe:	d003      	beq.n	8007f08 <__lo0bits+0x58>
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	4770      	bx	lr
 8007f04:	2000      	movs	r0, #0
 8007f06:	4770      	bx	lr
 8007f08:	2020      	movs	r0, #32
 8007f0a:	4770      	bx	lr

08007f0c <__i2b>:
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	460c      	mov	r4, r1
 8007f10:	2101      	movs	r1, #1
 8007f12:	f7ff feb7 	bl	8007c84 <_Balloc>
 8007f16:	4602      	mov	r2, r0
 8007f18:	b928      	cbnz	r0, 8007f26 <__i2b+0x1a>
 8007f1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f1e:	4b04      	ldr	r3, [pc, #16]	; (8007f30 <__i2b+0x24>)
 8007f20:	4804      	ldr	r0, [pc, #16]	; (8007f34 <__i2b+0x28>)
 8007f22:	f000 fdad 	bl	8008a80 <__assert_func>
 8007f26:	2301      	movs	r3, #1
 8007f28:	6144      	str	r4, [r0, #20]
 8007f2a:	6103      	str	r3, [r0, #16]
 8007f2c:	bd10      	pop	{r4, pc}
 8007f2e:	bf00      	nop
 8007f30:	0800a5d4 	.word	0x0800a5d4
 8007f34:	0800a664 	.word	0x0800a664

08007f38 <__multiply>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	690a      	ldr	r2, [r1, #16]
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	460d      	mov	r5, r1
 8007f44:	429a      	cmp	r2, r3
 8007f46:	bfbe      	ittt	lt
 8007f48:	460b      	movlt	r3, r1
 8007f4a:	4625      	movlt	r5, r4
 8007f4c:	461c      	movlt	r4, r3
 8007f4e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007f52:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f56:	68ab      	ldr	r3, [r5, #8]
 8007f58:	6869      	ldr	r1, [r5, #4]
 8007f5a:	eb0a 0709 	add.w	r7, sl, r9
 8007f5e:	42bb      	cmp	r3, r7
 8007f60:	b085      	sub	sp, #20
 8007f62:	bfb8      	it	lt
 8007f64:	3101      	addlt	r1, #1
 8007f66:	f7ff fe8d 	bl	8007c84 <_Balloc>
 8007f6a:	b930      	cbnz	r0, 8007f7a <__multiply+0x42>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	f240 115d 	movw	r1, #349	; 0x15d
 8007f72:	4b41      	ldr	r3, [pc, #260]	; (8008078 <__multiply+0x140>)
 8007f74:	4841      	ldr	r0, [pc, #260]	; (800807c <__multiply+0x144>)
 8007f76:	f000 fd83 	bl	8008a80 <__assert_func>
 8007f7a:	f100 0614 	add.w	r6, r0, #20
 8007f7e:	4633      	mov	r3, r6
 8007f80:	2200      	movs	r2, #0
 8007f82:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007f86:	4543      	cmp	r3, r8
 8007f88:	d31e      	bcc.n	8007fc8 <__multiply+0x90>
 8007f8a:	f105 0c14 	add.w	ip, r5, #20
 8007f8e:	f104 0314 	add.w	r3, r4, #20
 8007f92:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007f96:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007f9a:	9202      	str	r2, [sp, #8]
 8007f9c:	ebac 0205 	sub.w	r2, ip, r5
 8007fa0:	3a15      	subs	r2, #21
 8007fa2:	f022 0203 	bic.w	r2, r2, #3
 8007fa6:	3204      	adds	r2, #4
 8007fa8:	f105 0115 	add.w	r1, r5, #21
 8007fac:	458c      	cmp	ip, r1
 8007fae:	bf38      	it	cc
 8007fb0:	2204      	movcc	r2, #4
 8007fb2:	9201      	str	r2, [sp, #4]
 8007fb4:	9a02      	ldr	r2, [sp, #8]
 8007fb6:	9303      	str	r3, [sp, #12]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d808      	bhi.n	8007fce <__multiply+0x96>
 8007fbc:	2f00      	cmp	r7, #0
 8007fbe:	dc55      	bgt.n	800806c <__multiply+0x134>
 8007fc0:	6107      	str	r7, [r0, #16]
 8007fc2:	b005      	add	sp, #20
 8007fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc8:	f843 2b04 	str.w	r2, [r3], #4
 8007fcc:	e7db      	b.n	8007f86 <__multiply+0x4e>
 8007fce:	f8b3 a000 	ldrh.w	sl, [r3]
 8007fd2:	f1ba 0f00 	cmp.w	sl, #0
 8007fd6:	d020      	beq.n	800801a <__multiply+0xe2>
 8007fd8:	46b1      	mov	r9, r6
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f105 0e14 	add.w	lr, r5, #20
 8007fe0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007fe4:	f8d9 b000 	ldr.w	fp, [r9]
 8007fe8:	b2a1      	uxth	r1, r4
 8007fea:	fa1f fb8b 	uxth.w	fp, fp
 8007fee:	fb0a b101 	mla	r1, sl, r1, fp
 8007ff2:	4411      	add	r1, r2
 8007ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ff8:	0c24      	lsrs	r4, r4, #16
 8007ffa:	0c12      	lsrs	r2, r2, #16
 8007ffc:	fb0a 2404 	mla	r4, sl, r4, r2
 8008000:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008004:	b289      	uxth	r1, r1
 8008006:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800800a:	45f4      	cmp	ip, lr
 800800c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008010:	f849 1b04 	str.w	r1, [r9], #4
 8008014:	d8e4      	bhi.n	8007fe0 <__multiply+0xa8>
 8008016:	9901      	ldr	r1, [sp, #4]
 8008018:	5072      	str	r2, [r6, r1]
 800801a:	9a03      	ldr	r2, [sp, #12]
 800801c:	3304      	adds	r3, #4
 800801e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008022:	f1b9 0f00 	cmp.w	r9, #0
 8008026:	d01f      	beq.n	8008068 <__multiply+0x130>
 8008028:	46b6      	mov	lr, r6
 800802a:	f04f 0a00 	mov.w	sl, #0
 800802e:	6834      	ldr	r4, [r6, #0]
 8008030:	f105 0114 	add.w	r1, r5, #20
 8008034:	880a      	ldrh	r2, [r1, #0]
 8008036:	f8be b002 	ldrh.w	fp, [lr, #2]
 800803a:	b2a4      	uxth	r4, r4
 800803c:	fb09 b202 	mla	r2, r9, r2, fp
 8008040:	4492      	add	sl, r2
 8008042:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008046:	f84e 4b04 	str.w	r4, [lr], #4
 800804a:	f851 4b04 	ldr.w	r4, [r1], #4
 800804e:	f8be 2000 	ldrh.w	r2, [lr]
 8008052:	0c24      	lsrs	r4, r4, #16
 8008054:	fb09 2404 	mla	r4, r9, r4, r2
 8008058:	458c      	cmp	ip, r1
 800805a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800805e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008062:	d8e7      	bhi.n	8008034 <__multiply+0xfc>
 8008064:	9a01      	ldr	r2, [sp, #4]
 8008066:	50b4      	str	r4, [r6, r2]
 8008068:	3604      	adds	r6, #4
 800806a:	e7a3      	b.n	8007fb4 <__multiply+0x7c>
 800806c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1a5      	bne.n	8007fc0 <__multiply+0x88>
 8008074:	3f01      	subs	r7, #1
 8008076:	e7a1      	b.n	8007fbc <__multiply+0x84>
 8008078:	0800a5d4 	.word	0x0800a5d4
 800807c:	0800a664 	.word	0x0800a664

08008080 <__pow5mult>:
 8008080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008084:	4615      	mov	r5, r2
 8008086:	f012 0203 	ands.w	r2, r2, #3
 800808a:	4606      	mov	r6, r0
 800808c:	460f      	mov	r7, r1
 800808e:	d007      	beq.n	80080a0 <__pow5mult+0x20>
 8008090:	4c25      	ldr	r4, [pc, #148]	; (8008128 <__pow5mult+0xa8>)
 8008092:	3a01      	subs	r2, #1
 8008094:	2300      	movs	r3, #0
 8008096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800809a:	f7ff fe55 	bl	8007d48 <__multadd>
 800809e:	4607      	mov	r7, r0
 80080a0:	10ad      	asrs	r5, r5, #2
 80080a2:	d03d      	beq.n	8008120 <__pow5mult+0xa0>
 80080a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080a6:	b97c      	cbnz	r4, 80080c8 <__pow5mult+0x48>
 80080a8:	2010      	movs	r0, #16
 80080aa:	f7ff fdb5 	bl	8007c18 <malloc>
 80080ae:	4602      	mov	r2, r0
 80080b0:	6270      	str	r0, [r6, #36]	; 0x24
 80080b2:	b928      	cbnz	r0, 80080c0 <__pow5mult+0x40>
 80080b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80080b8:	4b1c      	ldr	r3, [pc, #112]	; (800812c <__pow5mult+0xac>)
 80080ba:	481d      	ldr	r0, [pc, #116]	; (8008130 <__pow5mult+0xb0>)
 80080bc:	f000 fce0 	bl	8008a80 <__assert_func>
 80080c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080c4:	6004      	str	r4, [r0, #0]
 80080c6:	60c4      	str	r4, [r0, #12]
 80080c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80080cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080d0:	b94c      	cbnz	r4, 80080e6 <__pow5mult+0x66>
 80080d2:	f240 2171 	movw	r1, #625	; 0x271
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7ff ff18 	bl	8007f0c <__i2b>
 80080dc:	2300      	movs	r3, #0
 80080de:	4604      	mov	r4, r0
 80080e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80080e4:	6003      	str	r3, [r0, #0]
 80080e6:	f04f 0900 	mov.w	r9, #0
 80080ea:	07eb      	lsls	r3, r5, #31
 80080ec:	d50a      	bpl.n	8008104 <__pow5mult+0x84>
 80080ee:	4639      	mov	r1, r7
 80080f0:	4622      	mov	r2, r4
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7ff ff20 	bl	8007f38 <__multiply>
 80080f8:	4680      	mov	r8, r0
 80080fa:	4639      	mov	r1, r7
 80080fc:	4630      	mov	r0, r6
 80080fe:	f7ff fe01 	bl	8007d04 <_Bfree>
 8008102:	4647      	mov	r7, r8
 8008104:	106d      	asrs	r5, r5, #1
 8008106:	d00b      	beq.n	8008120 <__pow5mult+0xa0>
 8008108:	6820      	ldr	r0, [r4, #0]
 800810a:	b938      	cbnz	r0, 800811c <__pow5mult+0x9c>
 800810c:	4622      	mov	r2, r4
 800810e:	4621      	mov	r1, r4
 8008110:	4630      	mov	r0, r6
 8008112:	f7ff ff11 	bl	8007f38 <__multiply>
 8008116:	6020      	str	r0, [r4, #0]
 8008118:	f8c0 9000 	str.w	r9, [r0]
 800811c:	4604      	mov	r4, r0
 800811e:	e7e4      	b.n	80080ea <__pow5mult+0x6a>
 8008120:	4638      	mov	r0, r7
 8008122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008126:	bf00      	nop
 8008128:	0800a7b8 	.word	0x0800a7b8
 800812c:	0800a55e 	.word	0x0800a55e
 8008130:	0800a664 	.word	0x0800a664

08008134 <__lshift>:
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	460c      	mov	r4, r1
 800813a:	4607      	mov	r7, r0
 800813c:	4691      	mov	r9, r2
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	6849      	ldr	r1, [r1, #4]
 8008142:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800814c:	f108 0601 	add.w	r6, r8, #1
 8008150:	42b3      	cmp	r3, r6
 8008152:	db0b      	blt.n	800816c <__lshift+0x38>
 8008154:	4638      	mov	r0, r7
 8008156:	f7ff fd95 	bl	8007c84 <_Balloc>
 800815a:	4605      	mov	r5, r0
 800815c:	b948      	cbnz	r0, 8008172 <__lshift+0x3e>
 800815e:	4602      	mov	r2, r0
 8008160:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008164:	4b27      	ldr	r3, [pc, #156]	; (8008204 <__lshift+0xd0>)
 8008166:	4828      	ldr	r0, [pc, #160]	; (8008208 <__lshift+0xd4>)
 8008168:	f000 fc8a 	bl	8008a80 <__assert_func>
 800816c:	3101      	adds	r1, #1
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	e7ee      	b.n	8008150 <__lshift+0x1c>
 8008172:	2300      	movs	r3, #0
 8008174:	f100 0114 	add.w	r1, r0, #20
 8008178:	f100 0210 	add.w	r2, r0, #16
 800817c:	4618      	mov	r0, r3
 800817e:	4553      	cmp	r3, sl
 8008180:	db33      	blt.n	80081ea <__lshift+0xb6>
 8008182:	6920      	ldr	r0, [r4, #16]
 8008184:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008188:	f104 0314 	add.w	r3, r4, #20
 800818c:	f019 091f 	ands.w	r9, r9, #31
 8008190:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008194:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008198:	d02b      	beq.n	80081f2 <__lshift+0xbe>
 800819a:	468a      	mov	sl, r1
 800819c:	2200      	movs	r2, #0
 800819e:	f1c9 0e20 	rsb	lr, r9, #32
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	fa00 f009 	lsl.w	r0, r0, r9
 80081a8:	4302      	orrs	r2, r0
 80081aa:	f84a 2b04 	str.w	r2, [sl], #4
 80081ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b2:	459c      	cmp	ip, r3
 80081b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80081b8:	d8f3      	bhi.n	80081a2 <__lshift+0x6e>
 80081ba:	ebac 0304 	sub.w	r3, ip, r4
 80081be:	3b15      	subs	r3, #21
 80081c0:	f023 0303 	bic.w	r3, r3, #3
 80081c4:	3304      	adds	r3, #4
 80081c6:	f104 0015 	add.w	r0, r4, #21
 80081ca:	4584      	cmp	ip, r0
 80081cc:	bf38      	it	cc
 80081ce:	2304      	movcc	r3, #4
 80081d0:	50ca      	str	r2, [r1, r3]
 80081d2:	b10a      	cbz	r2, 80081d8 <__lshift+0xa4>
 80081d4:	f108 0602 	add.w	r6, r8, #2
 80081d8:	3e01      	subs	r6, #1
 80081da:	4638      	mov	r0, r7
 80081dc:	4621      	mov	r1, r4
 80081de:	612e      	str	r6, [r5, #16]
 80081e0:	f7ff fd90 	bl	8007d04 <_Bfree>
 80081e4:	4628      	mov	r0, r5
 80081e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80081ee:	3301      	adds	r3, #1
 80081f0:	e7c5      	b.n	800817e <__lshift+0x4a>
 80081f2:	3904      	subs	r1, #4
 80081f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f8:	459c      	cmp	ip, r3
 80081fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80081fe:	d8f9      	bhi.n	80081f4 <__lshift+0xc0>
 8008200:	e7ea      	b.n	80081d8 <__lshift+0xa4>
 8008202:	bf00      	nop
 8008204:	0800a5d4 	.word	0x0800a5d4
 8008208:	0800a664 	.word	0x0800a664

0800820c <__mcmp>:
 800820c:	4603      	mov	r3, r0
 800820e:	690a      	ldr	r2, [r1, #16]
 8008210:	6900      	ldr	r0, [r0, #16]
 8008212:	b530      	push	{r4, r5, lr}
 8008214:	1a80      	subs	r0, r0, r2
 8008216:	d10d      	bne.n	8008234 <__mcmp+0x28>
 8008218:	3314      	adds	r3, #20
 800821a:	3114      	adds	r1, #20
 800821c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008220:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008224:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008228:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800822c:	4295      	cmp	r5, r2
 800822e:	d002      	beq.n	8008236 <__mcmp+0x2a>
 8008230:	d304      	bcc.n	800823c <__mcmp+0x30>
 8008232:	2001      	movs	r0, #1
 8008234:	bd30      	pop	{r4, r5, pc}
 8008236:	42a3      	cmp	r3, r4
 8008238:	d3f4      	bcc.n	8008224 <__mcmp+0x18>
 800823a:	e7fb      	b.n	8008234 <__mcmp+0x28>
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	e7f8      	b.n	8008234 <__mcmp+0x28>
	...

08008244 <__mdiff>:
 8008244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008248:	460c      	mov	r4, r1
 800824a:	4606      	mov	r6, r0
 800824c:	4611      	mov	r1, r2
 800824e:	4620      	mov	r0, r4
 8008250:	4692      	mov	sl, r2
 8008252:	f7ff ffdb 	bl	800820c <__mcmp>
 8008256:	1e05      	subs	r5, r0, #0
 8008258:	d111      	bne.n	800827e <__mdiff+0x3a>
 800825a:	4629      	mov	r1, r5
 800825c:	4630      	mov	r0, r6
 800825e:	f7ff fd11 	bl	8007c84 <_Balloc>
 8008262:	4602      	mov	r2, r0
 8008264:	b928      	cbnz	r0, 8008272 <__mdiff+0x2e>
 8008266:	f240 2132 	movw	r1, #562	; 0x232
 800826a:	4b3c      	ldr	r3, [pc, #240]	; (800835c <__mdiff+0x118>)
 800826c:	483c      	ldr	r0, [pc, #240]	; (8008360 <__mdiff+0x11c>)
 800826e:	f000 fc07 	bl	8008a80 <__assert_func>
 8008272:	2301      	movs	r3, #1
 8008274:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008278:	4610      	mov	r0, r2
 800827a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827e:	bfa4      	itt	ge
 8008280:	4653      	movge	r3, sl
 8008282:	46a2      	movge	sl, r4
 8008284:	4630      	mov	r0, r6
 8008286:	f8da 1004 	ldr.w	r1, [sl, #4]
 800828a:	bfa6      	itte	ge
 800828c:	461c      	movge	r4, r3
 800828e:	2500      	movge	r5, #0
 8008290:	2501      	movlt	r5, #1
 8008292:	f7ff fcf7 	bl	8007c84 <_Balloc>
 8008296:	4602      	mov	r2, r0
 8008298:	b918      	cbnz	r0, 80082a2 <__mdiff+0x5e>
 800829a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800829e:	4b2f      	ldr	r3, [pc, #188]	; (800835c <__mdiff+0x118>)
 80082a0:	e7e4      	b.n	800826c <__mdiff+0x28>
 80082a2:	f100 0814 	add.w	r8, r0, #20
 80082a6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80082aa:	60c5      	str	r5, [r0, #12]
 80082ac:	f04f 0c00 	mov.w	ip, #0
 80082b0:	f10a 0514 	add.w	r5, sl, #20
 80082b4:	f10a 0010 	add.w	r0, sl, #16
 80082b8:	46c2      	mov	sl, r8
 80082ba:	6926      	ldr	r6, [r4, #16]
 80082bc:	f104 0914 	add.w	r9, r4, #20
 80082c0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80082c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80082c8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80082cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80082d0:	fa1f f18b 	uxth.w	r1, fp
 80082d4:	4461      	add	r1, ip
 80082d6:	fa1f fc83 	uxth.w	ip, r3
 80082da:	0c1b      	lsrs	r3, r3, #16
 80082dc:	eba1 010c 	sub.w	r1, r1, ip
 80082e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082e4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80082e8:	b289      	uxth	r1, r1
 80082ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80082ee:	454e      	cmp	r6, r9
 80082f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082f4:	f84a 3b04 	str.w	r3, [sl], #4
 80082f8:	d8e6      	bhi.n	80082c8 <__mdiff+0x84>
 80082fa:	1b33      	subs	r3, r6, r4
 80082fc:	3b15      	subs	r3, #21
 80082fe:	f023 0303 	bic.w	r3, r3, #3
 8008302:	3415      	adds	r4, #21
 8008304:	3304      	adds	r3, #4
 8008306:	42a6      	cmp	r6, r4
 8008308:	bf38      	it	cc
 800830a:	2304      	movcc	r3, #4
 800830c:	441d      	add	r5, r3
 800830e:	4443      	add	r3, r8
 8008310:	461e      	mov	r6, r3
 8008312:	462c      	mov	r4, r5
 8008314:	4574      	cmp	r4, lr
 8008316:	d30e      	bcc.n	8008336 <__mdiff+0xf2>
 8008318:	f10e 0103 	add.w	r1, lr, #3
 800831c:	1b49      	subs	r1, r1, r5
 800831e:	f021 0103 	bic.w	r1, r1, #3
 8008322:	3d03      	subs	r5, #3
 8008324:	45ae      	cmp	lr, r5
 8008326:	bf38      	it	cc
 8008328:	2100      	movcc	r1, #0
 800832a:	4419      	add	r1, r3
 800832c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008330:	b18b      	cbz	r3, 8008356 <__mdiff+0x112>
 8008332:	6117      	str	r7, [r2, #16]
 8008334:	e7a0      	b.n	8008278 <__mdiff+0x34>
 8008336:	f854 8b04 	ldr.w	r8, [r4], #4
 800833a:	fa1f f188 	uxth.w	r1, r8
 800833e:	4461      	add	r1, ip
 8008340:	1408      	asrs	r0, r1, #16
 8008342:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008346:	b289      	uxth	r1, r1
 8008348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800834c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008350:	f846 1b04 	str.w	r1, [r6], #4
 8008354:	e7de      	b.n	8008314 <__mdiff+0xd0>
 8008356:	3f01      	subs	r7, #1
 8008358:	e7e8      	b.n	800832c <__mdiff+0xe8>
 800835a:	bf00      	nop
 800835c:	0800a5d4 	.word	0x0800a5d4
 8008360:	0800a664 	.word	0x0800a664

08008364 <__ulp>:
 8008364:	4b11      	ldr	r3, [pc, #68]	; (80083ac <__ulp+0x48>)
 8008366:	400b      	ands	r3, r1
 8008368:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800836c:	2b00      	cmp	r3, #0
 800836e:	dd02      	ble.n	8008376 <__ulp+0x12>
 8008370:	2000      	movs	r0, #0
 8008372:	4619      	mov	r1, r3
 8008374:	4770      	bx	lr
 8008376:	425b      	negs	r3, r3
 8008378:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800837c:	f04f 0000 	mov.w	r0, #0
 8008380:	f04f 0100 	mov.w	r1, #0
 8008384:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008388:	da04      	bge.n	8008394 <__ulp+0x30>
 800838a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800838e:	fa43 f102 	asr.w	r1, r3, r2
 8008392:	4770      	bx	lr
 8008394:	f1a2 0314 	sub.w	r3, r2, #20
 8008398:	2b1e      	cmp	r3, #30
 800839a:	bfd6      	itet	le
 800839c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80083a0:	2301      	movgt	r3, #1
 80083a2:	fa22 f303 	lsrle.w	r3, r2, r3
 80083a6:	4618      	mov	r0, r3
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	7ff00000 	.word	0x7ff00000

080083b0 <__b2d>:
 80083b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b4:	6907      	ldr	r7, [r0, #16]
 80083b6:	f100 0914 	add.w	r9, r0, #20
 80083ba:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80083be:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80083c2:	f1a7 0804 	sub.w	r8, r7, #4
 80083c6:	4630      	mov	r0, r6
 80083c8:	f7ff fd52 	bl	8007e70 <__hi0bits>
 80083cc:	f1c0 0320 	rsb	r3, r0, #32
 80083d0:	280a      	cmp	r0, #10
 80083d2:	600b      	str	r3, [r1, #0]
 80083d4:	491f      	ldr	r1, [pc, #124]	; (8008454 <__b2d+0xa4>)
 80083d6:	dc17      	bgt.n	8008408 <__b2d+0x58>
 80083d8:	45c1      	cmp	r9, r8
 80083da:	bf28      	it	cs
 80083dc:	2200      	movcs	r2, #0
 80083de:	f1c0 0c0b 	rsb	ip, r0, #11
 80083e2:	fa26 f30c 	lsr.w	r3, r6, ip
 80083e6:	bf38      	it	cc
 80083e8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80083ec:	ea43 0501 	orr.w	r5, r3, r1
 80083f0:	f100 0315 	add.w	r3, r0, #21
 80083f4:	fa06 f303 	lsl.w	r3, r6, r3
 80083f8:	fa22 f20c 	lsr.w	r2, r2, ip
 80083fc:	ea43 0402 	orr.w	r4, r3, r2
 8008400:	4620      	mov	r0, r4
 8008402:	4629      	mov	r1, r5
 8008404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008408:	45c1      	cmp	r9, r8
 800840a:	bf2e      	itee	cs
 800840c:	2200      	movcs	r2, #0
 800840e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008412:	f1a7 0808 	subcc.w	r8, r7, #8
 8008416:	f1b0 030b 	subs.w	r3, r0, #11
 800841a:	d016      	beq.n	800844a <__b2d+0x9a>
 800841c:	f1c3 0720 	rsb	r7, r3, #32
 8008420:	fa22 f107 	lsr.w	r1, r2, r7
 8008424:	45c8      	cmp	r8, r9
 8008426:	fa06 f603 	lsl.w	r6, r6, r3
 800842a:	ea46 0601 	orr.w	r6, r6, r1
 800842e:	bf94      	ite	ls
 8008430:	2100      	movls	r1, #0
 8008432:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008436:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800843a:	fa02 f003 	lsl.w	r0, r2, r3
 800843e:	40f9      	lsrs	r1, r7
 8008440:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008444:	ea40 0401 	orr.w	r4, r0, r1
 8008448:	e7da      	b.n	8008400 <__b2d+0x50>
 800844a:	4614      	mov	r4, r2
 800844c:	ea46 0501 	orr.w	r5, r6, r1
 8008450:	e7d6      	b.n	8008400 <__b2d+0x50>
 8008452:	bf00      	nop
 8008454:	3ff00000 	.word	0x3ff00000

08008458 <__d2b>:
 8008458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800845c:	2101      	movs	r1, #1
 800845e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008462:	4690      	mov	r8, r2
 8008464:	461d      	mov	r5, r3
 8008466:	f7ff fc0d 	bl	8007c84 <_Balloc>
 800846a:	4604      	mov	r4, r0
 800846c:	b930      	cbnz	r0, 800847c <__d2b+0x24>
 800846e:	4602      	mov	r2, r0
 8008470:	f240 310a 	movw	r1, #778	; 0x30a
 8008474:	4b24      	ldr	r3, [pc, #144]	; (8008508 <__d2b+0xb0>)
 8008476:	4825      	ldr	r0, [pc, #148]	; (800850c <__d2b+0xb4>)
 8008478:	f000 fb02 	bl	8008a80 <__assert_func>
 800847c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008480:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008484:	bb2d      	cbnz	r5, 80084d2 <__d2b+0x7a>
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	f1b8 0300 	subs.w	r3, r8, #0
 800848c:	d026      	beq.n	80084dc <__d2b+0x84>
 800848e:	4668      	mov	r0, sp
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	f7ff fd0d 	bl	8007eb0 <__lo0bits>
 8008496:	9900      	ldr	r1, [sp, #0]
 8008498:	b1f0      	cbz	r0, 80084d8 <__d2b+0x80>
 800849a:	9a01      	ldr	r2, [sp, #4]
 800849c:	f1c0 0320 	rsb	r3, r0, #32
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	430b      	orrs	r3, r1
 80084a6:	40c2      	lsrs	r2, r0
 80084a8:	6163      	str	r3, [r4, #20]
 80084aa:	9201      	str	r2, [sp, #4]
 80084ac:	9b01      	ldr	r3, [sp, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bf14      	ite	ne
 80084b2:	2102      	movne	r1, #2
 80084b4:	2101      	moveq	r1, #1
 80084b6:	61a3      	str	r3, [r4, #24]
 80084b8:	6121      	str	r1, [r4, #16]
 80084ba:	b1c5      	cbz	r5, 80084ee <__d2b+0x96>
 80084bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084c0:	4405      	add	r5, r0
 80084c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084c6:	603d      	str	r5, [r7, #0]
 80084c8:	6030      	str	r0, [r6, #0]
 80084ca:	4620      	mov	r0, r4
 80084cc:	b002      	add	sp, #8
 80084ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084d6:	e7d6      	b.n	8008486 <__d2b+0x2e>
 80084d8:	6161      	str	r1, [r4, #20]
 80084da:	e7e7      	b.n	80084ac <__d2b+0x54>
 80084dc:	a801      	add	r0, sp, #4
 80084de:	f7ff fce7 	bl	8007eb0 <__lo0bits>
 80084e2:	2101      	movs	r1, #1
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	6121      	str	r1, [r4, #16]
 80084e8:	6163      	str	r3, [r4, #20]
 80084ea:	3020      	adds	r0, #32
 80084ec:	e7e5      	b.n	80084ba <__d2b+0x62>
 80084ee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80084f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084f6:	6038      	str	r0, [r7, #0]
 80084f8:	6918      	ldr	r0, [r3, #16]
 80084fa:	f7ff fcb9 	bl	8007e70 <__hi0bits>
 80084fe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008502:	6031      	str	r1, [r6, #0]
 8008504:	e7e1      	b.n	80084ca <__d2b+0x72>
 8008506:	bf00      	nop
 8008508:	0800a5d4 	.word	0x0800a5d4
 800850c:	0800a664 	.word	0x0800a664

08008510 <__ratio>:
 8008510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	4688      	mov	r8, r1
 8008516:	4669      	mov	r1, sp
 8008518:	4681      	mov	r9, r0
 800851a:	f7ff ff49 	bl	80083b0 <__b2d>
 800851e:	460f      	mov	r7, r1
 8008520:	4604      	mov	r4, r0
 8008522:	460d      	mov	r5, r1
 8008524:	4640      	mov	r0, r8
 8008526:	a901      	add	r1, sp, #4
 8008528:	f7ff ff42 	bl	80083b0 <__b2d>
 800852c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008530:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008534:	468b      	mov	fp, r1
 8008536:	eba3 0c02 	sub.w	ip, r3, r2
 800853a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800853e:	1a9b      	subs	r3, r3, r2
 8008540:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008544:	2b00      	cmp	r3, #0
 8008546:	bfd5      	itete	le
 8008548:	460a      	movle	r2, r1
 800854a:	462a      	movgt	r2, r5
 800854c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008550:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008554:	bfd8      	it	le
 8008556:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800855a:	465b      	mov	r3, fp
 800855c:	4602      	mov	r2, r0
 800855e:	4639      	mov	r1, r7
 8008560:	4620      	mov	r0, r4
 8008562:	f7f8 f8e3 	bl	800072c <__aeabi_ddiv>
 8008566:	b003      	add	sp, #12
 8008568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800856c <__copybits>:
 800856c:	3901      	subs	r1, #1
 800856e:	b570      	push	{r4, r5, r6, lr}
 8008570:	1149      	asrs	r1, r1, #5
 8008572:	6914      	ldr	r4, [r2, #16]
 8008574:	3101      	adds	r1, #1
 8008576:	f102 0314 	add.w	r3, r2, #20
 800857a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800857e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008582:	1f05      	subs	r5, r0, #4
 8008584:	42a3      	cmp	r3, r4
 8008586:	d30c      	bcc.n	80085a2 <__copybits+0x36>
 8008588:	1aa3      	subs	r3, r4, r2
 800858a:	3b11      	subs	r3, #17
 800858c:	f023 0303 	bic.w	r3, r3, #3
 8008590:	3211      	adds	r2, #17
 8008592:	42a2      	cmp	r2, r4
 8008594:	bf88      	it	hi
 8008596:	2300      	movhi	r3, #0
 8008598:	4418      	add	r0, r3
 800859a:	2300      	movs	r3, #0
 800859c:	4288      	cmp	r0, r1
 800859e:	d305      	bcc.n	80085ac <__copybits+0x40>
 80085a0:	bd70      	pop	{r4, r5, r6, pc}
 80085a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80085a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80085aa:	e7eb      	b.n	8008584 <__copybits+0x18>
 80085ac:	f840 3b04 	str.w	r3, [r0], #4
 80085b0:	e7f4      	b.n	800859c <__copybits+0x30>

080085b2 <__any_on>:
 80085b2:	f100 0214 	add.w	r2, r0, #20
 80085b6:	6900      	ldr	r0, [r0, #16]
 80085b8:	114b      	asrs	r3, r1, #5
 80085ba:	4298      	cmp	r0, r3
 80085bc:	b510      	push	{r4, lr}
 80085be:	db11      	blt.n	80085e4 <__any_on+0x32>
 80085c0:	dd0a      	ble.n	80085d8 <__any_on+0x26>
 80085c2:	f011 011f 	ands.w	r1, r1, #31
 80085c6:	d007      	beq.n	80085d8 <__any_on+0x26>
 80085c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80085cc:	fa24 f001 	lsr.w	r0, r4, r1
 80085d0:	fa00 f101 	lsl.w	r1, r0, r1
 80085d4:	428c      	cmp	r4, r1
 80085d6:	d10b      	bne.n	80085f0 <__any_on+0x3e>
 80085d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085dc:	4293      	cmp	r3, r2
 80085de:	d803      	bhi.n	80085e8 <__any_on+0x36>
 80085e0:	2000      	movs	r0, #0
 80085e2:	bd10      	pop	{r4, pc}
 80085e4:	4603      	mov	r3, r0
 80085e6:	e7f7      	b.n	80085d8 <__any_on+0x26>
 80085e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085ec:	2900      	cmp	r1, #0
 80085ee:	d0f5      	beq.n	80085dc <__any_on+0x2a>
 80085f0:	2001      	movs	r0, #1
 80085f2:	e7f6      	b.n	80085e2 <__any_on+0x30>

080085f4 <_calloc_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	fb02 f501 	mul.w	r5, r2, r1
 80085fa:	4629      	mov	r1, r5
 80085fc:	f000 f854 	bl	80086a8 <_malloc_r>
 8008600:	4604      	mov	r4, r0
 8008602:	b118      	cbz	r0, 800860c <_calloc_r+0x18>
 8008604:	462a      	mov	r2, r5
 8008606:	2100      	movs	r1, #0
 8008608:	f7fc fbde 	bl	8004dc8 <memset>
 800860c:	4620      	mov	r0, r4
 800860e:	bd38      	pop	{r3, r4, r5, pc}

08008610 <_free_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4605      	mov	r5, r0
 8008614:	2900      	cmp	r1, #0
 8008616:	d043      	beq.n	80086a0 <_free_r+0x90>
 8008618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800861c:	1f0c      	subs	r4, r1, #4
 800861e:	2b00      	cmp	r3, #0
 8008620:	bfb8      	it	lt
 8008622:	18e4      	addlt	r4, r4, r3
 8008624:	f000 fa76 	bl	8008b14 <__malloc_lock>
 8008628:	4a1e      	ldr	r2, [pc, #120]	; (80086a4 <_free_r+0x94>)
 800862a:	6813      	ldr	r3, [r2, #0]
 800862c:	4610      	mov	r0, r2
 800862e:	b933      	cbnz	r3, 800863e <_free_r+0x2e>
 8008630:	6063      	str	r3, [r4, #4]
 8008632:	6014      	str	r4, [r2, #0]
 8008634:	4628      	mov	r0, r5
 8008636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800863a:	f000 ba71 	b.w	8008b20 <__malloc_unlock>
 800863e:	42a3      	cmp	r3, r4
 8008640:	d90a      	bls.n	8008658 <_free_r+0x48>
 8008642:	6821      	ldr	r1, [r4, #0]
 8008644:	1862      	adds	r2, r4, r1
 8008646:	4293      	cmp	r3, r2
 8008648:	bf01      	itttt	eq
 800864a:	681a      	ldreq	r2, [r3, #0]
 800864c:	685b      	ldreq	r3, [r3, #4]
 800864e:	1852      	addeq	r2, r2, r1
 8008650:	6022      	streq	r2, [r4, #0]
 8008652:	6063      	str	r3, [r4, #4]
 8008654:	6004      	str	r4, [r0, #0]
 8008656:	e7ed      	b.n	8008634 <_free_r+0x24>
 8008658:	461a      	mov	r2, r3
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	b10b      	cbz	r3, 8008662 <_free_r+0x52>
 800865e:	42a3      	cmp	r3, r4
 8008660:	d9fa      	bls.n	8008658 <_free_r+0x48>
 8008662:	6811      	ldr	r1, [r2, #0]
 8008664:	1850      	adds	r0, r2, r1
 8008666:	42a0      	cmp	r0, r4
 8008668:	d10b      	bne.n	8008682 <_free_r+0x72>
 800866a:	6820      	ldr	r0, [r4, #0]
 800866c:	4401      	add	r1, r0
 800866e:	1850      	adds	r0, r2, r1
 8008670:	4283      	cmp	r3, r0
 8008672:	6011      	str	r1, [r2, #0]
 8008674:	d1de      	bne.n	8008634 <_free_r+0x24>
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	4401      	add	r1, r0
 800867c:	6011      	str	r1, [r2, #0]
 800867e:	6053      	str	r3, [r2, #4]
 8008680:	e7d8      	b.n	8008634 <_free_r+0x24>
 8008682:	d902      	bls.n	800868a <_free_r+0x7a>
 8008684:	230c      	movs	r3, #12
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	e7d4      	b.n	8008634 <_free_r+0x24>
 800868a:	6820      	ldr	r0, [r4, #0]
 800868c:	1821      	adds	r1, r4, r0
 800868e:	428b      	cmp	r3, r1
 8008690:	bf01      	itttt	eq
 8008692:	6819      	ldreq	r1, [r3, #0]
 8008694:	685b      	ldreq	r3, [r3, #4]
 8008696:	1809      	addeq	r1, r1, r0
 8008698:	6021      	streq	r1, [r4, #0]
 800869a:	6063      	str	r3, [r4, #4]
 800869c:	6054      	str	r4, [r2, #4]
 800869e:	e7c9      	b.n	8008634 <_free_r+0x24>
 80086a0:	bd38      	pop	{r3, r4, r5, pc}
 80086a2:	bf00      	nop
 80086a4:	20000270 	.word	0x20000270

080086a8 <_malloc_r>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	1ccd      	adds	r5, r1, #3
 80086ac:	f025 0503 	bic.w	r5, r5, #3
 80086b0:	3508      	adds	r5, #8
 80086b2:	2d0c      	cmp	r5, #12
 80086b4:	bf38      	it	cc
 80086b6:	250c      	movcc	r5, #12
 80086b8:	2d00      	cmp	r5, #0
 80086ba:	4606      	mov	r6, r0
 80086bc:	db01      	blt.n	80086c2 <_malloc_r+0x1a>
 80086be:	42a9      	cmp	r1, r5
 80086c0:	d903      	bls.n	80086ca <_malloc_r+0x22>
 80086c2:	230c      	movs	r3, #12
 80086c4:	6033      	str	r3, [r6, #0]
 80086c6:	2000      	movs	r0, #0
 80086c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ca:	f000 fa23 	bl	8008b14 <__malloc_lock>
 80086ce:	4921      	ldr	r1, [pc, #132]	; (8008754 <_malloc_r+0xac>)
 80086d0:	680a      	ldr	r2, [r1, #0]
 80086d2:	4614      	mov	r4, r2
 80086d4:	b99c      	cbnz	r4, 80086fe <_malloc_r+0x56>
 80086d6:	4f20      	ldr	r7, [pc, #128]	; (8008758 <_malloc_r+0xb0>)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	b923      	cbnz	r3, 80086e6 <_malloc_r+0x3e>
 80086dc:	4621      	mov	r1, r4
 80086de:	4630      	mov	r0, r6
 80086e0:	f000 f99e 	bl	8008a20 <_sbrk_r>
 80086e4:	6038      	str	r0, [r7, #0]
 80086e6:	4629      	mov	r1, r5
 80086e8:	4630      	mov	r0, r6
 80086ea:	f000 f999 	bl	8008a20 <_sbrk_r>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d123      	bne.n	800873a <_malloc_r+0x92>
 80086f2:	230c      	movs	r3, #12
 80086f4:	4630      	mov	r0, r6
 80086f6:	6033      	str	r3, [r6, #0]
 80086f8:	f000 fa12 	bl	8008b20 <__malloc_unlock>
 80086fc:	e7e3      	b.n	80086c6 <_malloc_r+0x1e>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	1b5b      	subs	r3, r3, r5
 8008702:	d417      	bmi.n	8008734 <_malloc_r+0x8c>
 8008704:	2b0b      	cmp	r3, #11
 8008706:	d903      	bls.n	8008710 <_malloc_r+0x68>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	441c      	add	r4, r3
 800870c:	6025      	str	r5, [r4, #0]
 800870e:	e004      	b.n	800871a <_malloc_r+0x72>
 8008710:	6863      	ldr	r3, [r4, #4]
 8008712:	42a2      	cmp	r2, r4
 8008714:	bf0c      	ite	eq
 8008716:	600b      	streq	r3, [r1, #0]
 8008718:	6053      	strne	r3, [r2, #4]
 800871a:	4630      	mov	r0, r6
 800871c:	f000 fa00 	bl	8008b20 <__malloc_unlock>
 8008720:	f104 000b 	add.w	r0, r4, #11
 8008724:	1d23      	adds	r3, r4, #4
 8008726:	f020 0007 	bic.w	r0, r0, #7
 800872a:	1ac2      	subs	r2, r0, r3
 800872c:	d0cc      	beq.n	80086c8 <_malloc_r+0x20>
 800872e:	1a1b      	subs	r3, r3, r0
 8008730:	50a3      	str	r3, [r4, r2]
 8008732:	e7c9      	b.n	80086c8 <_malloc_r+0x20>
 8008734:	4622      	mov	r2, r4
 8008736:	6864      	ldr	r4, [r4, #4]
 8008738:	e7cc      	b.n	80086d4 <_malloc_r+0x2c>
 800873a:	1cc4      	adds	r4, r0, #3
 800873c:	f024 0403 	bic.w	r4, r4, #3
 8008740:	42a0      	cmp	r0, r4
 8008742:	d0e3      	beq.n	800870c <_malloc_r+0x64>
 8008744:	1a21      	subs	r1, r4, r0
 8008746:	4630      	mov	r0, r6
 8008748:	f000 f96a 	bl	8008a20 <_sbrk_r>
 800874c:	3001      	adds	r0, #1
 800874e:	d1dd      	bne.n	800870c <_malloc_r+0x64>
 8008750:	e7cf      	b.n	80086f2 <_malloc_r+0x4a>
 8008752:	bf00      	nop
 8008754:	20000270 	.word	0x20000270
 8008758:	20000274 	.word	0x20000274

0800875c <__ssputs_r>:
 800875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	688e      	ldr	r6, [r1, #8]
 8008762:	4682      	mov	sl, r0
 8008764:	429e      	cmp	r6, r3
 8008766:	460c      	mov	r4, r1
 8008768:	4690      	mov	r8, r2
 800876a:	461f      	mov	r7, r3
 800876c:	d838      	bhi.n	80087e0 <__ssputs_r+0x84>
 800876e:	898a      	ldrh	r2, [r1, #12]
 8008770:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008774:	d032      	beq.n	80087dc <__ssputs_r+0x80>
 8008776:	6825      	ldr	r5, [r4, #0]
 8008778:	6909      	ldr	r1, [r1, #16]
 800877a:	3301      	adds	r3, #1
 800877c:	eba5 0901 	sub.w	r9, r5, r1
 8008780:	6965      	ldr	r5, [r4, #20]
 8008782:	444b      	add	r3, r9
 8008784:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008788:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800878c:	106d      	asrs	r5, r5, #1
 800878e:	429d      	cmp	r5, r3
 8008790:	bf38      	it	cc
 8008792:	461d      	movcc	r5, r3
 8008794:	0553      	lsls	r3, r2, #21
 8008796:	d531      	bpl.n	80087fc <__ssputs_r+0xa0>
 8008798:	4629      	mov	r1, r5
 800879a:	f7ff ff85 	bl	80086a8 <_malloc_r>
 800879e:	4606      	mov	r6, r0
 80087a0:	b950      	cbnz	r0, 80087b8 <__ssputs_r+0x5c>
 80087a2:	230c      	movs	r3, #12
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	f8ca 3000 	str.w	r3, [sl]
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b8:	464a      	mov	r2, r9
 80087ba:	6921      	ldr	r1, [r4, #16]
 80087bc:	f7ff fa54 	bl	8007c68 <memcpy>
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ca:	81a3      	strh	r3, [r4, #12]
 80087cc:	6126      	str	r6, [r4, #16]
 80087ce:	444e      	add	r6, r9
 80087d0:	6026      	str	r6, [r4, #0]
 80087d2:	463e      	mov	r6, r7
 80087d4:	6165      	str	r5, [r4, #20]
 80087d6:	eba5 0509 	sub.w	r5, r5, r9
 80087da:	60a5      	str	r5, [r4, #8]
 80087dc:	42be      	cmp	r6, r7
 80087de:	d900      	bls.n	80087e2 <__ssputs_r+0x86>
 80087e0:	463e      	mov	r6, r7
 80087e2:	4632      	mov	r2, r6
 80087e4:	4641      	mov	r1, r8
 80087e6:	6820      	ldr	r0, [r4, #0]
 80087e8:	f000 f97a 	bl	8008ae0 <memmove>
 80087ec:	68a3      	ldr	r3, [r4, #8]
 80087ee:	6822      	ldr	r2, [r4, #0]
 80087f0:	1b9b      	subs	r3, r3, r6
 80087f2:	4432      	add	r2, r6
 80087f4:	2000      	movs	r0, #0
 80087f6:	60a3      	str	r3, [r4, #8]
 80087f8:	6022      	str	r2, [r4, #0]
 80087fa:	e7db      	b.n	80087b4 <__ssputs_r+0x58>
 80087fc:	462a      	mov	r2, r5
 80087fe:	f000 f995 	bl	8008b2c <_realloc_r>
 8008802:	4606      	mov	r6, r0
 8008804:	2800      	cmp	r0, #0
 8008806:	d1e1      	bne.n	80087cc <__ssputs_r+0x70>
 8008808:	4650      	mov	r0, sl
 800880a:	6921      	ldr	r1, [r4, #16]
 800880c:	f7ff ff00 	bl	8008610 <_free_r>
 8008810:	e7c7      	b.n	80087a2 <__ssputs_r+0x46>
	...

08008814 <_svfiprintf_r>:
 8008814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	4698      	mov	r8, r3
 800881a:	898b      	ldrh	r3, [r1, #12]
 800881c:	4607      	mov	r7, r0
 800881e:	061b      	lsls	r3, r3, #24
 8008820:	460d      	mov	r5, r1
 8008822:	4614      	mov	r4, r2
 8008824:	b09d      	sub	sp, #116	; 0x74
 8008826:	d50e      	bpl.n	8008846 <_svfiprintf_r+0x32>
 8008828:	690b      	ldr	r3, [r1, #16]
 800882a:	b963      	cbnz	r3, 8008846 <_svfiprintf_r+0x32>
 800882c:	2140      	movs	r1, #64	; 0x40
 800882e:	f7ff ff3b 	bl	80086a8 <_malloc_r>
 8008832:	6028      	str	r0, [r5, #0]
 8008834:	6128      	str	r0, [r5, #16]
 8008836:	b920      	cbnz	r0, 8008842 <_svfiprintf_r+0x2e>
 8008838:	230c      	movs	r3, #12
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	e0d1      	b.n	80089e6 <_svfiprintf_r+0x1d2>
 8008842:	2340      	movs	r3, #64	; 0x40
 8008844:	616b      	str	r3, [r5, #20]
 8008846:	2300      	movs	r3, #0
 8008848:	9309      	str	r3, [sp, #36]	; 0x24
 800884a:	2320      	movs	r3, #32
 800884c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008850:	2330      	movs	r3, #48	; 0x30
 8008852:	f04f 0901 	mov.w	r9, #1
 8008856:	f8cd 800c 	str.w	r8, [sp, #12]
 800885a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a00 <_svfiprintf_r+0x1ec>
 800885e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008862:	4623      	mov	r3, r4
 8008864:	469a      	mov	sl, r3
 8008866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886a:	b10a      	cbz	r2, 8008870 <_svfiprintf_r+0x5c>
 800886c:	2a25      	cmp	r2, #37	; 0x25
 800886e:	d1f9      	bne.n	8008864 <_svfiprintf_r+0x50>
 8008870:	ebba 0b04 	subs.w	fp, sl, r4
 8008874:	d00b      	beq.n	800888e <_svfiprintf_r+0x7a>
 8008876:	465b      	mov	r3, fp
 8008878:	4622      	mov	r2, r4
 800887a:	4629      	mov	r1, r5
 800887c:	4638      	mov	r0, r7
 800887e:	f7ff ff6d 	bl	800875c <__ssputs_r>
 8008882:	3001      	adds	r0, #1
 8008884:	f000 80aa 	beq.w	80089dc <_svfiprintf_r+0x1c8>
 8008888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800888a:	445a      	add	r2, fp
 800888c:	9209      	str	r2, [sp, #36]	; 0x24
 800888e:	f89a 3000 	ldrb.w	r3, [sl]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 80a2 	beq.w	80089dc <_svfiprintf_r+0x1c8>
 8008898:	2300      	movs	r3, #0
 800889a:	f04f 32ff 	mov.w	r2, #4294967295
 800889e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a2:	f10a 0a01 	add.w	sl, sl, #1
 80088a6:	9304      	str	r3, [sp, #16]
 80088a8:	9307      	str	r3, [sp, #28]
 80088aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088ae:	931a      	str	r3, [sp, #104]	; 0x68
 80088b0:	4654      	mov	r4, sl
 80088b2:	2205      	movs	r2, #5
 80088b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b8:	4851      	ldr	r0, [pc, #324]	; (8008a00 <_svfiprintf_r+0x1ec>)
 80088ba:	f7ff f9c7 	bl	8007c4c <memchr>
 80088be:	9a04      	ldr	r2, [sp, #16]
 80088c0:	b9d8      	cbnz	r0, 80088fa <_svfiprintf_r+0xe6>
 80088c2:	06d0      	lsls	r0, r2, #27
 80088c4:	bf44      	itt	mi
 80088c6:	2320      	movmi	r3, #32
 80088c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088cc:	0711      	lsls	r1, r2, #28
 80088ce:	bf44      	itt	mi
 80088d0:	232b      	movmi	r3, #43	; 0x2b
 80088d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088d6:	f89a 3000 	ldrb.w	r3, [sl]
 80088da:	2b2a      	cmp	r3, #42	; 0x2a
 80088dc:	d015      	beq.n	800890a <_svfiprintf_r+0xf6>
 80088de:	4654      	mov	r4, sl
 80088e0:	2000      	movs	r0, #0
 80088e2:	f04f 0c0a 	mov.w	ip, #10
 80088e6:	9a07      	ldr	r2, [sp, #28]
 80088e8:	4621      	mov	r1, r4
 80088ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ee:	3b30      	subs	r3, #48	; 0x30
 80088f0:	2b09      	cmp	r3, #9
 80088f2:	d94e      	bls.n	8008992 <_svfiprintf_r+0x17e>
 80088f4:	b1b0      	cbz	r0, 8008924 <_svfiprintf_r+0x110>
 80088f6:	9207      	str	r2, [sp, #28]
 80088f8:	e014      	b.n	8008924 <_svfiprintf_r+0x110>
 80088fa:	eba0 0308 	sub.w	r3, r0, r8
 80088fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008902:	4313      	orrs	r3, r2
 8008904:	46a2      	mov	sl, r4
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	e7d2      	b.n	80088b0 <_svfiprintf_r+0x9c>
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	1d19      	adds	r1, r3, #4
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	9103      	str	r1, [sp, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	bfbb      	ittet	lt
 8008916:	425b      	neglt	r3, r3
 8008918:	f042 0202 	orrlt.w	r2, r2, #2
 800891c:	9307      	strge	r3, [sp, #28]
 800891e:	9307      	strlt	r3, [sp, #28]
 8008920:	bfb8      	it	lt
 8008922:	9204      	strlt	r2, [sp, #16]
 8008924:	7823      	ldrb	r3, [r4, #0]
 8008926:	2b2e      	cmp	r3, #46	; 0x2e
 8008928:	d10c      	bne.n	8008944 <_svfiprintf_r+0x130>
 800892a:	7863      	ldrb	r3, [r4, #1]
 800892c:	2b2a      	cmp	r3, #42	; 0x2a
 800892e:	d135      	bne.n	800899c <_svfiprintf_r+0x188>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	3402      	adds	r4, #2
 8008934:	1d1a      	adds	r2, r3, #4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	9203      	str	r2, [sp, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	bfb8      	it	lt
 800893e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008942:	9305      	str	r3, [sp, #20]
 8008944:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a10 <_svfiprintf_r+0x1fc>
 8008948:	2203      	movs	r2, #3
 800894a:	4650      	mov	r0, sl
 800894c:	7821      	ldrb	r1, [r4, #0]
 800894e:	f7ff f97d 	bl	8007c4c <memchr>
 8008952:	b140      	cbz	r0, 8008966 <_svfiprintf_r+0x152>
 8008954:	2340      	movs	r3, #64	; 0x40
 8008956:	eba0 000a 	sub.w	r0, r0, sl
 800895a:	fa03 f000 	lsl.w	r0, r3, r0
 800895e:	9b04      	ldr	r3, [sp, #16]
 8008960:	3401      	adds	r4, #1
 8008962:	4303      	orrs	r3, r0
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896a:	2206      	movs	r2, #6
 800896c:	4825      	ldr	r0, [pc, #148]	; (8008a04 <_svfiprintf_r+0x1f0>)
 800896e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008972:	f7ff f96b 	bl	8007c4c <memchr>
 8008976:	2800      	cmp	r0, #0
 8008978:	d038      	beq.n	80089ec <_svfiprintf_r+0x1d8>
 800897a:	4b23      	ldr	r3, [pc, #140]	; (8008a08 <_svfiprintf_r+0x1f4>)
 800897c:	bb1b      	cbnz	r3, 80089c6 <_svfiprintf_r+0x1b2>
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	3307      	adds	r3, #7
 8008982:	f023 0307 	bic.w	r3, r3, #7
 8008986:	3308      	adds	r3, #8
 8008988:	9303      	str	r3, [sp, #12]
 800898a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800898c:	4433      	add	r3, r6
 800898e:	9309      	str	r3, [sp, #36]	; 0x24
 8008990:	e767      	b.n	8008862 <_svfiprintf_r+0x4e>
 8008992:	460c      	mov	r4, r1
 8008994:	2001      	movs	r0, #1
 8008996:	fb0c 3202 	mla	r2, ip, r2, r3
 800899a:	e7a5      	b.n	80088e8 <_svfiprintf_r+0xd4>
 800899c:	2300      	movs	r3, #0
 800899e:	f04f 0c0a 	mov.w	ip, #10
 80089a2:	4619      	mov	r1, r3
 80089a4:	3401      	adds	r4, #1
 80089a6:	9305      	str	r3, [sp, #20]
 80089a8:	4620      	mov	r0, r4
 80089aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ae:	3a30      	subs	r2, #48	; 0x30
 80089b0:	2a09      	cmp	r2, #9
 80089b2:	d903      	bls.n	80089bc <_svfiprintf_r+0x1a8>
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0c5      	beq.n	8008944 <_svfiprintf_r+0x130>
 80089b8:	9105      	str	r1, [sp, #20]
 80089ba:	e7c3      	b.n	8008944 <_svfiprintf_r+0x130>
 80089bc:	4604      	mov	r4, r0
 80089be:	2301      	movs	r3, #1
 80089c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80089c4:	e7f0      	b.n	80089a8 <_svfiprintf_r+0x194>
 80089c6:	ab03      	add	r3, sp, #12
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	462a      	mov	r2, r5
 80089cc:	4638      	mov	r0, r7
 80089ce:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <_svfiprintf_r+0x1f8>)
 80089d0:	a904      	add	r1, sp, #16
 80089d2:	f7fc fa9f 	bl	8004f14 <_printf_float>
 80089d6:	1c42      	adds	r2, r0, #1
 80089d8:	4606      	mov	r6, r0
 80089da:	d1d6      	bne.n	800898a <_svfiprintf_r+0x176>
 80089dc:	89ab      	ldrh	r3, [r5, #12]
 80089de:	065b      	lsls	r3, r3, #25
 80089e0:	f53f af2c 	bmi.w	800883c <_svfiprintf_r+0x28>
 80089e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089e6:	b01d      	add	sp, #116	; 0x74
 80089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ec:	ab03      	add	r3, sp, #12
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	462a      	mov	r2, r5
 80089f2:	4638      	mov	r0, r7
 80089f4:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <_svfiprintf_r+0x1f8>)
 80089f6:	a904      	add	r1, sp, #16
 80089f8:	f7fc fd28 	bl	800544c <_printf_i>
 80089fc:	e7eb      	b.n	80089d6 <_svfiprintf_r+0x1c2>
 80089fe:	bf00      	nop
 8008a00:	0800a7c4 	.word	0x0800a7c4
 8008a04:	0800a7ce 	.word	0x0800a7ce
 8008a08:	08004f15 	.word	0x08004f15
 8008a0c:	0800875d 	.word	0x0800875d
 8008a10:	0800a7ca 	.word	0x0800a7ca

08008a14 <nan>:
 8008a14:	2000      	movs	r0, #0
 8008a16:	4901      	ldr	r1, [pc, #4]	; (8008a1c <nan+0x8>)
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	7ff80000 	.word	0x7ff80000

08008a20 <_sbrk_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	2300      	movs	r3, #0
 8008a24:	4d05      	ldr	r5, [pc, #20]	; (8008a3c <_sbrk_r+0x1c>)
 8008a26:	4604      	mov	r4, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	602b      	str	r3, [r5, #0]
 8008a2c:	f7f9 f8ea 	bl	8001c04 <_sbrk>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_sbrk_r+0x1a>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_sbrk_r+0x1a>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	20000854 	.word	0x20000854

08008a40 <strncmp>:
 8008a40:	b510      	push	{r4, lr}
 8008a42:	b16a      	cbz	r2, 8008a60 <strncmp+0x20>
 8008a44:	3901      	subs	r1, #1
 8008a46:	1884      	adds	r4, r0, r2
 8008a48:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008a4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d103      	bne.n	8008a5c <strncmp+0x1c>
 8008a54:	42a0      	cmp	r0, r4
 8008a56:	d001      	beq.n	8008a5c <strncmp+0x1c>
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1f5      	bne.n	8008a48 <strncmp+0x8>
 8008a5c:	1a98      	subs	r0, r3, r2
 8008a5e:	bd10      	pop	{r4, pc}
 8008a60:	4610      	mov	r0, r2
 8008a62:	e7fc      	b.n	8008a5e <strncmp+0x1e>

08008a64 <__ascii_wctomb>:
 8008a64:	4603      	mov	r3, r0
 8008a66:	4608      	mov	r0, r1
 8008a68:	b141      	cbz	r1, 8008a7c <__ascii_wctomb+0x18>
 8008a6a:	2aff      	cmp	r2, #255	; 0xff
 8008a6c:	d904      	bls.n	8008a78 <__ascii_wctomb+0x14>
 8008a6e:	228a      	movs	r2, #138	; 0x8a
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	4770      	bx	lr
 8008a78:	2001      	movs	r0, #1
 8008a7a:	700a      	strb	r2, [r1, #0]
 8008a7c:	4770      	bx	lr
	...

08008a80 <__assert_func>:
 8008a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a82:	4614      	mov	r4, r2
 8008a84:	461a      	mov	r2, r3
 8008a86:	4b09      	ldr	r3, [pc, #36]	; (8008aac <__assert_func+0x2c>)
 8008a88:	4605      	mov	r5, r0
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68d8      	ldr	r0, [r3, #12]
 8008a8e:	b14c      	cbz	r4, 8008aa4 <__assert_func+0x24>
 8008a90:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <__assert_func+0x30>)
 8008a92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a96:	9100      	str	r1, [sp, #0]
 8008a98:	462b      	mov	r3, r5
 8008a9a:	4906      	ldr	r1, [pc, #24]	; (8008ab4 <__assert_func+0x34>)
 8008a9c:	f000 f80e 	bl	8008abc <fiprintf>
 8008aa0:	f000 fa82 	bl	8008fa8 <abort>
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <__assert_func+0x38>)
 8008aa6:	461c      	mov	r4, r3
 8008aa8:	e7f3      	b.n	8008a92 <__assert_func+0x12>
 8008aaa:	bf00      	nop
 8008aac:	20000018 	.word	0x20000018
 8008ab0:	0800a7d5 	.word	0x0800a7d5
 8008ab4:	0800a7e2 	.word	0x0800a7e2
 8008ab8:	0800a810 	.word	0x0800a810

08008abc <fiprintf>:
 8008abc:	b40e      	push	{r1, r2, r3}
 8008abe:	b503      	push	{r0, r1, lr}
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	ab03      	add	r3, sp, #12
 8008ac4:	4805      	ldr	r0, [pc, #20]	; (8008adc <fiprintf+0x20>)
 8008ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aca:	6800      	ldr	r0, [r0, #0]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	f000 f87b 	bl	8008bc8 <_vfiprintf_r>
 8008ad2:	b002      	add	sp, #8
 8008ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ad8:	b003      	add	sp, #12
 8008ada:	4770      	bx	lr
 8008adc:	20000018 	.word	0x20000018

08008ae0 <memmove>:
 8008ae0:	4288      	cmp	r0, r1
 8008ae2:	b510      	push	{r4, lr}
 8008ae4:	eb01 0402 	add.w	r4, r1, r2
 8008ae8:	d902      	bls.n	8008af0 <memmove+0x10>
 8008aea:	4284      	cmp	r4, r0
 8008aec:	4623      	mov	r3, r4
 8008aee:	d807      	bhi.n	8008b00 <memmove+0x20>
 8008af0:	1e43      	subs	r3, r0, #1
 8008af2:	42a1      	cmp	r1, r4
 8008af4:	d008      	beq.n	8008b08 <memmove+0x28>
 8008af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008afe:	e7f8      	b.n	8008af2 <memmove+0x12>
 8008b00:	4601      	mov	r1, r0
 8008b02:	4402      	add	r2, r0
 8008b04:	428a      	cmp	r2, r1
 8008b06:	d100      	bne.n	8008b0a <memmove+0x2a>
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b12:	e7f7      	b.n	8008b04 <memmove+0x24>

08008b14 <__malloc_lock>:
 8008b14:	4801      	ldr	r0, [pc, #4]	; (8008b1c <__malloc_lock+0x8>)
 8008b16:	f000 bc07 	b.w	8009328 <__retarget_lock_acquire_recursive>
 8008b1a:	bf00      	nop
 8008b1c:	2000085c 	.word	0x2000085c

08008b20 <__malloc_unlock>:
 8008b20:	4801      	ldr	r0, [pc, #4]	; (8008b28 <__malloc_unlock+0x8>)
 8008b22:	f000 bc02 	b.w	800932a <__retarget_lock_release_recursive>
 8008b26:	bf00      	nop
 8008b28:	2000085c 	.word	0x2000085c

08008b2c <_realloc_r>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	4607      	mov	r7, r0
 8008b30:	4614      	mov	r4, r2
 8008b32:	460e      	mov	r6, r1
 8008b34:	b921      	cbnz	r1, 8008b40 <_realloc_r+0x14>
 8008b36:	4611      	mov	r1, r2
 8008b38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b3c:	f7ff bdb4 	b.w	80086a8 <_malloc_r>
 8008b40:	b922      	cbnz	r2, 8008b4c <_realloc_r+0x20>
 8008b42:	f7ff fd65 	bl	8008610 <_free_r>
 8008b46:	4625      	mov	r5, r4
 8008b48:	4628      	mov	r0, r5
 8008b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b4c:	f000 fc52 	bl	80093f4 <_malloc_usable_size_r>
 8008b50:	42a0      	cmp	r0, r4
 8008b52:	d20f      	bcs.n	8008b74 <_realloc_r+0x48>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4638      	mov	r0, r7
 8008b58:	f7ff fda6 	bl	80086a8 <_malloc_r>
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d0f2      	beq.n	8008b48 <_realloc_r+0x1c>
 8008b62:	4631      	mov	r1, r6
 8008b64:	4622      	mov	r2, r4
 8008b66:	f7ff f87f 	bl	8007c68 <memcpy>
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f7ff fd4f 	bl	8008610 <_free_r>
 8008b72:	e7e9      	b.n	8008b48 <_realloc_r+0x1c>
 8008b74:	4635      	mov	r5, r6
 8008b76:	e7e7      	b.n	8008b48 <_realloc_r+0x1c>

08008b78 <__sfputc_r>:
 8008b78:	6893      	ldr	r3, [r2, #8]
 8008b7a:	b410      	push	{r4}
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	6093      	str	r3, [r2, #8]
 8008b82:	da07      	bge.n	8008b94 <__sfputc_r+0x1c>
 8008b84:	6994      	ldr	r4, [r2, #24]
 8008b86:	42a3      	cmp	r3, r4
 8008b88:	db01      	blt.n	8008b8e <__sfputc_r+0x16>
 8008b8a:	290a      	cmp	r1, #10
 8008b8c:	d102      	bne.n	8008b94 <__sfputc_r+0x1c>
 8008b8e:	bc10      	pop	{r4}
 8008b90:	f000 b94a 	b.w	8008e28 <__swbuf_r>
 8008b94:	6813      	ldr	r3, [r2, #0]
 8008b96:	1c58      	adds	r0, r3, #1
 8008b98:	6010      	str	r0, [r2, #0]
 8008b9a:	7019      	strb	r1, [r3, #0]
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	bc10      	pop	{r4}
 8008ba0:	4770      	bx	lr

08008ba2 <__sfputs_r>:
 8008ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	460f      	mov	r7, r1
 8008ba8:	4614      	mov	r4, r2
 8008baa:	18d5      	adds	r5, r2, r3
 8008bac:	42ac      	cmp	r4, r5
 8008bae:	d101      	bne.n	8008bb4 <__sfputs_r+0x12>
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	e007      	b.n	8008bc4 <__sfputs_r+0x22>
 8008bb4:	463a      	mov	r2, r7
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bbc:	f7ff ffdc 	bl	8008b78 <__sfputc_r>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d1f3      	bne.n	8008bac <__sfputs_r+0xa>
 8008bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bc8 <_vfiprintf_r>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	460d      	mov	r5, r1
 8008bce:	4614      	mov	r4, r2
 8008bd0:	4698      	mov	r8, r3
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	b09d      	sub	sp, #116	; 0x74
 8008bd6:	b118      	cbz	r0, 8008be0 <_vfiprintf_r+0x18>
 8008bd8:	6983      	ldr	r3, [r0, #24]
 8008bda:	b90b      	cbnz	r3, 8008be0 <_vfiprintf_r+0x18>
 8008bdc:	f000 fb06 	bl	80091ec <__sinit>
 8008be0:	4b89      	ldr	r3, [pc, #548]	; (8008e08 <_vfiprintf_r+0x240>)
 8008be2:	429d      	cmp	r5, r3
 8008be4:	d11b      	bne.n	8008c1e <_vfiprintf_r+0x56>
 8008be6:	6875      	ldr	r5, [r6, #4]
 8008be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bea:	07d9      	lsls	r1, r3, #31
 8008bec:	d405      	bmi.n	8008bfa <_vfiprintf_r+0x32>
 8008bee:	89ab      	ldrh	r3, [r5, #12]
 8008bf0:	059a      	lsls	r2, r3, #22
 8008bf2:	d402      	bmi.n	8008bfa <_vfiprintf_r+0x32>
 8008bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bf6:	f000 fb97 	bl	8009328 <__retarget_lock_acquire_recursive>
 8008bfa:	89ab      	ldrh	r3, [r5, #12]
 8008bfc:	071b      	lsls	r3, r3, #28
 8008bfe:	d501      	bpl.n	8008c04 <_vfiprintf_r+0x3c>
 8008c00:	692b      	ldr	r3, [r5, #16]
 8008c02:	b9eb      	cbnz	r3, 8008c40 <_vfiprintf_r+0x78>
 8008c04:	4629      	mov	r1, r5
 8008c06:	4630      	mov	r0, r6
 8008c08:	f000 f960 	bl	8008ecc <__swsetup_r>
 8008c0c:	b1c0      	cbz	r0, 8008c40 <_vfiprintf_r+0x78>
 8008c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c10:	07dc      	lsls	r4, r3, #31
 8008c12:	d50e      	bpl.n	8008c32 <_vfiprintf_r+0x6a>
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295
 8008c18:	b01d      	add	sp, #116	; 0x74
 8008c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1e:	4b7b      	ldr	r3, [pc, #492]	; (8008e0c <_vfiprintf_r+0x244>)
 8008c20:	429d      	cmp	r5, r3
 8008c22:	d101      	bne.n	8008c28 <_vfiprintf_r+0x60>
 8008c24:	68b5      	ldr	r5, [r6, #8]
 8008c26:	e7df      	b.n	8008be8 <_vfiprintf_r+0x20>
 8008c28:	4b79      	ldr	r3, [pc, #484]	; (8008e10 <_vfiprintf_r+0x248>)
 8008c2a:	429d      	cmp	r5, r3
 8008c2c:	bf08      	it	eq
 8008c2e:	68f5      	ldreq	r5, [r6, #12]
 8008c30:	e7da      	b.n	8008be8 <_vfiprintf_r+0x20>
 8008c32:	89ab      	ldrh	r3, [r5, #12]
 8008c34:	0598      	lsls	r0, r3, #22
 8008c36:	d4ed      	bmi.n	8008c14 <_vfiprintf_r+0x4c>
 8008c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c3a:	f000 fb76 	bl	800932a <__retarget_lock_release_recursive>
 8008c3e:	e7e9      	b.n	8008c14 <_vfiprintf_r+0x4c>
 8008c40:	2300      	movs	r3, #0
 8008c42:	9309      	str	r3, [sp, #36]	; 0x24
 8008c44:	2320      	movs	r3, #32
 8008c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c4a:	2330      	movs	r3, #48	; 0x30
 8008c4c:	f04f 0901 	mov.w	r9, #1
 8008c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008e14 <_vfiprintf_r+0x24c>
 8008c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c5c:	4623      	mov	r3, r4
 8008c5e:	469a      	mov	sl, r3
 8008c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c64:	b10a      	cbz	r2, 8008c6a <_vfiprintf_r+0xa2>
 8008c66:	2a25      	cmp	r2, #37	; 0x25
 8008c68:	d1f9      	bne.n	8008c5e <_vfiprintf_r+0x96>
 8008c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c6e:	d00b      	beq.n	8008c88 <_vfiprintf_r+0xc0>
 8008c70:	465b      	mov	r3, fp
 8008c72:	4622      	mov	r2, r4
 8008c74:	4629      	mov	r1, r5
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7ff ff93 	bl	8008ba2 <__sfputs_r>
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	f000 80aa 	beq.w	8008dd6 <_vfiprintf_r+0x20e>
 8008c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c84:	445a      	add	r2, fp
 8008c86:	9209      	str	r2, [sp, #36]	; 0x24
 8008c88:	f89a 3000 	ldrb.w	r3, [sl]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 80a2 	beq.w	8008dd6 <_vfiprintf_r+0x20e>
 8008c92:	2300      	movs	r3, #0
 8008c94:	f04f 32ff 	mov.w	r2, #4294967295
 8008c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c9c:	f10a 0a01 	add.w	sl, sl, #1
 8008ca0:	9304      	str	r3, [sp, #16]
 8008ca2:	9307      	str	r3, [sp, #28]
 8008ca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ca8:	931a      	str	r3, [sp, #104]	; 0x68
 8008caa:	4654      	mov	r4, sl
 8008cac:	2205      	movs	r2, #5
 8008cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb2:	4858      	ldr	r0, [pc, #352]	; (8008e14 <_vfiprintf_r+0x24c>)
 8008cb4:	f7fe ffca 	bl	8007c4c <memchr>
 8008cb8:	9a04      	ldr	r2, [sp, #16]
 8008cba:	b9d8      	cbnz	r0, 8008cf4 <_vfiprintf_r+0x12c>
 8008cbc:	06d1      	lsls	r1, r2, #27
 8008cbe:	bf44      	itt	mi
 8008cc0:	2320      	movmi	r3, #32
 8008cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cc6:	0713      	lsls	r3, r2, #28
 8008cc8:	bf44      	itt	mi
 8008cca:	232b      	movmi	r3, #43	; 0x2b
 8008ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cd6:	d015      	beq.n	8008d04 <_vfiprintf_r+0x13c>
 8008cd8:	4654      	mov	r4, sl
 8008cda:	2000      	movs	r0, #0
 8008cdc:	f04f 0c0a 	mov.w	ip, #10
 8008ce0:	9a07      	ldr	r2, [sp, #28]
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ce8:	3b30      	subs	r3, #48	; 0x30
 8008cea:	2b09      	cmp	r3, #9
 8008cec:	d94e      	bls.n	8008d8c <_vfiprintf_r+0x1c4>
 8008cee:	b1b0      	cbz	r0, 8008d1e <_vfiprintf_r+0x156>
 8008cf0:	9207      	str	r2, [sp, #28]
 8008cf2:	e014      	b.n	8008d1e <_vfiprintf_r+0x156>
 8008cf4:	eba0 0308 	sub.w	r3, r0, r8
 8008cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	46a2      	mov	sl, r4
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	e7d2      	b.n	8008caa <_vfiprintf_r+0xe2>
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	1d19      	adds	r1, r3, #4
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	9103      	str	r1, [sp, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bfbb      	ittet	lt
 8008d10:	425b      	neglt	r3, r3
 8008d12:	f042 0202 	orrlt.w	r2, r2, #2
 8008d16:	9307      	strge	r3, [sp, #28]
 8008d18:	9307      	strlt	r3, [sp, #28]
 8008d1a:	bfb8      	it	lt
 8008d1c:	9204      	strlt	r2, [sp, #16]
 8008d1e:	7823      	ldrb	r3, [r4, #0]
 8008d20:	2b2e      	cmp	r3, #46	; 0x2e
 8008d22:	d10c      	bne.n	8008d3e <_vfiprintf_r+0x176>
 8008d24:	7863      	ldrb	r3, [r4, #1]
 8008d26:	2b2a      	cmp	r3, #42	; 0x2a
 8008d28:	d135      	bne.n	8008d96 <_vfiprintf_r+0x1ce>
 8008d2a:	9b03      	ldr	r3, [sp, #12]
 8008d2c:	3402      	adds	r4, #2
 8008d2e:	1d1a      	adds	r2, r3, #4
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	9203      	str	r2, [sp, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	bfb8      	it	lt
 8008d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e24 <_vfiprintf_r+0x25c>
 8008d42:	2203      	movs	r2, #3
 8008d44:	4650      	mov	r0, sl
 8008d46:	7821      	ldrb	r1, [r4, #0]
 8008d48:	f7fe ff80 	bl	8007c4c <memchr>
 8008d4c:	b140      	cbz	r0, 8008d60 <_vfiprintf_r+0x198>
 8008d4e:	2340      	movs	r3, #64	; 0x40
 8008d50:	eba0 000a 	sub.w	r0, r0, sl
 8008d54:	fa03 f000 	lsl.w	r0, r3, r0
 8008d58:	9b04      	ldr	r3, [sp, #16]
 8008d5a:	3401      	adds	r4, #1
 8008d5c:	4303      	orrs	r3, r0
 8008d5e:	9304      	str	r3, [sp, #16]
 8008d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d64:	2206      	movs	r2, #6
 8008d66:	482c      	ldr	r0, [pc, #176]	; (8008e18 <_vfiprintf_r+0x250>)
 8008d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d6c:	f7fe ff6e 	bl	8007c4c <memchr>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d03f      	beq.n	8008df4 <_vfiprintf_r+0x22c>
 8008d74:	4b29      	ldr	r3, [pc, #164]	; (8008e1c <_vfiprintf_r+0x254>)
 8008d76:	bb1b      	cbnz	r3, 8008dc0 <_vfiprintf_r+0x1f8>
 8008d78:	9b03      	ldr	r3, [sp, #12]
 8008d7a:	3307      	adds	r3, #7
 8008d7c:	f023 0307 	bic.w	r3, r3, #7
 8008d80:	3308      	adds	r3, #8
 8008d82:	9303      	str	r3, [sp, #12]
 8008d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d86:	443b      	add	r3, r7
 8008d88:	9309      	str	r3, [sp, #36]	; 0x24
 8008d8a:	e767      	b.n	8008c5c <_vfiprintf_r+0x94>
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	2001      	movs	r0, #1
 8008d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d94:	e7a5      	b.n	8008ce2 <_vfiprintf_r+0x11a>
 8008d96:	2300      	movs	r3, #0
 8008d98:	f04f 0c0a 	mov.w	ip, #10
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	3401      	adds	r4, #1
 8008da0:	9305      	str	r3, [sp, #20]
 8008da2:	4620      	mov	r0, r4
 8008da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008da8:	3a30      	subs	r2, #48	; 0x30
 8008daa:	2a09      	cmp	r2, #9
 8008dac:	d903      	bls.n	8008db6 <_vfiprintf_r+0x1ee>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0c5      	beq.n	8008d3e <_vfiprintf_r+0x176>
 8008db2:	9105      	str	r1, [sp, #20]
 8008db4:	e7c3      	b.n	8008d3e <_vfiprintf_r+0x176>
 8008db6:	4604      	mov	r4, r0
 8008db8:	2301      	movs	r3, #1
 8008dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dbe:	e7f0      	b.n	8008da2 <_vfiprintf_r+0x1da>
 8008dc0:	ab03      	add	r3, sp, #12
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	462a      	mov	r2, r5
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	4b15      	ldr	r3, [pc, #84]	; (8008e20 <_vfiprintf_r+0x258>)
 8008dca:	a904      	add	r1, sp, #16
 8008dcc:	f7fc f8a2 	bl	8004f14 <_printf_float>
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	1c78      	adds	r0, r7, #1
 8008dd4:	d1d6      	bne.n	8008d84 <_vfiprintf_r+0x1bc>
 8008dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dd8:	07d9      	lsls	r1, r3, #31
 8008dda:	d405      	bmi.n	8008de8 <_vfiprintf_r+0x220>
 8008ddc:	89ab      	ldrh	r3, [r5, #12]
 8008dde:	059a      	lsls	r2, r3, #22
 8008de0:	d402      	bmi.n	8008de8 <_vfiprintf_r+0x220>
 8008de2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008de4:	f000 faa1 	bl	800932a <__retarget_lock_release_recursive>
 8008de8:	89ab      	ldrh	r3, [r5, #12]
 8008dea:	065b      	lsls	r3, r3, #25
 8008dec:	f53f af12 	bmi.w	8008c14 <_vfiprintf_r+0x4c>
 8008df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008df2:	e711      	b.n	8008c18 <_vfiprintf_r+0x50>
 8008df4:	ab03      	add	r3, sp, #12
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	462a      	mov	r2, r5
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	4b08      	ldr	r3, [pc, #32]	; (8008e20 <_vfiprintf_r+0x258>)
 8008dfe:	a904      	add	r1, sp, #16
 8008e00:	f7fc fb24 	bl	800544c <_printf_i>
 8008e04:	e7e4      	b.n	8008dd0 <_vfiprintf_r+0x208>
 8008e06:	bf00      	nop
 8008e08:	0800a834 	.word	0x0800a834
 8008e0c:	0800a854 	.word	0x0800a854
 8008e10:	0800a814 	.word	0x0800a814
 8008e14:	0800a7c4 	.word	0x0800a7c4
 8008e18:	0800a7ce 	.word	0x0800a7ce
 8008e1c:	08004f15 	.word	0x08004f15
 8008e20:	08008ba3 	.word	0x08008ba3
 8008e24:	0800a7ca 	.word	0x0800a7ca

08008e28 <__swbuf_r>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	460e      	mov	r6, r1
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	4605      	mov	r5, r0
 8008e30:	b118      	cbz	r0, 8008e3a <__swbuf_r+0x12>
 8008e32:	6983      	ldr	r3, [r0, #24]
 8008e34:	b90b      	cbnz	r3, 8008e3a <__swbuf_r+0x12>
 8008e36:	f000 f9d9 	bl	80091ec <__sinit>
 8008e3a:	4b21      	ldr	r3, [pc, #132]	; (8008ec0 <__swbuf_r+0x98>)
 8008e3c:	429c      	cmp	r4, r3
 8008e3e:	d12b      	bne.n	8008e98 <__swbuf_r+0x70>
 8008e40:	686c      	ldr	r4, [r5, #4]
 8008e42:	69a3      	ldr	r3, [r4, #24]
 8008e44:	60a3      	str	r3, [r4, #8]
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	071a      	lsls	r2, r3, #28
 8008e4a:	d52f      	bpl.n	8008eac <__swbuf_r+0x84>
 8008e4c:	6923      	ldr	r3, [r4, #16]
 8008e4e:	b36b      	cbz	r3, 8008eac <__swbuf_r+0x84>
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	6820      	ldr	r0, [r4, #0]
 8008e54:	b2f6      	uxtb	r6, r6
 8008e56:	1ac0      	subs	r0, r0, r3
 8008e58:	6963      	ldr	r3, [r4, #20]
 8008e5a:	4637      	mov	r7, r6
 8008e5c:	4283      	cmp	r3, r0
 8008e5e:	dc04      	bgt.n	8008e6a <__swbuf_r+0x42>
 8008e60:	4621      	mov	r1, r4
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 f92e 	bl	80090c4 <_fflush_r>
 8008e68:	bb30      	cbnz	r0, 8008eb8 <__swbuf_r+0x90>
 8008e6a:	68a3      	ldr	r3, [r4, #8]
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	60a3      	str	r3, [r4, #8]
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	6022      	str	r2, [r4, #0]
 8008e78:	701e      	strb	r6, [r3, #0]
 8008e7a:	6963      	ldr	r3, [r4, #20]
 8008e7c:	4283      	cmp	r3, r0
 8008e7e:	d004      	beq.n	8008e8a <__swbuf_r+0x62>
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	07db      	lsls	r3, r3, #31
 8008e84:	d506      	bpl.n	8008e94 <__swbuf_r+0x6c>
 8008e86:	2e0a      	cmp	r6, #10
 8008e88:	d104      	bne.n	8008e94 <__swbuf_r+0x6c>
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f000 f919 	bl	80090c4 <_fflush_r>
 8008e92:	b988      	cbnz	r0, 8008eb8 <__swbuf_r+0x90>
 8008e94:	4638      	mov	r0, r7
 8008e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <__swbuf_r+0x9c>)
 8008e9a:	429c      	cmp	r4, r3
 8008e9c:	d101      	bne.n	8008ea2 <__swbuf_r+0x7a>
 8008e9e:	68ac      	ldr	r4, [r5, #8]
 8008ea0:	e7cf      	b.n	8008e42 <__swbuf_r+0x1a>
 8008ea2:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <__swbuf_r+0xa0>)
 8008ea4:	429c      	cmp	r4, r3
 8008ea6:	bf08      	it	eq
 8008ea8:	68ec      	ldreq	r4, [r5, #12]
 8008eaa:	e7ca      	b.n	8008e42 <__swbuf_r+0x1a>
 8008eac:	4621      	mov	r1, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 f80c 	bl	8008ecc <__swsetup_r>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d0cb      	beq.n	8008e50 <__swbuf_r+0x28>
 8008eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8008ebc:	e7ea      	b.n	8008e94 <__swbuf_r+0x6c>
 8008ebe:	bf00      	nop
 8008ec0:	0800a834 	.word	0x0800a834
 8008ec4:	0800a854 	.word	0x0800a854
 8008ec8:	0800a814 	.word	0x0800a814

08008ecc <__swsetup_r>:
 8008ecc:	4b32      	ldr	r3, [pc, #200]	; (8008f98 <__swsetup_r+0xcc>)
 8008ece:	b570      	push	{r4, r5, r6, lr}
 8008ed0:	681d      	ldr	r5, [r3, #0]
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	b125      	cbz	r5, 8008ee2 <__swsetup_r+0x16>
 8008ed8:	69ab      	ldr	r3, [r5, #24]
 8008eda:	b913      	cbnz	r3, 8008ee2 <__swsetup_r+0x16>
 8008edc:	4628      	mov	r0, r5
 8008ede:	f000 f985 	bl	80091ec <__sinit>
 8008ee2:	4b2e      	ldr	r3, [pc, #184]	; (8008f9c <__swsetup_r+0xd0>)
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	d10f      	bne.n	8008f08 <__swsetup_r+0x3c>
 8008ee8:	686c      	ldr	r4, [r5, #4]
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ef0:	0719      	lsls	r1, r3, #28
 8008ef2:	d42c      	bmi.n	8008f4e <__swsetup_r+0x82>
 8008ef4:	06dd      	lsls	r5, r3, #27
 8008ef6:	d411      	bmi.n	8008f1c <__swsetup_r+0x50>
 8008ef8:	2309      	movs	r3, #9
 8008efa:	6033      	str	r3, [r6, #0]
 8008efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	81a3      	strh	r3, [r4, #12]
 8008f06:	e03e      	b.n	8008f86 <__swsetup_r+0xba>
 8008f08:	4b25      	ldr	r3, [pc, #148]	; (8008fa0 <__swsetup_r+0xd4>)
 8008f0a:	429c      	cmp	r4, r3
 8008f0c:	d101      	bne.n	8008f12 <__swsetup_r+0x46>
 8008f0e:	68ac      	ldr	r4, [r5, #8]
 8008f10:	e7eb      	b.n	8008eea <__swsetup_r+0x1e>
 8008f12:	4b24      	ldr	r3, [pc, #144]	; (8008fa4 <__swsetup_r+0xd8>)
 8008f14:	429c      	cmp	r4, r3
 8008f16:	bf08      	it	eq
 8008f18:	68ec      	ldreq	r4, [r5, #12]
 8008f1a:	e7e6      	b.n	8008eea <__swsetup_r+0x1e>
 8008f1c:	0758      	lsls	r0, r3, #29
 8008f1e:	d512      	bpl.n	8008f46 <__swsetup_r+0x7a>
 8008f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f22:	b141      	cbz	r1, 8008f36 <__swsetup_r+0x6a>
 8008f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	d002      	beq.n	8008f32 <__swsetup_r+0x66>
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7ff fb6f 	bl	8008610 <_free_r>
 8008f32:	2300      	movs	r3, #0
 8008f34:	6363      	str	r3, [r4, #52]	; 0x34
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	6063      	str	r3, [r4, #4]
 8008f42:	6923      	ldr	r3, [r4, #16]
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f043 0308 	orr.w	r3, r3, #8
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	b94b      	cbnz	r3, 8008f66 <__swsetup_r+0x9a>
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f5c:	d003      	beq.n	8008f66 <__swsetup_r+0x9a>
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4630      	mov	r0, r6
 8008f62:	f000 fa07 	bl	8009374 <__smakebuf_r>
 8008f66:	89a0      	ldrh	r0, [r4, #12]
 8008f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f6c:	f010 0301 	ands.w	r3, r0, #1
 8008f70:	d00a      	beq.n	8008f88 <__swsetup_r+0xbc>
 8008f72:	2300      	movs	r3, #0
 8008f74:	60a3      	str	r3, [r4, #8]
 8008f76:	6963      	ldr	r3, [r4, #20]
 8008f78:	425b      	negs	r3, r3
 8008f7a:	61a3      	str	r3, [r4, #24]
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	b943      	cbnz	r3, 8008f92 <__swsetup_r+0xc6>
 8008f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f84:	d1ba      	bne.n	8008efc <__swsetup_r+0x30>
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	0781      	lsls	r1, r0, #30
 8008f8a:	bf58      	it	pl
 8008f8c:	6963      	ldrpl	r3, [r4, #20]
 8008f8e:	60a3      	str	r3, [r4, #8]
 8008f90:	e7f4      	b.n	8008f7c <__swsetup_r+0xb0>
 8008f92:	2000      	movs	r0, #0
 8008f94:	e7f7      	b.n	8008f86 <__swsetup_r+0xba>
 8008f96:	bf00      	nop
 8008f98:	20000018 	.word	0x20000018
 8008f9c:	0800a834 	.word	0x0800a834
 8008fa0:	0800a854 	.word	0x0800a854
 8008fa4:	0800a814 	.word	0x0800a814

08008fa8 <abort>:
 8008fa8:	2006      	movs	r0, #6
 8008faa:	b508      	push	{r3, lr}
 8008fac:	f000 fa52 	bl	8009454 <raise>
 8008fb0:	2001      	movs	r0, #1
 8008fb2:	f7f8 fdb4 	bl	8001b1e <_exit>
	...

08008fb8 <__sflush_r>:
 8008fb8:	898a      	ldrh	r2, [r1, #12]
 8008fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	0710      	lsls	r0, r2, #28
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	d458      	bmi.n	8009078 <__sflush_r+0xc0>
 8008fc6:	684b      	ldr	r3, [r1, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dc05      	bgt.n	8008fd8 <__sflush_r+0x20>
 8008fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	dc02      	bgt.n	8008fd8 <__sflush_r+0x20>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fda:	2e00      	cmp	r6, #0
 8008fdc:	d0f9      	beq.n	8008fd2 <__sflush_r+0x1a>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fe4:	682f      	ldr	r7, [r5, #0]
 8008fe6:	602b      	str	r3, [r5, #0]
 8008fe8:	d032      	beq.n	8009050 <__sflush_r+0x98>
 8008fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	075a      	lsls	r2, r3, #29
 8008ff0:	d505      	bpl.n	8008ffe <__sflush_r+0x46>
 8008ff2:	6863      	ldr	r3, [r4, #4]
 8008ff4:	1ac0      	subs	r0, r0, r3
 8008ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ff8:	b10b      	cbz	r3, 8008ffe <__sflush_r+0x46>
 8008ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ffc:	1ac0      	subs	r0, r0, r3
 8008ffe:	2300      	movs	r3, #0
 8009000:	4602      	mov	r2, r0
 8009002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009004:	4628      	mov	r0, r5
 8009006:	6a21      	ldr	r1, [r4, #32]
 8009008:	47b0      	blx	r6
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	d106      	bne.n	800901e <__sflush_r+0x66>
 8009010:	6829      	ldr	r1, [r5, #0]
 8009012:	291d      	cmp	r1, #29
 8009014:	d82c      	bhi.n	8009070 <__sflush_r+0xb8>
 8009016:	4a2a      	ldr	r2, [pc, #168]	; (80090c0 <__sflush_r+0x108>)
 8009018:	40ca      	lsrs	r2, r1
 800901a:	07d6      	lsls	r6, r2, #31
 800901c:	d528      	bpl.n	8009070 <__sflush_r+0xb8>
 800901e:	2200      	movs	r2, #0
 8009020:	6062      	str	r2, [r4, #4]
 8009022:	6922      	ldr	r2, [r4, #16]
 8009024:	04d9      	lsls	r1, r3, #19
 8009026:	6022      	str	r2, [r4, #0]
 8009028:	d504      	bpl.n	8009034 <__sflush_r+0x7c>
 800902a:	1c42      	adds	r2, r0, #1
 800902c:	d101      	bne.n	8009032 <__sflush_r+0x7a>
 800902e:	682b      	ldr	r3, [r5, #0]
 8009030:	b903      	cbnz	r3, 8009034 <__sflush_r+0x7c>
 8009032:	6560      	str	r0, [r4, #84]	; 0x54
 8009034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009036:	602f      	str	r7, [r5, #0]
 8009038:	2900      	cmp	r1, #0
 800903a:	d0ca      	beq.n	8008fd2 <__sflush_r+0x1a>
 800903c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009040:	4299      	cmp	r1, r3
 8009042:	d002      	beq.n	800904a <__sflush_r+0x92>
 8009044:	4628      	mov	r0, r5
 8009046:	f7ff fae3 	bl	8008610 <_free_r>
 800904a:	2000      	movs	r0, #0
 800904c:	6360      	str	r0, [r4, #52]	; 0x34
 800904e:	e7c1      	b.n	8008fd4 <__sflush_r+0x1c>
 8009050:	6a21      	ldr	r1, [r4, #32]
 8009052:	2301      	movs	r3, #1
 8009054:	4628      	mov	r0, r5
 8009056:	47b0      	blx	r6
 8009058:	1c41      	adds	r1, r0, #1
 800905a:	d1c7      	bne.n	8008fec <__sflush_r+0x34>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0c4      	beq.n	8008fec <__sflush_r+0x34>
 8009062:	2b1d      	cmp	r3, #29
 8009064:	d001      	beq.n	800906a <__sflush_r+0xb2>
 8009066:	2b16      	cmp	r3, #22
 8009068:	d101      	bne.n	800906e <__sflush_r+0xb6>
 800906a:	602f      	str	r7, [r5, #0]
 800906c:	e7b1      	b.n	8008fd2 <__sflush_r+0x1a>
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	e7ad      	b.n	8008fd4 <__sflush_r+0x1c>
 8009078:	690f      	ldr	r7, [r1, #16]
 800907a:	2f00      	cmp	r7, #0
 800907c:	d0a9      	beq.n	8008fd2 <__sflush_r+0x1a>
 800907e:	0793      	lsls	r3, r2, #30
 8009080:	bf18      	it	ne
 8009082:	2300      	movne	r3, #0
 8009084:	680e      	ldr	r6, [r1, #0]
 8009086:	bf08      	it	eq
 8009088:	694b      	ldreq	r3, [r1, #20]
 800908a:	eba6 0807 	sub.w	r8, r6, r7
 800908e:	600f      	str	r7, [r1, #0]
 8009090:	608b      	str	r3, [r1, #8]
 8009092:	f1b8 0f00 	cmp.w	r8, #0
 8009096:	dd9c      	ble.n	8008fd2 <__sflush_r+0x1a>
 8009098:	4643      	mov	r3, r8
 800909a:	463a      	mov	r2, r7
 800909c:	4628      	mov	r0, r5
 800909e:	6a21      	ldr	r1, [r4, #32]
 80090a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090a2:	47b0      	blx	r6
 80090a4:	2800      	cmp	r0, #0
 80090a6:	dc06      	bgt.n	80090b6 <__sflush_r+0xfe>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295
 80090ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b2:	81a3      	strh	r3, [r4, #12]
 80090b4:	e78e      	b.n	8008fd4 <__sflush_r+0x1c>
 80090b6:	4407      	add	r7, r0
 80090b8:	eba8 0800 	sub.w	r8, r8, r0
 80090bc:	e7e9      	b.n	8009092 <__sflush_r+0xda>
 80090be:	bf00      	nop
 80090c0:	20400001 	.word	0x20400001

080090c4 <_fflush_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	690b      	ldr	r3, [r1, #16]
 80090c8:	4605      	mov	r5, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	b913      	cbnz	r3, 80090d4 <_fflush_r+0x10>
 80090ce:	2500      	movs	r5, #0
 80090d0:	4628      	mov	r0, r5
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	b118      	cbz	r0, 80090de <_fflush_r+0x1a>
 80090d6:	6983      	ldr	r3, [r0, #24]
 80090d8:	b90b      	cbnz	r3, 80090de <_fflush_r+0x1a>
 80090da:	f000 f887 	bl	80091ec <__sinit>
 80090de:	4b14      	ldr	r3, [pc, #80]	; (8009130 <_fflush_r+0x6c>)
 80090e0:	429c      	cmp	r4, r3
 80090e2:	d11b      	bne.n	800911c <_fflush_r+0x58>
 80090e4:	686c      	ldr	r4, [r5, #4]
 80090e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0ef      	beq.n	80090ce <_fflush_r+0xa>
 80090ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090f0:	07d0      	lsls	r0, r2, #31
 80090f2:	d404      	bmi.n	80090fe <_fflush_r+0x3a>
 80090f4:	0599      	lsls	r1, r3, #22
 80090f6:	d402      	bmi.n	80090fe <_fflush_r+0x3a>
 80090f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090fa:	f000 f915 	bl	8009328 <__retarget_lock_acquire_recursive>
 80090fe:	4628      	mov	r0, r5
 8009100:	4621      	mov	r1, r4
 8009102:	f7ff ff59 	bl	8008fb8 <__sflush_r>
 8009106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009108:	4605      	mov	r5, r0
 800910a:	07da      	lsls	r2, r3, #31
 800910c:	d4e0      	bmi.n	80090d0 <_fflush_r+0xc>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	059b      	lsls	r3, r3, #22
 8009112:	d4dd      	bmi.n	80090d0 <_fflush_r+0xc>
 8009114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009116:	f000 f908 	bl	800932a <__retarget_lock_release_recursive>
 800911a:	e7d9      	b.n	80090d0 <_fflush_r+0xc>
 800911c:	4b05      	ldr	r3, [pc, #20]	; (8009134 <_fflush_r+0x70>)
 800911e:	429c      	cmp	r4, r3
 8009120:	d101      	bne.n	8009126 <_fflush_r+0x62>
 8009122:	68ac      	ldr	r4, [r5, #8]
 8009124:	e7df      	b.n	80090e6 <_fflush_r+0x22>
 8009126:	4b04      	ldr	r3, [pc, #16]	; (8009138 <_fflush_r+0x74>)
 8009128:	429c      	cmp	r4, r3
 800912a:	bf08      	it	eq
 800912c:	68ec      	ldreq	r4, [r5, #12]
 800912e:	e7da      	b.n	80090e6 <_fflush_r+0x22>
 8009130:	0800a834 	.word	0x0800a834
 8009134:	0800a854 	.word	0x0800a854
 8009138:	0800a814 	.word	0x0800a814

0800913c <std>:
 800913c:	2300      	movs	r3, #0
 800913e:	b510      	push	{r4, lr}
 8009140:	4604      	mov	r4, r0
 8009142:	e9c0 3300 	strd	r3, r3, [r0]
 8009146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800914a:	6083      	str	r3, [r0, #8]
 800914c:	8181      	strh	r1, [r0, #12]
 800914e:	6643      	str	r3, [r0, #100]	; 0x64
 8009150:	81c2      	strh	r2, [r0, #14]
 8009152:	6183      	str	r3, [r0, #24]
 8009154:	4619      	mov	r1, r3
 8009156:	2208      	movs	r2, #8
 8009158:	305c      	adds	r0, #92	; 0x5c
 800915a:	f7fb fe35 	bl	8004dc8 <memset>
 800915e:	4b05      	ldr	r3, [pc, #20]	; (8009174 <std+0x38>)
 8009160:	6224      	str	r4, [r4, #32]
 8009162:	6263      	str	r3, [r4, #36]	; 0x24
 8009164:	4b04      	ldr	r3, [pc, #16]	; (8009178 <std+0x3c>)
 8009166:	62a3      	str	r3, [r4, #40]	; 0x28
 8009168:	4b04      	ldr	r3, [pc, #16]	; (800917c <std+0x40>)
 800916a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800916c:	4b04      	ldr	r3, [pc, #16]	; (8009180 <std+0x44>)
 800916e:	6323      	str	r3, [r4, #48]	; 0x30
 8009170:	bd10      	pop	{r4, pc}
 8009172:	bf00      	nop
 8009174:	0800948d 	.word	0x0800948d
 8009178:	080094af 	.word	0x080094af
 800917c:	080094e7 	.word	0x080094e7
 8009180:	0800950b 	.word	0x0800950b

08009184 <_cleanup_r>:
 8009184:	4901      	ldr	r1, [pc, #4]	; (800918c <_cleanup_r+0x8>)
 8009186:	f000 b8af 	b.w	80092e8 <_fwalk_reent>
 800918a:	bf00      	nop
 800918c:	080090c5 	.word	0x080090c5

08009190 <__sfmoreglue>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	2568      	movs	r5, #104	; 0x68
 8009194:	1e4a      	subs	r2, r1, #1
 8009196:	4355      	muls	r5, r2
 8009198:	460e      	mov	r6, r1
 800919a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800919e:	f7ff fa83 	bl	80086a8 <_malloc_r>
 80091a2:	4604      	mov	r4, r0
 80091a4:	b140      	cbz	r0, 80091b8 <__sfmoreglue+0x28>
 80091a6:	2100      	movs	r1, #0
 80091a8:	e9c0 1600 	strd	r1, r6, [r0]
 80091ac:	300c      	adds	r0, #12
 80091ae:	60a0      	str	r0, [r4, #8]
 80091b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091b4:	f7fb fe08 	bl	8004dc8 <memset>
 80091b8:	4620      	mov	r0, r4
 80091ba:	bd70      	pop	{r4, r5, r6, pc}

080091bc <__sfp_lock_acquire>:
 80091bc:	4801      	ldr	r0, [pc, #4]	; (80091c4 <__sfp_lock_acquire+0x8>)
 80091be:	f000 b8b3 	b.w	8009328 <__retarget_lock_acquire_recursive>
 80091c2:	bf00      	nop
 80091c4:	20000860 	.word	0x20000860

080091c8 <__sfp_lock_release>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__sfp_lock_release+0x8>)
 80091ca:	f000 b8ae 	b.w	800932a <__retarget_lock_release_recursive>
 80091ce:	bf00      	nop
 80091d0:	20000860 	.word	0x20000860

080091d4 <__sinit_lock_acquire>:
 80091d4:	4801      	ldr	r0, [pc, #4]	; (80091dc <__sinit_lock_acquire+0x8>)
 80091d6:	f000 b8a7 	b.w	8009328 <__retarget_lock_acquire_recursive>
 80091da:	bf00      	nop
 80091dc:	2000085b 	.word	0x2000085b

080091e0 <__sinit_lock_release>:
 80091e0:	4801      	ldr	r0, [pc, #4]	; (80091e8 <__sinit_lock_release+0x8>)
 80091e2:	f000 b8a2 	b.w	800932a <__retarget_lock_release_recursive>
 80091e6:	bf00      	nop
 80091e8:	2000085b 	.word	0x2000085b

080091ec <__sinit>:
 80091ec:	b510      	push	{r4, lr}
 80091ee:	4604      	mov	r4, r0
 80091f0:	f7ff fff0 	bl	80091d4 <__sinit_lock_acquire>
 80091f4:	69a3      	ldr	r3, [r4, #24]
 80091f6:	b11b      	cbz	r3, 8009200 <__sinit+0x14>
 80091f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091fc:	f7ff bff0 	b.w	80091e0 <__sinit_lock_release>
 8009200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009204:	6523      	str	r3, [r4, #80]	; 0x50
 8009206:	4b13      	ldr	r3, [pc, #76]	; (8009254 <__sinit+0x68>)
 8009208:	4a13      	ldr	r2, [pc, #76]	; (8009258 <__sinit+0x6c>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	62a2      	str	r2, [r4, #40]	; 0x28
 800920e:	42a3      	cmp	r3, r4
 8009210:	bf08      	it	eq
 8009212:	2301      	moveq	r3, #1
 8009214:	4620      	mov	r0, r4
 8009216:	bf08      	it	eq
 8009218:	61a3      	streq	r3, [r4, #24]
 800921a:	f000 f81f 	bl	800925c <__sfp>
 800921e:	6060      	str	r0, [r4, #4]
 8009220:	4620      	mov	r0, r4
 8009222:	f000 f81b 	bl	800925c <__sfp>
 8009226:	60a0      	str	r0, [r4, #8]
 8009228:	4620      	mov	r0, r4
 800922a:	f000 f817 	bl	800925c <__sfp>
 800922e:	2200      	movs	r2, #0
 8009230:	2104      	movs	r1, #4
 8009232:	60e0      	str	r0, [r4, #12]
 8009234:	6860      	ldr	r0, [r4, #4]
 8009236:	f7ff ff81 	bl	800913c <std>
 800923a:	2201      	movs	r2, #1
 800923c:	2109      	movs	r1, #9
 800923e:	68a0      	ldr	r0, [r4, #8]
 8009240:	f7ff ff7c 	bl	800913c <std>
 8009244:	2202      	movs	r2, #2
 8009246:	2112      	movs	r1, #18
 8009248:	68e0      	ldr	r0, [r4, #12]
 800924a:	f7ff ff77 	bl	800913c <std>
 800924e:	2301      	movs	r3, #1
 8009250:	61a3      	str	r3, [r4, #24]
 8009252:	e7d1      	b.n	80091f8 <__sinit+0xc>
 8009254:	0800a3bc 	.word	0x0800a3bc
 8009258:	08009185 	.word	0x08009185

0800925c <__sfp>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	4607      	mov	r7, r0
 8009260:	f7ff ffac 	bl	80091bc <__sfp_lock_acquire>
 8009264:	4b1e      	ldr	r3, [pc, #120]	; (80092e0 <__sfp+0x84>)
 8009266:	681e      	ldr	r6, [r3, #0]
 8009268:	69b3      	ldr	r3, [r6, #24]
 800926a:	b913      	cbnz	r3, 8009272 <__sfp+0x16>
 800926c:	4630      	mov	r0, r6
 800926e:	f7ff ffbd 	bl	80091ec <__sinit>
 8009272:	3648      	adds	r6, #72	; 0x48
 8009274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009278:	3b01      	subs	r3, #1
 800927a:	d503      	bpl.n	8009284 <__sfp+0x28>
 800927c:	6833      	ldr	r3, [r6, #0]
 800927e:	b30b      	cbz	r3, 80092c4 <__sfp+0x68>
 8009280:	6836      	ldr	r6, [r6, #0]
 8009282:	e7f7      	b.n	8009274 <__sfp+0x18>
 8009284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009288:	b9d5      	cbnz	r5, 80092c0 <__sfp+0x64>
 800928a:	4b16      	ldr	r3, [pc, #88]	; (80092e4 <__sfp+0x88>)
 800928c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009290:	60e3      	str	r3, [r4, #12]
 8009292:	6665      	str	r5, [r4, #100]	; 0x64
 8009294:	f000 f847 	bl	8009326 <__retarget_lock_init_recursive>
 8009298:	f7ff ff96 	bl	80091c8 <__sfp_lock_release>
 800929c:	2208      	movs	r2, #8
 800929e:	4629      	mov	r1, r5
 80092a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092a8:	6025      	str	r5, [r4, #0]
 80092aa:	61a5      	str	r5, [r4, #24]
 80092ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092b0:	f7fb fd8a 	bl	8004dc8 <memset>
 80092b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092bc:	4620      	mov	r0, r4
 80092be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c0:	3468      	adds	r4, #104	; 0x68
 80092c2:	e7d9      	b.n	8009278 <__sfp+0x1c>
 80092c4:	2104      	movs	r1, #4
 80092c6:	4638      	mov	r0, r7
 80092c8:	f7ff ff62 	bl	8009190 <__sfmoreglue>
 80092cc:	4604      	mov	r4, r0
 80092ce:	6030      	str	r0, [r6, #0]
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1d5      	bne.n	8009280 <__sfp+0x24>
 80092d4:	f7ff ff78 	bl	80091c8 <__sfp_lock_release>
 80092d8:	230c      	movs	r3, #12
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	e7ee      	b.n	80092bc <__sfp+0x60>
 80092de:	bf00      	nop
 80092e0:	0800a3bc 	.word	0x0800a3bc
 80092e4:	ffff0001 	.word	0xffff0001

080092e8 <_fwalk_reent>:
 80092e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092ec:	4606      	mov	r6, r0
 80092ee:	4688      	mov	r8, r1
 80092f0:	2700      	movs	r7, #0
 80092f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092fa:	f1b9 0901 	subs.w	r9, r9, #1
 80092fe:	d505      	bpl.n	800930c <_fwalk_reent+0x24>
 8009300:	6824      	ldr	r4, [r4, #0]
 8009302:	2c00      	cmp	r4, #0
 8009304:	d1f7      	bne.n	80092f6 <_fwalk_reent+0xe>
 8009306:	4638      	mov	r0, r7
 8009308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800930c:	89ab      	ldrh	r3, [r5, #12]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d907      	bls.n	8009322 <_fwalk_reent+0x3a>
 8009312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009316:	3301      	adds	r3, #1
 8009318:	d003      	beq.n	8009322 <_fwalk_reent+0x3a>
 800931a:	4629      	mov	r1, r5
 800931c:	4630      	mov	r0, r6
 800931e:	47c0      	blx	r8
 8009320:	4307      	orrs	r7, r0
 8009322:	3568      	adds	r5, #104	; 0x68
 8009324:	e7e9      	b.n	80092fa <_fwalk_reent+0x12>

08009326 <__retarget_lock_init_recursive>:
 8009326:	4770      	bx	lr

08009328 <__retarget_lock_acquire_recursive>:
 8009328:	4770      	bx	lr

0800932a <__retarget_lock_release_recursive>:
 800932a:	4770      	bx	lr

0800932c <__swhatbuf_r>:
 800932c:	b570      	push	{r4, r5, r6, lr}
 800932e:	460e      	mov	r6, r1
 8009330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009334:	4614      	mov	r4, r2
 8009336:	2900      	cmp	r1, #0
 8009338:	461d      	mov	r5, r3
 800933a:	b096      	sub	sp, #88	; 0x58
 800933c:	da07      	bge.n	800934e <__swhatbuf_r+0x22>
 800933e:	2300      	movs	r3, #0
 8009340:	602b      	str	r3, [r5, #0]
 8009342:	89b3      	ldrh	r3, [r6, #12]
 8009344:	061a      	lsls	r2, r3, #24
 8009346:	d410      	bmi.n	800936a <__swhatbuf_r+0x3e>
 8009348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800934c:	e00e      	b.n	800936c <__swhatbuf_r+0x40>
 800934e:	466a      	mov	r2, sp
 8009350:	f000 f902 	bl	8009558 <_fstat_r>
 8009354:	2800      	cmp	r0, #0
 8009356:	dbf2      	blt.n	800933e <__swhatbuf_r+0x12>
 8009358:	9a01      	ldr	r2, [sp, #4]
 800935a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800935e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009362:	425a      	negs	r2, r3
 8009364:	415a      	adcs	r2, r3
 8009366:	602a      	str	r2, [r5, #0]
 8009368:	e7ee      	b.n	8009348 <__swhatbuf_r+0x1c>
 800936a:	2340      	movs	r3, #64	; 0x40
 800936c:	2000      	movs	r0, #0
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	b016      	add	sp, #88	; 0x58
 8009372:	bd70      	pop	{r4, r5, r6, pc}

08009374 <__smakebuf_r>:
 8009374:	898b      	ldrh	r3, [r1, #12]
 8009376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009378:	079d      	lsls	r5, r3, #30
 800937a:	4606      	mov	r6, r0
 800937c:	460c      	mov	r4, r1
 800937e:	d507      	bpl.n	8009390 <__smakebuf_r+0x1c>
 8009380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	6123      	str	r3, [r4, #16]
 8009388:	2301      	movs	r3, #1
 800938a:	6163      	str	r3, [r4, #20]
 800938c:	b002      	add	sp, #8
 800938e:	bd70      	pop	{r4, r5, r6, pc}
 8009390:	466a      	mov	r2, sp
 8009392:	ab01      	add	r3, sp, #4
 8009394:	f7ff ffca 	bl	800932c <__swhatbuf_r>
 8009398:	9900      	ldr	r1, [sp, #0]
 800939a:	4605      	mov	r5, r0
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff f983 	bl	80086a8 <_malloc_r>
 80093a2:	b948      	cbnz	r0, 80093b8 <__smakebuf_r+0x44>
 80093a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093a8:	059a      	lsls	r2, r3, #22
 80093aa:	d4ef      	bmi.n	800938c <__smakebuf_r+0x18>
 80093ac:	f023 0303 	bic.w	r3, r3, #3
 80093b0:	f043 0302 	orr.w	r3, r3, #2
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	e7e3      	b.n	8009380 <__smakebuf_r+0xc>
 80093b8:	4b0d      	ldr	r3, [pc, #52]	; (80093f0 <__smakebuf_r+0x7c>)
 80093ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	6020      	str	r0, [r4, #0]
 80093c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	9b00      	ldr	r3, [sp, #0]
 80093c8:	6120      	str	r0, [r4, #16]
 80093ca:	6163      	str	r3, [r4, #20]
 80093cc:	9b01      	ldr	r3, [sp, #4]
 80093ce:	b15b      	cbz	r3, 80093e8 <__smakebuf_r+0x74>
 80093d0:	4630      	mov	r0, r6
 80093d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093d6:	f000 f8d1 	bl	800957c <_isatty_r>
 80093da:	b128      	cbz	r0, 80093e8 <__smakebuf_r+0x74>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	f023 0303 	bic.w	r3, r3, #3
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	89a0      	ldrh	r0, [r4, #12]
 80093ea:	4305      	orrs	r5, r0
 80093ec:	81a5      	strh	r5, [r4, #12]
 80093ee:	e7cd      	b.n	800938c <__smakebuf_r+0x18>
 80093f0:	08009185 	.word	0x08009185

080093f4 <_malloc_usable_size_r>:
 80093f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093f8:	1f18      	subs	r0, r3, #4
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	bfbc      	itt	lt
 80093fe:	580b      	ldrlt	r3, [r1, r0]
 8009400:	18c0      	addlt	r0, r0, r3
 8009402:	4770      	bx	lr

08009404 <_raise_r>:
 8009404:	291f      	cmp	r1, #31
 8009406:	b538      	push	{r3, r4, r5, lr}
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	d904      	bls.n	8009418 <_raise_r+0x14>
 800940e:	2316      	movs	r3, #22
 8009410:	6003      	str	r3, [r0, #0]
 8009412:	f04f 30ff 	mov.w	r0, #4294967295
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800941a:	b112      	cbz	r2, 8009422 <_raise_r+0x1e>
 800941c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009420:	b94b      	cbnz	r3, 8009436 <_raise_r+0x32>
 8009422:	4620      	mov	r0, r4
 8009424:	f000 f830 	bl	8009488 <_getpid_r>
 8009428:	462a      	mov	r2, r5
 800942a:	4601      	mov	r1, r0
 800942c:	4620      	mov	r0, r4
 800942e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009432:	f000 b817 	b.w	8009464 <_kill_r>
 8009436:	2b01      	cmp	r3, #1
 8009438:	d00a      	beq.n	8009450 <_raise_r+0x4c>
 800943a:	1c59      	adds	r1, r3, #1
 800943c:	d103      	bne.n	8009446 <_raise_r+0x42>
 800943e:	2316      	movs	r3, #22
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	2001      	movs	r0, #1
 8009444:	e7e7      	b.n	8009416 <_raise_r+0x12>
 8009446:	2400      	movs	r4, #0
 8009448:	4628      	mov	r0, r5
 800944a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800944e:	4798      	blx	r3
 8009450:	2000      	movs	r0, #0
 8009452:	e7e0      	b.n	8009416 <_raise_r+0x12>

08009454 <raise>:
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <raise+0xc>)
 8009456:	4601      	mov	r1, r0
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f7ff bfd3 	b.w	8009404 <_raise_r>
 800945e:	bf00      	nop
 8009460:	20000018 	.word	0x20000018

08009464 <_kill_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	2300      	movs	r3, #0
 8009468:	4d06      	ldr	r5, [pc, #24]	; (8009484 <_kill_r+0x20>)
 800946a:	4604      	mov	r4, r0
 800946c:	4608      	mov	r0, r1
 800946e:	4611      	mov	r1, r2
 8009470:	602b      	str	r3, [r5, #0]
 8009472:	f7f8 fb44 	bl	8001afe <_kill>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	d102      	bne.n	8009480 <_kill_r+0x1c>
 800947a:	682b      	ldr	r3, [r5, #0]
 800947c:	b103      	cbz	r3, 8009480 <_kill_r+0x1c>
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	bd38      	pop	{r3, r4, r5, pc}
 8009482:	bf00      	nop
 8009484:	20000854 	.word	0x20000854

08009488 <_getpid_r>:
 8009488:	f7f8 bb32 	b.w	8001af0 <_getpid>

0800948c <__sread>:
 800948c:	b510      	push	{r4, lr}
 800948e:	460c      	mov	r4, r1
 8009490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009494:	f000 f894 	bl	80095c0 <_read_r>
 8009498:	2800      	cmp	r0, #0
 800949a:	bfab      	itete	ge
 800949c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800949e:	89a3      	ldrhlt	r3, [r4, #12]
 80094a0:	181b      	addge	r3, r3, r0
 80094a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094a6:	bfac      	ite	ge
 80094a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094aa:	81a3      	strhlt	r3, [r4, #12]
 80094ac:	bd10      	pop	{r4, pc}

080094ae <__swrite>:
 80094ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b2:	461f      	mov	r7, r3
 80094b4:	898b      	ldrh	r3, [r1, #12]
 80094b6:	4605      	mov	r5, r0
 80094b8:	05db      	lsls	r3, r3, #23
 80094ba:	460c      	mov	r4, r1
 80094bc:	4616      	mov	r6, r2
 80094be:	d505      	bpl.n	80094cc <__swrite+0x1e>
 80094c0:	2302      	movs	r3, #2
 80094c2:	2200      	movs	r2, #0
 80094c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c8:	f000 f868 	bl	800959c <_lseek_r>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	4632      	mov	r2, r6
 80094d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094d4:	81a3      	strh	r3, [r4, #12]
 80094d6:	4628      	mov	r0, r5
 80094d8:	463b      	mov	r3, r7
 80094da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094e2:	f000 b817 	b.w	8009514 <_write_r>

080094e6 <__sseek>:
 80094e6:	b510      	push	{r4, lr}
 80094e8:	460c      	mov	r4, r1
 80094ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ee:	f000 f855 	bl	800959c <_lseek_r>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	bf15      	itete	ne
 80094f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80094fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009502:	81a3      	strheq	r3, [r4, #12]
 8009504:	bf18      	it	ne
 8009506:	81a3      	strhne	r3, [r4, #12]
 8009508:	bd10      	pop	{r4, pc}

0800950a <__sclose>:
 800950a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800950e:	f000 b813 	b.w	8009538 <_close_r>
	...

08009514 <_write_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4604      	mov	r4, r0
 8009518:	4608      	mov	r0, r1
 800951a:	4611      	mov	r1, r2
 800951c:	2200      	movs	r2, #0
 800951e:	4d05      	ldr	r5, [pc, #20]	; (8009534 <_write_r+0x20>)
 8009520:	602a      	str	r2, [r5, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	f7f8 fb22 	bl	8001b6c <_write>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	d102      	bne.n	8009532 <_write_r+0x1e>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	b103      	cbz	r3, 8009532 <_write_r+0x1e>
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	20000854 	.word	0x20000854

08009538 <_close_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	2300      	movs	r3, #0
 800953c:	4d05      	ldr	r5, [pc, #20]	; (8009554 <_close_r+0x1c>)
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	f7f8 fb2e 	bl	8001ba4 <_close>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_close_r+0x1a>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_close_r+0x1a>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	20000854 	.word	0x20000854

08009558 <_fstat_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	2300      	movs	r3, #0
 800955c:	4d06      	ldr	r5, [pc, #24]	; (8009578 <_fstat_r+0x20>)
 800955e:	4604      	mov	r4, r0
 8009560:	4608      	mov	r0, r1
 8009562:	4611      	mov	r1, r2
 8009564:	602b      	str	r3, [r5, #0]
 8009566:	f7f8 fb28 	bl	8001bba <_fstat>
 800956a:	1c43      	adds	r3, r0, #1
 800956c:	d102      	bne.n	8009574 <_fstat_r+0x1c>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	b103      	cbz	r3, 8009574 <_fstat_r+0x1c>
 8009572:	6023      	str	r3, [r4, #0]
 8009574:	bd38      	pop	{r3, r4, r5, pc}
 8009576:	bf00      	nop
 8009578:	20000854 	.word	0x20000854

0800957c <_isatty_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	2300      	movs	r3, #0
 8009580:	4d05      	ldr	r5, [pc, #20]	; (8009598 <_isatty_r+0x1c>)
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	f7f8 fb26 	bl	8001bd8 <_isatty>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_isatty_r+0x1a>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_isatty_r+0x1a>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20000854 	.word	0x20000854

0800959c <_lseek_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	2200      	movs	r2, #0
 80095a6:	4d05      	ldr	r5, [pc, #20]	; (80095bc <_lseek_r+0x20>)
 80095a8:	602a      	str	r2, [r5, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	f7f8 fb1e 	bl	8001bec <_lseek>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_lseek_r+0x1e>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_lseek_r+0x1e>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	20000854 	.word	0x20000854

080095c0 <_read_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	4611      	mov	r1, r2
 80095c8:	2200      	movs	r2, #0
 80095ca:	4d05      	ldr	r5, [pc, #20]	; (80095e0 <_read_r+0x20>)
 80095cc:	602a      	str	r2, [r5, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f7f8 faaf 	bl	8001b32 <_read>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_read_r+0x1e>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_read_r+0x1e>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	20000854 	.word	0x20000854

080095e4 <_init>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	bf00      	nop
 80095e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ea:	bc08      	pop	{r3}
 80095ec:	469e      	mov	lr, r3
 80095ee:	4770      	bx	lr

080095f0 <_fini>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr
